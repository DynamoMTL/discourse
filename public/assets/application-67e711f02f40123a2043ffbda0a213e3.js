(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
 We always prefix with "js." to select exactly what we want passed
 through to the front end.
**/

var oldI18nlookup = I18n.lookup;
I18n.lookup = function(scope, options) {
  return oldI18nlookup.apply(this, ["js." + scope, options]);
};

/**
 Default format for storage units
**/
var oldI18ntoHumanSize = I18n.toHumanSize;
I18n.toHumanSize = function(number, options) {
  options = options || {};
  options.format = I18n.t("number.human.storage_units.format");
  return oldI18ntoHumanSize.apply(this, [number, options]);
};

/**
  Look up a translation for an i18n key in our dictionary.

  @method i18n
  @for Handlebars
**/
Ember.Handlebars.registerHelper('i18n', function(property, options) {
  // Resolve any properties
  var params = options.hash,
    self = this;

  _.each(params, function(value, key) {
    params[key] = Em.Handlebars.get(self, value, options);
  });

  return I18n.t(property, params);
});

/**
 Bound version of i18n helper.
 **/
Ember.Handlebars.registerBoundHelper("boundI18n", function(property, options) {
  return new Handlebars.SafeString(I18n.t(property, options.hash));
});

/**
  Set up an i18n binding that will update as a count changes, complete with pluralization.

  @method countI18n
  @for Handlebars
**/
Ember.Handlebars.registerHelper('countI18n', function(key, options) {
  var view = Discourse.View.extend({
    tagName: 'span',
    shouldRerender: Discourse.View.renderIfChanged('count', 'suffix'),

    render: function(buffer) {
      buffer.push(I18n.t(key + (this.get('suffix') || ''), { count: this.get('count') }));
    }

  });
  return Ember.Handlebars.helpers.view.call(this, view, options);
});

if (Ember.EXTEND_PROTOTYPES) {
  String.prototype.i18n = function(options) {
    return I18n.t(String(this), options);
  };
}


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/helpers/i18n_helpers.js'] = "/**\n We always prefix with \"js.\" to select exactly what we want passed\n through to the front end.\n**/\n\nvar oldI18nlookup = I18n.lookup;\nI18n.lookup = function(scope, options) {\n  return oldI18nlookup.apply(this, [\"js.\" + scope, options]);\n};\n\n/**\n Default format for storage units\n**/\nvar oldI18ntoHumanSize = I18n.toHumanSize;\nI18n.toHumanSize = function(number, options) {\n  options = options || {};\n  options.format = I18n.t(\"number.human.storage_units.format\");\n  return oldI18ntoHumanSize.apply(this, [number, options]);\n};\n\n/**\n  Look up a translation for an i18n key in our dictionary.\n\n  @method i18n\n  @for Handlebars\n**/\nEmber.Handlebars.registerHelper('i18n', function(property, options) {\n  // Resolve any properties\n  var params = options.hash,\n    self = this;\n\n  _.each(params, function(value, key) {\n    params[key] = Em.Handlebars.get(self, value, options);\n  });\n\n  return I18n.t(property, params);\n});\n\n/**\n Bound version of i18n helper.\n **/\nEmber.Handlebars.registerBoundHelper(\"boundI18n\", function(property, options) {\n  return new Handlebars.SafeString(I18n.t(property, options.hash));\n});\n\n/**\n  Set up an i18n binding that will update as a count changes, complete with pluralization.\n\n  @method countI18n\n  @for Handlebars\n**/\nEmber.Handlebars.registerHelper('countI18n', function(key, options) {\n  var view = Discourse.View.extend({\n    tagName: 'span',\n    shouldRerender: Discourse.View.renderIfChanged('count', 'suffix'),\n\n    render: function(buffer) {\n      buffer.push(I18n.t(key + (this.get('suffix') || ''), { count: this.get('count') }));\n    }\n\n  });\n  return Ember.Handlebars.helpers.view.call(this, view, options);\n});\n\nif (Ember.EXTEND_PROTOTYPES) {\n  String.prototype.i18n = function(options) {\n    return I18n.t(String(this), options);\n  };\n}\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  This mixin provides an 'ajax' method that can be used to perform ajax requests that
  respect Discourse paths and the run loop.

  @class Discourse.Ajax
  @extends Ember.Mixin
  @namespace Discourse
  @module Discourse
**/

Discourse.Ajax = Em.Mixin.create({

  /**
    Our own $.ajax method. Makes sure the .then method executes in an Ember runloop
    for performance reasons. Also automatically adjusts the URL to support installs
    in subfolders.

    @method ajax
  **/
  ajax: function() {
    var url, args;

    if (arguments.length === 1) {
      if (typeof arguments[0] === "string") {
        url = arguments[0];
        args = {};
      } else {
        args = arguments[0];
        url = args.url;
        delete args.url;
      }
    } else if (arguments.length === 2) {
      url = arguments[0];
      args = arguments[1];
    }

    if (args.success) {
      Ember.Logger.error("DEPRECATION: Discourse.ajax should use promises, received 'success' callback");
    }
    if (args.error) {
      Ember.Logger.error("DEPRECATION: Discourse.ajax should use promises, received 'error' callback");
    }

    var performAjax = function(resolve, reject) {
      var oldSuccess = args.success;
      args.success = function(xhr) {
        Ember.run(null, resolve, xhr);
        if (oldSuccess) oldSuccess(xhr);
      };

      var oldError = args.error;
      args.error = function(xhr, textStatus) {

        // note: for bad CSRF we don't loop an extra request right away.
        //  this allows us to eliminate the possibility of having a loop.
        if (xhr.status === 403 && xhr.responseText === "['BAD CSRF']") {
          Discourse.Session.current().set('csrfToken', null);
        }

        // If it's a parsererror, don't reject
        if (xhr.status === 200) return args.success(xhr);

        // Fill in some extra info
        xhr.jqTextStatus = textStatus;
        xhr.requestedUrl = url;

        Ember.run(null, reject, xhr);
        if (oldError) oldError(xhr);
      };

      // We default to JSON on GET. If we don't, sometimes if the server doesn't return the proper header
      // it will not be parsed as an object.
      if (!args.type) args.type = 'GET';
      if (!args.dataType && args.type.toUpperCase() === 'GET') args.dataType = 'json';

      if (args.type === 'GET' && args.cache !== true) {
        args.cache = false;
      }

      $.ajax(Discourse.getURL(url), args);
    };

    // For cached pages we strip out CSRF tokens, need to round trip to server prior to sending the
    //  request (bypass for GET, not needed)
    if(args.type && args.type.toUpperCase() !== 'GET' && !Discourse.Session.currentProp('csrfToken')){
      return new Ember.RSVP.Promise(function(resolve, reject){
        $.ajax(Discourse.getURL('/session/csrf'), {cache: false})
           .success(function(result){
              Discourse.Session.currentProp('csrfToken', result.csrf);
              performAjax(resolve, reject);
           });
      });
    } else {
      return new Ember.RSVP.Promise(performAjax);
    }
  }

});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/mixins/ajax.js'] = "/**\n  This mixin provides an 'ajax' method that can be used to perform ajax requests that\n  respect Discourse paths and the run loop.\n\n  @class Discourse.Ajax\n  @extends Ember.Mixin\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.Ajax = Em.Mixin.create({\n\n  /**\n    Our own $.ajax method. Makes sure the .then method executes in an Ember runloop\n    for performance reasons. Also automatically adjusts the URL to support installs\n    in subfolders.\n\n    @method ajax\n  **/\n  ajax: function() {\n    var url, args;\n\n    if (arguments.length === 1) {\n      if (typeof arguments[0] === \"string\") {\n        url = arguments[0];\n        args = {};\n      } else {\n        args = arguments[0];\n        url = args.url;\n        delete args.url;\n      }\n    } else if (arguments.length === 2) {\n      url = arguments[0];\n      args = arguments[1];\n    }\n\n    if (args.success) {\n      Ember.Logger.error(\"DEPRECATION: Discourse.ajax should use promises, received 'success' callback\");\n    }\n    if (args.error) {\n      Ember.Logger.error(\"DEPRECATION: Discourse.ajax should use promises, received 'error' callback\");\n    }\n\n    var performAjax = function(resolve, reject) {\n      var oldSuccess = args.success;\n      args.success = function(xhr) {\n        Ember.run(null, resolve, xhr);\n        if (oldSuccess) oldSuccess(xhr);\n      };\n\n      var oldError = args.error;\n      args.error = function(xhr, textStatus) {\n\n        // note: for bad CSRF we don't loop an extra request right away.\n        //  this allows us to eliminate the possibility of having a loop.\n        if (xhr.status === 403 \u0026\u0026 xhr.responseText === \"['BAD CSRF']\") {\n          Discourse.Session.current().set('csrfToken', null);\n        }\n\n        // If it's a parsererror, don't reject\n        if (xhr.status === 200) return args.success(xhr);\n\n        // Fill in some extra info\n        xhr.jqTextStatus = textStatus;\n        xhr.requestedUrl = url;\n\n        Ember.run(null, reject, xhr);\n        if (oldError) oldError(xhr);\n      };\n\n      // We default to JSON on GET. If we don't, sometimes if the server doesn't return the proper header\n      // it will not be parsed as an object.\n      if (!args.type) args.type = 'GET';\n      if (!args.dataType \u0026\u0026 args.type.toUpperCase() === 'GET') args.dataType = 'json';\n\n      if (args.type === 'GET' \u0026\u0026 args.cache !== true) {\n        args.cache = false;\n      }\n\n      $.ajax(Discourse.getURL(url), args);\n    };\n\n    // For cached pages we strip out CSRF tokens, need to round trip to server prior to sending the\n    //  request (bypass for GET, not needed)\n    if(args.type \u0026\u0026 args.type.toUpperCase() !== 'GET' \u0026\u0026 !Discourse.Session.currentProp('csrfToken')){\n      return new Ember.RSVP.Promise(function(resolve, reject){\n        $.ajax(Discourse.getURL('/session/csrf'), {cache: false})\n           .success(function(result){\n              Discourse.Session.currentProp('csrfToken', result.csrf);\n              performAjax(resolve, reject);\n           });\n      });\n    } else {\n      return new Ember.RSVP.Promise(performAjax);\n    }\n  }\n\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/*global Favcount:true*/

/**
  The main Discourse Application

  @class Discourse
  @extends Ember.Application
**/

var DiscourseResolver = require('discourse/ember/resolver').default;

window.Discourse = Ember.Application.createWithMixins(Discourse.Ajax, {
  rootElement: '#main',

  getURL: function(url) {
    // If it's a non relative URL, return it.
    if (url.indexOf('http') === 0) return url;

    var u = (Discourse.BaseUri === undefined ? "/" : Discourse.BaseUri);
    if (u[u.length-1] === '/') {
      u = u.substring(0, u.length-1);
    }
    if (url.indexOf(u) !== -1) return url;
    return u + url;
  },

  Resolver: DiscourseResolver,

  titleChanged: function() {
    var title = "";

    if (this.get('title')) {
      title += "" + (this.get('title')) + " - ";
    }
    title += Discourse.SiteSettings.title;

    // if we change this we can trigger changes on document.title
    // only set if changed.
    if($('title').text() !== title) {
      $('title').text(title);
    }

    var notifyCount = this.get('notifyCount');
    if (notifyCount > 0 && !Discourse.User.currentProp('dynamic_favicon')) {
      title = "(" + notifyCount + ") " + title;
    }

    if(title !== document.title) {
      // chrome bug workaround see: http://stackoverflow.com/questions/2952384/changing-the-window-title-when-focussing-the-window-doesnt-work-in-chrome
      window.setTimeout(function() {
        document.title = ".";
        document.title = title;
      }, 200);
    }
  }.observes('title', 'hasFocus', 'notifyCount'),

  faviconChanged: function() {
    if(Discourse.User.currentProp('dynamic_favicon')) {
      new Favcount(Discourse.SiteSettings.favicon_url).set(
        this.get('notifyCount')
      );
    }
  }.observes('notifyCount'),

  // The classes of buttons to show on a post
  postButtons: function() {
    return Discourse.SiteSettings.post_menu.split("|").map(function(i) {
      return (i.replace(/\+/, '').capitalize());
    });
  }.property(),

  notifyTitle: function(count) {
    this.set('notifyCount', count);
  },

  /**
    Log the current user out of Discourse

    @method logout
  **/
  logout: function() {
    Discourse.User.logout().then(function() {
      // Reloading will refresh unbound properties
      Discourse.KeyValueStore.abandonLocal();

      var redirect = Discourse.SiteSettings.logout_redirect;
      if(redirect.length === 0){
        window.location.pathname = Discourse.getURL('/');
      } else {
        window.location.href = redirect;
      }

    });
  },

  authenticationComplete: function(options) {
    // TODO, how to dispatch this to the controller without the container?
    var loginController = Discourse.__container__.lookup('controller:login');
    return loginController.authenticationComplete(options);
  },

  loginRequired: function() {
    return Discourse.SiteSettings.login_required && !Discourse.User.current();
  }.property().volatile(),

  redirectIfLoginRequired: function(route) {
    if(this.get('loginRequired')) { route.transitionTo('login'); }
  },

  /**
    Start up the Discourse application by running all the initializers we've defined.

    @method start
  **/
  start: function() {

    $('noscript').remove();

    // Load any ES6 initializers
    Ember.keys(requirejs._eak_seen).forEach(function(key) {
      if (/\/initializers\//.test(key)) {
        var module = require(key, null, null, true);
        if (!module) { throw new Error(key + ' must export an initializer.'); }
        Discourse.initializer(module.default);
      }
    });

  },

  requiresRefresh: function(){
    var desired = Discourse.get("desiredAssetVersion");
    return desired && Discourse.get("currentAssetVersion") !== desired;
  }.property("currentAssetVersion", "desiredAssetVersion"),

  assetVersion: function(prop, val) {
    if(val) {
      if(this.get("currentAssetVersion")){
        this.set("desiredAssetVersion", val);
      } else {
        this.set("currentAssetVersion", val);
      }
    }
    return this.get("currentAssetVersion");
  }.property(),

  globalNotice: function(){
    var notices = [];

    if(this.get("isReadOnly")){
      notices.push(I18n.t("read_only_mode.enabled"));
    }

    if(Discourse.User.currentProp('admin') && Discourse.SiteSettings.show_create_topics_notice) {
      var topic_count = 0,
          post_count = 0;
      _.each(Discourse.Site.currentProp('categories'), function(c) {
        if (!c.get('read_restricted')) {
          topic_count += c.get('topic_count');
          post_count  += c.get('post_count');
        }
      });
      if (topic_count < 5 || post_count < Discourse.SiteSettings.tl1_requires_read_posts) {
        notices.push(I18n.t("too_few_topics_notice", {posts: Discourse.SiteSettings.tl1_requires_read_posts}));
      }
    }

    if(!_.isEmpty(Discourse.SiteSettings.global_notice)){
      notices.push(Discourse.SiteSettings.global_notice);
    }

    if(notices.length > 0) {
      return new Handlebars.SafeString(_.map(notices, function(text) {
        return "<div class='row'><div class='alert alert-info'>" + text + "</div></div>";
      }).join(""));
    }
  }.property("isReadOnly")

});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse.js'] = "/*global Favcount:true*/\n\n/**\n  The main Discourse Application\n\n  @class Discourse\n  @extends Ember.Application\n**/\n\nvar DiscourseResolver = require('discourse/ember/resolver').default;\n\nwindow.Discourse = Ember.Application.createWithMixins(Discourse.Ajax, {\n  rootElement: '#main',\n\n  getURL: function(url) {\n    // If it's a non relative URL, return it.\n    if (url.indexOf('http') === 0) return url;\n\n    var u = (Discourse.BaseUri === undefined ? \"/\" : Discourse.BaseUri);\n    if (u[u.length-1] === '/') {\n      u = u.substring(0, u.length-1);\n    }\n    if (url.indexOf(u) !== -1) return url;\n    return u + url;\n  },\n\n  Resolver: DiscourseResolver,\n\n  titleChanged: function() {\n    var title = \"\";\n\n    if (this.get('title')) {\n      title += \"\" + (this.get('title')) + \" - \";\n    }\n    title += Discourse.SiteSettings.title;\n\n    // if we change this we can trigger changes on document.title\n    // only set if changed.\n    if($('title').text() !== title) {\n      $('title').text(title);\n    }\n\n    var notifyCount = this.get('notifyCount');\n    if (notifyCount \u003e 0 \u0026\u0026 !Discourse.User.currentProp('dynamic_favicon')) {\n      title = \"(\" + notifyCount + \") \" + title;\n    }\n\n    if(title !== document.title) {\n      // chrome bug workaround see: http://stackoverflow.com/questions/2952384/changing-the-window-title-when-focussing-the-window-doesnt-work-in-chrome\n      window.setTimeout(function() {\n        document.title = \".\";\n        document.title = title;\n      }, 200);\n    }\n  }.observes('title', 'hasFocus', 'notifyCount'),\n\n  faviconChanged: function() {\n    if(Discourse.User.currentProp('dynamic_favicon')) {\n      new Favcount(Discourse.SiteSettings.favicon_url).set(\n        this.get('notifyCount')\n      );\n    }\n  }.observes('notifyCount'),\n\n  // The classes of buttons to show on a post\n  postButtons: function() {\n    return Discourse.SiteSettings.post_menu.split(\"|\").map(function(i) {\n      return (i.replace(/\\+/, '').capitalize());\n    });\n  }.property(),\n\n  notifyTitle: function(count) {\n    this.set('notifyCount', count);\n  },\n\n  /**\n    Log the current user out of Discourse\n\n    @method logout\n  **/\n  logout: function() {\n    Discourse.User.logout().then(function() {\n      // Reloading will refresh unbound properties\n      Discourse.KeyValueStore.abandonLocal();\n\n      var redirect = Discourse.SiteSettings.logout_redirect;\n      if(redirect.length === 0){\n        window.location.pathname = Discourse.getURL('/');\n      } else {\n        window.location.href = redirect;\n      }\n\n    });\n  },\n\n  authenticationComplete: function(options) {\n    // TODO, how to dispatch this to the controller without the container?\n    var loginController = Discourse.__container__.lookup('controller:login');\n    return loginController.authenticationComplete(options);\n  },\n\n  loginRequired: function() {\n    return Discourse.SiteSettings.login_required \u0026\u0026 !Discourse.User.current();\n  }.property().volatile(),\n\n  redirectIfLoginRequired: function(route) {\n    if(this.get('loginRequired')) { route.transitionTo('login'); }\n  },\n\n  /**\n    Start up the Discourse application by running all the initializers we've defined.\n\n    @method start\n  **/\n  start: function() {\n\n    $('noscript').remove();\n\n    // Load any ES6 initializers\n    Ember.keys(requirejs._eak_seen).forEach(function(key) {\n      if (/\\/initializers\\//.test(key)) {\n        var module = require(key, null, null, true);\n        if (!module) { throw new Error(key + ' must export an initializer.'); }\n        Discourse.initializer(module.default);\n      }\n    });\n\n  },\n\n  requiresRefresh: function(){\n    var desired = Discourse.get(\"desiredAssetVersion\");\n    return desired \u0026\u0026 Discourse.get(\"currentAssetVersion\") !== desired;\n  }.property(\"currentAssetVersion\", \"desiredAssetVersion\"),\n\n  assetVersion: function(prop, val) {\n    if(val) {\n      if(this.get(\"currentAssetVersion\")){\n        this.set(\"desiredAssetVersion\", val);\n      } else {\n        this.set(\"currentAssetVersion\", val);\n      }\n    }\n    return this.get(\"currentAssetVersion\");\n  }.property(),\n\n  globalNotice: function(){\n    var notices = [];\n\n    if(this.get(\"isReadOnly\")){\n      notices.push(I18n.t(\"read_only_mode.enabled\"));\n    }\n\n    if(Discourse.User.currentProp('admin') \u0026\u0026 Discourse.SiteSettings.show_create_topics_notice) {\n      var topic_count = 0,\n          post_count = 0;\n      _.each(Discourse.Site.currentProp('categories'), function(c) {\n        if (!c.get('read_restricted')) {\n          topic_count += c.get('topic_count');\n          post_count  += c.get('post_count');\n        }\n      });\n      if (topic_count \u003c 5 || post_count \u003c Discourse.SiteSettings.tl1_requires_read_posts) {\n        notices.push(I18n.t(\"too_few_topics_notice\", {posts: Discourse.SiteSettings.tl1_requires_read_posts}));\n      }\n    }\n\n    if(!_.isEmpty(Discourse.SiteSettings.global_notice)){\n      notices.push(Discourse.SiteSettings.global_notice);\n    }\n\n    if(notices.length \u003e 0) {\n      return new Handlebars.SafeString(_.map(notices, function(text) {\n        return \"\u003cdiv class='row'\u003e\u003cdiv class='alert alert-info'\u003e\" + text + \"\u003c/div\u003e\u003c/div\u003e\";\n      }).join(\"\"));\n    }\n  }.property(\"isReadOnly\")\n\n});\n";
window.PagedownCustom = {
  insertButtons: [
    {
      id: 'wmd-quote-post',
      description: I18n.t("composer.quote_post_title"),
      execute: function() {
        // AWFUL but I can't figure out how to call a controller method from outside our app
        return Discourse.__container__.lookup('controller:composer').send('importQuote');
      }
    }
  ],

  customActions: {
    "doBlockquote": function(chunk, postProcessing, oldDoBlockquote) {

      // When traditional linebreaks are set, use the default Pagedown implementation
      if (Discourse.SiteSettings.traditional_markdown_linebreaks) {
        return oldDoBlockquote.call(this, chunk, postProcessing);
      }

      // Our custom blockquote for non-traditional markdown linebreaks
      var result = [];
      chunk.selection.split(/\n/).forEach(function (line) {
        var newLine = "";
        if (line.indexOf("> ") === 0) {
          newLine += line.substr(2);
        } else {
          if (/\S/.test(line)) { newLine += "> " + line; }
        }
        result.push(newLine);
      });
      chunk.selection = result.join("\n");

    }
  }
};
var hljs=new function(){function j(v){return v.replace(/&/gm,"&amp;").replace(/</gm,"&lt;").replace(/>/gm,"&gt;")}function t(v){return v.nodeName.toLowerCase()}function h(w,x){var v=w&&w.exec(x);return v&&v.index==0}function r(w){var v=(w.className+" "+(w.parentNode?w.parentNode.className:"")).split(/\s+/);v=v.map(function(x){return x.replace(/^lang(uage)?-/,"")});return v.filter(function(x){return i(x)||x=="no-highlight"})[0]}function o(x,y){var v={};for(var w in x){v[w]=x[w]}if(y){for(var w in y){v[w]=y[w]}}return v}function u(x){var v=[];(function w(y,z){for(var A=y.firstChild;A;A=A.nextSibling){if(A.nodeType==3){z+=A.nodeValue.length}else{if(t(A)=="br"){z+=1}else{if(A.nodeType==1){v.push({event:"start",offset:z,node:A});z=w(A,z);v.push({event:"stop",offset:z,node:A})}}}}return z})(x,0);return v}function q(w,y,C){var x=0;var F="";var z=[];function B(){if(!w.length||!y.length){return w.length?w:y}if(w[0].offset!=y[0].offset){return(w[0].offset<y[0].offset)?w:y}return y[0].event=="start"?w:y}function A(H){function G(I){return" "+I.nodeName+'="'+j(I.value)+'"'}F+="<"+t(H)+Array.prototype.map.call(H.attributes,G).join("")+">"}function E(G){F+="</"+t(G)+">"}function v(G){(G.event=="start"?A:E)(G.node)}while(w.length||y.length){var D=B();F+=j(C.substr(x,D[0].offset-x));x=D[0].offset;if(D==w){z.reverse().forEach(E);do{v(D.splice(0,1)[0]);D=B()}while(D==w&&D.length&&D[0].offset==x);z.reverse().forEach(A)}else{if(D[0].event=="start"){z.push(D[0].node)}else{z.pop()}v(D.splice(0,1)[0])}}return F+j(C.substr(x))}function m(y){function v(z){return(z&&z.source)||z}function w(A,z){return RegExp(v(A),"m"+(y.cI?"i":"")+(z?"g":""))}function x(D,C){if(D.compiled){return}D.compiled=true;D.k=D.k||D.bK;if(D.k){var z={};var E=function(G,F){if(y.cI){F=F.toLowerCase()}F.split(" ").forEach(function(H){var I=H.split("|");z[I[0]]=[G,I[1]?Number(I[1]):1]})};if(typeof D.k=="string"){E("keyword",D.k)}else{Object.keys(D.k).forEach(function(F){E(F,D.k[F])})}D.k=z}D.lR=w(D.l||/\b[A-Za-z0-9_]+\b/,true);if(C){if(D.bK){D.b="\\b("+D.bK.split(" ").join("|")+")\\b"}if(!D.b){D.b=/\B|\b/}D.bR=w(D.b);if(!D.e&&!D.eW){D.e=/\B|\b/}if(D.e){D.eR=w(D.e)}D.tE=v(D.e)||"";if(D.eW&&C.tE){D.tE+=(D.e?"|":"")+C.tE}}if(D.i){D.iR=w(D.i)}if(D.r===undefined){D.r=1}if(!D.c){D.c=[]}var B=[];D.c.forEach(function(F){if(F.v){F.v.forEach(function(G){B.push(o(F,G))})}else{B.push(F=="self"?D:F)}});D.c=B;D.c.forEach(function(F){x(F,D)});if(D.starts){x(D.starts,C)}var A=D.c.map(function(F){return F.bK?"\\.?("+F.b+")\\.?":F.b}).concat([D.tE,D.i]).map(v).filter(Boolean);D.t=A.length?w(A.join("|"),true):{exec:function(F){return null}};D.continuation={}}x(y)}function c(S,L,J,R){function v(U,V){for(var T=0;T<V.c.length;T++){if(h(V.c[T].bR,U)){return V.c[T]}}}function z(U,T){if(h(U.eR,T)){return U}if(U.eW){return z(U.parent,T)}}function A(T,U){return !J&&h(U.iR,T)}function E(V,T){var U=M.cI?T[0].toLowerCase():T[0];return V.k.hasOwnProperty(U)&&V.k[U]}function w(Z,X,W,V){var T=V?"":b.classPrefix,U='<span class="'+T,Y=W?"":"</span>";U+=Z+'">';return U+X+Y}function N(){if(!I.k){return j(C)}var T="";var W=0;I.lR.lastIndex=0;var U=I.lR.exec(C);while(U){T+=j(C.substr(W,U.index-W));var V=E(I,U);if(V){H+=V[1];T+=w(V[0],j(U[0]))}else{T+=j(U[0])}W=I.lR.lastIndex;U=I.lR.exec(C)}return T+j(C.substr(W))}function F(){if(I.sL&&!f[I.sL]){return j(C)}var T=I.sL?c(I.sL,C,true,I.continuation.top):e(C);if(I.r>0){H+=T.r}if(I.subLanguageMode=="continuous"){I.continuation.top=T.top}return w(T.language,T.value,false,true)}function Q(){return I.sL!==undefined?F():N()}function P(V,U){var T=V.cN?w(V.cN,"",true):"";if(V.rB){D+=T;C=""}else{if(V.eB){D+=j(U)+T;C=""}else{D+=T;C=U}}I=Object.create(V,{parent:{value:I}})}function G(T,X){C+=T;if(X===undefined){D+=Q();return 0}var V=v(X,I);if(V){D+=Q();P(V,X);return V.rB?0:X.length}var W=z(I,X);if(W){var U=I;if(!(U.rE||U.eE)){C+=X}D+=Q();do{if(I.cN){D+="</span>"}H+=I.r;I=I.parent}while(I!=W.parent);if(U.eE){D+=j(X)}C="";if(W.starts){P(W.starts,"")}return U.rE?0:X.length}if(A(X,I)){throw new Error('Illegal lexeme "'+X+'" for mode "'+(I.cN||"<unnamed>")+'"')}C+=X;return X.length||1}var M=i(S);if(!M){throw new Error('Unknown language: "'+S+'"')}m(M);var I=R||M;var D="";for(var K=I;K!=M;K=K.parent){if(K.cN){D+=w(K.cN,D,true)}}var C="";var H=0;try{var B,y,x=0;while(true){I.t.lastIndex=x;B=I.t.exec(L);if(!B){break}y=G(L.substr(x,B.index-x),B[0]);x=B.index+y}G(L.substr(x));for(var K=I;K.parent;K=K.parent){if(K.cN){D+="</span>"}}return{r:H,value:D,language:S,top:I}}catch(O){if(O.message.indexOf("Illegal")!=-1){return{r:0,value:j(L)}}else{throw O}}}function e(y,x){x=x||b.languages||Object.keys(f);var v={r:0,value:j(y)};var w=v;x.forEach(function(z){if(!i(z)){return}var A=c(z,y,false);A.language=z;if(A.r>w.r){w=A}if(A.r>v.r){w=v;v=A}});if(w.language){v.second_best=w}return v}function g(v){if(b.tabReplace){v=v.replace(/^((<[^>]+>|\t)+)/gm,function(w,z,y,x){return z.replace(/\t/g,b.tabReplace)})}if(b.useBR){v=v.replace(/\n/g,"<br>")}return v}function p(z){var y=b.useBR?z.innerHTML.replace(/\n/g,"").replace(/<br>|<br [^>]*>/g,"\n").replace(/<[^>]*>/g,""):z.textContent;var A=r(z);if(A=="no-highlight"){return}var v=A?c(A,y,true):e(y);var w=u(z);if(w.length){var x=document.createElementNS("http://www.w3.org/1999/xhtml","pre");x.innerHTML=v.value;v.value=q(w,u(x),y)}v.value=g(v.value);z.innerHTML=v.value;z.className+=" hljs "+(!A&&v.language||"");z.result={language:v.language,re:v.r};if(v.second_best){z.second_best={language:v.second_best.language,re:v.second_best.r}}}var b={classPrefix:"hljs-",tabReplace:null,useBR:false,languages:undefined};function s(v){b=o(b,v)}function l(){if(l.called){return}l.called=true;var v=document.querySelectorAll("pre code");Array.prototype.forEach.call(v,p)}function a(){addEventListener("DOMContentLoaded",l,false);addEventListener("load",l,false)}var f={};var n={};function d(v,x){var w=f[v]=x(this);if(w.aliases){w.aliases.forEach(function(y){n[y]=v})}}function k(){return Object.keys(f)}function i(v){return f[v]||f[n[v]]}this.highlight=c;this.highlightAuto=e;this.fixMarkup=g;this.highlightBlock=p;this.configure=s;this.initHighlighting=l;this.initHighlightingOnLoad=a;this.registerLanguage=d;this.listLanguages=k;this.getLanguage=i;this.inherit=o;this.IR="[a-zA-Z][a-zA-Z0-9_]*";this.UIR="[a-zA-Z_][a-zA-Z0-9_]*";this.NR="\\b\\d+(\\.\\d+)?";this.CNR="(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)";this.BNR="\\b(0b[01]+)";this.RSR="!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~";this.BE={b:"\\\\[\\s\\S]",r:0};this.ASM={cN:"string",b:"'",e:"'",i:"\\n",c:[this.BE]};this.QSM={cN:"string",b:'"',e:'"',i:"\\n",c:[this.BE]};this.PWM={b:/\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such)\b/};this.CLCM={cN:"comment",b:"//",e:"$",c:[this.PWM]};this.CBCM={cN:"comment",b:"/\\*",e:"\\*/",c:[this.PWM]};this.HCM={cN:"comment",b:"#",e:"$",c:[this.PWM]};this.NM={cN:"number",b:this.NR,r:0};this.CNM={cN:"number",b:this.CNR,r:0};this.BNM={cN:"number",b:this.BNR,r:0};this.CSSNM={cN:"number",b:this.NR+"(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",r:0};this.RM={cN:"regexp",b:/\//,e:/\/[gim]*/,i:/\n/,c:[this.BE,{b:/\[/,e:/\]/,r:0,c:[this.BE]}]};this.TM={cN:"title",b:this.IR,r:0};this.UTM={cN:"title",b:this.UIR,r:0}}();hljs.registerLanguage("bash",function(b){var a={cN:"variable",v:[{b:/\$[\w\d#@][\w\d_]*/},{b:/\$\{(.*?)\}/}]};var d={cN:"string",b:/"/,e:/"/,c:[b.BE,a,{cN:"variable",b:/\$\(/,e:/\)/,c:[b.BE]}]};var c={cN:"string",b:/'/,e:/'/};return{aliases:["sh","zsh"],l:/-?[a-z\.]+/,k:{keyword:"if then else elif fi for break continue while in do done exit return set declare case esac export exec",literal:"true false",built_in:"printf echo read cd pwd pushd popd dirs let eval unset typeset readonly getopts source shopt caller type hash bind help sudo",operator:"-ne -eq -lt -gt -f -d -e -s -l -a"},c:[{cN:"shebang",b:/^#![^\n]+sh\s*$/,r:10},{cN:"function",b:/\w[\w\d_]*\s*\(\s*\)\s*\{/,rB:true,c:[b.inherit(b.TM,{b:/\w[\w\d_]*/})],r:0},b.HCM,b.NM,d,c,a]}});hljs.registerLanguage("cs",function(b){var a="abstract as base bool break byte case catch char checked const continue decimal default delegate do double else enum event explicit extern false finally fixed float for foreach goto if implicit in int interface internal is lock long new null object operator out override params private protected public readonly ref return sbyte sealed short sizeof stackalloc static string struct switch this throw true try typeof uint ulong unchecked unsafe ushort using virtual volatile void while async await ascending descending from get group into join let orderby partial select set value var where yield";return{aliases:["csharp"],k:a,i:/::/,c:[{cN:"comment",b:"///",e:"$",rB:true,c:[{cN:"xmlDocTag",v:[{b:"///",r:0},{b:"<!--|-->"},{b:"</?",e:">"}]}]},b.CLCM,b.CBCM,{cN:"preprocessor",b:"#",e:"$",k:"if else elif endif define undef warning error line region endregion pragma checksum"},{cN:"string",b:'@"',e:'"',c:[{b:'""'}]},b.ASM,b.QSM,b.CNM,{bK:"protected public private internal",e:/[{;=]/,k:a,c:[{bK:"class namespace interface",starts:{c:[b.TM]}},{b:b.IR+"\\s*\\(",rB:true,c:[b.TM]}]}]}});hljs.registerLanguage("ruby",function(f){var j="[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?";var i="and false then defined module in return redo if BEGIN retry end for true self when next until do begin unless END rescue nil else break undef not super class case require yield alias while ensure elsif or include attr_reader attr_writer attr_accessor";var b={cN:"yardoctag",b:"@[A-Za-z]+"};var c={cN:"value",b:"#<",e:">"};var k={cN:"comment",v:[{b:"#",e:"$",c:[b]},{b:"^\\=begin",e:"^\\=end",c:[b],r:10},{b:"^__END__",e:"\\n$"}]};var d={cN:"subst",b:"#\\{",e:"}",k:i};var e={cN:"string",c:[f.BE,d],v:[{b:/'/,e:/'/},{b:/"/,e:/"/},{b:"%[qw]?\\(",e:"\\)"},{b:"%[qw]?\\[",e:"\\]"},{b:"%[qw]?{",e:"}"},{b:"%[qw]?<",e:">"},{b:"%[qw]?/",e:"/"},{b:"%[qw]?%",e:"%"},{b:"%[qw]?-",e:"-"},{b:"%[qw]?\\|",e:"\\|"},{b:/\B\?(\\\d{1,3}|\\x[A-Fa-f0-9]{1,2}|\\u[A-Fa-f0-9]{4}|\\?\S)\b/}]};var a={cN:"params",b:"\\(",e:"\\)",k:i};var h=[e,c,k,{cN:"class",bK:"class module",e:"$|;",i:/=/,c:[f.inherit(f.TM,{b:"[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?"}),{cN:"inheritance",b:"<\\s*",c:[{cN:"parent",b:"("+f.IR+"::)?"+f.IR}]},k]},{cN:"function",bK:"def",e:" |$|;",r:0,c:[f.inherit(f.TM,{b:j}),a,k]},{cN:"constant",b:"(::)?(\\b[A-Z]\\w*(::)?)+",r:0},{cN:"symbol",b:":",c:[e,{b:j}],r:0},{cN:"symbol",b:f.UIR+"(\\!|\\?)?:",r:0},{cN:"number",b:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",r:0},{cN:"variable",b:"(\\$\\W)|((\\$|\\@\\@?)(\\w+))"},{b:"("+f.RSR+")\\s*",c:[c,k,{cN:"regexp",c:[f.BE,d],i:/\n/,v:[{b:"/",e:"/[a-z]*"},{b:"%r{",e:"}[a-z]*"},{b:"%r\\(",e:"\\)[a-z]*"},{b:"%r!",e:"![a-z]*"},{b:"%r\\[",e:"\\][a-z]*"}]}],r:0}];d.c=h;a.c=h;var g=[{r:1,cN:"output",b:"^\\s*=> ",e:"$",rB:true,c:[{cN:"status",b:"^\\s*=>"},{b:" ",e:"$",c:h}]},{r:1,cN:"input",b:"^[^ ][^=>]*>+ ",e:"$",rB:true,c:[{cN:"prompt",b:"^[^ ][^=>]*>+"},{b:" ",e:"$",c:h}]}];return{aliases:["rb","gemspec","podspec","thor","irb"],k:i,c:g.concat(h)}});hljs.registerLanguage("diff",function(a){return{aliases:["patch"],c:[{cN:"chunk",r:10,v:[{b:/^\@\@ +\-\d+,\d+ +\+\d+,\d+ +\@\@$/},{b:/^\*\*\* +\d+,\d+ +\*\*\*\*$/},{b:/^\-\-\- +\d+,\d+ +\-\-\-\-$/}]},{cN:"header",v:[{b:/Index: /,e:/$/},{b:/=====/,e:/=====$/},{b:/^\-\-\-/,e:/$/},{b:/^\*{3} /,e:/$/},{b:/^\+\+\+/,e:/$/},{b:/\*{5}/,e:/\*{5}$/}]},{cN:"addition",b:"^\\+",e:"$"},{cN:"deletion",b:"^\\-",e:"$"},{cN:"change",b:"^\\!",e:"$"}]}});hljs.registerLanguage("javascript",function(a){return{aliases:["js"],k:{keyword:"in if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const class",literal:"true false null undefined NaN Infinity",built_in:"eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document"},c:[{cN:"pi",b:/^\s*('|")use strict('|")/,r:10},a.ASM,a.QSM,a.CLCM,a.CBCM,a.CNM,{b:"("+a.RSR+"|\\b(case|return|throw)\\b)\\s*",k:"return throw case",c:[a.CLCM,a.CBCM,a.RM,{b:/</,e:/>;/,r:0,sL:"xml"}],r:0},{cN:"function",bK:"function",e:/\{/,eE:true,c:[a.inherit(a.TM,{b:/[A-Za-z$_][0-9A-Za-z$_]*/}),{cN:"params",b:/\(/,e:/\)/,c:[a.CLCM,a.CBCM],i:/["'\(]/}],i:/\[|%/},{b:/\$[(.]/},{b:"\\."+a.IR,r:0}]}});hljs.registerLanguage("xml",function(a){var c="[A-Za-z0-9\\._:-]+";var d={b:/<\?(php)?(?!\w)/,e:/\?>/,sL:"php",subLanguageMode:"continuous"};var b={eW:true,i:/</,r:0,c:[d,{cN:"attribute",b:c,r:0},{b:"=",r:0,c:[{cN:"value",v:[{b:/"/,e:/"/},{b:/'/,e:/'/},{b:/[^\s\/>]+/}]}]}]};return{aliases:["html","xhtml","rss","atom","xsl","plist"],cI:true,c:[{cN:"doctype",b:"<!DOCTYPE",e:">",r:10,c:[{b:"\\[",e:"\\]"}]},{cN:"comment",b:"<!--",e:"-->",r:10},{cN:"cdata",b:"<\\!\\[CDATA\\[",e:"\\]\\]>",r:10},{cN:"tag",b:"<style(?=\\s|>|$)",e:">",k:{title:"style"},c:[b],starts:{e:"</style>",rE:true,sL:"css"}},{cN:"tag",b:"<script(?=\\s|>|$)",e:">",k:{title:"script"},c:[b],starts:{e:"<\/script>",rE:true,sL:"javascript"}},{b:"<%",e:"%>",sL:"vbscript"},d,{cN:"pi",b:/<\?\w+/,e:/\?>/,r:10},{cN:"tag",b:"</?",e:"/?>",c:[{cN:"title",b:"[^ /><]+",r:0},b]}]}});hljs.registerLanguage("markdown",function(a){return{aliases:["md","mkdown","mkd"],c:[{cN:"header",v:[{b:"^#{1,6}",e:"$"},{b:"^.+?\\n[=-]{2,}$"}]},{b:"<",e:">",sL:"xml",r:0},{cN:"bullet",b:"^([*+-]|(\\d+\\.))\\s+"},{cN:"strong",b:"[*_]{2}.+?[*_]{2}"},{cN:"emphasis",v:[{b:"\\*.+?\\*"},{b:"_.+?_",r:0}]},{cN:"blockquote",b:"^>\\s+",e:"$"},{cN:"code",v:[{b:"`.+?`"},{b:"^( {4}|\t)",e:"$",r:0}]},{cN:"horizontal_rule",b:"^[-\\*]{3,}",e:"$"},{b:"\\[.+?\\][\\(\\[].+?[\\)\\]]",rB:true,c:[{cN:"link_label",b:"\\[",e:"\\]",eB:true,rE:true,r:0},{cN:"link_url",b:"\\]\\(",e:"\\)",eB:true,eE:true},{cN:"link_reference",b:"\\]\\[",e:"\\]",eB:true,eE:true}],r:10},{b:"^\\[.+\\]:",e:"$",rB:true,c:[{cN:"link_reference",b:"\\[",e:"\\]",eB:true,eE:true},{cN:"link_url",b:"\\s",e:"$"}]}]}});hljs.registerLanguage("css",function(a){var b="[a-zA-Z-][a-zA-Z0-9_-]*";var c={cN:"function",b:b+"\\(",rB:true,eE:true,e:"\\("};return{cI:true,i:"[=/|']",c:[a.CBCM,{cN:"id",b:"\\#[A-Za-z0-9_-]+"},{cN:"class",b:"\\.[A-Za-z0-9_-]+",r:0},{cN:"attr_selector",b:"\\[",e:"\\]",i:"$"},{cN:"pseudo",b:":(:)?[a-zA-Z0-9\\_\\-\\+\\(\\)\\\"\\']+"},{cN:"at_rule",b:"@(font-face|page)",l:"[a-z-]+",k:"font-face page"},{cN:"at_rule",b:"@",e:"[{;]",c:[{cN:"keyword",b:/\S+/},{b:/\s/,eW:true,eE:true,r:0,c:[c,a.ASM,a.QSM,a.CSSNM]}]},{cN:"tag",b:b,r:0},{cN:"rules",b:"{",e:"}",i:"[^\\s]",r:0,c:[a.CBCM,{cN:"rule",b:"[^\\s]",rB:true,e:";",eW:true,c:[{cN:"attribute",b:"[A-Z\\_\\.\\-]+",e:":",eE:true,i:"[^\\s]",starts:{cN:"value",eW:true,eE:true,c:[c,a.CSSNM,a.QSM,a.ASM,a.CBCM,{cN:"hexcolor",b:"#[0-9A-Fa-f]+"},{cN:"important",b:"!important"}]}}]}]}]}});hljs.registerLanguage("http",function(a){return{i:"\\S",c:[{cN:"status",b:"^HTTP/[0-9\\.]+",e:"$",c:[{cN:"number",b:"\\b\\d{3}\\b"}]},{cN:"request",b:"^[A-Z]+ (.*?) HTTP/[0-9\\.]+$",rB:true,e:"$",c:[{cN:"string",b:" ",e:" ",eB:true,eE:true}]},{cN:"attribute",b:"^\\w",e:": ",eE:true,i:"\\n|\\s|=",starts:{cN:"string",e:"$"}},{b:"\\n\\n",starts:{sL:"",eW:true}}]}});hljs.registerLanguage("java",function(b){var a="false synchronized int abstract float private char boolean static null if const for true while long throw strictfp finally protected import native final return void enum else break transient new catch instanceof byte super volatile case assert short package default double public try this switch continue throws";return{aliases:["jsp"],k:a,i:/<\//,c:[{cN:"javadoc",b:"/\\*\\*",e:"\\*/",c:[{cN:"javadoctag",b:"(^|\\s)@[A-Za-z]+"}],r:10},b.CLCM,b.CBCM,b.ASM,b.QSM,{bK:"protected public private",e:/[{;=]/,k:a,c:[{cN:"class",bK:"class interface",eW:true,eE:true,i:/[:"\[\]]/,c:[{bK:"extends implements",r:10},b.UTM]},{b:b.UIR+"\\s*\\(",rB:true,c:[b.UTM]}]},b.CNM,{cN:"annotation",b:"@[A-Za-z]+"}]}});hljs.registerLanguage("php",function(b){var e={cN:"variable",b:"(\\$|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*"};var a={cN:"preprocessor",b:/<\?(php)?|\?>/};var c={cN:"string",c:[b.BE,a],v:[{b:'b"',e:'"'},{b:"b'",e:"'"},b.inherit(b.ASM,{i:null}),b.inherit(b.QSM,{i:null})]};var d={v:[b.BNM,b.CNM]};return{aliases:["php3","php4","php5","php6"],cI:true,k:"and include_once list abstract global private echo interface as static endswitch array null if endwhile or const for endforeach self var while isset public protected exit foreach throw elseif include __FILE__ empty require_once do xor return parent clone use __CLASS__ __LINE__ else break print eval new catch __METHOD__ case exception default die require __FUNCTION__ enddeclare final try switch continue endfor endif declare unset true false trait goto instanceof insteadof __DIR__ __NAMESPACE__ yield finally",c:[b.CLCM,b.HCM,{cN:"comment",b:"/\\*",e:"\\*/",c:[{cN:"phpdoc",b:"\\s@[A-Za-z]+"},a]},{cN:"comment",b:"__halt_compiler.+?;",eW:true,k:"__halt_compiler",l:b.UIR},{cN:"string",b:"<<<['\"]?\\w+['\"]?$",e:"^\\w+;",c:[b.BE]},a,e,{cN:"function",bK:"function",e:/[;{]/,eE:true,i:"\\$|\\[|%",c:[b.UTM,{cN:"params",b:"\\(",e:"\\)",c:["self",e,b.CBCM,c,d]}]},{cN:"class",bK:"class interface",e:"{",eE:true,i:/[:\(\$"]/,c:[{bK:"extends implements",r:10},b.UTM]},{bK:"namespace",e:";",i:/[\.']/,c:[b.UTM]},{bK:"use",e:";",c:[b.UTM]},{b:"=>"},c,d]}});hljs.registerLanguage("python",function(a){var f={cN:"prompt",b:/^(>>>|\.\.\.) /};var b={cN:"string",c:[a.BE],v:[{b:/(u|b)?r?'''/,e:/'''/,c:[f],r:10},{b:/(u|b)?r?"""/,e:/"""/,c:[f],r:10},{b:/(u|r|ur)'/,e:/'/,r:10},{b:/(u|r|ur)"/,e:/"/,r:10},{b:/(b|br)'/,e:/'/},{b:/(b|br)"/,e:/"/},a.ASM,a.QSM]};var d={cN:"number",r:0,v:[{b:a.BNR+"[lLjJ]?"},{b:"\\b(0o[0-7]+)[lLjJ]?"},{b:a.CNR+"[lLjJ]?"}]};var e={cN:"params",b:/\(/,e:/\)/,c:["self",f,d,b]};var c={e:/:/,i:/[${=;\n]/,c:[a.UTM,e]};return{aliases:["py","gyp"],k:{keyword:"and elif is global as in if from raise for except finally print import pass return exec else break not with class assert yield try while continue del or def lambda nonlocal|10 None True False",built_in:"Ellipsis NotImplemented"},i:/(<\/|->|\?)/,c:[f,d,b,a.HCM,a.inherit(c,{cN:"function",bK:"def",r:10}),a.inherit(c,{cN:"class",bK:"class"}),{cN:"decorator",b:/@/,e:/$/},{b:/\b(print|exec)\(/}]}});hljs.registerLanguage("sql",function(a){var b={cN:"comment",b:"--",e:"$"};return{cI:true,i:/[<>]/,c:[{cN:"operator",bK:"begin end start commit rollback savepoint lock alter create drop rename call delete do handler insert load replace select truncate update set show pragma grant merge describe use explain help declare prepare execute deallocate savepoint release unlock purge reset change stop analyze cache flush optimize repair kill install uninstall checksum restore check backup",e:/;/,eW:true,k:{keyword:"abs absolute acos action add adddate addtime aes_decrypt aes_encrypt after aggregate all allocate alter analyze and any are as asc ascii asin assertion at atan atan2 atn2 authorization authors avg backup before begin benchmark between bin binlog bit_and bit_count bit_length bit_or bit_xor both by cache call cascade cascaded case cast catalog ceil ceiling chain change changed char_length character_length charindex charset check checksum checksum_agg choose close coalesce coercibility collate collation collationproperty column columns columns_updated commit compress concat concat_ws concurrent connect connection connection_id consistent constraint constraints continue contributors conv convert convert_tz corresponding cos cot count count_big crc32 create cross cume_dist curdate current current_date current_time current_timestamp current_user cursor curtime data database databases datalength date_add date_format date_sub dateadd datediff datefromparts datename datepart datetime2fromparts datetimeoffsetfromparts day dayname dayofmonth dayofweek dayofyear deallocate declare decode default deferrable deferred degrees delayed delete des_decrypt des_encrypt des_key_file desc describe descriptor diagnostics difference disconnect distinct distinctrow div do domain double drop dumpfile each else elt enclosed encode encrypt end end-exec engine engines eomonth errors escape escaped event eventdata events except exception exec execute exists exp explain export_set extended external extract fast fetch field fields find_in_set first first_value floor flush for force foreign format found found_rows from from_base64 from_days from_unixtime full function get get_format get_lock getdate getutcdate global go goto grant grants greatest group group_concat grouping grouping_id gtid_subset gtid_subtract handler having help hex high_priority hosts hour ident_current ident_incr ident_seed identified identity if ifnull ignore iif ilike immediate in index indicator inet6_aton inet6_ntoa inet_aton inet_ntoa infile initially inner innodb input insert install instr intersect into is is_free_lock is_ipv4 is_ipv4_compat is_ipv4_mapped is_not is_not_null is_used_lock isdate isnull isolation join key kill language last last_day last_insert_id last_value lcase lead leading least leaves left len lenght level like limit lines ln load load_file local localtime localtimestamp locate lock log log10 log2 logfile logs low_priority lower lpad ltrim make_set makedate maketime master master_pos_wait match matched max md5 medium merge microsecond mid min minute mod mode module month monthname mutex name_const names national natural nchar next no no_write_to_binlog not now nullif nvarchar oct octet_length of old_password on only open optimize option optionally or ord order outer outfile output pad parse partial partition password patindex percent_rank percentile_cont percentile_disc period_add period_diff pi plugin position pow power pragma precision prepare preserve primary prior privileges procedure procedure_analyze processlist profile profiles public publishingservername purge quarter query quick quote quotename radians rand read references regexp relative relaylog release release_lock rename repair repeat replace replicate reset restore restrict return returns reverse revoke right rlike rollback rollup round row row_count rows rpad rtrim savepoint schema scroll sec_to_time second section select serializable server session session_user set sha sha1 sha2 share show sign sin size slave sleep smalldatetimefromparts snapshot some soname soundex sounds_like space sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result sql_variant_property sqlstate sqrt square start starting status std stddev stddev_pop stddev_samp stdev stdevp stop str str_to_date straight_join strcmp string stuff subdate substr substring subtime subtring_index sum switchoffset sysdate sysdatetime sysdatetimeoffset system_user sysutcdatetime table tables tablespace tan temporary terminated tertiary_weights then time time_format time_to_sec timediff timefromparts timestamp timestampadd timestampdiff timezone_hour timezone_minute to to_base64 to_days to_seconds todatetimeoffset trailing transaction translation trigger trigger_nestlevel triggers trim truncate try_cast try_convert try_parse ucase uncompress uncompressed_length unhex unicode uninstall union unique unix_timestamp unknown unlock update upgrade upped upper usage use user user_resources using utc_date utc_time utc_timestamp uuid uuid_short validate_password_strength value values var var_pop var_samp variables variance varp version view warnings week weekday weekofyear weight_string when whenever where with work write xml xor year yearweek zon",literal:"true false null",built_in:"array bigint binary bit blob boolean char character date dec decimal float int integer interval number numeric real serial smallint varchar varying int8 serial8 text"},c:[{cN:"string",b:"'",e:"'",c:[a.BE,{b:"''"}]},{cN:"string",b:'"',e:'"',c:[a.BE,{b:'""'}]},{cN:"string",b:"`",e:"`",c:[a.BE]},a.CNM,a.CBCM,b]},a.CBCM,b]}});hljs.registerLanguage("handlebars",function(b){var a="each in with if else unless bindattr action collection debugger log outlet template unbound view yield";return{aliases:["hbs","html.hbs","html.handlebars"],cI:true,sL:"xml",subLanguageMode:"continuous",c:[{cN:"expression",b:"{{",e:"}}",c:[{cN:"begin-block",b:"#[a-zA-Z- .]+",k:a},{cN:"string",b:'"',e:'"'},{cN:"end-block",b:"\\/[a-zA-Z- .]+",k:a},{cN:"variable",b:"[a-zA-Z-.]+",k:a}]}]}});hljs.registerLanguage("ini",function(a){return{cI:true,i:/\S/,c:[{cN:"comment",b:";",e:"$"},{cN:"title",b:"^\\[",e:"\\]"},{cN:"setting",b:"^[a-z0-9\\[\\]_-]+[ \\t]*=[ \\t]*",e:"$",c:[{cN:"value",eW:true,k:"on off true false yes no",c:[a.QSM,a.NM],r:0}]}]}});hljs.registerLanguage("perl",function(c){var d="getpwent getservent quotemeta msgrcv scalar kill dbmclose undef lc ma syswrite tr send umask sysopen shmwrite vec qx utime local oct semctl localtime readpipe do return format read sprintf dbmopen pop getpgrp not getpwnam rewinddir qqfileno qw endprotoent wait sethostent bless s|0 opendir continue each sleep endgrent shutdown dump chomp connect getsockname die socketpair close flock exists index shmgetsub for endpwent redo lstat msgctl setpgrp abs exit select print ref gethostbyaddr unshift fcntl syscall goto getnetbyaddr join gmtime symlink semget splice x|0 getpeername recv log setsockopt cos last reverse gethostbyname getgrnam study formline endhostent times chop length gethostent getnetent pack getprotoent getservbyname rand mkdir pos chmod y|0 substr endnetent printf next open msgsnd readdir use unlink getsockopt getpriority rindex wantarray hex system getservbyport endservent int chr untie rmdir prototype tell listen fork shmread ucfirst setprotoent else sysseek link getgrgid shmctl waitpid unpack getnetbyname reset chdir grep split require caller lcfirst until warn while values shift telldir getpwuid my getprotobynumber delete and sort uc defined srand accept package seekdir getprotobyname semop our rename seek if q|0 chroot sysread setpwent no crypt getc chown sqrt write setnetent setpriority foreach tie sin msgget map stat getlogin unless elsif truncate exec keys glob tied closedirioctl socket readlink eval xor readline binmode setservent eof ord bind alarm pipe atan2 getgrent exp time push setgrent gt lt or ne m|0 break given say state when";var f={cN:"subst",b:"[$@]\\{",e:"\\}",k:d};var g={b:"->{",e:"}"};var a={cN:"variable",v:[{b:/\$\d/},{b:/[\$\%\@](\^\w\b|#\w+(\:\:\w+)*|{\w+}|\w+(\:\:\w*)*)/},{b:/[\$\%\@][^\s\w{]/,r:0}]};var e={cN:"comment",b:"^(__END__|__DATA__)",e:"\\n$",r:5};var h=[c.BE,f,a];var b=[a,c.HCM,e,{cN:"comment",b:"^\\=\\w",e:"\\=cut",eW:true},g,{cN:"string",c:h,v:[{b:"q[qwxr]?\\s*\\(",e:"\\)",r:5},{b:"q[qwxr]?\\s*\\[",e:"\\]",r:5},{b:"q[qwxr]?\\s*\\{",e:"\\}",r:5},{b:"q[qwxr]?\\s*\\|",e:"\\|",r:5},{b:"q[qwxr]?\\s*\\<",e:"\\>",r:5},{b:"qw\\s+q",e:"q",r:5},{b:"'",e:"'",c:[c.BE]},{b:'"',e:'"'},{b:"`",e:"`",c:[c.BE]},{b:"{\\w+}",c:[],r:0},{b:"-?\\w+\\s*\\=\\>",c:[],r:0}]},{cN:"number",b:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",r:0},{b:"(\\/\\/|"+c.RSR+"|\\b(split|return|print|reverse|grep)\\b)\\s*",k:"split return print reverse grep",r:0,c:[c.HCM,e,{cN:"regexp",b:"(s|tr|y)/(\\\\.|[^/])*/(\\\\.|[^/])*/[a-z]*",r:10},{cN:"regexp",b:"(m|qr)?/",e:"/[a-z]*",c:[c.BE],r:0}]},{cN:"sub",bK:"sub",e:"(\\s*\\(.*?\\))?[;{]",r:5},{cN:"operator",b:"-\\w\\b",r:0}];f.c=b;g.c=b;return{aliases:["pl"],k:d,c:b}});hljs.registerLanguage("objectivec",function(a){var d={keyword:"int float while char export sizeof typedef const struct for union unsigned long volatile static bool mutable if do return goto void enum else break extern asm case short default double register explicit signed typename this switch continue wchar_t inline readonly assign readwrite self @synchronized id typeof nonatomic super unichar IBOutlet IBAction strong weak copy in out inout bycopy byref oneway __strong __weak __block __autoreleasing @private @protected @public @try @property @end @throw @catch @finally @autoreleasepool @synthesize @dynamic @selector @optional @required",literal:"false true FALSE TRUE nil YES NO NULL",built_in:"NSString NSDictionary CGRect CGPoint UIButton UILabel UITextView UIWebView MKMapView NSView NSViewController NSWindow NSWindowController NSSet NSUUID NSIndexSet UISegmentedControl NSObject UITableViewDelegate UITableViewDataSource NSThread UIActivityIndicator UITabbar UIToolBar UIBarButtonItem UIImageView NSAutoreleasePool UITableView BOOL NSInteger CGFloat NSException NSLog NSMutableString NSMutableArray NSMutableDictionary NSURL NSIndexPath CGSize UITableViewCell UIView UIViewController UINavigationBar UINavigationController UITabBarController UIPopoverController UIPopoverControllerDelegate UIImage NSNumber UISearchBar NSFetchedResultsController NSFetchedResultsChangeType UIScrollView UIScrollViewDelegate UIEdgeInsets UIColor UIFont UIApplication NSNotFound NSNotificationCenter NSNotification UILocalNotification NSBundle NSFileManager NSTimeInterval NSDate NSCalendar NSUserDefaults UIWindow NSRange NSArray NSError NSURLRequest NSURLConnection UIInterfaceOrientation MPMoviePlayerController dispatch_once_t dispatch_queue_t dispatch_sync dispatch_async dispatch_once"};var c=/[a-zA-Z@][a-zA-Z0-9_]*/;var b="@interface @class @protocol @implementation";return{aliases:["m","mm","objc","obj-c"],k:d,l:c,i:"</",c:[a.CLCM,a.CBCM,a.CNM,a.QSM,{cN:"string",v:[{b:'@"',e:'"',i:"\\n",c:[a.BE]},{b:"'",e:"[^\\\\]'",i:"[^\\\\][^']"}]},{cN:"preprocessor",b:"#",e:"$",c:[{cN:"title",v:[{b:'"',e:'"'},{b:"<",e:">"}]}]},{cN:"class",b:"("+b.split(" ").join("|")+")\\b",e:"({|$)",eE:true,k:b,l:c,c:[a.UTM]},{cN:"variable",b:"\\."+a.UIR,r:0}]}});hljs.registerLanguage("coffeescript",function(c){var b={keyword:"in if for while finally new do return else break catch instanceof throw try this switch continue typeof delete debugger super then unless until loop of by when and or is isnt not",literal:"true false null undefined yes no on off",reserved:"case default function var void with const let enum export import native __hasProp __extends __slice __bind __indexOf",built_in:"npm require console print module global window document"};var a="[A-Za-z$_][0-9A-Za-z$_]*";var f=c.inherit(c.TM,{b:a});var e={cN:"subst",b:/#\{/,e:/}/,k:b};var d=[c.BNM,c.inherit(c.CNM,{starts:{e:"(\\s*/)?",r:0}}),{cN:"string",v:[{b:/'''/,e:/'''/,c:[c.BE]},{b:/'/,e:/'/,c:[c.BE]},{b:/"""/,e:/"""/,c:[c.BE,e]},{b:/"/,e:/"/,c:[c.BE,e]}]},{cN:"regexp",v:[{b:"///",e:"///",c:[e,c.HCM]},{b:"//[gim]*",r:0},{b:"/\\S(\\\\.|[^\\n])*?/[gim]*(?=\\s|\\W|$)"}]},{cN:"property",b:"@"+a},{b:"`",e:"`",eB:true,eE:true,sL:"javascript"}];e.c=d;return{aliases:["coffee","cson","iced"],k:b,c:d.concat([{cN:"comment",b:"###",e:"###"},c.HCM,{cN:"function",b:"("+a+"\\s*=\\s*)?(\\(.*\\))?\\s*\\B[-=]>",e:"[-=]>",rB:true,c:[f,{cN:"params",b:"\\(",rB:true,c:[{b:/\(/,e:/\)/,k:b,c:["self"].concat(d)}]}]},{cN:"class",bK:"class",e:"$",i:/[:="\[\]]/,c:[{bK:"extends",eW:true,i:/[:="\[\]]/,c:[f]},f]},{cN:"attribute",b:a+":",e:":",rB:true,eE:true,r:0}])}});hljs.registerLanguage("nginx",function(c){var b={cN:"variable",v:[{b:/\$\d+/},{b:/\$\{/,e:/}/},{b:"[\\$\\@]"+c.UIR}]};var a={eW:true,l:"[a-z/_]+",k:{built_in:"on off yes no true false none blocked debug info notice warn error crit select break last permanent redirect kqueue rtsig epoll poll /dev/poll"},r:0,i:"=>",c:[c.HCM,{cN:"string",c:[c.BE,b],v:[{b:/"/,e:/"/},{b:/'/,e:/'/}]},{cN:"url",b:"([a-z]+):/",e:"\\s",eW:true,eE:true},{cN:"regexp",c:[c.BE,b],v:[{b:"\\s\\^",e:"\\s|{|;",rE:true},{b:"~\\*?\\s+",e:"\\s|{|;",rE:true},{b:"\\*(\\.[a-z\\-]+)+"},{b:"([a-z\\-]+\\.)+\\*"}]},{cN:"number",b:"\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b"},{cN:"number",b:"\\b\\d+[kKmMgGdshdwy]*\\b",r:0},b]};return{aliases:["nginxconf"],c:[c.HCM,{b:c.UIR+"\\s",e:";|{",rB:true,c:[{cN:"title",b:c.UIR,starts:a}],r:0}],i:"[^\\s\\}]"}});hljs.registerLanguage("json",function(a){var e={literal:"true false null"};var d=[a.QSM,a.CNM];var c={cN:"value",e:",",eW:true,eE:true,c:d,k:e};var b={b:"{",e:"}",c:[{cN:"attribute",b:'\\s*"',e:'"\\s*:\\s*',eB:true,eE:true,c:[a.BE],i:"\\n",starts:c}],i:"\\S"};var f={b:"\\[",e:"\\]",c:[a.inherit(c,{cN:null})],i:"\\S"};d.splice(d.length,0,b,f);return{c:d,k:e,i:"\\S"}});hljs.registerLanguage("apache",function(a){var b={cN:"number",b:"[\\$%]\\d+"};return{aliases:["apacheconf"],cI:true,c:[a.HCM,{cN:"tag",b:"</?",e:">"},{cN:"keyword",b:/\w+/,r:0,k:{common:"order deny allow setenv rewriterule rewriteengine rewritecond documentroot sethandler errordocument loadmodule options header listen serverroot servername"},starts:{e:/$/,r:0,k:{literal:"on off all"},c:[{cN:"sqbracket",b:"\\s\\[",e:"\\]$"},{cN:"cbracket",b:"[\\$%]\\{",e:"\\}",c:["self",b]},b,a.QSM]}}],i:/\S/}});hljs.registerLanguage("cpp",function(a){var b={keyword:"false int float while private char catch export virtual operator sizeof dynamic_cast|10 typedef const_cast|10 const struct for static_cast|10 union namespace unsigned long throw volatile static protected bool template mutable if public friend do return goto auto void enum else break new extern using true class asm case typeid short reinterpret_cast|10 default double register explicit signed typename try this switch continue wchar_t inline delete alignof char16_t char32_t constexpr decltype noexcept nullptr static_assert thread_local restrict _Bool complex _Complex _Imaginary",built_in:"std string cin cout cerr clog stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap array shared_ptr abort abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf"};return{aliases:["c","h","c++","h++"],k:b,i:"</",c:[a.CLCM,a.CBCM,a.QSM,{cN:"string",b:"'\\\\?.",e:"'",i:"."},{cN:"number",b:"\\b(\\d+(\\.\\d*)?|\\.\\d+)(u|U|l|L|ul|UL|f|F)"},a.CNM,{cN:"preprocessor",b:"#",e:"$",k:"if else elif endif define undef warning error line pragma",c:[{b:'include\\s*[<"]',e:'[>"]',k:"include",i:"\\n"},a.CLCM]},{cN:"stl_container",b:"\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\s*<",e:">",k:b,c:["self"]},{b:a.IR+"::"}]}});hljs.registerLanguage("makefile",function(a){var b={cN:"variable",b:/\$\(/,e:/\)/,c:[a.BE]};return{aliases:["mk","mak"],c:[a.HCM,{b:/^\w+\s*\W*=/,rB:true,r:0,starts:{cN:"constant",e:/\s*\W*=/,eE:true,starts:{e:/$/,r:0,c:[b]}}},{cN:"title",b:/^[\w]+:\s*$/},{cN:"phony",b:/^\.PHONY:/,e:/$/,k:".PHONY",l:/[\.\w]+/},{b:/^\t+/,e:/$/,c:[a.QSM,b]}]}});hljs.registerLanguage("go",function(a){var b={keyword:"break default func interface select case map struct chan else goto package switch const fallthrough if range type continue for import return var go defer",constant:"true false iota nil",typename:"bool byte complex64 complex128 float32 float64 int8 int16 int32 int64 string uint8 uint16 uint32 uint64 int uint uintptr rune",built_in:"append cap close complex copy imag len make new panic print println real recover delete"};return{aliases:["golang"],k:b,i:"</",c:[a.CLCM,a.CBCM,a.QSM,{cN:"string",b:"'",e:"[^\\\\]'"},{cN:"string",b:"`",e:"`"},{cN:"number",b:"[^a-zA-Z_0-9](\\-|\\+)?\\d+(\\.\\d+|\\/\\d+)?((d|e|f|l|s)(\\+|\\-)?\\d+)?",r:0},a.CNM]}});
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  This mixin adds support for being notified every time the browser window
  is scrolled.

  @class Scrolling
  @extends Ember.Mixin
  @namespace Discourse
  @module Discourse
**/


Discourse.Scrolling = Em.Mixin.create({

  /**
    Begin watching for scroll events. By default they will be called at max every 100ms.
    call with {debounce: N} for a diff time

    @method bindScrolling
  */
  bindScrolling: function(opts) {
    opts = opts || {debounce: 100};

    // So we can not call the scrolled event while transitioning
    var router = Discourse.__container__.lookup('router:main').router;

    var self = this,
        onScrollMethod = function() {
          if (router.activeTransition) { return; }
          return Em.run.scheduleOnce('afterRender', self, 'scrolled');
        };

    if (opts.debounce) {
      onScrollMethod = Discourse.debounce(onScrollMethod, opts.debounce);
    }

    Discourse.ScrollingDOMMethods.bindOnScroll(onScrollMethod, opts.name);
  },

  /**
    Stop watching for scroll events.

    @method unbindScrolling
  */
  unbindScrolling: function(name) {
    Discourse.ScrollingDOMMethods.unbindOnScroll(name);
  }

});


/**
  This object provides the DOM methods we need for our Mixin to bind to scrolling
  methods in the browser. By removing them from the Mixin we can test them
  easier.

  @class ScrollingDOMMethods
  @module Discourse
**/
Discourse.ScrollingDOMMethods = {

  bindOnScroll: function(onScrollMethod, name) {
    name = name || 'default';
    $(document).bind('touchmove.discourse-' + name, onScrollMethod);
    $(window).bind('scroll.discourse-' + name, onScrollMethod);
  },

  unbindOnScroll: function(name) {
    name = name || 'default';
    $(window).unbind('scroll.discourse-' + name);
    $(document).unbind('touchmove.discourse-' + name);
  }

};


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/mixins/scrolling.js'] = "/**\n  This mixin adds support for being notified every time the browser window\n  is scrolled.\n\n  @class Scrolling\n  @extends Ember.Mixin\n  @namespace Discourse\n  @module Discourse\n**/\n\n\nDiscourse.Scrolling = Em.Mixin.create({\n\n  /**\n    Begin watching for scroll events. By default they will be called at max every 100ms.\n    call with {debounce: N} for a diff time\n\n    @method bindScrolling\n  */\n  bindScrolling: function(opts) {\n    opts = opts || {debounce: 100};\n\n    // So we can not call the scrolled event while transitioning\n    var router = Discourse.__container__.lookup('router:main').router;\n\n    var self = this,\n        onScrollMethod = function() {\n          if (router.activeTransition) { return; }\n          return Em.run.scheduleOnce('afterRender', self, 'scrolled');\n        };\n\n    if (opts.debounce) {\n      onScrollMethod = Discourse.debounce(onScrollMethod, opts.debounce);\n    }\n\n    Discourse.ScrollingDOMMethods.bindOnScroll(onScrollMethod, opts.name);\n  },\n\n  /**\n    Stop watching for scroll events.\n\n    @method unbindScrolling\n  */\n  unbindScrolling: function(name) {\n    Discourse.ScrollingDOMMethods.unbindOnScroll(name);\n  }\n\n});\n\n\n/**\n  This object provides the DOM methods we need for our Mixin to bind to scrolling\n  methods in the browser. By removing them from the Mixin we can test them\n  easier.\n\n  @class ScrollingDOMMethods\n  @module Discourse\n**/\nDiscourse.ScrollingDOMMethods = {\n\n  bindOnScroll: function(onScrollMethod, name) {\n    name = name || 'default';\n    $(document).bind('touchmove.discourse-' + name, onScrollMethod);\n    $(window).bind('scroll.discourse-' + name, onScrollMethod);\n  },\n\n  unbindOnScroll: function(name) {\n    name = name || 'default';\n    $(window).unbind('scroll.discourse-' + name);\n    $(document).unbind('touchmove.discourse-' + name);\n  }\n\n};\n";
define("discourse/mixins/add-category-class", 
  ["exports"],
  function(__exports__) {
    "use strict";
    // Mix this in to a view that has a `categoryId` property to automatically
    // add it to the body as the view is entered / left / model is changed.
    // This is used for keeping the `body` style in sync for the background image.
    __exports__["default"] = {
      _observeOnce: function() { this.get('categoryId'); }.on('init'),

      _removeClasses: function() {
        $('body').removeClass(function(idx, css) {
          return (css.match(/\bcategory-\d+/g) || []).join(' ');
        });
      },

      _categoryChanged: function() {
        var categoryId = this.get('categoryId');
        this._removeClasses();

        if (categoryId) {
          $('body').addClass('category-' + categoryId);
        }
      }.observes('categoryId'),

      _leaveView: function() { this._removeClasses(); }.on('willDestroyElement')
    };
  });

Discourse.AddCategoryClass = require('discourse/mixins/add-category-class').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/mixins/add-category-class.js'] = "define(\"discourse/mixins/add-category-class\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    // Mix this in to a view that has a `categoryId` property to automatically\n    // add it to the body as the view is entered / left / model is changed.\n    // This is used for keeping the `body` style in sync for the background image.\n    __exports__[\"default\"] = {\n      _observeOnce: function() { this.get('categoryId'); }.on('init'),\n\n      _removeClasses: function() {\n        $('body').removeClass(function(idx, css) {\n          return (css.match(/\\bcategory-\\d+/g) || []).join(' ');\n        });\n      },\n\n      _categoryChanged: function() {\n        var categoryId = this.get('categoryId');\n        this._removeClasses();\n\n        if (categoryId) {\n          $('body').addClass('category-' + categoryId);\n        }\n      }.observes('categoryId'),\n\n      _leaveView: function() { this._removeClasses(); }.on('willDestroyElement')\n    };\n  });";
define("discourse/mixins/cleans-up", 
  ["exports"],
  function(__exports__) {
    "use strict";
    // Include this mixin if you want to be notified when the dom should be
    // cleaned (usually on route change.)
    __exports__["default"] = Ember.Mixin.create({
      _initializeChooser: function() {
        this.appEvents.on('dom:clean', this, "cleanUp");
      }.on('didInsertElement'),

      _clearChooser: function() {
        this.appEvents.off('dom:clean', this, "cleanUp");
      }.on('willDestroyElement')
    });
  });

Discourse.CleansUp = require('discourse/mixins/cleans-up').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/mixins/cleans-up.js'] = "define(\"discourse/mixins/cleans-up\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    // Include this mixin if you want to be notified when the dom should be\n    // cleaned (usually on route change.)\n    __exports__[\"default\"] = Ember.Mixin.create({\n      _initializeChooser: function() {\n        this.appEvents.on('dom:clean', this, \"cleanUp\");\n      }.on('didInsertElement'),\n\n      _clearChooser: function() {\n        this.appEvents.off('dom:clean', this, \"cleanUp\");\n      }.on('willDestroyElement')\n    });\n  });";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  This mixin provides a `currentUser` property that can be used to retrieve information
  about the currently logged in user. It is mostly useful to controllers so it can be
  exposted to templates.

  Outside of templates, code should probably use `Discourse.User.current()` instead of
  this property.

  @class Discourse.HasCurrentUser
  @extends Ember.Mixin
  @namespace Discourse
  @module HasCurrentUser
**/

Discourse.HasCurrentUser = Em.Mixin.create({

  /**
    Returns a reference to the currently logged in user.

    @method currentUser
    @return {Discourse.User} the currently logged in user if present.
  */
  currentUser: function() {
    return Discourse.User.current();
  }.property().volatile()

});







// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/mixins/has_current_user.js'] = "/**\n  This mixin provides a `currentUser` property that can be used to retrieve information\n  about the currently logged in user. It is mostly useful to controllers so it can be\n  exposted to templates.\n\n  Outside of templates, code should probably use `Discourse.User.current()` instead of\n  this property.\n\n  @class Discourse.HasCurrentUser\n  @extends Ember.Mixin\n  @namespace Discourse\n  @module HasCurrentUser\n**/\n\nDiscourse.HasCurrentUser = Em.Mixin.create({\n\n  /**\n    Returns a reference to the currently logged in user.\n\n    @method currentUser\n    @return {Discourse.User} the currently logged in user if present.\n  */\n  currentUser: function() {\n    return Discourse.User.current();\n  }.property().volatile()\n\n});\n\n\n\n\n\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  This mixin provides the ability to load more items for a view which is
  scrolled to the bottom.

  @class Discourse.LoadMore
  @extends Ember.Mixin
  @uses Discourse.Scrolling
  @namespace Discourse
  @module Discourse
**/

Discourse.LoadMore = Em.Mixin.create(Ember.ViewTargetActionSupport, Discourse.Scrolling, {

  scrolled: function() {
    var eyeline = this.get('eyeline');
    if (eyeline) { eyeline.update(); }
  },

  _bindEyeline: function() {
    var eyeline = new Discourse.Eyeline(this.get('eyelineSelector') + ":last");
    this.set('eyeline', eyeline);

    var self = this;
    eyeline.on('sawBottom', function() {
      self.send('loadMore');
    });
    this.bindScrolling();
  }.on('didInsertElement'),

  _removeEyeline: function() {
    this.unbindScrolling();
  }.on('willDestroyElement')

});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/mixins/load_more.js'] = "/**\n  This mixin provides the ability to load more items for a view which is\n  scrolled to the bottom.\n\n  @class Discourse.LoadMore\n  @extends Ember.Mixin\n  @uses Discourse.Scrolling\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.LoadMore = Em.Mixin.create(Ember.ViewTargetActionSupport, Discourse.Scrolling, {\n\n  scrolled: function() {\n    var eyeline = this.get('eyeline');\n    if (eyeline) { eyeline.update(); }\n  },\n\n  _bindEyeline: function() {\n    var eyeline = new Discourse.Eyeline(this.get('eyelineSelector') + \":last\");\n    this.set('eyeline', eyeline);\n\n    var self = this;\n    eyeline.on('sawBottom', function() {\n      self.send('loadMore');\n    });\n    this.bindScrolling();\n  }.on('didInsertElement'),\n\n  _removeEyeline: function() {\n    this.unbindScrolling();\n  }.on('willDestroyElement')\n\n});\n";
define("discourse/mixins/modal-functionality", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Em.Mixin.create({
      needs: ['modal'],

      flash: function(message, messageClass) {
        this.set('flashMessage', Em.Object.create({
          message: message,
          messageClass: messageClass
        }));
      }
    });
  });

Discourse.ModalFunctionality = require('discourse/mixins/modal-functionality').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/mixins/modal-functionality.js'] = "define(\"discourse/mixins/modal-functionality\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Em.Mixin.create({\n      needs: ['modal'],\n\n      flash: function(message, messageClass) {\n        this.set('flashMessage', Em.Object.create({\n          message: message,\n          messageClass: messageClass\n        }));\n      }\n    });\n  });";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  This mixin allows a route to open the composer

  @class Discourse.OpenComposer
  @extends Ember.Mixin
  @namespace Discourse
  @module Discourse
**/

Discourse.OpenComposer = Em.Mixin.create({

  openComposer: function(controller) {
    this.controllerFor('composer').open({
      categoryId: controller.get('category.id'),
      action: Discourse.Composer.CREATE_TOPIC,
      draftKey: controller.get('draft_key'),
      draftSequence: controller.get('draft_sequence')
    });
  }

});



// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/mixins/open_composer.js'] = "/**\n  This mixin allows a route to open the composer\n\n  @class Discourse.OpenComposer\n  @extends Ember.Mixin\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.OpenComposer = Em.Mixin.create({\n\n  openComposer: function(controller) {\n    this.controllerFor('composer').open({\n      categoryId: controller.get('category.id'),\n      action: Discourse.Composer.CREATE_TOPIC,\n      draftKey: controller.get('draft_key'),\n      draftSequence: controller.get('draft_sequence')\n    });\n  }\n\n});\n\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  This mixin provides `blank` and `present` to determine whether properties are
  there, accounting for more cases than just null and undefined.

  @class Discourse.Presence
  @extends Ember.Mixin
  @namespace Discourse
  @module Discourse
**/

Discourse.Presence = Em.Mixin.create({

  /**
    Returns whether a property is blank. It considers empty arrays, string, objects, undefined and null
    to be blank, otherwise true.

    @method blank
    @param {String} name the name of the property we want to check
    @return {Boolean}
  */
  blank: function(name) {
    return Ember.isEmpty(this[name] || this.get(name));
  },

  /**
    Returns whether a property is present. A present property is the opposite of a `blank` one.

    @method present
    @param {String} name the name of the property we want to check
    @return {Boolean}
  */
  present: function(name) {
    return !this.blank(name);
  }
});




// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/mixins/presence.js'] = "/**\n  This mixin provides `blank` and `present` to determine whether properties are\n  there, accounting for more cases than just null and undefined.\n\n  @class Discourse.Presence\n  @extends Ember.Mixin\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.Presence = Em.Mixin.create({\n\n  /**\n    Returns whether a property is blank. It considers empty arrays, string, objects, undefined and null\n    to be blank, otherwise true.\n\n    @method blank\n    @param {String} name the name of the property we want to check\n    @return {Boolean}\n  */\n  blank: function(name) {\n    return Ember.isEmpty(this[name] || this.get(name));\n  },\n\n  /**\n    Returns whether a property is present. A present property is the opposite of a `blank` one.\n\n    @method present\n    @param {String} name the name of the property we want to check\n    @return {Boolean}\n  */\n  present: function(name) {\n    return !this.blank(name);\n  }\n});\n\n\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

Discourse.ScrollTop = Em.Mixin.create({
  _scrollTop: function() {
    if (Discourse.URL.isJumpScheduled()) { return; }
    Em.run.schedule('afterRender', function() {
      $(document).scrollTop(0);
    });
  }.on('didInsertElement')
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/mixins/scroll_top.js'] = "Discourse.ScrollTop = Em.Mixin.create({\n  _scrollTop: function() {\n    if (Discourse.URL.isJumpScheduled()) { return; }\n    Em.run.schedule('afterRender', function() {\n      $(document).scrollTop(0);\n    });\n  }.on('didInsertElement')\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  This mixin allows a modal to list a selected posts count nicely.

  @class Discourse.SelectedPostsCount
  @extends Ember.Mixin
  @namespace Discourse
  @module Discourse
**/

Discourse.SelectedPostsCount = Em.Mixin.create({

  selectedPostsCount: function() {
    if (this.get('allPostsSelected')) return this.get('posts_count') || this.get('topic.posts_count');

    var sum = this.get('selectedPosts.length') || 0;
    if (this.get('selectedReplies')) {
      this.get('selectedReplies').forEach(function (p) {
        sum += p.get('reply_count') || 0;
      });
    }

    return sum;
  }.property('selectedPosts.length', 'allPostsSelected', 'selectedReplies.length'),

  /**
    The username that owns every selected post, or undefined if no selection or if
    ownership is mixed.

    @returns {String|undefined} username that owns all selected posts
  **/
  selectedPostsUsername: function() {
    // Don't proceed if replies are selected or usernames are mixed
    // Changing ownership in those cases normally doesn't make sense
    if (this.get('selectedReplies') && this.get('selectedReplies').length > 0) return;
    if (this.get('selectedPosts').length <= 0) return;

    var selectedPosts = this.get('selectedPosts'),
        username = selectedPosts[0].username;

    if (selectedPosts.every(function(post) { return post.username === username; })) {
      return username;
    }
  }.property('selectedPosts.length', 'selectedReplies.length')
});




// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/mixins/selected_posts_count.js'] = "/**\n  This mixin allows a modal to list a selected posts count nicely.\n\n  @class Discourse.SelectedPostsCount\n  @extends Ember.Mixin\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.SelectedPostsCount = Em.Mixin.create({\n\n  selectedPostsCount: function() {\n    if (this.get('allPostsSelected')) return this.get('posts_count') || this.get('topic.posts_count');\n\n    var sum = this.get('selectedPosts.length') || 0;\n    if (this.get('selectedReplies')) {\n      this.get('selectedReplies').forEach(function (p) {\n        sum += p.get('reply_count') || 0;\n      });\n    }\n\n    return sum;\n  }.property('selectedPosts.length', 'allPostsSelected', 'selectedReplies.length'),\n\n  /**\n    The username that owns every selected post, or undefined if no selection or if\n    ownership is mixed.\n\n    @returns {String|undefined} username that owns all selected posts\n  **/\n  selectedPostsUsername: function() {\n    // Don't proceed if replies are selected or usernames are mixed\n    // Changing ownership in those cases normally doesn't make sense\n    if (this.get('selectedReplies') \u0026\u0026 this.get('selectedReplies').length \u003e 0) return;\n    if (this.get('selectedPosts').length \u003c= 0) return;\n\n    var selectedPosts = this.get('selectedPosts'),\n        username = selectedPosts[0].username;\n\n    if (selectedPosts.every(function(post) { return post.username === username; })) {\n      return username;\n    }\n  }.property('selectedPosts.length', 'selectedReplies.length')\n});\n\n\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  This mixin allows a class to return a singleton, as well as a method to quickly
  read/write attributes on the singleton.


  Example usage:

  ```javascript

    // Define your class and apply the Mixin
    User = Ember.Object.extend({});
    User.reopenClass(Discourse.Singleton);

    // Retrieve the current instance:
    var instance = User.current();

  ```

  Commonly you want to read or write a property on the singleton. There's a
  helper method which is a little nicer than `.current().get()`:

  ```javascript

    // Sets the age to 34
    User.currentProp('age', 34);

    console.log(User.currentProp('age')); // 34

  ```

  If you want to customize how the singleton is created, redefine the `createCurrent`
  method:

  ```javascript

    // Define your class and apply the Mixin
    Foot = Ember.Object.extend({});
    Foot.reopenClass(Discourse.Singleton, {
      createCurrent: function() {
        return Foot.create({toes: 5});
      }
    });

    console.log(Foot.currentProp('toes')); // 5

  ```

  @class Discourse.Singleton
  @extends Ember.Mixin
  @namespace Discourse
  @module Discourse
**/

Discourse.Singleton = Em.Mixin.create({

  /**
    Returns the current singleton instance of the class.

    @method current
    @returns {Ember.Object} the instance of the singleton
  **/
  current: function() {
    if (!this._current) {
      this._current = this.createCurrent();
    }

    return this._current;
  },


  /**
    How the singleton instance is created. This can be overridden
    with logic for creating (or even returning null) your instance.

    By default it just calls `create` with an empty object.

    @method createCurrent
    @returns {Ember.Object} the instance that will be your singleton
  **/
  createCurrent: function() {
    return this.create({});
  },

  /**
    Returns or sets a property on the singleton instance.

    @method currentProp
    @param {String} property the property we want to get or set
    @param {String} value the optional value to set the property to
    @returns the value of the property
  **/
  currentProp: function(property, value) {
    var instance = this.current();
    if (!instance) { return; }

    if (typeof(value) !== "undefined") {
      instance.set(property, value);
      return value;
    } else {
      return instance.get(property);
    }
  },

  /**
    Resets the current singleton. Useful in testing.

    @method resetCurrent
  **/
  resetCurrent: function(val) {
    this._current = val;
  }
});




// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/mixins/singleton.js'] = "/**\n  This mixin allows a class to return a singleton, as well as a method to quickly\n  read/write attributes on the singleton.\n\n\n  Example usage:\n\n  ```javascript\n\n    // Define your class and apply the Mixin\n    User = Ember.Object.extend({});\n    User.reopenClass(Discourse.Singleton);\n\n    // Retrieve the current instance:\n    var instance = User.current();\n\n  ```\n\n  Commonly you want to read or write a property on the singleton. There's a\n  helper method which is a little nicer than `.current().get()`:\n\n  ```javascript\n\n    // Sets the age to 34\n    User.currentProp('age', 34);\n\n    console.log(User.currentProp('age')); // 34\n\n  ```\n\n  If you want to customize how the singleton is created, redefine the `createCurrent`\n  method:\n\n  ```javascript\n\n    // Define your class and apply the Mixin\n    Foot = Ember.Object.extend({});\n    Foot.reopenClass(Discourse.Singleton, {\n      createCurrent: function() {\n        return Foot.create({toes: 5});\n      }\n    });\n\n    console.log(Foot.currentProp('toes')); // 5\n\n  ```\n\n  @class Discourse.Singleton\n  @extends Ember.Mixin\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.Singleton = Em.Mixin.create({\n\n  /**\n    Returns the current singleton instance of the class.\n\n    @method current\n    @returns {Ember.Object} the instance of the singleton\n  **/\n  current: function() {\n    if (!this._current) {\n      this._current = this.createCurrent();\n    }\n\n    return this._current;\n  },\n\n\n  /**\n    How the singleton instance is created. This can be overridden\n    with logic for creating (or even returning null) your instance.\n\n    By default it just calls `create` with an empty object.\n\n    @method createCurrent\n    @returns {Ember.Object} the instance that will be your singleton\n  **/\n  createCurrent: function() {\n    return this.create({});\n  },\n\n  /**\n    Returns or sets a property on the singleton instance.\n\n    @method currentProp\n    @param {String} property the property we want to get or set\n    @param {String} value the optional value to set the property to\n    @returns the value of the property\n  **/\n  currentProp: function(property, value) {\n    var instance = this.current();\n    if (!instance) { return; }\n\n    if (typeof(value) !== \"undefined\") {\n      instance.set(property, value);\n      return value;\n    } else {\n      return instance.get(property);\n    }\n  },\n\n  /**\n    Resets the current singleton. Useful in testing.\n\n    @method resetCurrent\n  **/\n  resetCurrent: function(val) {\n    this._current = val;\n  }\n});\n\n\n";
define("discourse/mixins/upload", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Em.Mixin.create({
      uploading: false,
      uploadProgress: 0,

      uploadDone: function() {
        Em.warn("You should implement `uploadDone`");
      },

      deleteDone: function() {
        Em.warn("You should implement `deleteDone`");
      },

      _initializeUploader: function() {
        // NOTE: we can't cache this as fileupload replaces the input after upload
        // cf. https://github.com/blueimp/jQuery-File-Upload/wiki/Frequently-Asked-Questions#why-is-the-file-input-field-cloned-and-replaced-after-each-selection
        var $upload = this.$('input[type=file]'),
           self = this;

        $upload.fileupload({
          url: this.get('uploadUrl'),
          dataType: "json",
          fileInput: $upload,
          formData: { image_type: this.get('type') },
          pasteZone: this.$()
        });

        $upload.on('fileuploadsubmit', function (e, data) {
          var result = Discourse.Utilities.validateUploadedFiles(data.files, true);
          self.setProperties({ uploadProgress: 0, uploading: result });
          return result;
        });

        $upload.on("fileuploadprogressall", function(e, data) {
          var progress = parseInt(data.loaded / data.total * 100, 10);
          self.set("uploadProgress", progress);
        });

        $upload.on("fileuploaddone", function(e, data) {
          if(data.result.url) {
            self.uploadDone(data);
          } else {
            bootbox.alert(I18n.t('post.errors.upload'));
          }
        });

        $upload.on("fileuploadfail", function(e, data) {
          Discourse.Utilities.displayErrorForUpload(data);
        });

        $upload.on("fileuploadalways", function() {
          self.setProperties({ uploading: false, uploadProgress: 0});
        });
      }.on('didInsertElement'),

      _destroyUploader: function() {
        this.$('input[type=file]').fileupload('destroy');
      }.on('willDestroyElement'),

      actions: {
        selectFile: function() {
          this.$('input[type=file]').click();
        }
      }
    });
  });

Discourse.Upload = require('discourse/mixins/upload').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/mixins/upload.js'] = "define(\"discourse/mixins/upload\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Em.Mixin.create({\n      uploading: false,\n      uploadProgress: 0,\n\n      uploadDone: function() {\n        Em.warn(\"You should implement `uploadDone`\");\n      },\n\n      deleteDone: function() {\n        Em.warn(\"You should implement `deleteDone`\");\n      },\n\n      _initializeUploader: function() {\n        // NOTE: we can't cache this as fileupload replaces the input after upload\n        // cf. https://github.com/blueimp/jQuery-File-Upload/wiki/Frequently-Asked-Questions#why-is-the-file-input-field-cloned-and-replaced-after-each-selection\n        var $upload = this.$('input[type=file]'),\n           self = this;\n\n        $upload.fileupload({\n          url: this.get('uploadUrl'),\n          dataType: \"json\",\n          fileInput: $upload,\n          formData: { image_type: this.get('type') },\n          pasteZone: this.$()\n        });\n\n        $upload.on('fileuploadsubmit', function (e, data) {\n          var result = Discourse.Utilities.validateUploadedFiles(data.files, true);\n          self.setProperties({ uploadProgress: 0, uploading: result });\n          return result;\n        });\n\n        $upload.on(\"fileuploadprogressall\", function(e, data) {\n          var progress = parseInt(data.loaded / data.total * 100, 10);\n          self.set(\"uploadProgress\", progress);\n        });\n\n        $upload.on(\"fileuploaddone\", function(e, data) {\n          if(data.result.url) {\n            self.uploadDone(data);\n          } else {\n            bootbox.alert(I18n.t('post.errors.upload'));\n          }\n        });\n\n        $upload.on(\"fileuploadfail\", function(e, data) {\n          Discourse.Utilities.displayErrorForUpload(data);\n        });\n\n        $upload.on(\"fileuploadalways\", function() {\n          self.setProperties({ uploading: false, uploadProgress: 0});\n        });\n      }.on('didInsertElement'),\n\n      _destroyUploader: function() {\n        this.$('input[type=file]').fileupload('destroy');\n      }.on('willDestroyElement'),\n\n      actions: {\n        selectFile: function() {\n          this.$('input[type=file]').click();\n        }\n      }\n    });\n  });";
define("discourse/mixins/url-refresh", 
  ["exports"],
  function(__exports__) {
    "use strict";
    // A Mixin that a view can use to listen for 'url:refresh' when
    // it is on screen, and will send an action to the controller to
    // refresh its data.
    //
    // This is useful if you want to get around Ember's default
    // behavior of not refreshing when navigating to the same place.
    __exports__["default"] = Em.Mixin.create({
      _initURLRefresh: function() {
        this.appEvents.on('url:refresh', this, '_urlRefresh');
      }.on('didInsertElement'),

      _tearDownURLRefresh: function() {
        this.appEvents.off('url:refresh', this, '_urlRefresh');
      }.on('willDestroyElement'),

      _urlRefresh: function() {
        this.get('controller').send('refresh');
      }
    });
  });

Discourse.UrlRefresh = require('discourse/mixins/url-refresh').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/mixins/url-refresh.js'] = "define(\"discourse/mixins/url-refresh\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    // A Mixin that a view can use to listen for 'url:refresh' when\n    // it is on screen, and will send an action to the controller to\n    // refresh its data.\n    //\n    // This is useful if you want to get around Ember's default\n    // behavior of not refreshing when navigating to the same place.\n    __exports__[\"default\"] = Em.Mixin.create({\n      _initURLRefresh: function() {\n        this.appEvents.on('url:refresh', this, '_urlRefresh');\n      }.on('didInsertElement'),\n\n      _tearDownURLRefresh: function() {\n        this.appEvents.off('url:refresh', this, '_urlRefresh');\n      }.on('willDestroyElement'),\n\n      _urlRefresh: function() {\n        this.get('controller').send('refresh');\n      }\n    });\n  });";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/*global Markdown:true, hljs:true */

/**
  Contains methods to help us with markdown formatting.

  @class Markdown
  @namespace Discourse
  @module Discourse
**/

var _validClasses = {},
    _validIframes = [],
    _validTags = {},
    _decoratedCaja = false;

function validateAttribute(tagName, attribName, value) {
  var tag = _validTags[tagName];

  // Handle classes
  if (attribName === "class") {
    if (_validClasses[value]) { return value; }

    if (tag) {
      var classes = tag['class'];
      if (classes && (classes.indexOf(value) !== -1 || classes.indexOf('*') !== -1)) {
        return value;
      }
    }
  } else if (attribName.indexOf('data-') === 0) {
    // data-* attributes
    if (tag) {
      var allowed = tag[attribName] || tag['data-*'];
      if (allowed && (allowed === value || allowed.indexOf('*') !== -1)) { return value; }
    }
  }

  if (tag) {
    var attrs = tag[attribName];
    if (attrs && (attrs.indexOf(value) !== -1 ||
                  attrs.indexOf('*') !== -1) ||
                  _.any(attrs,function(r){return (r instanceof RegExp) && value.search(r) >= 0;})
        ) { return value; }
  }
}

Discourse.Markdown = {

  /**
    Whitelist class for only a certain tag

    @param {String} tagName to whitelist
    @param {String} attribName to whitelist
    @param {String} value to whitelist
  **/
  whiteListTag: function(tagName, attribName, value) {
    _validTags[tagName] = _validTags[tagName] || {};
    _validTags[tagName][attribName] = _validTags[tagName][attribName] || [];
    _validTags[tagName][attribName].push(value || '*');
  },

  /**
    Whitelists more classes for sanitization.

    @param {...String} var_args Classes to whitelist
    @method whiteListClass
  **/
  whiteListClass: function() {
    var args = Array.prototype.slice.call(arguments);
    args.forEach(function (a) { _validClasses[a] = true; });
  },

  /**
    Whitelists iframes for sanitization

    @method whiteListIframe
    @param {Regexp} regexp The regexp to whitelist.
  **/
  whiteListIframe: function(regexp) {
    _validIframes.push(regexp);
  },

  /**
    Convert a raw string to a cooked markdown string.

    @method cook
    @param {String} raw the raw string we want to apply markdown to
    @param {Object} opts the options for the rendering
    @return {String} the cooked markdown string
  **/
  cook: function(raw, opts) {
    if (!opts) opts = {};

    // Make sure we've got a string
    if (!raw || raw.length === 0) return "";

    return this.markdownConverter(opts).makeHtml(raw);
  },

  /**
    Creates a new pagedown markdown editor, supplying i18n translations.

    @method createEditor
    @param {Object} converterOptions custom options for our markdown converter
    @return {Markdown.Editor} the editor instance
  **/
  createEditor: function(converterOptions) {
    if (!converterOptions) converterOptions = {};

    // By default we always sanitize content in the editor
    converterOptions.sanitize = true;

    var markdownConverter = Discourse.Markdown.markdownConverter(converterOptions);

    var editorOptions = {
      strings: {
        bold: I18n.t("composer.bold_title") + " <strong> Ctrl+B",
        boldexample: I18n.t("composer.bold_text"),

        italic: I18n.t("composer.italic_title") + " <em> Ctrl+I",
        italicexample: I18n.t("composer.italic_text"),

        link: I18n.t("composer.link_title") + " <a> Ctrl+L",
        linkdescription: I18n.t("composer.link_description"),
        linkdialog: "<p><b>" + I18n.t("composer.link_dialog_title") + "</b></p><p>http://example.com/ \"" +
            I18n.t("composer.link_optional_text") + "\"</p>",

        quote: I18n.t("composer.quote_title") + " <blockquote> Ctrl+Q",
        quoteexample: I18n.t("composer.quote_text"),

        code: I18n.t("composer.code_title") + " <pre><code> Ctrl+K",
        codeexample: I18n.t("composer.code_text"),

        image: I18n.t("composer.upload_title") + " - Ctrl+G",
        imagedescription: I18n.t("composer.upload_description"),

        olist: I18n.t("composer.olist_title") + " <ol> Ctrl+O",
        ulist: I18n.t("composer.ulist_title") + " <ul> Ctrl+U",
        litem: I18n.t("composer.list_item"),

        heading: I18n.t("composer.heading_title") + " <h1>/<h2> Ctrl+H",
        headingexample: I18n.t("composer.heading_text"),

        hr: I18n.t("composer.hr_title") + " <hr> Ctrl+R",

        undo: I18n.t("composer.undo_title") + " - Ctrl+Z",
        redo: I18n.t("composer.redo_title") + " - Ctrl+Y",
        redomac: I18n.t("composer.redo_title") + " - Ctrl+Shift+Z",

        help: I18n.t("composer.help")
      }
    };

    return new Markdown.Editor(markdownConverter, undefined, editorOptions);
  },

  /**
    Checks to see if a URL is allowed in the cooked content

    @method urlAllowed
    @param {String} uri Url to check
    @param {Number} effect ignored
    @param {Number} ltype ignored
    @param {Object} hints an object with hints, used to check if this url is from an iframe
    @return {String} url to insert in the cooked content
  **/
  urlAllowed: function (uri, effect, ltype, hints) {
    var url = typeof(uri) === "string" ? uri : uri.toString();

    // escape single quotes
    url = url.replace(/'/g, "&#39;");

    // whitelist some iframe only
    if (hints && hints.XML_TAG === "iframe" && hints.XML_ATTR === "src") {
      for (var i = 0, length = _validIframes.length; i < length; i++) {
        if(_validIframes[i].test(url)) { return url; }
      }
      return;
    }

    // absolute urls
    if(/^(https?:)?\/\/[\w\.\-]+/i.test(url)) { return url; }
    // relative urls
    if(/^\/[\w\.\-]+/i.test(url)) { return url; }
    // anchors
    if(/^#[\w\.\-]+/i.test(url)) { return url; }
    // mailtos
    if(/^mailto:[\w\.\-@]+/i.test(url)) { return url; }
  },

  /**
    Sanitize text using the sanitizer

    @method sanitize
    @param {String} text The text to sanitize
    @return {String} text The sanitized text
  **/
  sanitize: function(text) {
    if (!window.html_sanitize || !text) return "";

    // Allow things like <3 and <_<
    text = text.replace(/<([^A-Za-z\/\!]|$)/g, "&lt;$1");

    // The first time, let's add some more whitelisted tags
    if (!_decoratedCaja) {

      // Add anything whitelisted to the list of elements if it's not in there
      // already.
      var elements = window.html4.ELEMENTS;
      Object.keys(_validTags).forEach(function(t) {
        if (!elements[t]) {
          elements[t] = 0;
        }
      });
      _decoratedCaja = true;
    }

    return window.html_sanitize(text, Discourse.Markdown.urlAllowed, validateAttribute);
  },

  /**
    Creates a Markdown.Converter that we we can use for formatting

    @method markdownConverter
    @param {Object} opts the converting options
  **/
  markdownConverter: function(opts) {
    if (!opts) opts = {};

    return {
      makeHtml: function(text) {
        text = Discourse.Dialect.cook(text, opts);
        return !text ? "" : text;
      }
    };
  }

};

RSVP.EventTarget.mixin(Discourse.Markdown);

Discourse.Markdown.whiteListTag('a', 'class', 'attachment');
Discourse.Markdown.whiteListTag('a', 'target', '_blank');
Discourse.Markdown.whiteListTag('a', 'class', 'onebox');
Discourse.Markdown.whiteListTag('a', 'class', 'mention');

Discourse.Markdown.whiteListTag('a', 'data-bbcode');
Discourse.Markdown.whiteListTag('a', 'name');

Discourse.Markdown.whiteListTag('img', 'src', /^data:image.*/i);

Discourse.Markdown.whiteListTag('div', 'class', 'title');
Discourse.Markdown.whiteListTag('div', 'class', 'quote-controls');

// explicitly whitelist classes we need allowed through for
// syntax highlighting, grabbed from highlight.js
hljs.listLanguages().forEach(function (language) {
  Discourse.Markdown.whiteListTag('code', 'class', language);
});
Discourse.Markdown.whiteListTag('code', 'class', 'text');
Discourse.Markdown.whiteListTag('code', 'class', 'lang-auto');

Discourse.Markdown.whiteListTag('span', 'class', 'mention');
Discourse.Markdown.whiteListTag('span', 'class', 'spoiler');
Discourse.Markdown.whiteListTag('div', 'class', 'spoiler');
Discourse.Markdown.whiteListTag('aside', 'class', 'quote');
Discourse.Markdown.whiteListTag('aside', 'data-*');

Discourse.Markdown.whiteListTag('span', 'bbcode-b');
Discourse.Markdown.whiteListTag('span', 'bbcode-i');
Discourse.Markdown.whiteListTag('span', 'bbcode-u');
Discourse.Markdown.whiteListTag('span', 'bbcode-s');

// used for pinned topics
Discourse.Markdown.whiteListTag('span', 'class', 'excerpt');

Discourse.Markdown.whiteListIframe(/^(https?:)?\/\/www\.google\.com\/maps\/embed\?.+/i);


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/markdown.js'] = "/*global Markdown:true, hljs:true */\n\n/**\n  Contains methods to help us with markdown formatting.\n\n  @class Markdown\n  @namespace Discourse\n  @module Discourse\n**/\n\nvar _validClasses = {},\n    _validIframes = [],\n    _validTags = {},\n    _decoratedCaja = false;\n\nfunction validateAttribute(tagName, attribName, value) {\n  var tag = _validTags[tagName];\n\n  // Handle classes\n  if (attribName === \"class\") {\n    if (_validClasses[value]) { return value; }\n\n    if (tag) {\n      var classes = tag['class'];\n      if (classes \u0026\u0026 (classes.indexOf(value) !== -1 || classes.indexOf('*') !== -1)) {\n        return value;\n      }\n    }\n  } else if (attribName.indexOf('data-') === 0) {\n    // data-* attributes\n    if (tag) {\n      var allowed = tag[attribName] || tag['data-*'];\n      if (allowed \u0026\u0026 (allowed === value || allowed.indexOf('*') !== -1)) { return value; }\n    }\n  }\n\n  if (tag) {\n    var attrs = tag[attribName];\n    if (attrs \u0026\u0026 (attrs.indexOf(value) !== -1 ||\n                  attrs.indexOf('*') !== -1) ||\n                  _.any(attrs,function(r){return (r instanceof RegExp) \u0026\u0026 value.search(r) \u003e= 0;})\n        ) { return value; }\n  }\n}\n\nDiscourse.Markdown = {\n\n  /**\n    Whitelist class for only a certain tag\n\n    @param {String} tagName to whitelist\n    @param {String} attribName to whitelist\n    @param {String} value to whitelist\n  **/\n  whiteListTag: function(tagName, attribName, value) {\n    _validTags[tagName] = _validTags[tagName] || {};\n    _validTags[tagName][attribName] = _validTags[tagName][attribName] || [];\n    _validTags[tagName][attribName].push(value || '*');\n  },\n\n  /**\n    Whitelists more classes for sanitization.\n\n    @param {...String} var_args Classes to whitelist\n    @method whiteListClass\n  **/\n  whiteListClass: function() {\n    var args = Array.prototype.slice.call(arguments);\n    args.forEach(function (a) { _validClasses[a] = true; });\n  },\n\n  /**\n    Whitelists iframes for sanitization\n\n    @method whiteListIframe\n    @param {Regexp} regexp The regexp to whitelist.\n  **/\n  whiteListIframe: function(regexp) {\n    _validIframes.push(regexp);\n  },\n\n  /**\n    Convert a raw string to a cooked markdown string.\n\n    @method cook\n    @param {String} raw the raw string we want to apply markdown to\n    @param {Object} opts the options for the rendering\n    @return {String} the cooked markdown string\n  **/\n  cook: function(raw, opts) {\n    if (!opts) opts = {};\n\n    // Make sure we've got a string\n    if (!raw || raw.length === 0) return \"\";\n\n    return this.markdownConverter(opts).makeHtml(raw);\n  },\n\n  /**\n    Creates a new pagedown markdown editor, supplying i18n translations.\n\n    @method createEditor\n    @param {Object} converterOptions custom options for our markdown converter\n    @return {Markdown.Editor} the editor instance\n  **/\n  createEditor: function(converterOptions) {\n    if (!converterOptions) converterOptions = {};\n\n    // By default we always sanitize content in the editor\n    converterOptions.sanitize = true;\n\n    var markdownConverter = Discourse.Markdown.markdownConverter(converterOptions);\n\n    var editorOptions = {\n      strings: {\n        bold: I18n.t(\"composer.bold_title\") + \" \u003cstrong\u003e Ctrl+B\",\n        boldexample: I18n.t(\"composer.bold_text\"),\n\n        italic: I18n.t(\"composer.italic_title\") + \" \u003cem\u003e Ctrl+I\",\n        italicexample: I18n.t(\"composer.italic_text\"),\n\n        link: I18n.t(\"composer.link_title\") + \" \u003ca\u003e Ctrl+L\",\n        linkdescription: I18n.t(\"composer.link_description\"),\n        linkdialog: \"\u003cp\u003e\u003cb\u003e\" + I18n.t(\"composer.link_dialog_title\") + \"\u003c/b\u003e\u003c/p\u003e\u003cp\u003ehttp://example.com/ \\\"\" +\n            I18n.t(\"composer.link_optional_text\") + \"\\\"\u003c/p\u003e\",\n\n        quote: I18n.t(\"composer.quote_title\") + \" \u003cblockquote\u003e Ctrl+Q\",\n        quoteexample: I18n.t(\"composer.quote_text\"),\n\n        code: I18n.t(\"composer.code_title\") + \" \u003cpre\u003e\u003ccode\u003e Ctrl+K\",\n        codeexample: I18n.t(\"composer.code_text\"),\n\n        image: I18n.t(\"composer.upload_title\") + \" - Ctrl+G\",\n        imagedescription: I18n.t(\"composer.upload_description\"),\n\n        olist: I18n.t(\"composer.olist_title\") + \" \u003col\u003e Ctrl+O\",\n        ulist: I18n.t(\"composer.ulist_title\") + \" \u003cul\u003e Ctrl+U\",\n        litem: I18n.t(\"composer.list_item\"),\n\n        heading: I18n.t(\"composer.heading_title\") + \" \u003ch1\u003e/\u003ch2\u003e Ctrl+H\",\n        headingexample: I18n.t(\"composer.heading_text\"),\n\n        hr: I18n.t(\"composer.hr_title\") + \" \u003chr\u003e Ctrl+R\",\n\n        undo: I18n.t(\"composer.undo_title\") + \" - Ctrl+Z\",\n        redo: I18n.t(\"composer.redo_title\") + \" - Ctrl+Y\",\n        redomac: I18n.t(\"composer.redo_title\") + \" - Ctrl+Shift+Z\",\n\n        help: I18n.t(\"composer.help\")\n      }\n    };\n\n    return new Markdown.Editor(markdownConverter, undefined, editorOptions);\n  },\n\n  /**\n    Checks to see if a URL is allowed in the cooked content\n\n    @method urlAllowed\n    @param {String} uri Url to check\n    @param {Number} effect ignored\n    @param {Number} ltype ignored\n    @param {Object} hints an object with hints, used to check if this url is from an iframe\n    @return {String} url to insert in the cooked content\n  **/\n  urlAllowed: function (uri, effect, ltype, hints) {\n    var url = typeof(uri) === \"string\" ? uri : uri.toString();\n\n    // escape single quotes\n    url = url.replace(/'/g, \"\u0026#39;\");\n\n    // whitelist some iframe only\n    if (hints \u0026\u0026 hints.XML_TAG === \"iframe\" \u0026\u0026 hints.XML_ATTR === \"src\") {\n      for (var i = 0, length = _validIframes.length; i \u003c length; i++) {\n        if(_validIframes[i].test(url)) { return url; }\n      }\n      return;\n    }\n\n    // absolute urls\n    if(/^(https?:)?\\/\\/[\\w\\.\\-]+/i.test(url)) { return url; }\n    // relative urls\n    if(/^\\/[\\w\\.\\-]+/i.test(url)) { return url; }\n    // anchors\n    if(/^#[\\w\\.\\-]+/i.test(url)) { return url; }\n    // mailtos\n    if(/^mailto:[\\w\\.\\-@]+/i.test(url)) { return url; }\n  },\n\n  /**\n    Sanitize text using the sanitizer\n\n    @method sanitize\n    @param {String} text The text to sanitize\n    @return {String} text The sanitized text\n  **/\n  sanitize: function(text) {\n    if (!window.html_sanitize || !text) return \"\";\n\n    // Allow things like \u003c3 and \u003c_\u003c\n    text = text.replace(/\u003c([^A-Za-z\\/\\!]|$)/g, \"\u0026lt;$1\");\n\n    // The first time, let's add some more whitelisted tags\n    if (!_decoratedCaja) {\n\n      // Add anything whitelisted to the list of elements if it's not in there\n      // already.\n      var elements = window.html4.ELEMENTS;\n      Object.keys(_validTags).forEach(function(t) {\n        if (!elements[t]) {\n          elements[t] = 0;\n        }\n      });\n      _decoratedCaja = true;\n    }\n\n    return window.html_sanitize(text, Discourse.Markdown.urlAllowed, validateAttribute);\n  },\n\n  /**\n    Creates a Markdown.Converter that we we can use for formatting\n\n    @method markdownConverter\n    @param {Object} opts the converting options\n  **/\n  markdownConverter: function(opts) {\n    if (!opts) opts = {};\n\n    return {\n      makeHtml: function(text) {\n        text = Discourse.Dialect.cook(text, opts);\n        return !text ? \"\" : text;\n      }\n    };\n  }\n\n};\n\nRSVP.EventTarget.mixin(Discourse.Markdown);\n\nDiscourse.Markdown.whiteListTag('a', 'class', 'attachment');\nDiscourse.Markdown.whiteListTag('a', 'target', '_blank');\nDiscourse.Markdown.whiteListTag('a', 'class', 'onebox');\nDiscourse.Markdown.whiteListTag('a', 'class', 'mention');\n\nDiscourse.Markdown.whiteListTag('a', 'data-bbcode');\nDiscourse.Markdown.whiteListTag('a', 'name');\n\nDiscourse.Markdown.whiteListTag('img', 'src', /^data:image.*/i);\n\nDiscourse.Markdown.whiteListTag('div', 'class', 'title');\nDiscourse.Markdown.whiteListTag('div', 'class', 'quote-controls');\n\n// explicitly whitelist classes we need allowed through for\n// syntax highlighting, grabbed from highlight.js\nhljs.listLanguages().forEach(function (language) {\n  Discourse.Markdown.whiteListTag('code', 'class', language);\n});\nDiscourse.Markdown.whiteListTag('code', 'class', 'text');\nDiscourse.Markdown.whiteListTag('code', 'class', 'lang-auto');\n\nDiscourse.Markdown.whiteListTag('span', 'class', 'mention');\nDiscourse.Markdown.whiteListTag('span', 'class', 'spoiler');\nDiscourse.Markdown.whiteListTag('div', 'class', 'spoiler');\nDiscourse.Markdown.whiteListTag('aside', 'class', 'quote');\nDiscourse.Markdown.whiteListTag('aside', 'data-*');\n\nDiscourse.Markdown.whiteListTag('span', 'bbcode-b');\nDiscourse.Markdown.whiteListTag('span', 'bbcode-i');\nDiscourse.Markdown.whiteListTag('span', 'bbcode-u');\nDiscourse.Markdown.whiteListTag('span', 'bbcode-s');\n\n// used for pinned topics\nDiscourse.Markdown.whiteListTag('span', 'class', 'excerpt');\n\nDiscourse.Markdown.whiteListIframe(/^(https?:)?\\/\\/www\\.google\\.com\\/maps\\/embed\\?.+/i);\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

Discourse.computed = {

  /**
    Returns whether two properties are equal to each other.

    @method propertyEqual
    @params {String} p1 the first property
    @params {String} p2 the second property
    @return {Function} computedProperty function
  **/
  propertyEqual: function(p1, p2) {
    return Em.computed(function() {
      return this.get(p1) === this.get(p2);
    }).property(p1, p2);
  },

  /**
    Returns whether two properties are not equal to each other.

    @method propertyNotEqual
    @params {String} p1 the first property
    @params {String} p2 the second property
    @return {Function} computedProperty function
  **/
  propertyNotEqual: function(p1, p2) {
    return Em.computed(function() {
      return this.get(p1) !== this.get(p2);
    }).property(p1, p2);
  },

  /**
    Returns i18n version of a string based on a property.

    @method i18n
    @params {String} properties* to format
    @params {String} format the i18n format string
    @return {Function} computedProperty function
  **/
  i18n: function() {
    var args = Array.prototype.slice.call(arguments, 0);
    var format = args.pop();
    var computed = Em.computed(function() {
      var self = this;
      return I18n.t(format.fmt.apply(format, args.map(function (a) {
        return self.get(a);
      })));
    });
    return computed.property.apply(computed, args);
  },

  /**
    Uses an Ember String `fmt` call to format a string. See:
    http://emberjs.com/api/classes/Em.String.html#method_fmt

    @method fmt
    @params {String} properties* to format
    @params {String} format the format string
    @return {Function} computedProperty function
  **/
  fmt: function() {
    var args = Array.prototype.slice.call(arguments, 0);
    var format = args.pop();
    var computed = Em.computed(function() {
      var self = this;
      return format.fmt.apply(format, args.map(function (a) {
        return self.get(a);
      }));
    });
    return computed.property.apply(computed, args);
  },

  /**
    Creates a URL using Discourse.getURL. It takes a fmt string just like
    fmt does.

    @method url
    @params {String} properties* to format
    @params {String} format the format string for the URL
    @return {Function} computedProperty function returning a URL
  **/
  url: function() {
    var args = Array.prototype.slice.call(arguments, 0);
    var format = args.pop();
    var computed = Em.computed(function() {
      var self = this;
      return Discourse.getURL(format.fmt.apply(format, args.map(function (a) {
        return self.get(a);
      })));
    });
    return computed.property.apply(computed, args);
  },

  /**
    Returns whether properties end with a string

    @method endWith
    @params {String} properties* to check
    @params {String} substring the substring
    @return {Function} computedProperty function
  **/
  endWith: function() {
    var args = Array.prototype.slice.call(arguments, 0);
    var substring = args.pop();
    var computed = Em.computed(function() {
      var self = this;
      return _.all(args.map(function(a) { return self.get(a); }), function(s) {
        var position = s.length - substring.length,
            lastIndex = s.lastIndexOf(substring);
        return lastIndex !== -1 && lastIndex === position;
      });
    });
    return computed.property.apply(computed, args);
  },

  /**
    Creates a one way alias to a computed property, suitable for query params.

    @method queryAlias
    @param {String} path to the alias
    @param {String} defaultValue for the variable (omitted if equal)
  **/
  queryAlias: function(path, defaultValue) {
    return Em.computed(function(key, value) {
      if (value) {
        // Annoying but this ensures the parameter is present
      }
      var result = this.get(path);
      if (typeof result !== "undefined" && result.toString() === defaultValue) { return; }
      return result;
    }).property(path);
  },

  /**
    Creates a property from a SiteSetting. In the future the plan is for them to
    be able to update when changed.

    @method setting
    @param {String} name of site setting
  **/
  setting: function(name) {
    return Em.computed(function() {
      return Discourse.SiteSettings[name];
    }).property();
  }

};


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/computed.js'] = "Discourse.computed = {\n\n  /**\n    Returns whether two properties are equal to each other.\n\n    @method propertyEqual\n    @params {String} p1 the first property\n    @params {String} p2 the second property\n    @return {Function} computedProperty function\n  **/\n  propertyEqual: function(p1, p2) {\n    return Em.computed(function() {\n      return this.get(p1) === this.get(p2);\n    }).property(p1, p2);\n  },\n\n  /**\n    Returns whether two properties are not equal to each other.\n\n    @method propertyNotEqual\n    @params {String} p1 the first property\n    @params {String} p2 the second property\n    @return {Function} computedProperty function\n  **/\n  propertyNotEqual: function(p1, p2) {\n    return Em.computed(function() {\n      return this.get(p1) !== this.get(p2);\n    }).property(p1, p2);\n  },\n\n  /**\n    Returns i18n version of a string based on a property.\n\n    @method i18n\n    @params {String} properties* to format\n    @params {String} format the i18n format string\n    @return {Function} computedProperty function\n  **/\n  i18n: function() {\n    var args = Array.prototype.slice.call(arguments, 0);\n    var format = args.pop();\n    var computed = Em.computed(function() {\n      var self = this;\n      return I18n.t(format.fmt.apply(format, args.map(function (a) {\n        return self.get(a);\n      })));\n    });\n    return computed.property.apply(computed, args);\n  },\n\n  /**\n    Uses an Ember String `fmt` call to format a string. See:\n    http://emberjs.com/api/classes/Em.String.html#method_fmt\n\n    @method fmt\n    @params {String} properties* to format\n    @params {String} format the format string\n    @return {Function} computedProperty function\n  **/\n  fmt: function() {\n    var args = Array.prototype.slice.call(arguments, 0);\n    var format = args.pop();\n    var computed = Em.computed(function() {\n      var self = this;\n      return format.fmt.apply(format, args.map(function (a) {\n        return self.get(a);\n      }));\n    });\n    return computed.property.apply(computed, args);\n  },\n\n  /**\n    Creates a URL using Discourse.getURL. It takes a fmt string just like\n    fmt does.\n\n    @method url\n    @params {String} properties* to format\n    @params {String} format the format string for the URL\n    @return {Function} computedProperty function returning a URL\n  **/\n  url: function() {\n    var args = Array.prototype.slice.call(arguments, 0);\n    var format = args.pop();\n    var computed = Em.computed(function() {\n      var self = this;\n      return Discourse.getURL(format.fmt.apply(format, args.map(function (a) {\n        return self.get(a);\n      })));\n    });\n    return computed.property.apply(computed, args);\n  },\n\n  /**\n    Returns whether properties end with a string\n\n    @method endWith\n    @params {String} properties* to check\n    @params {String} substring the substring\n    @return {Function} computedProperty function\n  **/\n  endWith: function() {\n    var args = Array.prototype.slice.call(arguments, 0);\n    var substring = args.pop();\n    var computed = Em.computed(function() {\n      var self = this;\n      return _.all(args.map(function(a) { return self.get(a); }), function(s) {\n        var position = s.length - substring.length,\n            lastIndex = s.lastIndexOf(substring);\n        return lastIndex !== -1 \u0026\u0026 lastIndex === position;\n      });\n    });\n    return computed.property.apply(computed, args);\n  },\n\n  /**\n    Creates a one way alias to a computed property, suitable for query params.\n\n    @method queryAlias\n    @param {String} path to the alias\n    @param {String} defaultValue for the variable (omitted if equal)\n  **/\n  queryAlias: function(path, defaultValue) {\n    return Em.computed(function(key, value) {\n      if (value) {\n        // Annoying but this ensures the parameter is present\n      }\n      var result = this.get(path);\n      if (typeof result !== \"undefined\" \u0026\u0026 result.toString() === defaultValue) { return; }\n      return result;\n    }).property(path);\n  },\n\n  /**\n    Creates a property from a SiteSetting. In the future the plan is for them to\n    be able to update when changed.\n\n    @method setting\n    @param {String} name of site setting\n  **/\n  setting: function(name) {\n    return Em.computed(function() {\n      return Discourse.SiteSettings[name];\n    }).property();\n  }\n\n};\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A base view that gives us common functionality, for example `present` and `blank`

  @class View
  @extends Ember.View
  @uses Discourse.Presence
  @namespace Discourse
  @module Discourse
**/

Discourse.View = Ember.View.extend(Discourse.Presence, {});

Discourse.GroupedView = Ember.View.extend(Discourse.Presence, {
  init: function() {
    this._super();
    this.set('context', this.get('content'));

    var templateData = this.get('templateData');
    if (templateData) {
      this.set('templateData.insideGroup', true);
    }
  }
});

Discourse.View.reopenClass({

  /**
    Register a view helper for ease of use

    @method registerHelper
    @param {String} helperName the name of the helper
    @param {Ember.View} helperClass the view that will be inserted by the helper
  **/
  registerHelper: function(helperName, helperClass) {
    Ember.Handlebars.registerHelper(helperName, function(options) {
      var hash = options.hash,
          types = options.hashTypes;

      Discourse.Utilities.normalizeHash(hash, types);
      return Ember.Handlebars.helpers.view.call(this, helperClass, options);
    });
  },

  /**
    Returns an observer that will re-render if properties change. This is useful for
    views where rendering is done to a buffer manually and need to know when to trigger
    a new render call.

    @method renderIfChanged
    @params {String} propertyNames*
    @return {Function} observer
  **/
  renderIfChanged: function() {
    var args = Array.prototype.slice.call(arguments, 0);
    args.unshift(function () { this.rerender(); });
    return Ember.observer.apply(this, args);
  }

});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/view.js'] = "/**\n  A base view that gives us common functionality, for example `present` and `blank`\n\n  @class View\n  @extends Ember.View\n  @uses Discourse.Presence\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.View = Ember.View.extend(Discourse.Presence, {});\n\nDiscourse.GroupedView = Ember.View.extend(Discourse.Presence, {\n  init: function() {\n    this._super();\n    this.set('context', this.get('content'));\n\n    var templateData = this.get('templateData');\n    if (templateData) {\n      this.set('templateData.insideGroup', true);\n    }\n  }\n});\n\nDiscourse.View.reopenClass({\n\n  /**\n    Register a view helper for ease of use\n\n    @method registerHelper\n    @param {String} helperName the name of the helper\n    @param {Ember.View} helperClass the view that will be inserted by the helper\n  **/\n  registerHelper: function(helperName, helperClass) {\n    Ember.Handlebars.registerHelper(helperName, function(options) {\n      var hash = options.hash,\n          types = options.hashTypes;\n\n      Discourse.Utilities.normalizeHash(hash, types);\n      return Ember.Handlebars.helpers.view.call(this, helperClass, options);\n    });\n  },\n\n  /**\n    Returns an observer that will re-render if properties change. This is useful for\n    views where rendering is done to a buffer manually and need to know when to trigger\n    a new render call.\n\n    @method renderIfChanged\n    @params {String} propertyNames*\n    @return {Function} observer\n  **/\n  renderIfChanged: function() {\n    var args = Array.prototype.slice.call(arguments, 0);\n    args.unshift(function () { this.rerender(); });\n    return Ember.observer.apply(this, args);\n  }\n\n});\n";
define("discourse/views/container", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.ContainerView.extend(Discourse.Presence, {

      /**
        Attaches a view and wires up the container properly

        @method attachViewWithArgs
        @param {Object} viewArgs The arguments to pass when creating the view
        @param {Class} viewClass The view class we want to create
      **/
      attachViewWithArgs: function(viewArgs, viewClass) {
        if (!viewClass) { viewClass = Ember.View.extend(); }
        var view = this.createChildView(viewClass, viewArgs);
        this.pushObject(view);
      },

      /**
        Attaches a view with no arguments and wires up the container properly

        @method attachViewClass
        @param {Class} viewClass The view class we want to add
      **/
      attachViewClass: function(viewClass) {
        this.attachViewWithArgs(null, viewClass);
      }

    });
  });

Discourse.ContainerView = require('discourse/views/container').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/container.js'] = "define(\"discourse/views/container\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.ContainerView.extend(Discourse.Presence, {\n\n      /**\n        Attaches a view and wires up the container properly\n\n        @method attachViewWithArgs\n        @param {Object} viewArgs The arguments to pass when creating the view\n        @param {Class} viewClass The view class we want to create\n      **/\n      attachViewWithArgs: function(viewArgs, viewClass) {\n        if (!viewClass) { viewClass = Ember.View.extend(); }\n        var view = this.createChildView(viewClass, viewArgs);\n        this.pushObject(view);\n      },\n\n      /**\n        Attaches a view with no arguments and wires up the container properly\n\n        @method attachViewClass\n        @param {Class} viewClass The view class we want to add\n      **/\n      attachViewClass: function(viewClass) {\n        this.attachViewWithArgs(null, viewClass);\n      }\n\n    });\n  });";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  Debounce a Javascript function. This means if it's called many times in a time limit it
  should only be executed once (at the end of the limit counted from the last call made).
  Original function will be called with the context and arguments from the last call made.

  @method debounce
  @module Discourse
  @param {function} func The function to debounce
  @param {Number} wait how long to wait
**/

Discourse.debounce = function(func, wait) {
  var self, args;
  var later = function() {
    func.apply(self, args);
  };

  return function() {
    self = this;
    args = arguments;

    Ember.run.debounce(null, later, wait);
  };
};

/**
  Debounce a javascript function that returns a promise. If it's called too soon it
  will return a promise that is never resolved.

  @method debouncePromise
  @module Discourse
  @param {function} func The function to debounce
  @param {Number} wait how long to wait
**/
Discourse.debouncePromise = function(func, wait) {
  var self, args, promise;
  var later = function() {
    func.apply(self, args).then(function (funcResult) {
      promise.resolve(funcResult);
    });
  };

  return function() {
    self = this;
    args = arguments;
    promise = Ember.Deferred.create();

    Ember.run.debounce(null, later, wait);

    return promise;
  };
};


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/debounce.js'] = "/**\n  Debounce a Javascript function. This means if it's called many times in a time limit it\n  should only be executed once (at the end of the limit counted from the last call made).\n  Original function will be called with the context and arguments from the last call made.\n\n  @method debounce\n  @module Discourse\n  @param {function} func The function to debounce\n  @param {Number} wait how long to wait\n**/\n\nDiscourse.debounce = function(func, wait) {\n  var self, args;\n  var later = function() {\n    func.apply(self, args);\n  };\n\n  return function() {\n    self = this;\n    args = arguments;\n\n    Ember.run.debounce(null, later, wait);\n  };\n};\n\n/**\n  Debounce a javascript function that returns a promise. If it's called too soon it\n  will return a promise that is never resolved.\n\n  @method debouncePromise\n  @module Discourse\n  @param {function} func The function to debounce\n  @param {Number} wait how long to wait\n**/\nDiscourse.debouncePromise = function(func, wait) {\n  var self, args, promise;\n  var later = function() {\n    func.apply(self, args).then(function (funcResult) {\n      promise.resolve(funcResult);\n    });\n  };\n\n  return function() {\n    self = this;\n    args = arguments;\n    promise = Ember.Deferred.create();\n\n    Ember.run.debounce(null, later, wait);\n\n    return promise;\n  };\n};\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

Discourse.Model = Ember.Object.extend(Discourse.Presence, {
  // Like `setProperties` but returns the original values in case
  // we want to roll back
  setPropertiesBackup: function(obj) {
    var backup = this.getProperties(Ember.keys(obj));
    this.setProperties(obj);
    return backup;
  }
});

Discourse.Model.reopenClass({
  extractByKey: function(collection, klass) {
    var retval = {};
    if (Ember.isEmpty(collection)) { return retval; }

    collection.forEach(function(item) {
      retval[item.id] = klass.create(item);
    });
    return retval;
  }
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/model.js'] = "Discourse.Model = Ember.Object.extend(Discourse.Presence, {\n  // Like `setProperties` but returns the original values in case\n  // we want to roll back\n  setPropertiesBackup: function(obj) {\n    var backup = this.getProperties(Ember.keys(obj));\n    this.setProperties(obj);\n    return backup;\n  }\n});\n\nDiscourse.Model.reopenClass({\n  extractByKey: function(collection, klass) {\n    var retval = {};\n    if (Ember.isEmpty(collection)) { return retval; }\n\n    collection.forEach(function(item) {\n      retval[item.id] = klass.create(item);\n    });\n    return retval;\n  }\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A data model representing actions users have taken

  @class UserAction
  @extends Discourse.Model
  @namespace Discourse
  @module Discourse
**/


var UserActionTypes = {
      likes_given: 1,
      likes_received: 2,
      bookmarks: 3,
      topics: 4,
      posts: 5,
      replies: 6,
      mentions: 7,
      quotes: 9,
      starred: 10,
      edits: 11,
      messages_sent: 12,
      messages_received: 13
    },
    esc = Handlebars.Utils.escapeExpression,
    InvertedActionTypes = {};

_.each(UserActionTypes, function (k, v) {
  InvertedActionTypes[k] = v;
});

Discourse.UserAction = Discourse.Model.extend({

  _attachCategory: function() {
    var categoryId = this.get('category_id');
    if (categoryId) {
      this.set('category', Discourse.Category.findById(categoryId));
    }
  }.on('init'),

  /**
    Return an i18n key we will use for the description text of a user action.

    @property descriptionKey
  **/
  descriptionKey: function() {
    var action = this.get('action_type');
    if (action === null || Discourse.UserAction.TO_SHOW.indexOf(action) >= 0) {
      if (this.get('isPM')) {
        return this.get('sameUser') ? 'sent_by_you' : 'sent_by_user';
      } else {
        return this.get('sameUser') ? 'posted_by_you' : 'posted_by_user';
      }
    }

    if (this.get('topicType')) {
      return this.get('sameUser') ? 'you_posted_topic' : 'user_posted_topic';
    }

    if (this.get('postReplyType')) {
      if (this.get('reply_to_post_number')) {
        return this.get('sameUser') ? 'you_replied_to_post' : 'user_replied_to_post';
      } else {
        return this.get('sameUser') ? 'you_replied_to_topic' : 'user_replied_to_topic';
      }
    }

    if (this.get('mentionType')) {
      if (this.get('sameUser')) {
        return 'you_mentioned_user';
      } else {
        return this.get('targetUser') ? 'user_mentioned_you' : 'user_mentioned_user';
      }
    }
  }.property('action_type'),

  /**
    Returns the HTML representation of a user action's description, complete with icon.

    @property descriptionHtml
  **/
  descriptionHtml: function() {
    var descriptionKey = this.get('descriptionKey');
    if (!descriptionKey) { return; }

    var icon = this.get('isPM') ? '<i class="fa fa-envelope" title="{{i18n user.stream.private_message}}"></i>' : '';

    return new Handlebars.SafeString(icon + " " + I18n.t("user_action." + descriptionKey, {
      userUrl: this.get('userUrl'),
      replyUrl: this.get('replyUrl'),
      postUrl: this.get('postUrl'),
      topicUrl: this.get('replyUrl'),
      user: esc(this.get('presentName')),
      post_number: '#' + this.get('reply_to_post_number'),
      user1Url: this.get('userUrl'),
      user2Url: this.get('targetUserUrl'),
      another_user: esc(this.get('targetDisplayName'))
    }));

  }.property('descriptionKey'),

  sameUser: function() {
    return this.get('username') === Discourse.User.currentProp('username');
  }.property('username'),

  targetUser: function() {
    return this.get('target_username') === Discourse.User.currentProp('username');
  }.property('target_username'),

  presentName: Em.computed.any('name', 'username'),
  targetDisplayName: Em.computed.any('target_name', 'target_username'),
  actingDisplayName: Em.computed.any('acting_name', 'acting_username'),
  targetUserUrl: Discourse.computed.url('target_username', '/users/%@'),

  usernameLower: function() {
    return this.get('username').toLowerCase();
  }.property('username'),

  userUrl: Discourse.computed.url('usernameLower', '/users/%@'),

  postUrl: function() {
    return Discourse.Utilities.postUrl(this.get('slug'), this.get('topic_id'), this.get('post_number'));
  }.property(),

  replyUrl: function() {
    return Discourse.Utilities.postUrl(this.get('slug'), this.get('topic_id'), this.get('reply_to_post_number'));
  }.property(),

  replyType: Em.computed.equal('action_type', UserActionTypes.replies),
  postType: Em.computed.equal('action_type', UserActionTypes.posts),
  topicType: Em.computed.equal('action_type', UserActionTypes.topics),
  bookmarkType: Em.computed.equal('action_type', UserActionTypes.bookmarks),
  messageSentType: Em.computed.equal('action_type', UserActionTypes.messages_sent),
  messageReceivedType: Em.computed.equal('action_type', UserActionTypes.messages_received),
  mentionType: Em.computed.equal('action_type', UserActionTypes.mentions),
  isPM: Em.computed.or('messageSentType', 'messageReceivedType'),
  postReplyType: Em.computed.or('postType', 'replyType'),

  addChild: function(action) {
    var groups = this.get("childGroups");
    if (!groups) {
      groups = {
        likes: Discourse.UserActionGroup.create({ icon: "fa fa-heart" }),
        stars: Discourse.UserActionGroup.create({ icon: "fa fa-star" }),
        edits: Discourse.UserActionGroup.create({ icon: "fa fa-pencil" }),
        bookmarks: Discourse.UserActionGroup.create({ icon: "fa fa-bookmark" })
      };
    }
    this.set("childGroups", groups);

    var bucket = (function() {
      switch (action.action_type) {
        case UserActionTypes.likes_given:
        case UserActionTypes.likes_received:
          return "likes";
        case UserActionTypes.starred:
          return "stars";
        case UserActionTypes.edits:
          return "edits";
        case UserActionTypes.bookmarks:
          return "bookmarks";
      }
    })();
    var current = groups[bucket];
    if (current) {
      current.push(action);
    }
  },

  children: function() {
    var g = this.get("childGroups");
    var rval = [];
    if (g) {
      rval = [g.likes, g.stars, g.edits, g.bookmarks].filter(function(i) {
        return i.get("items") && i.get("items").length > 0;
      });
    }
    return rval;
  }.property("childGroups",
    "childGroups.likes.items", "childGroups.likes.items.@each",
    "childGroups.stars.items", "childGroups.stars.items.@each",
    "childGroups.edits.items", "childGroups.edits.items.@each",
    "childGroups.bookmarks.items", "childGroups.bookmarks.items.@each"),

  switchToActing: function() {
    this.setProperties({
      username: this.get('acting_username'),
      uploaded_avatar_id: this.get('acting_uploaded_avatar_id'),
      name: this.get('actingDisplayName')
    });
  }
});

Discourse.UserAction.reopenClass({
  collapseStream: function(stream) {
    var uniq = {},
        collapsed = [],
        pos = 0;

    stream.forEach(function(item) {
      var key = "" + item.topic_id + "-" + item.post_number;
      var found = uniq[key];
      if (found === void 0) {

        var current;
        if (Discourse.UserAction.TO_COLLAPSE.indexOf(item.action_type) >= 0) {
          current = Discourse.UserAction.create(item);
          item.switchToActing();
          current.addChild(item);
        } else {
          current = item;
        }
        uniq[key] = pos;
        collapsed[pos] = current;
        pos += 1;
      } else {
        if (Discourse.UserAction.TO_COLLAPSE.indexOf(item.action_type) >= 0) {
          item.switchToActing();
          collapsed[found].addChild(item);
        } else {
          collapsed[found].setProperties(item.getProperties('action_type', 'description'));
        }
      }
    });
    return collapsed;
  },

  TYPES: UserActionTypes,
  TYPES_INVERTED: InvertedActionTypes,

  TO_COLLAPSE: [
    UserActionTypes.likes_given,
    UserActionTypes.likes_received,
    UserActionTypes.starred,
    UserActionTypes.edits,
    UserActionTypes.bookmarks
  ],

  TO_SHOW: [
    UserActionTypes.likes_given,
    UserActionTypes.likes_received,
    UserActionTypes.starred,
    UserActionTypes.edits,
    UserActionTypes.bookmarks,
    UserActionTypes.messages_sent,
    UserActionTypes.messages_received
  ]

});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/user_action.js'] = "/**\n  A data model representing actions users have taken\n\n  @class UserAction\n  @extends Discourse.Model\n  @namespace Discourse\n  @module Discourse\n**/\n\n\nvar UserActionTypes = {\n      likes_given: 1,\n      likes_received: 2,\n      bookmarks: 3,\n      topics: 4,\n      posts: 5,\n      replies: 6,\n      mentions: 7,\n      quotes: 9,\n      starred: 10,\n      edits: 11,\n      messages_sent: 12,\n      messages_received: 13\n    },\n    esc = Handlebars.Utils.escapeExpression,\n    InvertedActionTypes = {};\n\n_.each(UserActionTypes, function (k, v) {\n  InvertedActionTypes[k] = v;\n});\n\nDiscourse.UserAction = Discourse.Model.extend({\n\n  _attachCategory: function() {\n    var categoryId = this.get('category_id');\n    if (categoryId) {\n      this.set('category', Discourse.Category.findById(categoryId));\n    }\n  }.on('init'),\n\n  /**\n    Return an i18n key we will use for the description text of a user action.\n\n    @property descriptionKey\n  **/\n  descriptionKey: function() {\n    var action = this.get('action_type');\n    if (action === null || Discourse.UserAction.TO_SHOW.indexOf(action) \u003e= 0) {\n      if (this.get('isPM')) {\n        return this.get('sameUser') ? 'sent_by_you' : 'sent_by_user';\n      } else {\n        return this.get('sameUser') ? 'posted_by_you' : 'posted_by_user';\n      }\n    }\n\n    if (this.get('topicType')) {\n      return this.get('sameUser') ? 'you_posted_topic' : 'user_posted_topic';\n    }\n\n    if (this.get('postReplyType')) {\n      if (this.get('reply_to_post_number')) {\n        return this.get('sameUser') ? 'you_replied_to_post' : 'user_replied_to_post';\n      } else {\n        return this.get('sameUser') ? 'you_replied_to_topic' : 'user_replied_to_topic';\n      }\n    }\n\n    if (this.get('mentionType')) {\n      if (this.get('sameUser')) {\n        return 'you_mentioned_user';\n      } else {\n        return this.get('targetUser') ? 'user_mentioned_you' : 'user_mentioned_user';\n      }\n    }\n  }.property('action_type'),\n\n  /**\n    Returns the HTML representation of a user action's description, complete with icon.\n\n    @property descriptionHtml\n  **/\n  descriptionHtml: function() {\n    var descriptionKey = this.get('descriptionKey');\n    if (!descriptionKey) { return; }\n\n    var icon = this.get('isPM') ? '\u003ci class=\"fa fa-envelope\" title=\"{{i18n user.stream.private_message}}\"\u003e\u003c/i\u003e' : '';\n\n    return new Handlebars.SafeString(icon + \" \" + I18n.t(\"user_action.\" + descriptionKey, {\n      userUrl: this.get('userUrl'),\n      replyUrl: this.get('replyUrl'),\n      postUrl: this.get('postUrl'),\n      topicUrl: this.get('replyUrl'),\n      user: esc(this.get('presentName')),\n      post_number: '#' + this.get('reply_to_post_number'),\n      user1Url: this.get('userUrl'),\n      user2Url: this.get('targetUserUrl'),\n      another_user: esc(this.get('targetDisplayName'))\n    }));\n\n  }.property('descriptionKey'),\n\n  sameUser: function() {\n    return this.get('username') === Discourse.User.currentProp('username');\n  }.property('username'),\n\n  targetUser: function() {\n    return this.get('target_username') === Discourse.User.currentProp('username');\n  }.property('target_username'),\n\n  presentName: Em.computed.any('name', 'username'),\n  targetDisplayName: Em.computed.any('target_name', 'target_username'),\n  actingDisplayName: Em.computed.any('acting_name', 'acting_username'),\n  targetUserUrl: Discourse.computed.url('target_username', '/users/%@'),\n\n  usernameLower: function() {\n    return this.get('username').toLowerCase();\n  }.property('username'),\n\n  userUrl: Discourse.computed.url('usernameLower', '/users/%@'),\n\n  postUrl: function() {\n    return Discourse.Utilities.postUrl(this.get('slug'), this.get('topic_id'), this.get('post_number'));\n  }.property(),\n\n  replyUrl: function() {\n    return Discourse.Utilities.postUrl(this.get('slug'), this.get('topic_id'), this.get('reply_to_post_number'));\n  }.property(),\n\n  replyType: Em.computed.equal('action_type', UserActionTypes.replies),\n  postType: Em.computed.equal('action_type', UserActionTypes.posts),\n  topicType: Em.computed.equal('action_type', UserActionTypes.topics),\n  bookmarkType: Em.computed.equal('action_type', UserActionTypes.bookmarks),\n  messageSentType: Em.computed.equal('action_type', UserActionTypes.messages_sent),\n  messageReceivedType: Em.computed.equal('action_type', UserActionTypes.messages_received),\n  mentionType: Em.computed.equal('action_type', UserActionTypes.mentions),\n  isPM: Em.computed.or('messageSentType', 'messageReceivedType'),\n  postReplyType: Em.computed.or('postType', 'replyType'),\n\n  addChild: function(action) {\n    var groups = this.get(\"childGroups\");\n    if (!groups) {\n      groups = {\n        likes: Discourse.UserActionGroup.create({ icon: \"fa fa-heart\" }),\n        stars: Discourse.UserActionGroup.create({ icon: \"fa fa-star\" }),\n        edits: Discourse.UserActionGroup.create({ icon: \"fa fa-pencil\" }),\n        bookmarks: Discourse.UserActionGroup.create({ icon: \"fa fa-bookmark\" })\n      };\n    }\n    this.set(\"childGroups\", groups);\n\n    var bucket = (function() {\n      switch (action.action_type) {\n        case UserActionTypes.likes_given:\n        case UserActionTypes.likes_received:\n          return \"likes\";\n        case UserActionTypes.starred:\n          return \"stars\";\n        case UserActionTypes.edits:\n          return \"edits\";\n        case UserActionTypes.bookmarks:\n          return \"bookmarks\";\n      }\n    })();\n    var current = groups[bucket];\n    if (current) {\n      current.push(action);\n    }\n  },\n\n  children: function() {\n    var g = this.get(\"childGroups\");\n    var rval = [];\n    if (g) {\n      rval = [g.likes, g.stars, g.edits, g.bookmarks].filter(function(i) {\n        return i.get(\"items\") \u0026\u0026 i.get(\"items\").length \u003e 0;\n      });\n    }\n    return rval;\n  }.property(\"childGroups\",\n    \"childGroups.likes.items\", \"childGroups.likes.items.@each\",\n    \"childGroups.stars.items\", \"childGroups.stars.items.@each\",\n    \"childGroups.edits.items\", \"childGroups.edits.items.@each\",\n    \"childGroups.bookmarks.items\", \"childGroups.bookmarks.items.@each\"),\n\n  switchToActing: function() {\n    this.setProperties({\n      username: this.get('acting_username'),\n      uploaded_avatar_id: this.get('acting_uploaded_avatar_id'),\n      name: this.get('actingDisplayName')\n    });\n  }\n});\n\nDiscourse.UserAction.reopenClass({\n  collapseStream: function(stream) {\n    var uniq = {},\n        collapsed = [],\n        pos = 0;\n\n    stream.forEach(function(item) {\n      var key = \"\" + item.topic_id + \"-\" + item.post_number;\n      var found = uniq[key];\n      if (found === void 0) {\n\n        var current;\n        if (Discourse.UserAction.TO_COLLAPSE.indexOf(item.action_type) \u003e= 0) {\n          current = Discourse.UserAction.create(item);\n          item.switchToActing();\n          current.addChild(item);\n        } else {\n          current = item;\n        }\n        uniq[key] = pos;\n        collapsed[pos] = current;\n        pos += 1;\n      } else {\n        if (Discourse.UserAction.TO_COLLAPSE.indexOf(item.action_type) \u003e= 0) {\n          item.switchToActing();\n          collapsed[found].addChild(item);\n        } else {\n          collapsed[found].setProperties(item.getProperties('action_type', 'description'));\n        }\n      }\n    });\n    return collapsed;\n  },\n\n  TYPES: UserActionTypes,\n  TYPES_INVERTED: InvertedActionTypes,\n\n  TO_COLLAPSE: [\n    UserActionTypes.likes_given,\n    UserActionTypes.likes_received,\n    UserActionTypes.starred,\n    UserActionTypes.edits,\n    UserActionTypes.bookmarks\n  ],\n\n  TO_SHOW: [\n    UserActionTypes.likes_given,\n    UserActionTypes.likes_received,\n    UserActionTypes.starred,\n    UserActionTypes.edits,\n    UserActionTypes.bookmarks,\n    UserActionTypes.messages_sent,\n    UserActionTypes.messages_received\n  ]\n\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A data model for representing the composer's current state

  @class Composer
  @extends Discourse.Model
  @namespace Discourse
  @module Discourse
**/


var CLOSED = 'closed',
    SAVING = 'saving',
    OPEN = 'open',
    DRAFT = 'draft',

    // The actions the composer can take
    CREATE_TOPIC = 'createTopic',
    PRIVATE_MESSAGE = 'privateMessage',
    REPLY = 'reply',
    EDIT = 'edit',
    REPLY_AS_NEW_TOPIC_KEY = "reply_as_new_topic";

Discourse.Composer = Discourse.Model.extend({

  archetypes: function() {
    return Discourse.Site.currentProp('archetypes');
  }.property(),

  creatingTopic: Em.computed.equal('action', CREATE_TOPIC),
  creatingPrivateMessage: Em.computed.equal('action', PRIVATE_MESSAGE),
  notCreatingPrivateMessage: Em.computed.not('creatingPrivateMessage'),

  privateMessage: function(){
    return this.get('creatingPrivateMessage') || this.get('topic.archetype') === 'private_message';
  }.property('creatingPrivateMessage', 'topic'),

  editingPost: Em.computed.equal('action', EDIT),
  replyingToTopic: Em.computed.equal('action', REPLY),

  viewOpen: Em.computed.equal('composeState', OPEN),
  viewDraft: Em.computed.equal('composeState', DRAFT),


  archetype: function() {
    return this.get('archetypes').findProperty('id', this.get('archetypeId'));
  }.property('archetypeId'),

  archetypeChanged: function() {
    return this.set('metaData', Em.Object.create());
  }.observes('archetype'),

  editingFirstPost: Em.computed.and('editingPost', 'post.firstPost'),
  canEditTitle: Em.computed.or('creatingTopic', 'creatingPrivateMessage', 'editingFirstPost'),
  canCategorize: Em.computed.and('canEditTitle', 'notCreatingPrivateMessage'),

  // Determine the appropriate title for this action
  actionTitle: function() {
    var topic = this.get('topic');

    var postLink, topicLink;
    if (topic) {
      var postNumber = this.get('post.post_number');
      postLink = "<a href='" + (topic.get('url')) + "/" + postNumber + "'>" +
        I18n.t("post.post_number", { number: postNumber }) + "</a>";
      topicLink = "<a href='" + (topic.get('url')) + "'> " + (Handlebars.Utils.escapeExpression(topic.get('title'))) + "</a>";
    }

    var postDescription,
        post = this.get('post');

    if (post) {
      postDescription = I18n.t('post.' +  this.get('action'), {
        link: postLink,
        replyAvatar: Discourse.Utilities.tinyAvatar(post.get('avatar_template')),
        username: this.get('post.username')
      });

      if (!Discourse.Mobile.mobileView) {
        var replyUsername = post.get('reply_to_user.username');
        var replyAvatarTemplate = post.get('reply_to_user.avatar_template');
        if (replyUsername && replyAvatarTemplate && this.get('action') === EDIT) {
          postDescription += " " + I18n.t("post.in_reply_to") + " " + Discourse.Utilities.tinyAvatar(replyAvatarTemplate) + " " + replyUsername;
        }
      }
    }

    switch (this.get('action')) {
      case PRIVATE_MESSAGE: return I18n.t('topic.private_message');
      case CREATE_TOPIC: return I18n.t('topic.create_long');
      case REPLY:
      case EDIT:
        if (postDescription) return postDescription;
        if (topic) return I18n.t('post.reply_topic', { link: topicLink });
    }

  }.property('action', 'post', 'topic', 'topic.title'),

  toggleText: function() {
    return this.get('showPreview') ? I18n.t('composer.hide_preview') : I18n.t('composer.show_preview');
  }.property('showPreview'),

  hidePreview: Em.computed.not('showPreview'),

  // Whether to disable the post button
  cantSubmitPost: function() {

    // Can't submit while loading
    if (this.get('loading')) return true;

    // Title is required when:
    //    - creating a new topic
    //    - editing the 1st post
    //    - creating a private message

    if (this.get('canEditTitle') && !this.get('titleLengthValid')) return true;

    // Need at least one user when sending a private message
    if ( this.get('creatingPrivateMessage') &&
         this.get('targetUsernames') &&
        (this.get('targetUsernames').trim() + ',').indexOf(',') === 0) {
      return true;
    }

    // reply is always required
    if (this.get('missingReplyCharacters') > 0) return true;

    return this.get('canCategorize') &&
        !Discourse.SiteSettings.allow_uncategorized_topics &&
        !this.get('categoryId') &&
        !Discourse.User.currentProp('staff');
  }.property('loading', 'canEditTitle', 'titleLength', 'targetUsernames', 'replyLength', 'categoryId', 'missingReplyCharacters'),

  /**
    Is the title's length valid?

    @property titleLengthValid
  **/
  titleLengthValid: function() {
    if (Discourse.User.currentProp('admin') && this.get('post.static_doc') && this.get('titleLength') > 0) return true;
    if (this.get('titleLength') < this.get('minimumTitleLength')) return false;
    return (this.get('titleLength') <= Discourse.SiteSettings.max_topic_title_length);
  }.property('minimumTitleLength', 'titleLength', 'post.static_doc'),

  // The text for the save button
  saveText: function() {
    switch (this.get('action')) {
      case EDIT: return I18n.t('composer.save_edit');
      case REPLY: return I18n.t('composer.reply');
      case CREATE_TOPIC: return I18n.t('composer.create_topic');
      case PRIVATE_MESSAGE: return I18n.t('composer.create_pm');
    }
  }.property('action'),

  hasMetaData: function() {
    var metaData = this.get('metaData');
    return metaData ? Em.isEmpty(Em.keys(this.get('metaData'))) : false;
  }.property('metaData'),

  /**
    Did the user make changes to the reply?

    @property replyDirty
  **/
  replyDirty: function() {
    return this.get('reply') !== this.get('originalText');
  }.property('reply', 'originalText'),

  /**
    Number of missing characters in the title until valid.

    @property missingTitleCharacters
  **/
  missingTitleCharacters: function() {
    return this.get('minimumTitleLength') - this.get('titleLength');
  }.property('minimumTitleLength', 'titleLength'),

  /**
    Minimum number of characters for a title to be valid.

    @property minimumTitleLength
  **/
  minimumTitleLength: function() {
    if (this.get('privateMessage')) {
      return Discourse.SiteSettings.min_private_message_title_length;
    } else {
      return Discourse.SiteSettings.min_topic_title_length;
    }
  }.property('privateMessage'),

  /**
    Number of missing characters in the reply until valid.

    @property missingReplyCharacters
  **/
  missingReplyCharacters: function() {
    return this.get('minimumPostLength') - this.get('replyLength');
  }.property('minimumPostLength', 'replyLength'),

  /**
    Minimum number of characters for a post body to be valid.

    @property minimumPostLength
  **/
  minimumPostLength: function() {
    if( this.get('privateMessage') ) {
      return Discourse.SiteSettings.min_private_message_post_length;
    } else {
      return Discourse.SiteSettings.min_post_length;
    }
  }.property('privateMessage'),

  /**
    Computes the length of the title minus non-significant whitespaces

    @property titleLength
  **/
  titleLength: function() {
    var title = this.get('title') || "";
    return title.replace(/\s+/img, " ").trim().length;
  }.property('title'),

  /**
    Computes the length of the reply minus the quote(s) and non-significant whitespaces

    @property replyLength
  **/
  replyLength: function() {
    var reply = this.get('reply') || "";
    while (Discourse.Quote.REGEXP.test(reply)) { reply = reply.replace(Discourse.Quote.REGEXP, ""); }
    return reply.replace(/\s+/img, " ").trim().length;
  }.property('reply'),


  updateDraftStatus: function() {
    var $title = $('#reply-title'),
        $reply = $('#wmd-input');

    // 'title' is focused
    if ($title.is(':focus')) {
      var titleDiff = this.get('missingTitleCharacters');
      if (titleDiff > 0) {
        this.flashDraftStatusForNewUser();
        return this.set('draftStatus', I18n.t('composer.min_length.need_more_for_title', { n: titleDiff }));
      }
    // 'reply' is focused
    } else if ($reply.is(':focus')) {
      var replyDiff = this.get('missingReplyCharacters');
      if (replyDiff > 0) {
        return this.set('draftStatus', I18n.t('composer.min_length.need_more_for_reply', { n: replyDiff }));
      }
    }

    // hide the counters if the currently focused text field is OK
    this.set('draftStatus', null);

  }.observes('missingTitleCharacters', 'missingReplyCharacters'),

  init: function() {
    this._super();
    var val = (Discourse.Mobile.mobileView ? false : (Discourse.KeyValueStore.get('composer.showPreview') || 'true'));
    this.set('showPreview', val === 'true');
    this.set('archetypeId', Discourse.Site.currentProp('default_archetype'));
  },

  /**
    Append text to the current reply

    @method appendText
    @param {String} text the text to append
  **/
  appendText: function(text,position,opts) {
    var reply = (this.get('reply') || '');
    position = typeof(position) === "number" ? position : reply.length;

    var before = reply.slice(0, position) || '';
    var after = reply.slice(position) || '';

    var stripped, i;

    if(opts && opts.block){
      if(before.trim() !== ""){
        stripped = before.replace(/\r/g, "");
        for(i=0; i<2; i++){
          if(stripped[stripped.length - 1 - i] !== "\n"){
            before += "\n";
            position++;
          }
        }
      }
      if(after.trim() !== ""){
        stripped = after.replace(/\r/g, "");
        for(i=0; i<2; i++){
          if(stripped[i] !== "\n"){
            after = "\n" + after;
          }
        }
      }
    }

    this.set('reply', before + text + after);
  },

  togglePreview: function() {
    this.toggleProperty('showPreview');
    Discourse.KeyValueStore.set({ key: 'composer.showPreview', value: this.get('showPreview') });
  },

  importQuote: function() {
    var postStream = this.get('topic.postStream'),
        postId = this.get('post.id');

    if (!postId && postStream) {
      postId = postStream.get('firstPostId');
    }

    // If we're editing a post, fetch the reply when importing a quote
    if (this.get('editingPost')) {
      var replyToPostNumber = this.get('post.reply_to_post_number');
      if (replyToPostNumber) {
        var replyPost = postStream.get('posts').findBy('post_number', replyToPostNumber);
        if (replyPost) {
          postId = replyPost.get('id');
        }
      }
    }

    // If there is no current post, use the post id from the stream
    if (postId) {
      this.set('loading', true);
      var composer = this;
      return Discourse.Post.load(postId).then(function(post) {
        composer.appendText(Discourse.Quote.build(post, post.get('raw')));
        composer.set('loading', false);
      });
    }
  },

  /*
     Open a composer

     opts:
       action   - The action we're performing: edit, reply or createTopic
       post     - The post we're replying to, if present
       topic    - The topic we're replying to, if present
       quote    - If we're opening a reply from a quote, the quote we're making
  */
  open: function(opts) {
    if (!opts) opts = {};
    this.set('loading', false);

    var replyBlank = Em.isEmpty(this.get("reply"));

    var composer = this;
    if (!replyBlank &&
        (opts.action !== this.get('action') || ((opts.reply || opts.action === this.EDIT) && this.get('reply') !== this.get('originalText'))) &&
        !opts.tested) {
      opts.tested = true;
      return;
    }

    if (!opts.draftKey) throw 'draft key is required';
    if (opts.draftSequence === null) throw 'draft sequence is required';

    this.setProperties({
      draftKey: opts.draftKey,
      draftSequence: opts.draftSequence,
      composeState: opts.composerState || OPEN,
      action: opts.action,
      topic: opts.topic,
      targetUsernames: opts.usernames
    });

    if (opts.post) {
      this.set('post', opts.post);
      if (!this.get('topic')) {
        this.set('topic', opts.post.get('topic'));
      }
    }

    this.setProperties({
      categoryId: opts.categoryId || this.get('topic.category.id'),
      archetypeId: opts.archetypeId || Discourse.Site.currentProp('default_archetype'),
      metaData: opts.metaData ? Em.Object.create(opts.metaData) : null,
      reply: opts.reply || this.get("reply") || ""
    });

    if (opts.postId) {
      this.set('loading', true);
      Discourse.Post.load(opts.postId).then(function(result) {
        composer.set('post', result);
        composer.set('loading', false);
      });
    }

    // If we are editing a post, load it.
    if (opts.action === EDIT && opts.post) {
      this.setProperties({
        title: this.get('topic.title'),
        loading: true
      });

      Discourse.Post.load(opts.post.get('id')).then(function(result) {
        composer.setProperties({
          reply: result.get('raw'),
          originalText: result.get('raw'),
          loading: false
        });
      });
    } else if (opts.action === REPLY && opts.quote) {
      this.setProperties({
        reply: opts.quote,
        originalText: opts.quote
      });
    }
    if (opts.title) { this.set('title', opts.title); }
    this.set('originalText', opts.draft ? '' : this.get('reply'));

    return false;
  },

  save: function(opts) {
    if( !this.get('cantSubmitPost') ) {
      return this.get('editingPost') ? this.editPost(opts) : this.createPost(opts);
    }
  },

  /**
    Clear any state we have in preparation for a new composition.

    @method clearState
  **/
  clearState: function() {
    this.setProperties({
      originalText: null,
      reply: null,
      post: null,
      title: null,
      editReason: null
    });
  },

  // When you edit a post
  editPost: function(opts) {
    var post = this.get('post'),
        oldCooked = post.get('cooked'),
        composer = this;

    // Update the title if we've changed it
    if (this.get('title') && post.get('post_number') === 1) {
      var topic = this.get('topic');
      topic.setProperties({
        title: this.get('title'),
        fancy_title: Handlebars.Utils.escapeExpression(this.get('title')),
        category_id: parseInt(this.get('categoryId'), 10)
      });
      topic.save();
    }

    post.setProperties({
      raw: this.get('reply'),
      editReason: opts.editReason,
      imageSizes: opts.imageSizes,
      cooked: this.getCookedHtml()
    });
    this.set('composeState', CLOSED);

    return Em.Deferred.promise(function(promise) {
      post.save(function(result) {
        post.updateFromPost(result);
        composer.clearState();
      }, function(error) {
        var response = $.parseJSON(error.responseText);
        if (response && response.errors) {
          promise.reject(response.errors[0]);
        } else {
          promise.reject(I18n.t('generic_error'));
        }
        post.set('cooked', oldCooked);
        composer.set('composeState', OPEN);
      });
    });
  },

  // Create a new Post
  createPost: function(opts) {
    var post = this.get('post'),
        topic = this.get('topic'),
        currentUser = Discourse.User.current(),
        postStream = this.get('topic.postStream'),
        addedToStream = false;

    // Build the post object
    var createdPost = Discourse.Post.create({
      raw: this.get('reply'),
      title: this.get('title'),
      category: this.get('categoryId'),
      topic_id: this.get('topic.id'),
      imageSizes: opts.imageSizes,
      cooked: this.getCookedHtml(),
      reply_count: 0,
      display_username: currentUser.get('name'),
      username: currentUser.get('username'),
      user_id: currentUser.get('id'),
      uploaded_avatar_id: currentUser.get('uploaded_avatar_id'),
      user_custom_fields: currentUser.get('custom_fields'),
      archetype: this.get('archetypeId'),
      post_type: Discourse.Site.currentProp('post_types.regular'),
      target_usernames: this.get('targetUsernames'),
      actions_summary: Em.A(),
      moderator: currentUser.get('moderator'),
      admin: currentUser.get('admin'),
      yours: true,
      newPost: true,
      auto_close_time: Discourse.Utilities.timestampFromAutocloseString(this.get('auto_close_time'))
    });

    if(post) {
      createdPost.setProperties({
        reply_to_post_number: post.get('post_number'),
        reply_to_user: {
          username: post.get('username'),
          uploaded_avatar_id: post.get('uploaded_avatar_id')
        }
      });
    }

    // If we're in a topic, we can append the post instantly.
    if (postStream) {
      // If it's in reply to another post, increase the reply count
      if (post) {
        post.set('reply_count', (post.get('reply_count') || 0) + 1);
        post.set('replies', []);
      }
      if (!postStream.stagePost(createdPost, currentUser)) {

        // If we can't stage the post, return and don't save. We're likely currently
        // staging a post.
        return;
      }
    }

    var composer = this;
    return Em.Deferred.promise(function(promise) {

      composer.set('composeState', SAVING);
      createdPost.save(function(result) {
        var saving = true;

        createdPost.updateFromJson(result);

        if (topic) {
          // It's no longer a new post
          createdPost.set('newPost', false);
          topic.set('draft_sequence', result.draft_sequence);
          postStream.commitPost(createdPost);
          addedToStream = true;
        } else {
          // We created a new topic, let's show it.
          composer.set('composeState', CLOSED);
          saving = false;

          // Update topic_count for the category
          var category = Discourse.Site.currentProp('categories').find(function(x) { return x.get('id') === (parseInt(createdPost.get('category'),10) || 1); });
          if (category) category.incrementProperty('topic_count');
          Discourse.notifyPropertyChange('globalNotice');
        }

        composer.clearState();
        composer.set('createdPost', createdPost);

        if (addedToStream) {
          composer.set('composeState', CLOSED);
        } else if (saving) {
          composer.set('composeState', SAVING);
        }

        return promise.resolve({ post: result });
      }, function(error) {
        // If an error occurs
        if (postStream) {
          postStream.undoPost(createdPost);
        }
        composer.set('composeState', OPEN);

        // TODO extract error handling code
        var parsedError;
        try {
          var parsedJSON = $.parseJSON(error.responseText);
          if (parsedJSON.errors) {
            parsedError = parsedJSON.errors[0];
          } else if (parsedJSON.failed) {
            parsedError = parsedJSON.message;
          }
        }
        catch(ex) {
          parsedError = "Unknown error saving post, try again. Error: " + error.status + " " + error.statusText;
        }
        promise.reject(parsedError);
      });
    });
  },

  getCookedHtml: function() {
    return $('#wmd-preview').html().replace(/<span class="marker"><\/span>/g, '');
  },

  saveDraft: function() {
    // Do not save when drafts are disabled
    if (this.get('disableDrafts')) return;
    // Do not save when there is no reply
    if (!this.get('reply')) return;
    // Do not save when the reply's length is too small
    if (this.get('replyLength') < Discourse.SiteSettings.min_post_length) return;

    var data = {
      reply: this.get('reply'),
      action: this.get('action'),
      title: this.get('title'),
      categoryId: this.get('categoryId'),
      postId: this.get('post.id'),
      archetypeId: this.get('archetypeId'),
      metaData: this.get('metaData'),
      usernames: this.get('targetUsernames')
    };

    this.set('draftStatus', I18n.t('composer.saving_draft_tip'));

    var composer = this;

    // try to save the draft
    return Discourse.Draft.save(this.get('draftKey'), this.get('draftSequence'), data)
      .then(function() {
        composer.set('draftStatus', I18n.t('composer.saved_draft_tip'));
      }, function() {
        composer.set('draftStatus', I18n.t('composer.drafts_offline'));
      });
  },

  flashDraftStatusForNewUser: function() {
    var $draftStatus = $('#draft-status');
    if (Discourse.User.currentProp('trust_level') === 0) {
      $draftStatus.toggleClass('flash', true);
      setTimeout(function() { $draftStatus.removeClass('flash'); }, 250);
    }
  }

});

Discourse.Composer.reopenClass({

  open: function(opts) {
    var composer = Discourse.Composer.create();
    composer.open(opts);
    return composer;
  },

  loadDraft: function(draftKey, draftSequence, draft, topic) {
    var composer;
    try {
      if (draft && typeof draft === 'string') {
        draft = JSON.parse(draft);
      }
    } catch (error) {
      draft = null;
      Discourse.Draft.clear(draftKey, draftSequence);
    }
    if (draft && ((draft.title && draft.title !== '') || (draft.reply && draft.reply !== ''))) {
      composer = this.open({
        draftKey: draftKey,
        draftSequence: draftSequence,
        topic: topic,
        action: draft.action,
        title: draft.title,
        categoryId: draft.categoryId,
        postId: draft.postId,
        archetypeId: draft.archetypeId,
        reply: draft.reply,
        metaData: draft.metaData,
        usernames: draft.usernames,
        draft: true,
        composerState: DRAFT
      });
    }
    return composer;
  },

  // The status the compose view can have
  CLOSED: CLOSED,
  SAVING: SAVING,
  OPEN: OPEN,
  DRAFT: DRAFT,

  // The actions the composer can take
  CREATE_TOPIC: CREATE_TOPIC,
  PRIVATE_MESSAGE: PRIVATE_MESSAGE,
  REPLY: REPLY,
  EDIT: EDIT,

  // Draft key
  REPLY_AS_NEW_TOPIC_KEY: REPLY_AS_NEW_TOPIC_KEY
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/composer.js'] = "/**\n  A data model for representing the composer's current state\n\n  @class Composer\n  @extends Discourse.Model\n  @namespace Discourse\n  @module Discourse\n**/\n\n\nvar CLOSED = 'closed',\n    SAVING = 'saving',\n    OPEN = 'open',\n    DRAFT = 'draft',\n\n    // The actions the composer can take\n    CREATE_TOPIC = 'createTopic',\n    PRIVATE_MESSAGE = 'privateMessage',\n    REPLY = 'reply',\n    EDIT = 'edit',\n    REPLY_AS_NEW_TOPIC_KEY = \"reply_as_new_topic\";\n\nDiscourse.Composer = Discourse.Model.extend({\n\n  archetypes: function() {\n    return Discourse.Site.currentProp('archetypes');\n  }.property(),\n\n  creatingTopic: Em.computed.equal('action', CREATE_TOPIC),\n  creatingPrivateMessage: Em.computed.equal('action', PRIVATE_MESSAGE),\n  notCreatingPrivateMessage: Em.computed.not('creatingPrivateMessage'),\n\n  privateMessage: function(){\n    return this.get('creatingPrivateMessage') || this.get('topic.archetype') === 'private_message';\n  }.property('creatingPrivateMessage', 'topic'),\n\n  editingPost: Em.computed.equal('action', EDIT),\n  replyingToTopic: Em.computed.equal('action', REPLY),\n\n  viewOpen: Em.computed.equal('composeState', OPEN),\n  viewDraft: Em.computed.equal('composeState', DRAFT),\n\n\n  archetype: function() {\n    return this.get('archetypes').findProperty('id', this.get('archetypeId'));\n  }.property('archetypeId'),\n\n  archetypeChanged: function() {\n    return this.set('metaData', Em.Object.create());\n  }.observes('archetype'),\n\n  editingFirstPost: Em.computed.and('editingPost', 'post.firstPost'),\n  canEditTitle: Em.computed.or('creatingTopic', 'creatingPrivateMessage', 'editingFirstPost'),\n  canCategorize: Em.computed.and('canEditTitle', 'notCreatingPrivateMessage'),\n\n  // Determine the appropriate title for this action\n  actionTitle: function() {\n    var topic = this.get('topic');\n\n    var postLink, topicLink;\n    if (topic) {\n      var postNumber = this.get('post.post_number');\n      postLink = \"\u003ca href='\" + (topic.get('url')) + \"/\" + postNumber + \"'\u003e\" +\n        I18n.t(\"post.post_number\", { number: postNumber }) + \"\u003c/a\u003e\";\n      topicLink = \"\u003ca href='\" + (topic.get('url')) + \"'\u003e \" + (Handlebars.Utils.escapeExpression(topic.get('title'))) + \"\u003c/a\u003e\";\n    }\n\n    var postDescription,\n        post = this.get('post');\n\n    if (post) {\n      postDescription = I18n.t('post.' +  this.get('action'), {\n        link: postLink,\n        replyAvatar: Discourse.Utilities.tinyAvatar(post.get('avatar_template')),\n        username: this.get('post.username')\n      });\n\n      if (!Discourse.Mobile.mobileView) {\n        var replyUsername = post.get('reply_to_user.username');\n        var replyAvatarTemplate = post.get('reply_to_user.avatar_template');\n        if (replyUsername \u0026\u0026 replyAvatarTemplate \u0026\u0026 this.get('action') === EDIT) {\n          postDescription += \" \" + I18n.t(\"post.in_reply_to\") + \" \" + Discourse.Utilities.tinyAvatar(replyAvatarTemplate) + \" \" + replyUsername;\n        }\n      }\n    }\n\n    switch (this.get('action')) {\n      case PRIVATE_MESSAGE: return I18n.t('topic.private_message');\n      case CREATE_TOPIC: return I18n.t('topic.create_long');\n      case REPLY:\n      case EDIT:\n        if (postDescription) return postDescription;\n        if (topic) return I18n.t('post.reply_topic', { link: topicLink });\n    }\n\n  }.property('action', 'post', 'topic', 'topic.title'),\n\n  toggleText: function() {\n    return this.get('showPreview') ? I18n.t('composer.hide_preview') : I18n.t('composer.show_preview');\n  }.property('showPreview'),\n\n  hidePreview: Em.computed.not('showPreview'),\n\n  // Whether to disable the post button\n  cantSubmitPost: function() {\n\n    // Can't submit while loading\n    if (this.get('loading')) return true;\n\n    // Title is required when:\n    //    - creating a new topic\n    //    - editing the 1st post\n    //    - creating a private message\n\n    if (this.get('canEditTitle') \u0026\u0026 !this.get('titleLengthValid')) return true;\n\n    // Need at least one user when sending a private message\n    if ( this.get('creatingPrivateMessage') \u0026\u0026\n         this.get('targetUsernames') \u0026\u0026\n        (this.get('targetUsernames').trim() + ',').indexOf(',') === 0) {\n      return true;\n    }\n\n    // reply is always required\n    if (this.get('missingReplyCharacters') \u003e 0) return true;\n\n    return this.get('canCategorize') \u0026\u0026\n        !Discourse.SiteSettings.allow_uncategorized_topics \u0026\u0026\n        !this.get('categoryId') \u0026\u0026\n        !Discourse.User.currentProp('staff');\n  }.property('loading', 'canEditTitle', 'titleLength', 'targetUsernames', 'replyLength', 'categoryId', 'missingReplyCharacters'),\n\n  /**\n    Is the title's length valid?\n\n    @property titleLengthValid\n  **/\n  titleLengthValid: function() {\n    if (Discourse.User.currentProp('admin') \u0026\u0026 this.get('post.static_doc') \u0026\u0026 this.get('titleLength') \u003e 0) return true;\n    if (this.get('titleLength') \u003c this.get('minimumTitleLength')) return false;\n    return (this.get('titleLength') \u003c= Discourse.SiteSettings.max_topic_title_length);\n  }.property('minimumTitleLength', 'titleLength', 'post.static_doc'),\n\n  // The text for the save button\n  saveText: function() {\n    switch (this.get('action')) {\n      case EDIT: return I18n.t('composer.save_edit');\n      case REPLY: return I18n.t('composer.reply');\n      case CREATE_TOPIC: return I18n.t('composer.create_topic');\n      case PRIVATE_MESSAGE: return I18n.t('composer.create_pm');\n    }\n  }.property('action'),\n\n  hasMetaData: function() {\n    var metaData = this.get('metaData');\n    return metaData ? Em.isEmpty(Em.keys(this.get('metaData'))) : false;\n  }.property('metaData'),\n\n  /**\n    Did the user make changes to the reply?\n\n    @property replyDirty\n  **/\n  replyDirty: function() {\n    return this.get('reply') !== this.get('originalText');\n  }.property('reply', 'originalText'),\n\n  /**\n    Number of missing characters in the title until valid.\n\n    @property missingTitleCharacters\n  **/\n  missingTitleCharacters: function() {\n    return this.get('minimumTitleLength') - this.get('titleLength');\n  }.property('minimumTitleLength', 'titleLength'),\n\n  /**\n    Minimum number of characters for a title to be valid.\n\n    @property minimumTitleLength\n  **/\n  minimumTitleLength: function() {\n    if (this.get('privateMessage')) {\n      return Discourse.SiteSettings.min_private_message_title_length;\n    } else {\n      return Discourse.SiteSettings.min_topic_title_length;\n    }\n  }.property('privateMessage'),\n\n  /**\n    Number of missing characters in the reply until valid.\n\n    @property missingReplyCharacters\n  **/\n  missingReplyCharacters: function() {\n    return this.get('minimumPostLength') - this.get('replyLength');\n  }.property('minimumPostLength', 'replyLength'),\n\n  /**\n    Minimum number of characters for a post body to be valid.\n\n    @property minimumPostLength\n  **/\n  minimumPostLength: function() {\n    if( this.get('privateMessage') ) {\n      return Discourse.SiteSettings.min_private_message_post_length;\n    } else {\n      return Discourse.SiteSettings.min_post_length;\n    }\n  }.property('privateMessage'),\n\n  /**\n    Computes the length of the title minus non-significant whitespaces\n\n    @property titleLength\n  **/\n  titleLength: function() {\n    var title = this.get('title') || \"\";\n    return title.replace(/\\s+/img, \" \").trim().length;\n  }.property('title'),\n\n  /**\n    Computes the length of the reply minus the quote(s) and non-significant whitespaces\n\n    @property replyLength\n  **/\n  replyLength: function() {\n    var reply = this.get('reply') || \"\";\n    while (Discourse.Quote.REGEXP.test(reply)) { reply = reply.replace(Discourse.Quote.REGEXP, \"\"); }\n    return reply.replace(/\\s+/img, \" \").trim().length;\n  }.property('reply'),\n\n\n  updateDraftStatus: function() {\n    var $title = $('#reply-title'),\n        $reply = $('#wmd-input');\n\n    // 'title' is focused\n    if ($title.is(':focus')) {\n      var titleDiff = this.get('missingTitleCharacters');\n      if (titleDiff \u003e 0) {\n        this.flashDraftStatusForNewUser();\n        return this.set('draftStatus', I18n.t('composer.min_length.need_more_for_title', { n: titleDiff }));\n      }\n    // 'reply' is focused\n    } else if ($reply.is(':focus')) {\n      var replyDiff = this.get('missingReplyCharacters');\n      if (replyDiff \u003e 0) {\n        return this.set('draftStatus', I18n.t('composer.min_length.need_more_for_reply', { n: replyDiff }));\n      }\n    }\n\n    // hide the counters if the currently focused text field is OK\n    this.set('draftStatus', null);\n\n  }.observes('missingTitleCharacters', 'missingReplyCharacters'),\n\n  init: function() {\n    this._super();\n    var val = (Discourse.Mobile.mobileView ? false : (Discourse.KeyValueStore.get('composer.showPreview') || 'true'));\n    this.set('showPreview', val === 'true');\n    this.set('archetypeId', Discourse.Site.currentProp('default_archetype'));\n  },\n\n  /**\n    Append text to the current reply\n\n    @method appendText\n    @param {String} text the text to append\n  **/\n  appendText: function(text,position,opts) {\n    var reply = (this.get('reply') || '');\n    position = typeof(position) === \"number\" ? position : reply.length;\n\n    var before = reply.slice(0, position) || '';\n    var after = reply.slice(position) || '';\n\n    var stripped, i;\n\n    if(opts \u0026\u0026 opts.block){\n      if(before.trim() !== \"\"){\n        stripped = before.replace(/\\r/g, \"\");\n        for(i=0; i\u003c2; i++){\n          if(stripped[stripped.length - 1 - i] !== \"\\n\"){\n            before += \"\\n\";\n            position++;\n          }\n        }\n      }\n      if(after.trim() !== \"\"){\n        stripped = after.replace(/\\r/g, \"\");\n        for(i=0; i\u003c2; i++){\n          if(stripped[i] !== \"\\n\"){\n            after = \"\\n\" + after;\n          }\n        }\n      }\n    }\n\n    this.set('reply', before + text + after);\n  },\n\n  togglePreview: function() {\n    this.toggleProperty('showPreview');\n    Discourse.KeyValueStore.set({ key: 'composer.showPreview', value: this.get('showPreview') });\n  },\n\n  importQuote: function() {\n    var postStream = this.get('topic.postStream'),\n        postId = this.get('post.id');\n\n    if (!postId \u0026\u0026 postStream) {\n      postId = postStream.get('firstPostId');\n    }\n\n    // If we're editing a post, fetch the reply when importing a quote\n    if (this.get('editingPost')) {\n      var replyToPostNumber = this.get('post.reply_to_post_number');\n      if (replyToPostNumber) {\n        var replyPost = postStream.get('posts').findBy('post_number', replyToPostNumber);\n        if (replyPost) {\n          postId = replyPost.get('id');\n        }\n      }\n    }\n\n    // If there is no current post, use the post id from the stream\n    if (postId) {\n      this.set('loading', true);\n      var composer = this;\n      return Discourse.Post.load(postId).then(function(post) {\n        composer.appendText(Discourse.Quote.build(post, post.get('raw')));\n        composer.set('loading', false);\n      });\n    }\n  },\n\n  /*\n     Open a composer\n\n     opts:\n       action   - The action we're performing: edit, reply or createTopic\n       post     - The post we're replying to, if present\n       topic    - The topic we're replying to, if present\n       quote    - If we're opening a reply from a quote, the quote we're making\n  */\n  open: function(opts) {\n    if (!opts) opts = {};\n    this.set('loading', false);\n\n    var replyBlank = Em.isEmpty(this.get(\"reply\"));\n\n    var composer = this;\n    if (!replyBlank \u0026\u0026\n        (opts.action !== this.get('action') || ((opts.reply || opts.action === this.EDIT) \u0026\u0026 this.get('reply') !== this.get('originalText'))) \u0026\u0026\n        !opts.tested) {\n      opts.tested = true;\n      return;\n    }\n\n    if (!opts.draftKey) throw 'draft key is required';\n    if (opts.draftSequence === null) throw 'draft sequence is required';\n\n    this.setProperties({\n      draftKey: opts.draftKey,\n      draftSequence: opts.draftSequence,\n      composeState: opts.composerState || OPEN,\n      action: opts.action,\n      topic: opts.topic,\n      targetUsernames: opts.usernames\n    });\n\n    if (opts.post) {\n      this.set('post', opts.post);\n      if (!this.get('topic')) {\n        this.set('topic', opts.post.get('topic'));\n      }\n    }\n\n    this.setProperties({\n      categoryId: opts.categoryId || this.get('topic.category.id'),\n      archetypeId: opts.archetypeId || Discourse.Site.currentProp('default_archetype'),\n      metaData: opts.metaData ? Em.Object.create(opts.metaData) : null,\n      reply: opts.reply || this.get(\"reply\") || \"\"\n    });\n\n    if (opts.postId) {\n      this.set('loading', true);\n      Discourse.Post.load(opts.postId).then(function(result) {\n        composer.set('post', result);\n        composer.set('loading', false);\n      });\n    }\n\n    // If we are editing a post, load it.\n    if (opts.action === EDIT \u0026\u0026 opts.post) {\n      this.setProperties({\n        title: this.get('topic.title'),\n        loading: true\n      });\n\n      Discourse.Post.load(opts.post.get('id')).then(function(result) {\n        composer.setProperties({\n          reply: result.get('raw'),\n          originalText: result.get('raw'),\n          loading: false\n        });\n      });\n    } else if (opts.action === REPLY \u0026\u0026 opts.quote) {\n      this.setProperties({\n        reply: opts.quote,\n        originalText: opts.quote\n      });\n    }\n    if (opts.title) { this.set('title', opts.title); }\n    this.set('originalText', opts.draft ? '' : this.get('reply'));\n\n    return false;\n  },\n\n  save: function(opts) {\n    if( !this.get('cantSubmitPost') ) {\n      return this.get('editingPost') ? this.editPost(opts) : this.createPost(opts);\n    }\n  },\n\n  /**\n    Clear any state we have in preparation for a new composition.\n\n    @method clearState\n  **/\n  clearState: function() {\n    this.setProperties({\n      originalText: null,\n      reply: null,\n      post: null,\n      title: null,\n      editReason: null\n    });\n  },\n\n  // When you edit a post\n  editPost: function(opts) {\n    var post = this.get('post'),\n        oldCooked = post.get('cooked'),\n        composer = this;\n\n    // Update the title if we've changed it\n    if (this.get('title') \u0026\u0026 post.get('post_number') === 1) {\n      var topic = this.get('topic');\n      topic.setProperties({\n        title: this.get('title'),\n        fancy_title: Handlebars.Utils.escapeExpression(this.get('title')),\n        category_id: parseInt(this.get('categoryId'), 10)\n      });\n      topic.save();\n    }\n\n    post.setProperties({\n      raw: this.get('reply'),\n      editReason: opts.editReason,\n      imageSizes: opts.imageSizes,\n      cooked: this.getCookedHtml()\n    });\n    this.set('composeState', CLOSED);\n\n    return Em.Deferred.promise(function(promise) {\n      post.save(function(result) {\n        post.updateFromPost(result);\n        composer.clearState();\n      }, function(error) {\n        var response = $.parseJSON(error.responseText);\n        if (response \u0026\u0026 response.errors) {\n          promise.reject(response.errors[0]);\n        } else {\n          promise.reject(I18n.t('generic_error'));\n        }\n        post.set('cooked', oldCooked);\n        composer.set('composeState', OPEN);\n      });\n    });\n  },\n\n  // Create a new Post\n  createPost: function(opts) {\n    var post = this.get('post'),\n        topic = this.get('topic'),\n        currentUser = Discourse.User.current(),\n        postStream = this.get('topic.postStream'),\n        addedToStream = false;\n\n    // Build the post object\n    var createdPost = Discourse.Post.create({\n      raw: this.get('reply'),\n      title: this.get('title'),\n      category: this.get('categoryId'),\n      topic_id: this.get('topic.id'),\n      imageSizes: opts.imageSizes,\n      cooked: this.getCookedHtml(),\n      reply_count: 0,\n      display_username: currentUser.get('name'),\n      username: currentUser.get('username'),\n      user_id: currentUser.get('id'),\n      uploaded_avatar_id: currentUser.get('uploaded_avatar_id'),\n      user_custom_fields: currentUser.get('custom_fields'),\n      archetype: this.get('archetypeId'),\n      post_type: Discourse.Site.currentProp('post_types.regular'),\n      target_usernames: this.get('targetUsernames'),\n      actions_summary: Em.A(),\n      moderator: currentUser.get('moderator'),\n      admin: currentUser.get('admin'),\n      yours: true,\n      newPost: true,\n      auto_close_time: Discourse.Utilities.timestampFromAutocloseString(this.get('auto_close_time'))\n    });\n\n    if(post) {\n      createdPost.setProperties({\n        reply_to_post_number: post.get('post_number'),\n        reply_to_user: {\n          username: post.get('username'),\n          uploaded_avatar_id: post.get('uploaded_avatar_id')\n        }\n      });\n    }\n\n    // If we're in a topic, we can append the post instantly.\n    if (postStream) {\n      // If it's in reply to another post, increase the reply count\n      if (post) {\n        post.set('reply_count', (post.get('reply_count') || 0) + 1);\n        post.set('replies', []);\n      }\n      if (!postStream.stagePost(createdPost, currentUser)) {\n\n        // If we can't stage the post, return and don't save. We're likely currently\n        // staging a post.\n        return;\n      }\n    }\n\n    var composer = this;\n    return Em.Deferred.promise(function(promise) {\n\n      composer.set('composeState', SAVING);\n      createdPost.save(function(result) {\n        var saving = true;\n\n        createdPost.updateFromJson(result);\n\n        if (topic) {\n          // It's no longer a new post\n          createdPost.set('newPost', false);\n          topic.set('draft_sequence', result.draft_sequence);\n          postStream.commitPost(createdPost);\n          addedToStream = true;\n        } else {\n          // We created a new topic, let's show it.\n          composer.set('composeState', CLOSED);\n          saving = false;\n\n          // Update topic_count for the category\n          var category = Discourse.Site.currentProp('categories').find(function(x) { return x.get('id') === (parseInt(createdPost.get('category'),10) || 1); });\n          if (category) category.incrementProperty('topic_count');\n          Discourse.notifyPropertyChange('globalNotice');\n        }\n\n        composer.clearState();\n        composer.set('createdPost', createdPost);\n\n        if (addedToStream) {\n          composer.set('composeState', CLOSED);\n        } else if (saving) {\n          composer.set('composeState', SAVING);\n        }\n\n        return promise.resolve({ post: result });\n      }, function(error) {\n        // If an error occurs\n        if (postStream) {\n          postStream.undoPost(createdPost);\n        }\n        composer.set('composeState', OPEN);\n\n        // TODO extract error handling code\n        var parsedError;\n        try {\n          var parsedJSON = $.parseJSON(error.responseText);\n          if (parsedJSON.errors) {\n            parsedError = parsedJSON.errors[0];\n          } else if (parsedJSON.failed) {\n            parsedError = parsedJSON.message;\n          }\n        }\n        catch(ex) {\n          parsedError = \"Unknown error saving post, try again. Error: \" + error.status + \" \" + error.statusText;\n        }\n        promise.reject(parsedError);\n      });\n    });\n  },\n\n  getCookedHtml: function() {\n    return $('#wmd-preview').html().replace(/\u003cspan class=\"marker\"\u003e\u003c\\/span\u003e/g, '');\n  },\n\n  saveDraft: function() {\n    // Do not save when drafts are disabled\n    if (this.get('disableDrafts')) return;\n    // Do not save when there is no reply\n    if (!this.get('reply')) return;\n    // Do not save when the reply's length is too small\n    if (this.get('replyLength') \u003c Discourse.SiteSettings.min_post_length) return;\n\n    var data = {\n      reply: this.get('reply'),\n      action: this.get('action'),\n      title: this.get('title'),\n      categoryId: this.get('categoryId'),\n      postId: this.get('post.id'),\n      archetypeId: this.get('archetypeId'),\n      metaData: this.get('metaData'),\n      usernames: this.get('targetUsernames')\n    };\n\n    this.set('draftStatus', I18n.t('composer.saving_draft_tip'));\n\n    var composer = this;\n\n    // try to save the draft\n    return Discourse.Draft.save(this.get('draftKey'), this.get('draftSequence'), data)\n      .then(function() {\n        composer.set('draftStatus', I18n.t('composer.saved_draft_tip'));\n      }, function() {\n        composer.set('draftStatus', I18n.t('composer.drafts_offline'));\n      });\n  },\n\n  flashDraftStatusForNewUser: function() {\n    var $draftStatus = $('#draft-status');\n    if (Discourse.User.currentProp('trust_level') === 0) {\n      $draftStatus.toggleClass('flash', true);\n      setTimeout(function() { $draftStatus.removeClass('flash'); }, 250);\n    }\n  }\n\n});\n\nDiscourse.Composer.reopenClass({\n\n  open: function(opts) {\n    var composer = Discourse.Composer.create();\n    composer.open(opts);\n    return composer;\n  },\n\n  loadDraft: function(draftKey, draftSequence, draft, topic) {\n    var composer;\n    try {\n      if (draft \u0026\u0026 typeof draft === 'string') {\n        draft = JSON.parse(draft);\n      }\n    } catch (error) {\n      draft = null;\n      Discourse.Draft.clear(draftKey, draftSequence);\n    }\n    if (draft \u0026\u0026 ((draft.title \u0026\u0026 draft.title !== '') || (draft.reply \u0026\u0026 draft.reply !== ''))) {\n      composer = this.open({\n        draftKey: draftKey,\n        draftSequence: draftSequence,\n        topic: topic,\n        action: draft.action,\n        title: draft.title,\n        categoryId: draft.categoryId,\n        postId: draft.postId,\n        archetypeId: draft.archetypeId,\n        reply: draft.reply,\n        metaData: draft.metaData,\n        usernames: draft.usernames,\n        draft: true,\n        composerState: DRAFT\n      });\n    }\n    return composer;\n  },\n\n  // The status the compose view can have\n  CLOSED: CLOSED,\n  SAVING: SAVING,\n  OPEN: OPEN,\n  DRAFT: DRAFT,\n\n  // The actions the composer can take\n  CREATE_TOPIC: CREATE_TOPIC,\n  PRIVATE_MESSAGE: PRIVATE_MESSAGE,\n  REPLY: REPLY,\n  EDIT: EDIT,\n\n  // Draft key\n  REPLY_AS_NEW_TOPIC_KEY: REPLY_AS_NEW_TOPIC_KEY\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

Discourse.Topic = Discourse.Model.extend({

  postStream: function() {
    return Discourse.PostStream.create({topic: this});
  }.property(),

  details: function() {
    return Discourse.TopicDetails.create({topic: this});
  }.property(),

  invisible: Em.computed.not('visible'),
  deleted: Em.computed.notEmpty('deleted_at'),

  searchContext: function() {
    return ({ type: 'topic', id: this.get('id') });
  }.property('id'),

  category: function() {
    var categoryId = this.get('category_id');
    if (categoryId) {
      return Discourse.Category.list().findProperty('id', categoryId);
    }

    var categoryName = this.get('categoryName');
    if (categoryName) {
      return Discourse.Category.list().findProperty('name', categoryName);
    }
    return null;
  }.property('category_id', 'categoryName'),

  categoryClass: function() {
    return 'category-' + Discourse.Category.slugFor(this.get('category'));
  }.property('category'),

  shareUrl: function(){
    var user = Discourse.User.current();
    return this.get('url') + (user ? '?u=' + user.get('username_lower') : '');
  }.property('url'),

  url: function() {
    var slug = this.get('slug');
    if (slug.trim().length === 0) {
      slug = "topic";
    }
    return Discourse.getURL("/t/") + slug + "/" + (this.get('id'));
  }.property('id', 'slug'),

  // Helper to build a Url with a post number
  urlForPostNumber: function(postNumber) {
    var url = this.get('url');
    if (postNumber && (postNumber > 0)) {
      url += "/" + postNumber;
    }
    return url;
  },

  totalUnread: function() {
    var count = (this.get('unread') || 0) + (this.get('new_posts') || 0);
    return count > 0 ? count : null;
  }.property('new_posts', 'unread'),

  lastReadUrl: function() {
    return this.urlForPostNumber(this.get('last_read_post_number'));
  }.property('url', 'last_read_post_number'),

  lastUnreadUrl: function() {
    var postNumber = Math.min(this.get('last_read_post_number') + 1, this.get('highest_post_number'));
    return this.urlForPostNumber(postNumber);
  }.property('url', 'last_read_post_number', 'highest_post_number'),

  lastPostUrl: function() {
    return this.urlForPostNumber(this.get('highest_post_number'));
  }.property('url', 'highest_post_number'),

  firstPostUrl: function () {
    return this.urlForPostNumber(1);
  }.property('url'),

  lastPosterUrl: function() {
    return Discourse.getURL("/users/") + this.get("last_poster.username");
  }.property('last_poster'),

  // The amount of new posts to display. It might be different than what the server
  // tells us if we are still asynchronously flushing our "recently read" data.
  // So take what the browser has seen into consideration.
  displayNewPosts: function() {
    var delta, result;
    var highestSeen = Discourse.Session.currentProp('highestSeenByTopic')[this.get('id')];
    if (highestSeen) {
      delta = highestSeen - this.get('last_read_post_number');
      if (delta > 0) {
        result = this.get('new_posts') - delta;
        if (result < 0) {
          result = 0;
        }
        return result;
      }
    }
    return this.get('new_posts');
  }.property('new_posts', 'id'),

  viewsHeat: function() {
    var v = this.get('views');
    if( v >= Discourse.SiteSettings.topic_views_heat_high )   return 'heatmap-high';
    if( v >= Discourse.SiteSettings.topic_views_heat_medium ) return 'heatmap-med';
    if( v >= Discourse.SiteSettings.topic_views_heat_low )    return 'heatmap-low';
    return null;
  }.property('views'),

  archetypeObject: function() {
    return Discourse.Site.currentProp('archetypes').findProperty('id', this.get('archetype'));
  }.property('archetype'),

  isPrivateMessage: Em.computed.equal('archetype', 'private_message'),
  isBanner: Em.computed.equal('archetype', 'banner'),

  toggleStatus: function(property) {
    this.toggleProperty(property);
    this.saveStatus(property, this.get(property) ? true : false);
  },

  setStatus: function(property, value) {
    this.set(property, value);
    this.saveStatus(property, value);
  },

  saveStatus: function(property, value) {
    if (property === 'closed' && value === true) {
      this.set('details.auto_close_at', null);
    }
    if (property === 'pinned') {
      this.set('pinned_at', value ? moment() : null);
    }
    return Discourse.ajax(this.get('url') + "/status", {
      type: 'PUT',
      data: {status: property, enabled: value ? 'true' : 'false' }
    });
  },

  makeBanner: function() {
    var self = this;
    return Discourse.ajax('/t/' + this.get('id') + '/make-banner', { type: 'PUT' })
           .then(function () { self.set('archetype', 'banner'); });
  },

  removeBanner: function() {
    var self = this;
    return Discourse.ajax('/t/' + this.get('id') + '/remove-banner', { type: 'PUT' })
           .then(function () { self.set('archetype', 'regular'); });
  },

  starTooltipKey: function() {
    return this.get('starred') ? 'starred.help.unstar' : 'starred.help.star';
  }.property('starred'),

  starTooltip: function() {
    return I18n.t(this.get('starTooltipKey'));
  }.property('starTooltipKey'),

  estimatedReadingTime: function() {
    var wordCount = this.get('word_count');
    if (!wordCount) return;

    // Avg for 500 words per minute when you account for skimming
    return Math.floor(wordCount / 500.0);
  }.property('word_count'),

  toggleStar: function() {
    var topic = this;
    topic.toggleProperty('starred');
    return Discourse.ajax({
      url: "" + (this.get('url')) + "/star",
      type: 'PUT',
      data: { starred: topic.get('starred') ? true : false }
    }).then(null, function (error) {
      topic.toggleProperty('starred');

      if (error && error.responseText) {
        bootbox.alert($.parseJSON(error.responseText).errors);
      } else {
        bootbox.alert(I18n.t('generic_error'));
      }
    });
  },

  // Save any changes we've made to the model
  save: function() {
    // Don't save unless we can
    if (!this.get('details.can_edit')) return;

    return Discourse.ajax(this.get('url'), {
      type: 'PUT',
      data: { title: this.get('title'), category_id: this.get('category.id') }
    });
  },

  /**
    Invite a user to this topic

    @method createInvite
    @param {String} emailOrUsername The email or username of the user to be invited
  **/
  createInvite: function(emailOrUsername, groupNames) {
    return Discourse.ajax("/t/" + this.get('id') + "/invite", {
      type: 'POST',
      data: { user: emailOrUsername, group_names: groupNames }
    });
  },

  // Delete this topic
  destroy: function(deleted_by) {
    this.setProperties({
      deleted_at: new Date(),
      deleted_by: deleted_by,
      'details.can_delete': false,
      'details.can_recover': true
    });
    return Discourse.ajax("/t/" + this.get('id'), { type: 'DELETE' });
  },

  // Recover this topic if deleted
  recover: function() {
    this.setProperties({
      deleted_at: null,
      deleted_by: null,
      'details.can_delete': true,
      'details.can_recover': false
    });
    return Discourse.ajax("/t/" + this.get('id') + "/recover", { type: 'PUT' });
  },

  // Update our attributes from a JSON result
  updateFromJson: function(json) {
    this.get('details').updateFromJson(json.details);

    var keys = Object.keys(json);
    keys.removeObject('details');
    keys.removeObject('post_stream');

    var topic = this;
    keys.forEach(function (key) {
      topic.set(key, json[key]);
    });

  },

  isPinnedUncategorized: function() {
    return this.get('pinned') && this.get('category.isUncategorizedCategory');
  }.property('pinned', 'category.isUncategorizedCategory'),

  /**
    Clears the pin from a topic for the currently logged in user

    @method clearPin
  **/
  clearPin: function() {
    var topic = this;

    // Clear the pin optimistically from the object
    topic.set('pinned', false);
    topic.set('unpinned', true);

    Discourse.ajax("/t/" + this.get('id') + "/clear-pin", {
      type: 'PUT'
    }).then(null, function() {
      // On error, put the pin back
      topic.set('pinned', true);
      topic.set('unpinned', false);
    });
  },

  /**
    Re-pins a topic with a cleared pin

    @method rePin
  **/
  rePin: function() {
    var topic = this;

    // Clear the pin optimistically from the object
    topic.set('pinned', true);
    topic.set('unpinned', false);

    Discourse.ajax("/t/" + this.get('id') + "/re-pin", {
      type: 'PUT'
    }).then(null, function() {
      // On error, put the pin back
      topic.set('pinned', true);
      topic.set('unpinned', false);
    });
  },

  // Is the reply to a post directly below it?
  isReplyDirectlyBelow: function(post) {
    var posts = this.get('postStream.posts');
    var postNumber = post.get('post_number');
    if (!posts) return;

    var postBelow = posts[posts.indexOf(post) + 1];

    // If the post directly below's reply_to_post_number is our post number or we are quoted,
    // it's considered directly below.
    //
    // TODO: we don't carry information about quoting, this leaves this code fairly fragile
    //  instead we should start shipping quote meta data with posts, but this will add at least
    //  1 query to the topics page
    //
    return postBelow && (postBelow.get('reply_to_post_number') === postNumber ||
        postBelow.get('cooked').indexOf('data-post="'+ postNumber + '"') >= 0
    );
  },

  excerptNotEmpty: Em.computed.notEmpty('excerpt'),
  hasExcerpt: Em.computed.and('pinned', 'excerptNotEmpty'),

  excerptTruncated: function() {
    var e = this.get('excerpt');
    return( e && e.substr(e.length - 8,8) === '&hellip;' );
  }.property('excerpt'),

  readLastPost: Discourse.computed.propertyEqual('last_read_post_number', 'highest_post_number'),
  canCleanPin: Em.computed.and('pinned', 'readLastPost')

});

Discourse.Topic.reopenClass({
  NotificationLevel: {
    WATCHING: 3,
    TRACKING: 2,
    REGULAR: 1,
    MUTED: 0
  },

  createActionSummary: function(result) {
    if (result.actions_summary) {
      var lookup = Em.Object.create();
      result.actions_summary = result.actions_summary.map(function(a) {
        a.post = result;
        a.actionType = Discourse.Site.current().postActionTypeById(a.id);
        var actionSummary = Discourse.ActionSummary.create(a);
        lookup.set(a.actionType.get('name_key'), actionSummary);
        return actionSummary;
      });
      result.set('actionByName', lookup);
    }
  },

  create: function() {
    var result = this._super.apply(this, arguments);
    this.createActionSummary(result);
    return result;
  },

  /**
    Find similar topics to a given title and body

    @method findSimilar
    @param {String} title The current title
    @param {String} body The current body
    @returns A promise that will resolve to the topics
  **/
  findSimilarTo: function(title, body) {
    return Discourse.ajax("/topics/similar_to", { data: {title: title, raw: body} }).then(function (results) {
      if (Array.isArray(results)) {
        return results.map(function(topic) { return Discourse.Topic.create(topic); });
      } else {
        return Ember.A();
      }
    });
  },

  // Load a topic, but accepts a set of filters
  find: function(topicId, opts) {
    var url = Discourse.getURL("/t/") + topicId;

    if (opts.nearPost) {
      url += "/" + opts.nearPost;
    }

    var data = {};
    if (opts.postsAfter) {
      data.posts_after = opts.postsAfter;
    }
    if (opts.postsBefore) {
      data.posts_before = opts.postsBefore;
    }
    if (opts.trackVisit) {
      data.track_visit = true;
    }

    // Add username filters if we have them
    if (opts.userFilters && opts.userFilters.length > 0) {
      data.username_filters = [];
      opts.userFilters.forEach(function(username) {
        data.username_filters.push(username);
      });
      data.show_deleted = true;
    }

    // Add the summary of filter if we have it
    if (opts.summary === true) {
      data.summary = true;
    }

    // Check the preload store. If not, load it via JSON
    return Discourse.ajax(url + ".json", {data: data});
  },

  mergeTopic: function(topicId, destinationTopicId) {
    var promise = Discourse.ajax("/t/" + topicId + "/merge-topic", {
      type: 'POST',
      data: {destination_topic_id: destinationTopicId}
    }).then(function (result) {
      if (result.success) return result;
      promise.reject(new Error("error merging topic"));
    });
    return promise;
  },

  movePosts: function(topicId, opts) {
    var promise = Discourse.ajax("/t/" + topicId + "/move-posts", {
      type: 'POST',
      data: opts
    }).then(function (result) {
      if (result.success) return result;
      promise.reject(new Error("error moving posts topic"));
    });
    return promise;
  },

  changeOwners: function(topicId, opts) {
    var promise = Discourse.ajax("/t/" + topicId + "/change-owner", {
      type: 'POST',
      data: opts
    }).then(function (result) {
      if (result.success) return result;
      promise.reject(new Error("error changing ownership of posts"));
    });
    return promise;
  },

  bulkOperation: function(topics, operation) {
    return Discourse.ajax("/topics/bulk", {
      type: 'PUT',
      data: {
        topic_ids: topics.map(function(t) { return t.get('id'); }),
        operation: operation
      }
    });
  },

  bulkOperationByFilter: function(filter, operation) {
    return Discourse.ajax("/topics/bulk", {
      type: 'PUT',
      data: { filter: filter, operation: operation }
    });
  },

  resetNew: function() {
    return Discourse.ajax("/topics/reset-new", {type: 'PUT'});
  }


});




// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/topic.js'] = "Discourse.Topic = Discourse.Model.extend({\n\n  postStream: function() {\n    return Discourse.PostStream.create({topic: this});\n  }.property(),\n\n  details: function() {\n    return Discourse.TopicDetails.create({topic: this});\n  }.property(),\n\n  invisible: Em.computed.not('visible'),\n  deleted: Em.computed.notEmpty('deleted_at'),\n\n  searchContext: function() {\n    return ({ type: 'topic', id: this.get('id') });\n  }.property('id'),\n\n  category: function() {\n    var categoryId = this.get('category_id');\n    if (categoryId) {\n      return Discourse.Category.list().findProperty('id', categoryId);\n    }\n\n    var categoryName = this.get('categoryName');\n    if (categoryName) {\n      return Discourse.Category.list().findProperty('name', categoryName);\n    }\n    return null;\n  }.property('category_id', 'categoryName'),\n\n  categoryClass: function() {\n    return 'category-' + Discourse.Category.slugFor(this.get('category'));\n  }.property('category'),\n\n  shareUrl: function(){\n    var user = Discourse.User.current();\n    return this.get('url') + (user ? '?u=' + user.get('username_lower') : '');\n  }.property('url'),\n\n  url: function() {\n    var slug = this.get('slug');\n    if (slug.trim().length === 0) {\n      slug = \"topic\";\n    }\n    return Discourse.getURL(\"/t/\") + slug + \"/\" + (this.get('id'));\n  }.property('id', 'slug'),\n\n  // Helper to build a Url with a post number\n  urlForPostNumber: function(postNumber) {\n    var url = this.get('url');\n    if (postNumber \u0026\u0026 (postNumber \u003e 0)) {\n      url += \"/\" + postNumber;\n    }\n    return url;\n  },\n\n  totalUnread: function() {\n    var count = (this.get('unread') || 0) + (this.get('new_posts') || 0);\n    return count \u003e 0 ? count : null;\n  }.property('new_posts', 'unread'),\n\n  lastReadUrl: function() {\n    return this.urlForPostNumber(this.get('last_read_post_number'));\n  }.property('url', 'last_read_post_number'),\n\n  lastUnreadUrl: function() {\n    var postNumber = Math.min(this.get('last_read_post_number') + 1, this.get('highest_post_number'));\n    return this.urlForPostNumber(postNumber);\n  }.property('url', 'last_read_post_number', 'highest_post_number'),\n\n  lastPostUrl: function() {\n    return this.urlForPostNumber(this.get('highest_post_number'));\n  }.property('url', 'highest_post_number'),\n\n  firstPostUrl: function () {\n    return this.urlForPostNumber(1);\n  }.property('url'),\n\n  lastPosterUrl: function() {\n    return Discourse.getURL(\"/users/\") + this.get(\"last_poster.username\");\n  }.property('last_poster'),\n\n  // The amount of new posts to display. It might be different than what the server\n  // tells us if we are still asynchronously flushing our \"recently read\" data.\n  // So take what the browser has seen into consideration.\n  displayNewPosts: function() {\n    var delta, result;\n    var highestSeen = Discourse.Session.currentProp('highestSeenByTopic')[this.get('id')];\n    if (highestSeen) {\n      delta = highestSeen - this.get('last_read_post_number');\n      if (delta \u003e 0) {\n        result = this.get('new_posts') - delta;\n        if (result \u003c 0) {\n          result = 0;\n        }\n        return result;\n      }\n    }\n    return this.get('new_posts');\n  }.property('new_posts', 'id'),\n\n  viewsHeat: function() {\n    var v = this.get('views');\n    if( v \u003e= Discourse.SiteSettings.topic_views_heat_high )   return 'heatmap-high';\n    if( v \u003e= Discourse.SiteSettings.topic_views_heat_medium ) return 'heatmap-med';\n    if( v \u003e= Discourse.SiteSettings.topic_views_heat_low )    return 'heatmap-low';\n    return null;\n  }.property('views'),\n\n  archetypeObject: function() {\n    return Discourse.Site.currentProp('archetypes').findProperty('id', this.get('archetype'));\n  }.property('archetype'),\n\n  isPrivateMessage: Em.computed.equal('archetype', 'private_message'),\n  isBanner: Em.computed.equal('archetype', 'banner'),\n\n  toggleStatus: function(property) {\n    this.toggleProperty(property);\n    this.saveStatus(property, this.get(property) ? true : false);\n  },\n\n  setStatus: function(property, value) {\n    this.set(property, value);\n    this.saveStatus(property, value);\n  },\n\n  saveStatus: function(property, value) {\n    if (property === 'closed' \u0026\u0026 value === true) {\n      this.set('details.auto_close_at', null);\n    }\n    if (property === 'pinned') {\n      this.set('pinned_at', value ? moment() : null);\n    }\n    return Discourse.ajax(this.get('url') + \"/status\", {\n      type: 'PUT',\n      data: {status: property, enabled: value ? 'true' : 'false' }\n    });\n  },\n\n  makeBanner: function() {\n    var self = this;\n    return Discourse.ajax('/t/' + this.get('id') + '/make-banner', { type: 'PUT' })\n           .then(function () { self.set('archetype', 'banner'); });\n  },\n\n  removeBanner: function() {\n    var self = this;\n    return Discourse.ajax('/t/' + this.get('id') + '/remove-banner', { type: 'PUT' })\n           .then(function () { self.set('archetype', 'regular'); });\n  },\n\n  starTooltipKey: function() {\n    return this.get('starred') ? 'starred.help.unstar' : 'starred.help.star';\n  }.property('starred'),\n\n  starTooltip: function() {\n    return I18n.t(this.get('starTooltipKey'));\n  }.property('starTooltipKey'),\n\n  estimatedReadingTime: function() {\n    var wordCount = this.get('word_count');\n    if (!wordCount) return;\n\n    // Avg for 500 words per minute when you account for skimming\n    return Math.floor(wordCount / 500.0);\n  }.property('word_count'),\n\n  toggleStar: function() {\n    var topic = this;\n    topic.toggleProperty('starred');\n    return Discourse.ajax({\n      url: \"\" + (this.get('url')) + \"/star\",\n      type: 'PUT',\n      data: { starred: topic.get('starred') ? true : false }\n    }).then(null, function (error) {\n      topic.toggleProperty('starred');\n\n      if (error \u0026\u0026 error.responseText) {\n        bootbox.alert($.parseJSON(error.responseText).errors);\n      } else {\n        bootbox.alert(I18n.t('generic_error'));\n      }\n    });\n  },\n\n  // Save any changes we've made to the model\n  save: function() {\n    // Don't save unless we can\n    if (!this.get('details.can_edit')) return;\n\n    return Discourse.ajax(this.get('url'), {\n      type: 'PUT',\n      data: { title: this.get('title'), category_id: this.get('category.id') }\n    });\n  },\n\n  /**\n    Invite a user to this topic\n\n    @method createInvite\n    @param {String} emailOrUsername The email or username of the user to be invited\n  **/\n  createInvite: function(emailOrUsername, groupNames) {\n    return Discourse.ajax(\"/t/\" + this.get('id') + \"/invite\", {\n      type: 'POST',\n      data: { user: emailOrUsername, group_names: groupNames }\n    });\n  },\n\n  // Delete this topic\n  destroy: function(deleted_by) {\n    this.setProperties({\n      deleted_at: new Date(),\n      deleted_by: deleted_by,\n      'details.can_delete': false,\n      'details.can_recover': true\n    });\n    return Discourse.ajax(\"/t/\" + this.get('id'), { type: 'DELETE' });\n  },\n\n  // Recover this topic if deleted\n  recover: function() {\n    this.setProperties({\n      deleted_at: null,\n      deleted_by: null,\n      'details.can_delete': true,\n      'details.can_recover': false\n    });\n    return Discourse.ajax(\"/t/\" + this.get('id') + \"/recover\", { type: 'PUT' });\n  },\n\n  // Update our attributes from a JSON result\n  updateFromJson: function(json) {\n    this.get('details').updateFromJson(json.details);\n\n    var keys = Object.keys(json);\n    keys.removeObject('details');\n    keys.removeObject('post_stream');\n\n    var topic = this;\n    keys.forEach(function (key) {\n      topic.set(key, json[key]);\n    });\n\n  },\n\n  isPinnedUncategorized: function() {\n    return this.get('pinned') \u0026\u0026 this.get('category.isUncategorizedCategory');\n  }.property('pinned', 'category.isUncategorizedCategory'),\n\n  /**\n    Clears the pin from a topic for the currently logged in user\n\n    @method clearPin\n  **/\n  clearPin: function() {\n    var topic = this;\n\n    // Clear the pin optimistically from the object\n    topic.set('pinned', false);\n    topic.set('unpinned', true);\n\n    Discourse.ajax(\"/t/\" + this.get('id') + \"/clear-pin\", {\n      type: 'PUT'\n    }).then(null, function() {\n      // On error, put the pin back\n      topic.set('pinned', true);\n      topic.set('unpinned', false);\n    });\n  },\n\n  /**\n    Re-pins a topic with a cleared pin\n\n    @method rePin\n  **/\n  rePin: function() {\n    var topic = this;\n\n    // Clear the pin optimistically from the object\n    topic.set('pinned', true);\n    topic.set('unpinned', false);\n\n    Discourse.ajax(\"/t/\" + this.get('id') + \"/re-pin\", {\n      type: 'PUT'\n    }).then(null, function() {\n      // On error, put the pin back\n      topic.set('pinned', true);\n      topic.set('unpinned', false);\n    });\n  },\n\n  // Is the reply to a post directly below it?\n  isReplyDirectlyBelow: function(post) {\n    var posts = this.get('postStream.posts');\n    var postNumber = post.get('post_number');\n    if (!posts) return;\n\n    var postBelow = posts[posts.indexOf(post) + 1];\n\n    // If the post directly below's reply_to_post_number is our post number or we are quoted,\n    // it's considered directly below.\n    //\n    // TODO: we don't carry information about quoting, this leaves this code fairly fragile\n    //  instead we should start shipping quote meta data with posts, but this will add at least\n    //  1 query to the topics page\n    //\n    return postBelow \u0026\u0026 (postBelow.get('reply_to_post_number') === postNumber ||\n        postBelow.get('cooked').indexOf('data-post=\"'+ postNumber + '\"') \u003e= 0\n    );\n  },\n\n  excerptNotEmpty: Em.computed.notEmpty('excerpt'),\n  hasExcerpt: Em.computed.and('pinned', 'excerptNotEmpty'),\n\n  excerptTruncated: function() {\n    var e = this.get('excerpt');\n    return( e \u0026\u0026 e.substr(e.length - 8,8) === '\u0026hellip;' );\n  }.property('excerpt'),\n\n  readLastPost: Discourse.computed.propertyEqual('last_read_post_number', 'highest_post_number'),\n  canCleanPin: Em.computed.and('pinned', 'readLastPost')\n\n});\n\nDiscourse.Topic.reopenClass({\n  NotificationLevel: {\n    WATCHING: 3,\n    TRACKING: 2,\n    REGULAR: 1,\n    MUTED: 0\n  },\n\n  createActionSummary: function(result) {\n    if (result.actions_summary) {\n      var lookup = Em.Object.create();\n      result.actions_summary = result.actions_summary.map(function(a) {\n        a.post = result;\n        a.actionType = Discourse.Site.current().postActionTypeById(a.id);\n        var actionSummary = Discourse.ActionSummary.create(a);\n        lookup.set(a.actionType.get('name_key'), actionSummary);\n        return actionSummary;\n      });\n      result.set('actionByName', lookup);\n    }\n  },\n\n  create: function() {\n    var result = this._super.apply(this, arguments);\n    this.createActionSummary(result);\n    return result;\n  },\n\n  /**\n    Find similar topics to a given title and body\n\n    @method findSimilar\n    @param {String} title The current title\n    @param {String} body The current body\n    @returns A promise that will resolve to the topics\n  **/\n  findSimilarTo: function(title, body) {\n    return Discourse.ajax(\"/topics/similar_to\", { data: {title: title, raw: body} }).then(function (results) {\n      if (Array.isArray(results)) {\n        return results.map(function(topic) { return Discourse.Topic.create(topic); });\n      } else {\n        return Ember.A();\n      }\n    });\n  },\n\n  // Load a topic, but accepts a set of filters\n  find: function(topicId, opts) {\n    var url = Discourse.getURL(\"/t/\") + topicId;\n\n    if (opts.nearPost) {\n      url += \"/\" + opts.nearPost;\n    }\n\n    var data = {};\n    if (opts.postsAfter) {\n      data.posts_after = opts.postsAfter;\n    }\n    if (opts.postsBefore) {\n      data.posts_before = opts.postsBefore;\n    }\n    if (opts.trackVisit) {\n      data.track_visit = true;\n    }\n\n    // Add username filters if we have them\n    if (opts.userFilters \u0026\u0026 opts.userFilters.length \u003e 0) {\n      data.username_filters = [];\n      opts.userFilters.forEach(function(username) {\n        data.username_filters.push(username);\n      });\n      data.show_deleted = true;\n    }\n\n    // Add the summary of filter if we have it\n    if (opts.summary === true) {\n      data.summary = true;\n    }\n\n    // Check the preload store. If not, load it via JSON\n    return Discourse.ajax(url + \".json\", {data: data});\n  },\n\n  mergeTopic: function(topicId, destinationTopicId) {\n    var promise = Discourse.ajax(\"/t/\" + topicId + \"/merge-topic\", {\n      type: 'POST',\n      data: {destination_topic_id: destinationTopicId}\n    }).then(function (result) {\n      if (result.success) return result;\n      promise.reject(new Error(\"error merging topic\"));\n    });\n    return promise;\n  },\n\n  movePosts: function(topicId, opts) {\n    var promise = Discourse.ajax(\"/t/\" + topicId + \"/move-posts\", {\n      type: 'POST',\n      data: opts\n    }).then(function (result) {\n      if (result.success) return result;\n      promise.reject(new Error(\"error moving posts topic\"));\n    });\n    return promise;\n  },\n\n  changeOwners: function(topicId, opts) {\n    var promise = Discourse.ajax(\"/t/\" + topicId + \"/change-owner\", {\n      type: 'POST',\n      data: opts\n    }).then(function (result) {\n      if (result.success) return result;\n      promise.reject(new Error(\"error changing ownership of posts\"));\n    });\n    return promise;\n  },\n\n  bulkOperation: function(topics, operation) {\n    return Discourse.ajax(\"/topics/bulk\", {\n      type: 'PUT',\n      data: {\n        topic_ids: topics.map(function(t) { return t.get('id'); }),\n        operation: operation\n      }\n    });\n  },\n\n  bulkOperationByFilter: function(filter, operation) {\n    return Discourse.ajax(\"/topics/bulk\", {\n      type: 'PUT',\n      data: { filter: filter, operation: operation }\n    });\n  },\n\n  resetNew: function() {\n    return Discourse.ajax(\"/topics/reset-new\", {type: 'PUT'});\n  }\n\n\n});\n\n\n";
define("discourse/models/top-period", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Object.extend({
      title: null,

      availablePeriods: function() {
        var periods = this.get('periods');
        if (!periods) { return; }

        var self = this;
        return periods.filter(function(p) {
          return p !== self;
        });
      }.property('showMoreUrl'),

      _createTitle: function() {
        var id = this.get('id');
        if (id) {
          var title = "this_week";
          if (id === "yearly") {
            title = "this_year";
          } else if (id === "monthly") {
            title = "this_month";
          } else if (id === "daily") {
            title = "today";
          }

          this.set('title', I18n.t("filters.top." + title));
        }
      }.on('init')

    });
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/top-period.js'] = "define(\"discourse/models/top-period\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Object.extend({\n      title: null,\n\n      availablePeriods: function() {\n        var periods = this.get('periods');\n        if (!periods) { return; }\n\n        var self = this;\n        return periods.filter(function(p) {\n          return p !== self;\n        });\n      }.property('showMoreUrl'),\n\n      _createTitle: function() {\n        var id = this.get('id');\n        if (id) {\n          var title = \"this_week\";\n          if (id === \"yearly\") {\n            title = \"this_year\";\n          } else if (id === \"monthly\") {\n            title = \"this_month\";\n          } else if (id === \"daily\") {\n            title = \"today\";\n          }\n\n          this.set('title', I18n.t(\"filters.top.\" + title));\n        }\n      }.on('init')\n\n    });\n  });";
define("discourse/controllers/controller", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Controller.extend(Discourse.Presence, Discourse.HasCurrentUser);
  });

Discourse.Controller = require('discourse/controllers/controller').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/controller.js'] = "define(\"discourse/controllers/controller\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Controller.extend(Discourse.Presence, Discourse.HasCurrentUser);\n  });";
define("discourse/controllers/discovery-sortable", 
  ["discourse/controllers/controller","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var DiscourseController = __dependency1__["default"];

    // Just add query params here to have them automatically passed to topic list filters.
    var queryParams = {
      order: { replace: true },
      ascending: { replace: true },
      status: { replace: true },
      state: { replace: true },
      search: { replace: true },
      max_posts: { replace: true }
    };
    __exports__.queryParams = queryParams;
    // Basic controller options
    var controllerOpts = {
      needs: ['discovery/topics'],
      queryParams: Ember.keys(queryParams)
    };

    // Aliases for the values
    controllerOpts.queryParams.forEach(function(p) {
      controllerOpts[p] = Em.computed.alias('controllers.discovery/topics.' + p);
    });

    __exports__["default"] = DiscourseController.extend(controllerOpts);
  });

Discourse.DiscoverySortableController = require('discourse/controllers/discovery-sortable').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/discovery-sortable.js'] = "define(\"discourse/controllers/discovery-sortable\", \n  [\"discourse/controllers/controller\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DiscourseController = __dependency1__[\"default\"];\n\n    // Just add query params here to have them automatically passed to topic list filters.\n    var queryParams = {\n      order: { replace: true },\n      ascending: { replace: true },\n      status: { replace: true },\n      state: { replace: true },\n      search: { replace: true },\n      max_posts: { replace: true }\n    };\n    __exports__.queryParams = queryParams;\n    // Basic controller options\n    var controllerOpts = {\n      needs: ['discovery/topics'],\n      queryParams: Ember.keys(queryParams)\n    };\n\n    // Aliases for the values\n    controllerOpts.queryParams.forEach(function(p) {\n      controllerOpts[p] = Em.computed.alias('controllers.discovery/topics.' + p);\n    });\n\n    __exports__[\"default\"] = DiscourseController.extend(controllerOpts);\n  });";
define("discourse/controllers/object", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.ObjectController.extend(Discourse.Presence, Discourse.HasCurrentUser);
  });

Discourse.ObjectController = require('discourse/controllers/object').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/object.js'] = "define(\"discourse/controllers/object\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.ObjectController.extend(Discourse.Presence, Discourse.HasCurrentUser);\n  });";
define("discourse/controllers/navigation/default", 
  ["discourse/controllers/controller","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var DiscourseController = __dependency1__["default"];

    __exports__["default"] = DiscourseController.extend({
      categories: function() {
        return Discourse.Category.list();
      }.property(),

      navItems: function() {
        return Discourse.NavItem.buildList();
      }.property()
    });
  });

Discourse.NavigationDefaultController = require('discourse/controllers/navigation/default').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/navigation/default.js'] = "define(\"discourse/controllers/navigation/default\", \n  [\"discourse/controllers/controller\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DiscourseController = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = DiscourseController.extend({\n      categories: function() {\n        return Discourse.Category.list();\n      }.property(),\n\n      navItems: function() {\n        return Discourse.NavItem.buildList();\n      }.property()\n    });\n  });";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A base class for helping us display modal content

  @class ModalBodyView
  @extends Discourse.View
  @namespace Discourse
  @module Discourse
**/

Discourse.ModalBodyView = Discourse.View.extend({

  _setupModal: function() {
    var self = this,
        $discourseModal = $('#discourse-modal');

    $discourseModal.modal('show');
    $discourseModal.one("hide", function () {
      self.get("controller").send("closeModal");
    });

    $('#modal-alert').hide();

    // Focus on first element
    if (!Discourse.Mobile.mobileView) {
      Em.run.schedule('afterRender', function() {
        self.$('input:first').focus();
      });
    }

    var title = this.get('title');
    if (title) {
      this.set('controller.controllers.modal.title', title);
    }
  }.on('didInsertElement'),

  flashMessageChanged: function() {
    var flashMessage = this.get('controller.flashMessage');
    if (flashMessage) {
      var messageClass = flashMessage.get('messageClass') || 'success';
      var $alert = $('#modal-alert').hide().removeClass('alert-error', 'alert-success');
      $alert.addClass("alert alert-" + messageClass).html(flashMessage.get('message'));
      $alert.fadeIn();
    }
  }.observes('controller.flashMessage')

});




// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/modal_body_view.js'] = "/**\n  A base class for helping us display modal content\n\n  @class ModalBodyView\n  @extends Discourse.View\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.ModalBodyView = Discourse.View.extend({\n\n  _setupModal: function() {\n    var self = this,\n        $discourseModal = $('#discourse-modal');\n\n    $discourseModal.modal('show');\n    $discourseModal.one(\"hide\", function () {\n      self.get(\"controller\").send(\"closeModal\");\n    });\n\n    $('#modal-alert').hide();\n\n    // Focus on first element\n    if (!Discourse.Mobile.mobileView) {\n      Em.run.schedule('afterRender', function() {\n        self.$('input:first').focus();\n      });\n    }\n\n    var title = this.get('title');\n    if (title) {\n      this.set('controller.controllers.modal.title', title);\n    }\n  }.on('didInsertElement'),\n\n  flashMessageChanged: function() {\n    var flashMessage = this.get('controller.flashMessage');\n    if (flashMessage) {\n      var messageClass = flashMessage.get('messageClass') || 'success';\n      var $alert = $('#modal-alert').hide().removeClass('alert-error', 'alert-success');\n      $alert.addClass(\"alert alert-\" + messageClass).html(flashMessage.get('message'));\n      $alert.fadeIn();\n    }\n  }.observes('controller.flashMessage')\n\n});\n\n\n";
define("discourse/views/flag", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.ModalBodyView.extend({
      templateName: 'modal/flag',

      title: function() {
        return this.get('controller.flagTopic') ? I18n.t('flagging_topic.title') : I18n.t('flagging.title');
      }.property('controller.flagTopic'),

      selectedChanged: function() {
        var self = this;
        Em.run.next(function() {
          self.$("input[type='radio']").prop('checked', false);

          var nameKey = self.get('controller.selected.name_key');
          if (!nameKey) return;

          self.$('#radio_' + nameKey).prop('checked', 'true');
        });
      }.observes('controller.selected.name_key')
    });
  });

Discourse.FlagView = require('discourse/views/flag').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/flag.js'] = "define(\"discourse/views/flag\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.ModalBodyView.extend({\n      templateName: 'modal/flag',\n\n      title: function() {\n        return this.get('controller.flagTopic') ? I18n.t('flagging_topic.title') : I18n.t('flagging.title');\n      }.property('controller.flagTopic'),\n\n      selectedChanged: function() {\n        var self = this;\n        Em.run.next(function() {\n          self.$(\"input[type='radio']\").prop('checked', false);\n\n          var nameKey = self.get('controller.selected.name_key');\n          if (!nameKey) return;\n\n          self.$('#radio_' + nameKey).prop('checked', 'true');\n        });\n      }.observes('controller.selected.name_key')\n    });\n  });";
define("discourse/views/combo-box", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      This view handles rendering of a combobox

      @class ComboboxView
      @extends Discourse.View
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Discourse.View.extend({
      tagName: 'select',
      attributeBindings: ['tabindex'],
      classNames: ['combobox'],
      valueAttribute: 'id',

      buildData: function(o) {
        var data = "";
        if (this.dataAttributes) {
          this.dataAttributes.forEach(function(a) {
            data += "data-" + a + "=\"" + o.get(a) + "\" ";
          });
        }
        return data;
      },

      render: function(buffer) {
        var nameProperty = this.get('nameProperty') || 'name',
            none = this.get('none');

        // Add none option if required
        if (typeof none === "string") {
          buffer.push('<option value="">' + I18n.t(none) + "</option>");
        } else if (typeof none === "object") {
          buffer.push("<option value=\"\" " + this.buildData(none) + ">" + Em.get(none, nameProperty) + "</option>");
        }

        var selected = this.get('value');
        if (!Em.isNone(selected)) { selected = selected.toString(); }

        if (this.get('content')) {
          var self = this;
          this.get('content').forEach(function(o) {
            var val = o[self.get('valueAttribute')];
            if (!Em.isNone(val)) { val = val.toString(); }

            var selectedText = (val === selected) ? "selected" : "";
            buffer.push("<option " + selectedText + " value=\"" + val + "\" " + self.buildData(o) + ">" + Handlebars.Utils.escapeExpression(Em.get(o, nameProperty)) + "</option>");
          });
        }
      },

      valueChanged: function() {
        var $combo = this.$(),
            val = this.get('value');
        if (val !== undefined && val !== null) {
          $combo.val(val.toString());
        } else {
          $combo.val(null);
        }
        $combo.trigger("liszt:updated");
      }.observes('value'),

      contentChanged: function() {
        this.rerender();
      }.observes('content.@each'),

      didInsertElement: function() {
        var $elem = this.$(),
            self = this;

        $elem.select2({formatResult: this.template, minimumResultsForSearch: 5, width: 'resolve'});

        $elem.on("change", function (e) {
          self.set('value', $(e.target).val());
        });
      },

      willClearRender: function() {
        var elementId = "s2id_" + this.$().attr('id');
        Ember.$("#" + elementId).remove();
      }

    });
  });

Discourse.ComboBoxView = require('discourse/views/combo-box').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/combo-box.js'] = "define(\"discourse/views/combo-box\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      This view handles rendering of a combobox\n\n      @class ComboboxView\n      @extends Discourse.View\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Discourse.View.extend({\n      tagName: 'select',\n      attributeBindings: ['tabindex'],\n      classNames: ['combobox'],\n      valueAttribute: 'id',\n\n      buildData: function(o) {\n        var data = \"\";\n        if (this.dataAttributes) {\n          this.dataAttributes.forEach(function(a) {\n            data += \"data-\" + a + \"=\\\"\" + o.get(a) + \"\\\" \";\n          });\n        }\n        return data;\n      },\n\n      render: function(buffer) {\n        var nameProperty = this.get('nameProperty') || 'name',\n            none = this.get('none');\n\n        // Add none option if required\n        if (typeof none === \"string\") {\n          buffer.push('\u003coption value=\"\"\u003e' + I18n.t(none) + \"\u003c/option\u003e\");\n        } else if (typeof none === \"object\") {\n          buffer.push(\"\u003coption value=\\\"\\\" \" + this.buildData(none) + \"\u003e\" + Em.get(none, nameProperty) + \"\u003c/option\u003e\");\n        }\n\n        var selected = this.get('value');\n        if (!Em.isNone(selected)) { selected = selected.toString(); }\n\n        if (this.get('content')) {\n          var self = this;\n          this.get('content').forEach(function(o) {\n            var val = o[self.get('valueAttribute')];\n            if (!Em.isNone(val)) { val = val.toString(); }\n\n            var selectedText = (val === selected) ? \"selected\" : \"\";\n            buffer.push(\"\u003coption \" + selectedText + \" value=\\\"\" + val + \"\\\" \" + self.buildData(o) + \"\u003e\" + Handlebars.Utils.escapeExpression(Em.get(o, nameProperty)) + \"\u003c/option\u003e\");\n          });\n        }\n      },\n\n      valueChanged: function() {\n        var $combo = this.$(),\n            val = this.get('value');\n        if (val !== undefined \u0026\u0026 val !== null) {\n          $combo.val(val.toString());\n        } else {\n          $combo.val(null);\n        }\n        $combo.trigger(\"liszt:updated\");\n      }.observes('value'),\n\n      contentChanged: function() {\n        this.rerender();\n      }.observes('content.@each'),\n\n      didInsertElement: function() {\n        var $elem = this.$(),\n            self = this;\n\n        $elem.select2({formatResult: this.template, minimumResultsForSearch: 5, width: 'resolve'});\n\n        $elem.on(\"change\", function (e) {\n          self.set('value', $(e.target).val());\n        });\n      },\n\n      willClearRender: function() {\n        var elementId = \"s2id_\" + this.$().attr('id');\n        Ember.$(\"#\" + elementId).remove();\n      }\n\n    });\n  });";
define("discourse/views/button", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.View.extend({
      tagName: 'button',
      classNameBindings: [':btn', ':standard', 'dropDownToggle'],
      attributeBindings: ['title', 'data-toggle', 'data-share-url'],

      title: function() {
        return I18n.t(this.get('helpKey') || this.get('textKey'));
      }.property('helpKey'),

      text: function() {
        return I18n.t(this.get('textKey'));
      }.property('textKey'),

      render: function(buffer) {
        if (this.renderIcon) {
          this.renderIcon(buffer);
        }
        buffer.push(this.get('text'));
      }
    });
  });

Discourse.ButtonView = require('discourse/views/button').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/button.js'] = "define(\"discourse/views/button\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.View.extend({\n      tagName: 'button',\n      classNameBindings: [':btn', ':standard', 'dropDownToggle'],\n      attributeBindings: ['title', 'data-toggle', 'data-share-url'],\n\n      title: function() {\n        return I18n.t(this.get('helpKey') || this.get('textKey'));\n      }.property('helpKey'),\n\n      text: function() {\n        return I18n.t(this.get('textKey'));\n      }.property('textKey'),\n\n      render: function(buffer) {\n        if (this.renderIcon) {\n          this.renderIcon(buffer);\n        }\n        buffer.push(this.get('text'));\n      }\n    });\n  });";
define("discourse/views/dropdown-button", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.View.extend({
      classNameBindings: [':btn-group', 'hidden'],
      shouldRerender: Discourse.View.renderIfChanged('text', 'longDescription'),

      didInsertElement: function() {
        var self = this;
        // If there's a click handler, call it
        if (self.clicked) {
          self.$('ul li').on('click.dropdown-button', function(e) {
            e.preventDefault();
            if ($(e.currentTarget).data('id') !== self.get('activeItem'))
              self.clicked($(e.currentTarget).data('id'));
            return false;
          });
        }
      },

      willDestroyElement: function() {
        this.$('ul li').off('click.dropdown-button');
      },

      render: function(buffer) {
        var self = this;

        buffer.push("<h4 class='title'>" + self.get('title') + "</h4>");
        buffer.push("<button class='btn standard dropdown-toggle' data-toggle='dropdown'>");
        buffer.push(self.get('text'));
        buffer.push("</button>");
        buffer.push("<ul class='dropdown-menu'>");

        _.each(self.get('dropDownContent'), function(row) {
          var id = row.id,
              title = row.title,
              iconClass = row.styleClasses,
              description = row.description,
              className = (self.get('activeItem') === id? 'disabled': '');

          buffer.push("<li data-id=\"" + id + "\" class=\"" + className + "\"><a href='#'>");
          buffer.push("<span class='icon " + iconClass + "'></span>");
          buffer.push("<div><span class='title'>" + title + "</span>");
          buffer.push("<span>" + description + "</span></div>");
          buffer.push("</a></li>");
        });

        buffer.push("</ul>");

        var desc = self.get('longDescription');
        if (desc) {
          buffer.push("<p>");
          buffer.push(desc);
          buffer.push("</p>");
        }
      }
    });
  });

Discourse.DropdownButtonView = require('discourse/views/dropdown-button').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/dropdown-button.js'] = "define(\"discourse/views/dropdown-button\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.View.extend({\n      classNameBindings: [':btn-group', 'hidden'],\n      shouldRerender: Discourse.View.renderIfChanged('text', 'longDescription'),\n\n      didInsertElement: function() {\n        var self = this;\n        // If there's a click handler, call it\n        if (self.clicked) {\n          self.$('ul li').on('click.dropdown-button', function(e) {\n            e.preventDefault();\n            if ($(e.currentTarget).data('id') !== self.get('activeItem'))\n              self.clicked($(e.currentTarget).data('id'));\n            return false;\n          });\n        }\n      },\n\n      willDestroyElement: function() {\n        this.$('ul li').off('click.dropdown-button');\n      },\n\n      render: function(buffer) {\n        var self = this;\n\n        buffer.push(\"\u003ch4 class='title'\u003e\" + self.get('title') + \"\u003c/h4\u003e\");\n        buffer.push(\"\u003cbutton class='btn standard dropdown-toggle' data-toggle='dropdown'\u003e\");\n        buffer.push(self.get('text'));\n        buffer.push(\"\u003c/button\u003e\");\n        buffer.push(\"\u003cul class='dropdown-menu'\u003e\");\n\n        _.each(self.get('dropDownContent'), function(row) {\n          var id = row.id,\n              title = row.title,\n              iconClass = row.styleClasses,\n              description = row.description,\n              className = (self.get('activeItem') === id? 'disabled': '');\n\n          buffer.push(\"\u003cli data-id=\\\"\" + id + \"\\\" class=\\\"\" + className + \"\\\"\u003e\u003ca href='#'\u003e\");\n          buffer.push(\"\u003cspan class='icon \" + iconClass + \"'\u003e\u003c/span\u003e\");\n          buffer.push(\"\u003cdiv\u003e\u003cspan class='title'\u003e\" + title + \"\u003c/span\u003e\");\n          buffer.push(\"\u003cspan\u003e\" + description + \"\u003c/span\u003e\u003c/div\u003e\");\n          buffer.push(\"\u003c/a\u003e\u003c/li\u003e\");\n        });\n\n        buffer.push(\"\u003c/ul\u003e\");\n\n        var desc = self.get('longDescription');\n        if (desc) {\n          buffer.push(\"\u003cp\u003e\");\n          buffer.push(desc);\n          buffer.push(\"\u003c/p\u003e\");\n        }\n      }\n    });\n  });";
define("discourse/views/notifications-button", 
  ["discourse/views/dropdown-button","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var DropdownButtonView = __dependency1__["default"];

    __exports__["default"] = DropdownButtonView.extend({
      classNames: ['notification-options'],
      title: '',
      buttonIncludesText: true,
      activeItem: Em.computed.alias('notificationLevel'),
      notificationLevels: [],
      i18nPrefix: '',
      i18nPostfix: '',
      watchingClasses: 'fa fa-exclamation-circle watching',
      trackingClasses: 'fa fa-circle tracking',
      mutedClasses: 'fa fa-times-circle muted',
      regularClasses: 'fa fa-circle-o regular',

      options: function() {
        return [['WATCHING', 'watching', this.watchingClasses],
                ['TRACKING', 'tracking', this.trackingClasses],
                ['REGULAR',  'regular',  this.regularClasses],
                ['MUTED',    'muted',    this.mutedClasses]];
      }.property(),

      dropDownContent: function() {
        var contents = [],
            prefix = this.get('i18nPrefix'),
            postfix = this.get('i18nPostfix'),
            levels = this.get('notificationLevels');

        _.each(this.get('options'), function(pair) {
          if (postfix === '_pm' && pair[1] === 'regular') { return; }
          contents.push({
            id: levels[pair[0]],
            title: I18n.t(prefix + '.' + pair[1] + postfix + '.title'),
            description: I18n.t(prefix + '.' + pair[1] + postfix + '.description'),
            styleClasses: pair[2]
          });
        });

        return contents;
      }.property(),

      text: function() {
        var self = this,
            prefix = this.get('i18nPrefix'),
            postfix = this.get('i18nPostfix'),
            levels = this.get('notificationLevels');

        var key = (function() {
          switch (this.get('notificationLevel')) {
            case levels.WATCHING: return 'watching';
            case levels.TRACKING: return 'tracking';
            case levels.MUTED: return 'muted';
            default: return 'regular';
          }
        }).call(this);

        var icon = (function() {
          switch (key) {
            case 'watching': return '<i class="' + self.watchingClasses + '"></i>&nbsp;';
            case 'tracking': return '<i class="' + self.trackingClasses +  '"></i>&nbsp;';
            case 'muted': return '<i class="' + self.mutedClasses + '"></i>&nbsp;';
            default: return '<i class="' + self.regularClasses + '"></i>&nbsp;';
          }
        })();
        return icon + ( this.get('buttonIncludesText') ? I18n.t(prefix + '.' + key + postfix + ".title") : '') + "<span class='caret'></span>";
      }.property('notificationLevel'),

      clicked: function(/* id */) {
        // sub-class needs to implement this
      }

    });
  });

Discourse.NotificationsButtonView = require('discourse/views/notifications-button').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/notifications-button.js'] = "define(\"discourse/views/notifications-button\", \n  [\"discourse/views/dropdown-button\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DropdownButtonView = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = DropdownButtonView.extend({\n      classNames: ['notification-options'],\n      title: '',\n      buttonIncludesText: true,\n      activeItem: Em.computed.alias('notificationLevel'),\n      notificationLevels: [],\n      i18nPrefix: '',\n      i18nPostfix: '',\n      watchingClasses: 'fa fa-exclamation-circle watching',\n      trackingClasses: 'fa fa-circle tracking',\n      mutedClasses: 'fa fa-times-circle muted',\n      regularClasses: 'fa fa-circle-o regular',\n\n      options: function() {\n        return [['WATCHING', 'watching', this.watchingClasses],\n                ['TRACKING', 'tracking', this.trackingClasses],\n                ['REGULAR',  'regular',  this.regularClasses],\n                ['MUTED',    'muted',    this.mutedClasses]];\n      }.property(),\n\n      dropDownContent: function() {\n        var contents = [],\n            prefix = this.get('i18nPrefix'),\n            postfix = this.get('i18nPostfix'),\n            levels = this.get('notificationLevels');\n\n        _.each(this.get('options'), function(pair) {\n          if (postfix === '_pm' \u0026\u0026 pair[1] === 'regular') { return; }\n          contents.push({\n            id: levels[pair[0]],\n            title: I18n.t(prefix + '.' + pair[1] + postfix + '.title'),\n            description: I18n.t(prefix + '.' + pair[1] + postfix + '.description'),\n            styleClasses: pair[2]\n          });\n        });\n\n        return contents;\n      }.property(),\n\n      text: function() {\n        var self = this,\n            prefix = this.get('i18nPrefix'),\n            postfix = this.get('i18nPostfix'),\n            levels = this.get('notificationLevels');\n\n        var key = (function() {\n          switch (this.get('notificationLevel')) {\n            case levels.WATCHING: return 'watching';\n            case levels.TRACKING: return 'tracking';\n            case levels.MUTED: return 'muted';\n            default: return 'regular';\n          }\n        }).call(this);\n\n        var icon = (function() {\n          switch (key) {\n            case 'watching': return '\u003ci class=\"' + self.watchingClasses + '\"\u003e\u003c/i\u003e\u0026nbsp;';\n            case 'tracking': return '\u003ci class=\"' + self.trackingClasses +  '\"\u003e\u003c/i\u003e\u0026nbsp;';\n            case 'muted': return '\u003ci class=\"' + self.mutedClasses + '\"\u003e\u003c/i\u003e\u0026nbsp;';\n            default: return '\u003ci class=\"' + self.regularClasses + '\"\u003e\u003c/i\u003e\u0026nbsp;';\n          }\n        })();\n        return icon + ( this.get('buttonIncludesText') ? I18n.t(prefix + '.' + key + postfix + \".title\") : '') + \"\u003cspan class='caret'\u003e\u003c/span\u003e\";\n      }.property('notificationLevel'),\n\n      clicked: function(/* id */) {\n        // sub-class needs to implement this\n      }\n\n    });\n  });";
define("discourse/views/topic-notifications-button", 
  ["discourse/views/notifications-button","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var NotificationsButton = __dependency1__["default"];

    __exports__["default"] = NotificationsButton.extend({
      longDescriptionBinding: 'topic.details.notificationReasonText',
      topic: Em.computed.alias('controller.model'),
      target: Em.computed.alias('topic'),
      hidden: Em.computed.alias('topic.deleted'),
      notificationLevels: Discourse.Topic.NotificationLevel,
      notificationLevel: Em.computed.alias('topic.details.notification_level'),
      isPrivateMessage: Em.computed.alias('topic.isPrivateMessage'),
      i18nPrefix: 'topic.notifications',

      i18nPostfix: function() {
        return this.get('isPrivateMessage') ? '_pm' : '';
      }.property('isPrivateMessage'),

      clicked: function(id) {
        this.get('topic.details').updateNotifications(id);
      }
    });
  });

Discourse.TopicNotificationsButtonView = require('discourse/views/topic-notifications-button').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/topic-notifications-button.js'] = "define(\"discourse/views/topic-notifications-button\", \n  [\"discourse/views/notifications-button\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var NotificationsButton = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = NotificationsButton.extend({\n      longDescriptionBinding: 'topic.details.notificationReasonText',\n      topic: Em.computed.alias('controller.model'),\n      target: Em.computed.alias('topic'),\n      hidden: Em.computed.alias('topic.deleted'),\n      notificationLevels: Discourse.Topic.NotificationLevel,\n      notificationLevel: Em.computed.alias('topic.details.notification_level'),\n      isPrivateMessage: Em.computed.alias('topic.isPrivateMessage'),\n      i18nPrefix: 'topic.notifications',\n\n      i18nPostfix: function() {\n        return this.get('isPrivateMessage') ? '_pm' : '';\n      }.property('isPrivateMessage'),\n\n      clicked: function(id) {\n        this.get('topic.details').updateNotifications(id);\n      }\n    });\n  });";
define("discourse/views/pagedown-preview", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      A helper view to display a preview of the pagedown content

      @class PagedownPreviewView
      @extends Discourse.View
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Discourse.View.extend({
      elementId: 'wmd-preview',
      classNameBindings: [':preview', 'hidden'],
      hidden: Em.computed.empty('parentView.value')
    });
  });

Discourse.PagedownPreviewView = require('discourse/views/pagedown-preview').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/pagedown-preview.js'] = "define(\"discourse/views/pagedown-preview\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      A helper view to display a preview of the pagedown content\n\n      @class PagedownPreviewView\n      @extends Discourse.View\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Discourse.View.extend({\n      elementId: 'wmd-preview',\n      classNameBindings: [':preview', 'hidden'],\n      hidden: Em.computed.empty('parentView.value')\n    });\n  });";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  The base route for all routes on Discourse. Includes global enter functionality.

  @class Route
  @extends Em.Route
  @namespace Discourse
  @module Discourse
**/

Discourse.Route = Em.Route.extend({

  /**
    NOT called every time we enter a route on Discourse.
    Only called the FIRST time we enter a route.
    So, when going from one topic to another, activate will only be called on the
    TopicRoute for the first topic.

    @method activate
  **/
  activate: function() {
    this._super();
    Em.run.scheduleOnce('afterRender', Discourse.Route, 'cleanDOM');
  },

  openTopicDraft: function(model){
    // If there's a draft, open the create topic composer
    if (model.draft) {
      var composer = this.controllerFor('composer');
      if (!composer.get('model.viewOpen')) {
        composer.open({
          action: Discourse.Composer.CREATE_TOPIC,
          draft: model.draft,
          draftKey: model.draft_key,
          draftSequence: model.draft_sequence
        });
      }
    }
  }

});

var routeBuilder;

Discourse.Route.reopenClass({

  buildRoutes: function(builder) {
    var oldBuilder = routeBuilder;
    routeBuilder = function() {
      if (oldBuilder) oldBuilder.call(this);
      return builder.call(this);
    };
  },

  mapRoutes: function() {
    Discourse.Router.map(function() {
      routeBuilder.call(this);
      this.route('unknown', {path: '*path'});
    });
  },

  cleanDOM: function() {
    // Close mini profiler
    $('.profiler-results .profiler-result').remove();

    // Close some elements that may be open
    $('.d-dropdown').hide();
    $('header ul.icons li').removeClass('active');
    $('[data-toggle="dropdown"]').parent().removeClass('open');
    // close the lightbox
    if ($.magnificPopup && $.magnificPopup.instance) { $.magnificPopup.instance.close(); }

    // Remove any link focus
    // NOTE: the '.not("body")' is here to prevent a bug in IE10 on Win7
    // cf. https://stackoverflow.com/questions/5657371/ie9-window-loses-focus-due-to-jquery-mobile
    $(document.activeElement).not("body").blur();

    Discourse.set('notifyCount',0);
    $('#discourse-modal').modal('hide');
    var hideDropDownFunction = $('html').data('hide-dropdown');
    if (hideDropDownFunction) { hideDropDownFunction(); }

    // TODO: Avoid container lookup here
    var appEvents = Discourse.__container__.lookup('app-events:main');
    appEvents.trigger('dom:clean');
  },

  /**
    Shows a modal

    @method showModal
  **/
  showModal: function(router, name, model) {
    router.controllerFor('modal').set('modalClass', null);
    router.render(name, {into: 'modal', outlet: 'modalBody'});
    var controller = router.controllerFor(name);
    if (controller) {
      if (model) {
        controller.set('model', model);
      }
      if(controller && controller.onShow) {
        controller.onShow();
      }
      controller.set('flashMessage', null);
    }
  }

});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/discourse_route.js'] = "/**\n  The base route for all routes on Discourse. Includes global enter functionality.\n\n  @class Route\n  @extends Em.Route\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.Route = Em.Route.extend({\n\n  /**\n    NOT called every time we enter a route on Discourse.\n    Only called the FIRST time we enter a route.\n    So, when going from one topic to another, activate will only be called on the\n    TopicRoute for the first topic.\n\n    @method activate\n  **/\n  activate: function() {\n    this._super();\n    Em.run.scheduleOnce('afterRender', Discourse.Route, 'cleanDOM');\n  },\n\n  openTopicDraft: function(model){\n    // If there's a draft, open the create topic composer\n    if (model.draft) {\n      var composer = this.controllerFor('composer');\n      if (!composer.get('model.viewOpen')) {\n        composer.open({\n          action: Discourse.Composer.CREATE_TOPIC,\n          draft: model.draft,\n          draftKey: model.draft_key,\n          draftSequence: model.draft_sequence\n        });\n      }\n    }\n  }\n\n});\n\nvar routeBuilder;\n\nDiscourse.Route.reopenClass({\n\n  buildRoutes: function(builder) {\n    var oldBuilder = routeBuilder;\n    routeBuilder = function() {\n      if (oldBuilder) oldBuilder.call(this);\n      return builder.call(this);\n    };\n  },\n\n  mapRoutes: function() {\n    Discourse.Router.map(function() {\n      routeBuilder.call(this);\n      this.route('unknown', {path: '*path'});\n    });\n  },\n\n  cleanDOM: function() {\n    // Close mini profiler\n    $('.profiler-results .profiler-result').remove();\n\n    // Close some elements that may be open\n    $('.d-dropdown').hide();\n    $('header ul.icons li').removeClass('active');\n    $('[data-toggle=\"dropdown\"]').parent().removeClass('open');\n    // close the lightbox\n    if ($.magnificPopup \u0026\u0026 $.magnificPopup.instance) { $.magnificPopup.instance.close(); }\n\n    // Remove any link focus\n    // NOTE: the '.not(\"body\")' is here to prevent a bug in IE10 on Win7\n    // cf. https://stackoverflow.com/questions/5657371/ie9-window-loses-focus-due-to-jquery-mobile\n    $(document.activeElement).not(\"body\").blur();\n\n    Discourse.set('notifyCount',0);\n    $('#discourse-modal').modal('hide');\n    var hideDropDownFunction = $('html').data('hide-dropdown');\n    if (hideDropDownFunction) { hideDropDownFunction(); }\n\n    // TODO: Avoid container lookup here\n    var appEvents = Discourse.__container__.lookup('app-events:main');\n    appEvents.trigger('dom:clean');\n  },\n\n  /**\n    Shows a modal\n\n    @method showModal\n  **/\n  showModal: function(router, name, model) {\n    router.controllerFor('modal').set('modalClass', null);\n    router.render(name, {into: 'modal', outlet: 'modalBody'});\n    var controller = router.controllerFor(name);\n    if (controller) {\n      if (model) {\n        controller.set('model', model);\n      }\n      if(controller \u0026\u0026 controller.onShow) {\n        controller.onShow();\n      }\n      controller.set('flashMessage', null);\n    }\n  }\n\n});\n";
define("discourse/routes/build-topic-route", 
  ["discourse/controllers/discovery-sortable","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // A helper to build a topic route for a filter

    var queryParams = __dependency1__.queryParams;

    function filterQueryParams(params, defaultParams) {
      var findOpts = defaultParams || {};
      if (params) {
        Ember.keys(queryParams).forEach(function(opt) {
          if (params[opt]) { findOpts[opt] = params[opt]; }
        });
      }
      return findOpts;
    }

    __exports__.filterQueryParams = filterQueryParams;__exports__["default"] = function(filter, extras) {
      extras = extras || {};
      return Discourse.Route.extend({
        queryParams: queryParams,

        beforeModel: function() {
          this.controllerFor('navigation/default').set('filterMode', filter);
        },

        model: function(data, transaction) {

          // attempt to stop early cause we need this to be called before .sync
          Discourse.ScreenTrack.current().stop();

          var findOpts = filterQueryParams(transaction.queryParams);
          return Discourse.TopicList.list(filter, findOpts);
        },

        setupController: function(controller, model, trans) {

          controller.setProperties(Em.getProperties(trans, _.keys(queryParams).map(function(v){
            return 'queryParams.' + v;
          })));

          var periods = this.controllerFor('discovery').get('periods'),
              periodId = model.get('for_period') || (filter.indexOf('/') > 0 ? filter.split('/')[1] : ''),
              filterText = I18n.t('filters.' + filter.replace('/', '.') + '.title', {count: 0});

          if (filter === Discourse.Utilities.defaultHomepage()) {
            Discourse.set('title', '');
          } else {
            Discourse.set('title', I18n.t('filters.with_topics', {filter: filterText}));
          }

          this.controllerFor('discovery/topics').setProperties({
            model: model,
            category: null,
            period: periods.findBy('id', periodId),
            selected: []
          });

          this.openTopicDraft(model);

          this.controllerFor('navigation/default').set('canCreateTopic', model.get('can_create_topic'));
        },

        renderTemplate: function() {
          this.render('navigation/default', { outlet: 'navigation-bar' });
          this.render('discovery/topics', { controller: 'discovery/topics', outlet: 'list-container' });
        }
      }, extras);
    }
  });

Discourse.BuildTopicRouteRoute = require('discourse/routes/build-topic-route').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/build-topic-route.js'] = "define(\"discourse/routes/build-topic-route\", \n  [\"discourse/controllers/discovery-sortable\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    // A helper to build a topic route for a filter\n\n    var queryParams = __dependency1__.queryParams;\n\n    function filterQueryParams(params, defaultParams) {\n      var findOpts = defaultParams || {};\n      if (params) {\n        Ember.keys(queryParams).forEach(function(opt) {\n          if (params[opt]) { findOpts[opt] = params[opt]; }\n        });\n      }\n      return findOpts;\n    }\n\n    __exports__.filterQueryParams = filterQueryParams;__exports__[\"default\"] = function(filter, extras) {\n      extras = extras || {};\n      return Discourse.Route.extend({\n        queryParams: queryParams,\n\n        beforeModel: function() {\n          this.controllerFor('navigation/default').set('filterMode', filter);\n        },\n\n        model: function(data, transaction) {\n\n          // attempt to stop early cause we need this to be called before .sync\n          Discourse.ScreenTrack.current().stop();\n\n          var findOpts = filterQueryParams(transaction.queryParams);\n          return Discourse.TopicList.list(filter, findOpts);\n        },\n\n        setupController: function(controller, model, trans) {\n\n          controller.setProperties(Em.getProperties(trans, _.keys(queryParams).map(function(v){\n            return 'queryParams.' + v;\n          })));\n\n          var periods = this.controllerFor('discovery').get('periods'),\n              periodId = model.get('for_period') || (filter.indexOf('/') \u003e 0 ? filter.split('/')[1] : ''),\n              filterText = I18n.t('filters.' + filter.replace('/', '.') + '.title', {count: 0});\n\n          if (filter === Discourse.Utilities.defaultHomepage()) {\n            Discourse.set('title', '');\n          } else {\n            Discourse.set('title', I18n.t('filters.with_topics', {filter: filterText}));\n          }\n\n          this.controllerFor('discovery/topics').setProperties({\n            model: model,\n            category: null,\n            period: periods.findBy('id', periodId),\n            selected: []\n          });\n\n          this.openTopicDraft(model);\n\n          this.controllerFor('navigation/default').set('canCreateTopic', model.get('can_create_topic'));\n        },\n\n        renderTemplate: function() {\n          this.render('navigation/default', { outlet: 'navigation-bar' });\n          this.render('discovery/topics', { controller: 'discovery/topics', outlet: 'list-container' });\n        }\n      }, extras);\n    }\n  });";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A base route that allows us to redirect when access is restricted

  @class RestrictedUserRoute
  @extends Discourse.Route
  @namespace Discourse
  @module Discourse
**/

Discourse.RestrictedUserRoute = Discourse.Route.extend({

  afterModel: function() {
    var user = this.modelFor('user');
    if (!user.get('can_edit')) {
      this.replaceWith('userActivity');
    }
  }

});




// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/discourse_restricted_user_route.js'] = "/**\n  A base route that allows us to redirect when access is restricted\n\n  @class RestrictedUserRoute\n  @extends Discourse.Route\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.RestrictedUserRoute = Discourse.Route.extend({\n\n  afterModel: function() {\n    var user = this.modelFor('user');\n    if (!user.get('can_edit')) {\n      this.replaceWith('userActivity');\n    }\n  }\n\n});\n\n\n";
define("discourse/components/top-title", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Component.extend({
      tagName: 'h2',

      _shouldRerender: Discourse.View.renderIfChanged('period.title'),
      render: function(buffer) {
        buffer.push("<i class='fa fa-calendar-o'></i> " + this.get('period.title'));
      }
    });
  });

Discourse.TopTitleComponent = require('discourse/components/top-title').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/top-title.js'] = "define(\"discourse/components/top-title\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Component.extend({\n      tagName: 'h2',\n\n      _shouldRerender: Discourse.View.renderIfChanged('period.title'),\n      render: function(buffer) {\n        buffer.push(\"\u003ci class='fa fa-calendar-o'\u003e\u003c/i\u003e \" + this.get('period.title'));\n      }\n    });\n  });";
define("discourse/components/text-field", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      This is a custom text field that allows i18n placeholders

      @class TextField
      @extends Ember.TextField
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Ember.TextField.extend({
      attributeBindings: ['autocorrect', 'autocapitalize', 'autofocus', 'maxLength'],

      placeholder: function() {
        if (this.get('placeholderKey')) {
          return I18n.t(this.get('placeholderKey'));
        } else {
          return '';
        }
      }.property('placeholderKey')
    });
  });

Discourse.TextFieldComponent = require('discourse/components/text-field').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/text-field.js'] = "define(\"discourse/components/text-field\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      This is a custom text field that allows i18n placeholders\n\n      @class TextField\n      @extends Ember.TextField\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Ember.TextField.extend({\n      attributeBindings: ['autocorrect', 'autocapitalize', 'autofocus', 'maxLength'],\n\n      placeholder: function() {\n        if (this.get('placeholderKey')) {\n          return I18n.t(this.get('placeholderKey'));\n        } else {\n          return '';\n        }\n      }.property('placeholderKey')\n    });\n  });";
define("discourse/helpers/user-avatar", 
  ["exports"],
  function(__exports__) {
    "use strict";
    function renderAvatar(user, options) {
      options = options || {};

      if (user) {
        var username = Em.get(user, 'username');
        if (!username) username = Em.get(user, options.usernamePath);

        var title;
        if (!options.ignoreTitle) {
          // first try to get a title
          title = Em.get(user, 'title');
          // if there was no title provided
          if (!title) {
            // try to retrieve a description
            var description = Em.get(user, 'description');
            // if a description has been provided
            if (description && description.length > 0) {
              // preprend the username before the description
              title = username + " - " + description;
            }
          }
        }

        // this is simply done to ensure we cache images correctly
        var uploadedAvatarId = Em.get(user, 'uploaded_avatar_id') || Em.get(user, 'user.uploaded_avatar_id');
        var avatarTemplate = Discourse.User.avatarTemplate(username,uploadedAvatarId);

        return Discourse.Utilities.avatarImg({
          size: options.imageSize,
          extraClasses: Em.get(user, 'extras') || options.extraClasses,
          title: title || username,
          avatarTemplate: avatarTemplate
        });
      } else {
        return '';
      }
    }

    __exports__.renderAvatar = renderAvatar;Handlebars.registerHelper('avatar', function(user, options) {
      if (typeof user === 'string') {
        user = Ember.Handlebars.get(this, user, options);
      }
      return new Handlebars.SafeString(renderAvatar.call(this, user, options.hash));
    });
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/helpers/user-avatar.js'] = "define(\"discourse/helpers/user-avatar\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    function renderAvatar(user, options) {\n      options = options || {};\n\n      if (user) {\n        var username = Em.get(user, 'username');\n        if (!username) username = Em.get(user, options.usernamePath);\n\n        var title;\n        if (!options.ignoreTitle) {\n          // first try to get a title\n          title = Em.get(user, 'title');\n          // if there was no title provided\n          if (!title) {\n            // try to retrieve a description\n            var description = Em.get(user, 'description');\n            // if a description has been provided\n            if (description \u0026\u0026 description.length \u003e 0) {\n              // preprend the username before the description\n              title = username + \" - \" + description;\n            }\n          }\n        }\n\n        // this is simply done to ensure we cache images correctly\n        var uploadedAvatarId = Em.get(user, 'uploaded_avatar_id') || Em.get(user, 'user.uploaded_avatar_id');\n        var avatarTemplate = Discourse.User.avatarTemplate(username,uploadedAvatarId);\n\n        return Discourse.Utilities.avatarImg({\n          size: options.imageSize,\n          extraClasses: Em.get(user, 'extras') || options.extraClasses,\n          title: title || username,\n          avatarTemplate: avatarTemplate\n        });\n      } else {\n        return '';\n      }\n    }\n\n    __exports__.renderAvatar = renderAvatar;Handlebars.registerHelper('avatar', function(user, options) {\n      if (typeof user === 'string') {\n        user = Ember.Handlebars.get(this, user, options);\n      }\n      return new Handlebars.SafeString(renderAvatar.call(this, user, options.hash));\n    });\n  });";
define("discourse/helpers/cold-age-class", 
  ["exports"],
  function(__exports__) {
    "use strict";
    function daysSinceEpoch(dt) {
      // 1000 * 60 * 60 * 24 = days since epoch
      return dt.getTime() / 86400000;
    }

    __exports__.daysSinceEpoch = daysSinceEpoch;/**
      Converts a date to a coldmap class
    **/
    function coldAgeClass(property, options) {
      var dt = Em.Handlebars.get(this, property, options);

      if (!dt) { return 'age'; }

      // Show heat on age
      var nowDays = daysSinceEpoch(new Date()),
          epochDays = daysSinceEpoch(new Date(dt));

      if (nowDays - epochDays > Discourse.SiteSettings.cold_age_days_high) return 'age coldmap-high';
      if (nowDays - epochDays > Discourse.SiteSettings.cold_age_days_medium) return 'age coldmap-med';
      if (nowDays - epochDays > Discourse.SiteSettings.cold_age_days_low) return 'age coldmap-low';

      return 'age';
    }

    Handlebars.registerHelper('cold-age-class', coldAgeClass);
    __exports__["default"] = coldAgeClass;
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/helpers/cold-age-class.js'] = "define(\"discourse/helpers/cold-age-class\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    function daysSinceEpoch(dt) {\n      // 1000 * 60 * 60 * 24 = days since epoch\n      return dt.getTime() / 86400000;\n    }\n\n    __exports__.daysSinceEpoch = daysSinceEpoch;/**\n      Converts a date to a coldmap class\n    **/\n    function coldAgeClass(property, options) {\n      var dt = Em.Handlebars.get(this, property, options);\n\n      if (!dt) { return 'age'; }\n\n      // Show heat on age\n      var nowDays = daysSinceEpoch(new Date()),\n          epochDays = daysSinceEpoch(new Date(dt));\n\n      if (nowDays - epochDays \u003e Discourse.SiteSettings.cold_age_days_high) return 'age coldmap-high';\n      if (nowDays - epochDays \u003e Discourse.SiteSettings.cold_age_days_medium) return 'age coldmap-med';\n      if (nowDays - epochDays \u003e Discourse.SiteSettings.cold_age_days_low) return 'age coldmap-low';\n\n      return 'age';\n    }\n\n    Handlebars.registerHelper('cold-age-class', coldAgeClass);\n    __exports__[\"default\"] = coldAgeClass;\n  });";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/*global md5:true */
/**

  Discourse uses the Markdown.js as its main parser. `Discourse.Dialect` is the framework
  for extending it with additional formatting.

**/

var parser = window.BetterMarkdown,
    MD = parser.Markdown,
    DialectHelpers = parser.DialectHelpers,
    dialect = MD.dialects.Discourse = DialectHelpers.subclassDialect( MD.dialects.Gruber ),
    initialized = false,
    emitters = [],
    hoisted,
    preProcessors = [];

/**
  Initialize our dialects for processing.

  @method initializeDialects
**/
function initializeDialects() {
  MD.buildBlockOrder(dialect.block);
  MD.buildInlinePatterns(dialect.inline);
  initialized = true;
}

/**
  Process the text nodes in the JsonML tree, calling any emitters that have
  been added.

  @method processTextNodes
  @param {Array} node the JsonML tree
  @param {Object} event the parse node event data
  @param {Function} emitter the function to call on the text node
**/
function processTextNodes(node, event, emitter) {
  if (node.length < 2) { return; }

  if (node[0] === '__RAW') {
    var hash = md5(node[1]);
    hoisted[hash] = node[1];
    node[1] = hash;
    return;
  }

  for (var j=1; j<node.length; j++) {
    var textContent = node[j];
    if (typeof textContent === "string") {
      var result = emitter(textContent, event);
      if (result) {
        if (result instanceof Array) {
          node.splice.apply(node, [j, 1].concat(result));
        } else {
          node[j] = result;
        }
      } else {
        node[j] = textContent;
      }

    }
  }
}


/**
  Parse a JSON ML tree, using registered handlers to adjust it if necessary.

  @method parseTree
  @param {Array} tree the JsonML tree to parse
  @param {Array} path the path of ancestors to the current node in the tree. Can be used for matching.
  @param {Object} insideCounts counts what tags we're inside
  @returns {Array} the parsed tree
**/
function parseTree(tree, path, insideCounts) {

  if (tree instanceof Array) {
    var event = {node: tree, path: path, dialect: dialect, insideCounts: insideCounts || {}};
    Discourse.Dialect.trigger('parseNode', event);

    for (var j=0; j<emitters.length; j++) {
      processTextNodes(tree, event, emitters[j]);
    }

    path = path || [];
    insideCounts = insideCounts || {};

    path.push(tree);

    for (var i=1; i<tree.length; i++) {
      var n = tree[i],
          tagName = n[0];

      insideCounts[tagName] = (insideCounts[tagName] || 0) + 1;

      if (n && n.length === 2 && n[0] === "p" && /^<!--([\s\S]*)-->$/.exec(n[1])) {
        // Remove paragraphs around comment-only nodes.
        tree[i] = n[1];
      } else {
        parseTree(n, path, insideCounts);
      }

      insideCounts[tagName] = insideCounts[tagName] - 1;
    }

    // If raw nodes are in paragraphs, pull them up
    if (tree.length === 2 && tree[0] === 'p' && tree[1] instanceof Array && tree[1][0] === "__RAW") {
      var text = tree[1][1];
      tree[0] = "__RAW";
      tree[1] = text;
    }

    path.pop();
  }
  return tree;
}

/**
  Returns true if there's an invalid word boundary for a match.

  @method invalidBoundary
  @param {Object} args our arguments, including whether we care about boundaries
  @param {Array} prev the previous content, if exists
  @returns {Boolean} whether there is an invalid word boundary
**/
function invalidBoundary(args, prev) {
  if (!(args.wordBoundary || args.spaceBoundary || args.spaceOrTagBoundary)) { return false; }

  var last = prev[prev.length - 1];
  if (typeof last !== "string") { return false; }

  if (args.wordBoundary && (last.match(/(\w|\/)$/))) { return true; }
  if (args.spaceBoundary && (!last.match(/\s$/))) { return true; }
  if (args.spaceOrTagBoundary && (!last.match(/(\s|\>)$/))) { return true; }
}

/**
  Returns the number of (terminated) lines in a string.

  @method countLines
  @param {string} str the string.
  @returns {Integer} number of terminated lines in str
**/
function countLines(str) {
  var index = -1, count = 0;
  while ((index = str.indexOf("\n", index + 1)) !== -1) { count++; }
  return count;
}

/**
  An object used for rendering our dialects.

  @class Dialect
  @namespace Discourse
  @module Discourse
**/
Discourse.Dialect = {

  /**
    Cook text using the dialects.

    @method cook
    @param {String} text the raw text to cook
    @param {Object} opts hash of options
    @returns {String} the cooked text
  **/
  cook: function(text, opts) {
    if (!initialized) { initializeDialects(); }

    preProcessors.forEach(function(p) {
      text = p(text);
    });

    hoisted = {};
    dialect.options = opts;
    var tree = parser.toHTMLTree(text, 'Discourse'),
        result = parser.renderJsonML(parseTree(tree));

    if (opts.sanitize) {
      result = Discourse.Markdown.sanitize(result);
    } else if (opts.sanitizerFunction) {
      result = opts.sanitizerFunction(result);
    }

    // If we hoisted out anything, put it back
    var keys = Object.keys(hoisted);
    if (keys.length) {
      keys.forEach(function(k) {
        result = result.replace(new RegExp(k,"g"), hoisted[k]);
      });
    }

    hoisted = {};
    return result.trim();
  },

  /**
    Adds a text pre-processor. Use only if necessary, as a dialect
    that emits JsonML is much better if possible.
  **/
  addPreProcessor: function(preProc) {
    preProcessors.push(preProc);
  },

  /**
    Registers an inline replacer function

    @method registerInline
    @param {String} start The token the replacement begins with
    @param {Function} fn The replacing function
  **/
  registerInline: function(start, fn) {
    dialect.inline[start] = fn;
  },


  /**
    The simplest kind of replacement possible. Replace a stirng token with JsonML.

    For example to replace all occurrances of :) with a smile image:

    ```javascript
      Discourse.Dialect.inlineReplace(':)', function (text) {
        return ['img', {src: '/images/smile.png'}];
      });

    ```

    @method inlineReplace
    @param {String} token The token we want to replace
    @param {Function} emitter A function that emits the JsonML for the replacement.
  **/
  inlineReplace: function(token, emitter) {
    this.registerInline(token, function(text, match, prev) {
      return [token.length, emitter.call(this, token, match, prev)];
    });
  },

  /**
    Matches inline using a regular expression. The emitter function is passed
    the matches from the regular expression.

    For example, this auto links URLs:

    ```javascript
      Discourse.Dialect.inlineRegexp({
        matcher: /((?:https?:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.])(?:[^\s()<>]+|\([^\s()<>]+\))+(?:\([^\s()<>]+\)|[^`!()\[\]{};:'".,<>?«»“”‘’\s]))/gm,
        spaceBoundary: true,
        start: 'http',

        emitter: function(matches) {
          var url = matches[1];
          return ['a', {href: url}, url];
        }
      });
    ```

    @method inlineRegexp
    @param {Object} args Our replacement options
      @param {Function} [opts.emitter] The function that will be called with the contents and regular expresison match and returns JsonML.
      @param {String} [opts.start] The starting token we want to find
      @param {String} [opts.matcher] The regular expression to match
      @param {Boolean} [opts.wordBoundary] If true, the match must be on a word boundary
      @param {Boolean} [opts.spaceBoundary] If true, the match must be on a space boundary
  **/
  inlineRegexp: function(args) {
    this.registerInline(args.start, function(text, match, prev) {
      if (invalidBoundary(args, prev)) { return; }

      args.matcher.lastIndex = 0;
      var m = args.matcher.exec(text);
      if (m) {
        var result = args.emitter.call(this, m);
        if (result) {
          return [m[0].length, result];
        }
      }
    });
  },

  /**
    Handles inline replacements surrounded by tokens.

    For example, to handle markdown style bold. Note we use `concat` on the array because
    the contents are JsonML too since we didn't pass `rawContents` as true. This supports
    recursive markup.

    ```javascript

      Discourse.Dialect.inlineBetween({
        between: '**',
        wordBoundary: true.
        emitter: function(contents) {
          return ['strong'].concat(contents);
        }
      });
    ```

    @method inlineBetween
    @param {Object} args Our replacement options
      @param {Function} [opts.emitter] The function that will be called with the contents and returns JsonML.
      @param {String} [opts.start] The starting token we want to find
      @param {String} [opts.stop] The ending token we want to find
      @param {String} [opts.between] A shortcut for when the `start` and `stop` are the same.
      @param {Boolean} [opts.rawContents] If true, the contents between the tokens will not be parsed.
      @param {Boolean} [opts.wordBoundary] If true, the match must be on a word boundary
      @param {Boolean} [opts.spaceBoundary] If true, the match must be on a space boundary
  **/
  inlineBetween: function(args) {
    var start = args.start || args.between,
        stop = args.stop || args.between,
        startLength = start.length,
        self = this;

    this.registerInline(start, function(text, match, prev) {
      if (invalidBoundary(args, prev)) { return; }

      var endPos = self.findEndPos(text, start, stop, args, startLength);
      if (endPos === -1) { return; }
      var between = text.slice(startLength, endPos);

      // If rawcontents is set, don't process inline
      if (!args.rawContents) {
        between = this.processInline(between);
      }

      var contents = args.emitter.call(this, between);
      if (contents) {
        return [endPos+stop.length, contents];
      }
    });
  },

  findEndPos: function(text, start, stop, args, offset) {
    var endPos, nextStart;
    do {
      endPos = text.indexOf(stop, offset);
      if (endPos === -1) { return -1; }
      nextStart = text.indexOf(start, offset);
      offset = endPos + stop.length;
    } while (nextStart !== -1 && nextStart < endPos);
    return endPos;
  },

  /**
    Registers a block for processing. This is more complicated than using one of
    the other helpers such as `replaceBlock` so consider using them first!

    @method registerBlock
    @param {String} name the name of the block handler
    @param {Function} handler the handler
  **/
  registerBlock: function(name, handler) {
    dialect.block[name] = handler;
  },

  /**
    Replaces a block of text between a start and stop. As opposed to inline, these
    might span multiple lines.

    Here's an example that takes the content between `[code]` ... `[/code]` and
    puts them inside a `pre` tag:

    ```javascript
      Discourse.Dialect.replaceBlock({
        start: /(\[code\])([\s\S]*)/igm,
        stop: '[/code]',
        rawContents: true,

        emitter: function(blockContents) {
          return ['p', ['pre'].concat(blockContents)];
        }
      });
    ```

    @method replaceBlock
    @param {Object} args Our replacement options
      @param {RegExp} [args.start] The starting regexp we want to find
      @param {String} [args.stop] The ending token we want to find
      @param {Boolean} [args.rawContents] True to skip recursive processing
      @param {Function} [args.emitter] The emitting function to transform the contents of the block into jsonML

  **/
  replaceBlock: function(args) {
    this.registerBlock(args.start.toString(), function(block, next) {

      var linebreaks = dialect.options.traditional_markdown_linebreaks ||
          Discourse.SiteSettings.traditional_markdown_linebreaks;
      if (linebreaks && args.skipIfTradtionalLinebreaks) { return; }

      args.start.lastIndex = 0;
      var result = [], match = (args.start).exec(block);
      if (!match) { return; }

      var lastChance = function() {
        return !next.some(function(blk) { return blk.match(args.stop); });
      };

      // shave off start tag and leading text, if any.
      var pos = args.start.lastIndex - match[0].length,
          leading = block.slice(0, pos),
          trailing = match[2] ? match[2].replace(/^\n*/, "") : "";
      // just give up if there's no stop tag in this or any next block
      args.stop.lastIndex = block.length - trailing.length;
      if (!args.stop.exec(block) && lastChance()) { return; }
      if (leading.length > 0) { result.push(['p'].concat(this.processInline(leading))); }
      if (trailing.length > 0) {
        next.unshift(MD.mk_block(trailing, block.trailing,
          block.lineNumber + countLines(leading) + (match[2] ? match[2].length : 0) - trailing.length));
      }

      // go through the available blocks to find the matching stop tag.
      var contentBlocks = [], nesting = 0, actualEndPos = -1, currentBlock;
      blockloop:
      while (currentBlock = next.shift()) {
        // collect all the start and stop tags in the current block
        args.start.lastIndex = 0;
        var startPos = [], m;
        while (m = (args.start).exec(currentBlock)) {
          startPos.push(args.start.lastIndex - m[0].length);
          args.start.lastIndex = args.start.lastIndex - (m[2] ? m[2].length : 0);
        }
        args.stop.lastIndex = 0;
        var endPos = [];
        while (m = (args.stop).exec(currentBlock)) {
          endPos.push(args.stop.lastIndex - m[0].length);
        }

        // go through the available end tags:
        var ep = 0, sp = 0; // array indices
        while (ep < endPos.length) {
          if (sp < startPos.length && startPos[sp] < endPos[ep]) {
            // there's an end tag, but there's also another start tag first. we need to go deeper.
            sp++; nesting++;
          } else if (nesting > 0) {
            // found an end tag, but we must go up a level first.
            ep++; nesting--;
          } else {
            // found an end tag and we're at the top: done! -- or: start tag and end tag are
            // identical, (i.e. startPos[sp] == endPos[ep]), so we don't do nesting at all.
            actualEndPos = endPos[ep];
            break blockloop;
          }
        }

        if (lastChance()) {
          // when lastChance() becomes true the first time, currentBlock contains the last
          // end tag available in the input blocks but it's not on the right nesting level
          // or we would have terminated the loop already. the only thing we can do is to
          // treat the last available end tag as tho it were matched with our start tag
          // and let the emitter figure out how to render the garbage inside.
          actualEndPos = endPos[endPos.length - 1];
          break;
        }

        // any left-over start tags still increase the nesting level
        nesting += startPos.length - sp;
        contentBlocks.push(currentBlock);
      }

      var stopLen = currentBlock.match(args.stop)[0].length,
          before = currentBlock.slice(0, actualEndPos).replace(/\n*$/, ""),
          after = currentBlock.slice(actualEndPos + stopLen).replace(/^\n*/, "");
      if (before.length > 0) contentBlocks.push(MD.mk_block(before, "", currentBlock.lineNumber));
      if (after.length > 0) next.unshift(MD.mk_block(after, currentBlock.trailing, currentBlock.lineNumber + countLines(before)));

      var emitterResult = args.emitter.call(this, contentBlocks, match, dialect.options);
      if (emitterResult) { result.push(emitterResult); }
      return result;
    });
  },

  /**
    After the parser has been executed, post process any text nodes in the HTML document.
    This is useful if you want to apply a transformation to the text.

    If you are generating HTML from the text, it is preferable to use the replacer
    functions and do it in the parsing part of the pipeline. This function is best for
    simple transformations or transformations that have to happen after all earlier
    processing is done.

    For example, to convert all text to upper case:

    ```javascript

      Discourse.Dialect.postProcessText(function (text) {
        return text.toUpperCase();
      });

    ```

    @method postProcessText
    @param {Function} emitter The function to call with the text. It returns JsonML to modify the tree.
  **/
  postProcessText: function(emitter) {
    emitters.push(emitter);
  },

  /**
    After the parser has been executed, change the contents of a HTML tag.

    Let's say you want to replace the contents of all code tags to prepend
    "EVIL TROUT HACKED YOUR CODE!":

    ```javascript
      Discourse.Dialect.postProcessTag('code', function (contents) {
        return "EVIL TROUT HACKED YOUR CODE!\n\n" + contents;
      });
    ```

    @method postProcessTag
    @param {String} tag The HTML tag you want to match on
    @param {Function} emitter The function to call with the text. It returns JsonML to modify the tree.
  **/
  postProcessTag: function(tag, emitter) {
    Discourse.Dialect.on('parseNode', function (event) {
      var node = event.node;
      if (node[0] === tag) {
        node[node.length-1] = emitter(node[node.length-1]);
      }
    });
  }

};

RSVP.EventTarget.mixin(Discourse.Dialect);




// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/dialects/dialect.js'] = "/*global md5:true */\n/**\n\n  Discourse uses the Markdown.js as its main parser. `Discourse.Dialect` is the framework\n  for extending it with additional formatting.\n\n**/\n\nvar parser = window.BetterMarkdown,\n    MD = parser.Markdown,\n    DialectHelpers = parser.DialectHelpers,\n    dialect = MD.dialects.Discourse = DialectHelpers.subclassDialect( MD.dialects.Gruber ),\n    initialized = false,\n    emitters = [],\n    hoisted,\n    preProcessors = [];\n\n/**\n  Initialize our dialects for processing.\n\n  @method initializeDialects\n**/\nfunction initializeDialects() {\n  MD.buildBlockOrder(dialect.block);\n  MD.buildInlinePatterns(dialect.inline);\n  initialized = true;\n}\n\n/**\n  Process the text nodes in the JsonML tree, calling any emitters that have\n  been added.\n\n  @method processTextNodes\n  @param {Array} node the JsonML tree\n  @param {Object} event the parse node event data\n  @param {Function} emitter the function to call on the text node\n**/\nfunction processTextNodes(node, event, emitter) {\n  if (node.length \u003c 2) { return; }\n\n  if (node[0] === '__RAW') {\n    var hash = md5(node[1]);\n    hoisted[hash] = node[1];\n    node[1] = hash;\n    return;\n  }\n\n  for (var j=1; j\u003cnode.length; j++) {\n    var textContent = node[j];\n    if (typeof textContent === \"string\") {\n      var result = emitter(textContent, event);\n      if (result) {\n        if (result instanceof Array) {\n          node.splice.apply(node, [j, 1].concat(result));\n        } else {\n          node[j] = result;\n        }\n      } else {\n        node[j] = textContent;\n      }\n\n    }\n  }\n}\n\n\n/**\n  Parse a JSON ML tree, using registered handlers to adjust it if necessary.\n\n  @method parseTree\n  @param {Array} tree the JsonML tree to parse\n  @param {Array} path the path of ancestors to the current node in the tree. Can be used for matching.\n  @param {Object} insideCounts counts what tags we're inside\n  @returns {Array} the parsed tree\n**/\nfunction parseTree(tree, path, insideCounts) {\n\n  if (tree instanceof Array) {\n    var event = {node: tree, path: path, dialect: dialect, insideCounts: insideCounts || {}};\n    Discourse.Dialect.trigger('parseNode', event);\n\n    for (var j=0; j\u003cemitters.length; j++) {\n      processTextNodes(tree, event, emitters[j]);\n    }\n\n    path = path || [];\n    insideCounts = insideCounts || {};\n\n    path.push(tree);\n\n    for (var i=1; i\u003ctree.length; i++) {\n      var n = tree[i],\n          tagName = n[0];\n\n      insideCounts[tagName] = (insideCounts[tagName] || 0) + 1;\n\n      if (n \u0026\u0026 n.length === 2 \u0026\u0026 n[0] === \"p\" \u0026\u0026 /^\u003c!--([\\s\\S]*)--\u003e$/.exec(n[1])) {\n        // Remove paragraphs around comment-only nodes.\n        tree[i] = n[1];\n      } else {\n        parseTree(n, path, insideCounts);\n      }\n\n      insideCounts[tagName] = insideCounts[tagName] - 1;\n    }\n\n    // If raw nodes are in paragraphs, pull them up\n    if (tree.length === 2 \u0026\u0026 tree[0] === 'p' \u0026\u0026 tree[1] instanceof Array \u0026\u0026 tree[1][0] === \"__RAW\") {\n      var text = tree[1][1];\n      tree[0] = \"__RAW\";\n      tree[1] = text;\n    }\n\n    path.pop();\n  }\n  return tree;\n}\n\n/**\n  Returns true if there's an invalid word boundary for a match.\n\n  @method invalidBoundary\n  @param {Object} args our arguments, including whether we care about boundaries\n  @param {Array} prev the previous content, if exists\n  @returns {Boolean} whether there is an invalid word boundary\n**/\nfunction invalidBoundary(args, prev) {\n  if (!(args.wordBoundary || args.spaceBoundary || args.spaceOrTagBoundary)) { return false; }\n\n  var last = prev[prev.length - 1];\n  if (typeof last !== \"string\") { return false; }\n\n  if (args.wordBoundary \u0026\u0026 (last.match(/(\\w|\\/)$/))) { return true; }\n  if (args.spaceBoundary \u0026\u0026 (!last.match(/\\s$/))) { return true; }\n  if (args.spaceOrTagBoundary \u0026\u0026 (!last.match(/(\\s|\\\u003e)$/))) { return true; }\n}\n\n/**\n  Returns the number of (terminated) lines in a string.\n\n  @method countLines\n  @param {string} str the string.\n  @returns {Integer} number of terminated lines in str\n**/\nfunction countLines(str) {\n  var index = -1, count = 0;\n  while ((index = str.indexOf(\"\\n\", index + 1)) !== -1) { count++; }\n  return count;\n}\n\n/**\n  An object used for rendering our dialects.\n\n  @class Dialect\n  @namespace Discourse\n  @module Discourse\n**/\nDiscourse.Dialect = {\n\n  /**\n    Cook text using the dialects.\n\n    @method cook\n    @param {String} text the raw text to cook\n    @param {Object} opts hash of options\n    @returns {String} the cooked text\n  **/\n  cook: function(text, opts) {\n    if (!initialized) { initializeDialects(); }\n\n    preProcessors.forEach(function(p) {\n      text = p(text);\n    });\n\n    hoisted = {};\n    dialect.options = opts;\n    var tree = parser.toHTMLTree(text, 'Discourse'),\n        result = parser.renderJsonML(parseTree(tree));\n\n    if (opts.sanitize) {\n      result = Discourse.Markdown.sanitize(result);\n    } else if (opts.sanitizerFunction) {\n      result = opts.sanitizerFunction(result);\n    }\n\n    // If we hoisted out anything, put it back\n    var keys = Object.keys(hoisted);\n    if (keys.length) {\n      keys.forEach(function(k) {\n        result = result.replace(new RegExp(k,\"g\"), hoisted[k]);\n      });\n    }\n\n    hoisted = {};\n    return result.trim();\n  },\n\n  /**\n    Adds a text pre-processor. Use only if necessary, as a dialect\n    that emits JsonML is much better if possible.\n  **/\n  addPreProcessor: function(preProc) {\n    preProcessors.push(preProc);\n  },\n\n  /**\n    Registers an inline replacer function\n\n    @method registerInline\n    @param {String} start The token the replacement begins with\n    @param {Function} fn The replacing function\n  **/\n  registerInline: function(start, fn) {\n    dialect.inline[start] = fn;\n  },\n\n\n  /**\n    The simplest kind of replacement possible. Replace a stirng token with JsonML.\n\n    For example to replace all occurrances of :) with a smile image:\n\n    ```javascript\n      Discourse.Dialect.inlineReplace(':)', function (text) {\n        return ['img', {src: '/images/smile.png'}];\n      });\n\n    ```\n\n    @method inlineReplace\n    @param {String} token The token we want to replace\n    @param {Function} emitter A function that emits the JsonML for the replacement.\n  **/\n  inlineReplace: function(token, emitter) {\n    this.registerInline(token, function(text, match, prev) {\n      return [token.length, emitter.call(this, token, match, prev)];\n    });\n  },\n\n  /**\n    Matches inline using a regular expression. The emitter function is passed\n    the matches from the regular expression.\n\n    For example, this auto links URLs:\n\n    ```javascript\n      Discourse.Dialect.inlineRegexp({\n        matcher: /((?:https?:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.])(?:[^\\s()\u003c\u003e]+|\\([^\\s()\u003c\u003e]+\\))+(?:\\([^\\s()\u003c\u003e]+\\)|[^`!()\\[\\]{};:'\".,\u003c\u003e?«»“”‘’\\s]))/gm,\n        spaceBoundary: true,\n        start: 'http',\n\n        emitter: function(matches) {\n          var url = matches[1];\n          return ['a', {href: url}, url];\n        }\n      });\n    ```\n\n    @method inlineRegexp\n    @param {Object} args Our replacement options\n      @param {Function} [opts.emitter] The function that will be called with the contents and regular expresison match and returns JsonML.\n      @param {String} [opts.start] The starting token we want to find\n      @param {String} [opts.matcher] The regular expression to match\n      @param {Boolean} [opts.wordBoundary] If true, the match must be on a word boundary\n      @param {Boolean} [opts.spaceBoundary] If true, the match must be on a space boundary\n  **/\n  inlineRegexp: function(args) {\n    this.registerInline(args.start, function(text, match, prev) {\n      if (invalidBoundary(args, prev)) { return; }\n\n      args.matcher.lastIndex = 0;\n      var m = args.matcher.exec(text);\n      if (m) {\n        var result = args.emitter.call(this, m);\n        if (result) {\n          return [m[0].length, result];\n        }\n      }\n    });\n  },\n\n  /**\n    Handles inline replacements surrounded by tokens.\n\n    For example, to handle markdown style bold. Note we use `concat` on the array because\n    the contents are JsonML too since we didn't pass `rawContents` as true. This supports\n    recursive markup.\n\n    ```javascript\n\n      Discourse.Dialect.inlineBetween({\n        between: '**',\n        wordBoundary: true.\n        emitter: function(contents) {\n          return ['strong'].concat(contents);\n        }\n      });\n    ```\n\n    @method inlineBetween\n    @param {Object} args Our replacement options\n      @param {Function} [opts.emitter] The function that will be called with the contents and returns JsonML.\n      @param {String} [opts.start] The starting token we want to find\n      @param {String} [opts.stop] The ending token we want to find\n      @param {String} [opts.between] A shortcut for when the `start` and `stop` are the same.\n      @param {Boolean} [opts.rawContents] If true, the contents between the tokens will not be parsed.\n      @param {Boolean} [opts.wordBoundary] If true, the match must be on a word boundary\n      @param {Boolean} [opts.spaceBoundary] If true, the match must be on a space boundary\n  **/\n  inlineBetween: function(args) {\n    var start = args.start || args.between,\n        stop = args.stop || args.between,\n        startLength = start.length,\n        self = this;\n\n    this.registerInline(start, function(text, match, prev) {\n      if (invalidBoundary(args, prev)) { return; }\n\n      var endPos = self.findEndPos(text, start, stop, args, startLength);\n      if (endPos === -1) { return; }\n      var between = text.slice(startLength, endPos);\n\n      // If rawcontents is set, don't process inline\n      if (!args.rawContents) {\n        between = this.processInline(between);\n      }\n\n      var contents = args.emitter.call(this, between);\n      if (contents) {\n        return [endPos+stop.length, contents];\n      }\n    });\n  },\n\n  findEndPos: function(text, start, stop, args, offset) {\n    var endPos, nextStart;\n    do {\n      endPos = text.indexOf(stop, offset);\n      if (endPos === -1) { return -1; }\n      nextStart = text.indexOf(start, offset);\n      offset = endPos + stop.length;\n    } while (nextStart !== -1 \u0026\u0026 nextStart \u003c endPos);\n    return endPos;\n  },\n\n  /**\n    Registers a block for processing. This is more complicated than using one of\n    the other helpers such as `replaceBlock` so consider using them first!\n\n    @method registerBlock\n    @param {String} name the name of the block handler\n    @param {Function} handler the handler\n  **/\n  registerBlock: function(name, handler) {\n    dialect.block[name] = handler;\n  },\n\n  /**\n    Replaces a block of text between a start and stop. As opposed to inline, these\n    might span multiple lines.\n\n    Here's an example that takes the content between `[code]` ... `[/code]` and\n    puts them inside a `pre` tag:\n\n    ```javascript\n      Discourse.Dialect.replaceBlock({\n        start: /(\\[code\\])([\\s\\S]*)/igm,\n        stop: '[/code]',\n        rawContents: true,\n\n        emitter: function(blockContents) {\n          return ['p', ['pre'].concat(blockContents)];\n        }\n      });\n    ```\n\n    @method replaceBlock\n    @param {Object} args Our replacement options\n      @param {RegExp} [args.start] The starting regexp we want to find\n      @param {String} [args.stop] The ending token we want to find\n      @param {Boolean} [args.rawContents] True to skip recursive processing\n      @param {Function} [args.emitter] The emitting function to transform the contents of the block into jsonML\n\n  **/\n  replaceBlock: function(args) {\n    this.registerBlock(args.start.toString(), function(block, next) {\n\n      var linebreaks = dialect.options.traditional_markdown_linebreaks ||\n          Discourse.SiteSettings.traditional_markdown_linebreaks;\n      if (linebreaks \u0026\u0026 args.skipIfTradtionalLinebreaks) { return; }\n\n      args.start.lastIndex = 0;\n      var result = [], match = (args.start).exec(block);\n      if (!match) { return; }\n\n      var lastChance = function() {\n        return !next.some(function(blk) { return blk.match(args.stop); });\n      };\n\n      // shave off start tag and leading text, if any.\n      var pos = args.start.lastIndex - match[0].length,\n          leading = block.slice(0, pos),\n          trailing = match[2] ? match[2].replace(/^\\n*/, \"\") : \"\";\n      // just give up if there's no stop tag in this or any next block\n      args.stop.lastIndex = block.length - trailing.length;\n      if (!args.stop.exec(block) \u0026\u0026 lastChance()) { return; }\n      if (leading.length \u003e 0) { result.push(['p'].concat(this.processInline(leading))); }\n      if (trailing.length \u003e 0) {\n        next.unshift(MD.mk_block(trailing, block.trailing,\n          block.lineNumber + countLines(leading) + (match[2] ? match[2].length : 0) - trailing.length));\n      }\n\n      // go through the available blocks to find the matching stop tag.\n      var contentBlocks = [], nesting = 0, actualEndPos = -1, currentBlock;\n      blockloop:\n      while (currentBlock = next.shift()) {\n        // collect all the start and stop tags in the current block\n        args.start.lastIndex = 0;\n        var startPos = [], m;\n        while (m = (args.start).exec(currentBlock)) {\n          startPos.push(args.start.lastIndex - m[0].length);\n          args.start.lastIndex = args.start.lastIndex - (m[2] ? m[2].length : 0);\n        }\n        args.stop.lastIndex = 0;\n        var endPos = [];\n        while (m = (args.stop).exec(currentBlock)) {\n          endPos.push(args.stop.lastIndex - m[0].length);\n        }\n\n        // go through the available end tags:\n        var ep = 0, sp = 0; // array indices\n        while (ep \u003c endPos.length) {\n          if (sp \u003c startPos.length \u0026\u0026 startPos[sp] \u003c endPos[ep]) {\n            // there's an end tag, but there's also another start tag first. we need to go deeper.\n            sp++; nesting++;\n          } else if (nesting \u003e 0) {\n            // found an end tag, but we must go up a level first.\n            ep++; nesting--;\n          } else {\n            // found an end tag and we're at the top: done! -- or: start tag and end tag are\n            // identical, (i.e. startPos[sp] == endPos[ep]), so we don't do nesting at all.\n            actualEndPos = endPos[ep];\n            break blockloop;\n          }\n        }\n\n        if (lastChance()) {\n          // when lastChance() becomes true the first time, currentBlock contains the last\n          // end tag available in the input blocks but it's not on the right nesting level\n          // or we would have terminated the loop already. the only thing we can do is to\n          // treat the last available end tag as tho it were matched with our start tag\n          // and let the emitter figure out how to render the garbage inside.\n          actualEndPos = endPos[endPos.length - 1];\n          break;\n        }\n\n        // any left-over start tags still increase the nesting level\n        nesting += startPos.length - sp;\n        contentBlocks.push(currentBlock);\n      }\n\n      var stopLen = currentBlock.match(args.stop)[0].length,\n          before = currentBlock.slice(0, actualEndPos).replace(/\\n*$/, \"\"),\n          after = currentBlock.slice(actualEndPos + stopLen).replace(/^\\n*/, \"\");\n      if (before.length \u003e 0) contentBlocks.push(MD.mk_block(before, \"\", currentBlock.lineNumber));\n      if (after.length \u003e 0) next.unshift(MD.mk_block(after, currentBlock.trailing, currentBlock.lineNumber + countLines(before)));\n\n      var emitterResult = args.emitter.call(this, contentBlocks, match, dialect.options);\n      if (emitterResult) { result.push(emitterResult); }\n      return result;\n    });\n  },\n\n  /**\n    After the parser has been executed, post process any text nodes in the HTML document.\n    This is useful if you want to apply a transformation to the text.\n\n    If you are generating HTML from the text, it is preferable to use the replacer\n    functions and do it in the parsing part of the pipeline. This function is best for\n    simple transformations or transformations that have to happen after all earlier\n    processing is done.\n\n    For example, to convert all text to upper case:\n\n    ```javascript\n\n      Discourse.Dialect.postProcessText(function (text) {\n        return text.toUpperCase();\n      });\n\n    ```\n\n    @method postProcessText\n    @param {Function} emitter The function to call with the text. It returns JsonML to modify the tree.\n  **/\n  postProcessText: function(emitter) {\n    emitters.push(emitter);\n  },\n\n  /**\n    After the parser has been executed, change the contents of a HTML tag.\n\n    Let's say you want to replace the contents of all code tags to prepend\n    \"EVIL TROUT HACKED YOUR CODE!\":\n\n    ```javascript\n      Discourse.Dialect.postProcessTag('code', function (contents) {\n        return \"EVIL TROUT HACKED YOUR CODE!\\n\\n\" + contents;\n      });\n    ```\n\n    @method postProcessTag\n    @param {String} tag The HTML tag you want to match on\n    @param {Function} emitter The function to call with the text. It returns JsonML to modify the tree.\n  **/\n  postProcessTag: function(tag, emitter) {\n    Discourse.Dialect.on('parseNode', function (event) {\n      var node = event.node;\n      if (node[0] === tag) {\n        node[node.length-1] = emitter(node[node.length-1]);\n      }\n    });\n  }\n\n};\n\nRSVP.EventTarget.mixin(Discourse.Dialect);\n\n\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  This addition handles auto linking of text. When included, it will parse out links and create
  a hrefs for them.
**/

var urlReplacerArgs = {
  matcher: /^((?:https?:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.])(?:[^\s()<>]+|\([^\s()<>]+\))+(?:\([^\s()<>]+\)|[^`!()\[\]{};:'".,<>?«»“”‘’\s]))/gm,
  spaceOrTagBoundary: true,

  emitter: function(matches) {
    var url = matches[1],
        displayUrl = url;

    // Don't autolink a markdown link to something
    if (url.match(/\]\[\d$/)) { return; }

    // If we improperly caught a markdown link abort
    if (url.match(/\(http/)) { return; }

    if (url.match(/^www/)) { url = "http://" + url; }
    return ['a', {href: url}, displayUrl];
  }
};

Discourse.Dialect.inlineRegexp(_.merge({start: 'http'}, urlReplacerArgs));
Discourse.Dialect.inlineRegexp(_.merge({start: 'www'}, urlReplacerArgs));


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/dialects/autolink_dialect.js'] = "/**\n  This addition handles auto linking of text. When included, it will parse out links and create\n  a hrefs for them.\n**/\n\nvar urlReplacerArgs = {\n  matcher: /^((?:https?:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.])(?:[^\\s()\u003c\u003e]+|\\([^\\s()\u003c\u003e]+\\))+(?:\\([^\\s()\u003c\u003e]+\\)|[^`!()\\[\\]{};:'\".,\u003c\u003e?«»“”‘’\\s]))/gm,\n  spaceOrTagBoundary: true,\n\n  emitter: function(matches) {\n    var url = matches[1],\n        displayUrl = url;\n\n    // Don't autolink a markdown link to something\n    if (url.match(/\\]\\[\\d$/)) { return; }\n\n    // If we improperly caught a markdown link abort\n    if (url.match(/\\(http/)) { return; }\n\n    if (url.match(/^www/)) { url = \"http://\" + url; }\n    return ['a', {href: url}, displayUrl];\n  }\n};\n\nDiscourse.Dialect.inlineRegexp(_.merge({start: 'http'}, urlReplacerArgs));\nDiscourse.Dialect.inlineRegexp(_.merge({start: 'www'}, urlReplacerArgs));\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

Discourse.BBCode = {};

/**
  Create a simple BBCode tag handler

  @method replaceBBCode
  @param {tag} tag the tag we want to match
  @param {function} emitter the function that creates JsonML for the tag
  @param {Object} opts options to pass to Discourse.Dialect.inlineBetween
    @param {Function} [opts.emitter] The function that will be called with the contents and returns JsonML.
    @param {String} [opts.start] The starting token we want to find
    @param {String} [opts.stop] The ending token we want to find
    @param {String} [opts.between] A shortcut for when the `start` and `stop` are the same.
    @param {Boolean} [opts.rawContents] If true, the contents between the tokens will not be parsed.
    @param {Boolean} [opts.wordBoundary] If true, the match must be on a word boundary
    @param {Boolean} [opts.spaceBoundary] If true, the match must be on a sppace boundary
**/

Discourse.BBCode.register = function(codeName, args, emitter) {

  // Optional second param for args
  if (typeof args === "function") {
    emitter = args;
    args = {};
  }

  Discourse.Dialect.replaceBlock({
    start: new RegExp("\\[" + codeName + "(=[^\\[\\]]+)?\\]([\\s\\S]*)", "igm"),
    stop: new RegExp("\\[\\/" + codeName + "\\]", "igm"),
    emitter: function(blockContents, matches, options) {
      while (blockContents.length && (typeof blockContents[0] === "string" || blockContents[0] instanceof String)) {
        blockContents[0] = String(blockContents[0]).replace(/^\s+/, '');
        if (!blockContents[0].length) {
          blockContents.shift();
        } else {
          break;
        }
      }

      var contents = [];
      if (blockContents.length) {
        var self = this;

        var nextContents = blockContents.slice(1);
        blockContents = this.processBlock(blockContents[0], nextContents).concat(nextContents);

        blockContents.forEach(function (bc) {
          if (typeof bc === "string" || bc instanceof String) {
            var processed = self.processInline(String(bc));
            if (processed.length) {
              contents.push(['p'].concat(processed));
            }
          } else {
            contents.push(bc);
          }
        });
      }
      if (!args.singlePara && contents.length === 1) {
        contents[0].shift();
        contents = contents[0];
      }
      var result = emitter(contents, matches[1] ? matches[1].replace(/^=|\"/g, '') : null, options);
      return args.noWrap ? result : ['p', result];
    }
  });
};

Discourse.BBCode.replaceBBCode = function (tag, emitter, opts) {
  opts = opts || {};
  opts = _.merge(opts, { start: "[" + tag + "]", stop: "[/" + tag + "]", emitter: emitter });
  Discourse.Dialect.inlineBetween(opts);

  tag = tag.toUpperCase();
  opts = _.merge(opts, { start: "[" + tag + "]", stop: "[/" + tag + "]", emitter: emitter });
  Discourse.Dialect.inlineBetween(opts);
};

/**
  Shortcut to call replaceBBCode with `rawContents` as true.

  @method replaceBBCode
  @param {tag} tag the tag we want to match
  @param {function} emitter the function that creates JsonML for the tag
**/
Discourse.BBCode.rawBBCode = function (tag, emitter) {
  Discourse.BBCode.replaceBBCode(tag, emitter, { rawContents: true });
};

/**
  Creates a BBCode handler that accepts parameters. Passes them to the emitter.

  @method replaceBBCodeParamsRaw
  @param {tag} tag the tag we want to match
  @param {function} emitter the function that creates JsonML for the tag
**/
Discourse.BBCode.replaceBBCodeParamsRaw = function (tag, emitter) {
  var opts = {
    rawContents: true,
    emitter: function(contents) {
      var regexp = /^([^\]]+)\]([\S\s]*)$/,
          m = regexp.exec(contents);

      if (m) { return emitter.call(this, m[1], m[2]); }
    }
  };

  Discourse.Dialect.inlineBetween(_.merge(opts, { start: "[" + tag + "=", stop: "[/" + tag + "]" }));

  tag = tag.toUpperCase();
  Discourse.Dialect.inlineBetween(_.merge(opts, { start: "[" + tag + "=", stop: "[/" + tag + "]" }));
};

/**
  Filters an array of JSON-ML nodes, removing nodes that represent empty lines ("\n").

  @method removeEmptyLines
  @param {Array} [contents] Array of JSON-ML nodes
**/
Discourse.BBCode.removeEmptyLines = function (contents) {
  var result = [];
  for (var i=0; i < contents.length; i++) {
    if (contents[i] !== "\n") { result.push(contents[i]); }
  }
  return result;
};

Discourse.BBCode.replaceBBCode('b', function(contents) { return ['span', {'class': 'bbcode-b'}].concat(contents); });
Discourse.BBCode.replaceBBCode('i', function(contents) { return ['span', {'class': 'bbcode-i'}].concat(contents); });
Discourse.BBCode.replaceBBCode('u', function(contents) { return ['span', {'class': 'bbcode-u'}].concat(contents); });
Discourse.BBCode.replaceBBCode('s', function(contents) { return ['span', {'class': 'bbcode-s'}].concat(contents); });
Discourse.Markdown.whiteListTag('span', 'class', /^bbcode-[bius]$/);

Discourse.BBCode.replaceBBCode('ul', function(contents) { return ['ul'].concat(Discourse.BBCode.removeEmptyLines(contents)); });
Discourse.BBCode.replaceBBCode('ol', function(contents) { return ['ol'].concat(Discourse.BBCode.removeEmptyLines(contents)); });
Discourse.BBCode.replaceBBCode('li', function(contents) { return ['li'].concat(Discourse.BBCode.removeEmptyLines(contents)); });

Discourse.BBCode.rawBBCode('img', function(contents) { return ['img', {href: contents}]; });
Discourse.BBCode.rawBBCode('email', function(contents) { return ['a', {href: "mailto:" + contents, 'data-bbcode': true}, contents]; });
Discourse.BBCode.rawBBCode('url', function(contents) { return ['a', {href: contents, 'data-bbcode': true}, contents]; });
Discourse.BBCode.rawBBCode('spoiler', function(contents) {
  if (/<img/i.test(contents)) {
    return ['div', { 'class': 'spoiler' }, contents];
  } else {
    return ['span', { 'class': 'spoiler' }, contents];
  }
});

Discourse.BBCode.replaceBBCodeParamsRaw("url", function(param, contents) {
  return ['a', {href: param, 'data-bbcode': true}].concat(contents);
});

Discourse.BBCode.replaceBBCodeParamsRaw("email", function(param, contents) {
  return ['a', {href: "mailto:" + param, 'data-bbcode': true}].concat(contents);
});

Discourse.BBCode.register('size', function(contents, params) {
  return ['span', {'class': "bbcode-size-" + (parseInt(params, 10) || 1)}].concat(contents);
});
Discourse.Markdown.whiteListTag('span', 'class', /^bbcode-size-\d+$/);

// Handles `[code] ... [/code]` blocks
Discourse.Dialect.replaceBlock({
  start: /(\[code\])([\s\S]*)/igm,
  stop: /\[\/code\]/igm,
  rawContents: true,

  emitter: function(blockContents) {
    var inner = blockContents.join("\n").replace(/^\s+/,'');
    return ['p', ['pre', ['code', {'class': Discourse.SiteSettings.default_code_lang}, inner]]];
  }
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/dialects/bbcode_dialect.js'] = "Discourse.BBCode = {};\n\n/**\n  Create a simple BBCode tag handler\n\n  @method replaceBBCode\n  @param {tag} tag the tag we want to match\n  @param {function} emitter the function that creates JsonML for the tag\n  @param {Object} opts options to pass to Discourse.Dialect.inlineBetween\n    @param {Function} [opts.emitter] The function that will be called with the contents and returns JsonML.\n    @param {String} [opts.start] The starting token we want to find\n    @param {String} [opts.stop] The ending token we want to find\n    @param {String} [opts.between] A shortcut for when the `start` and `stop` are the same.\n    @param {Boolean} [opts.rawContents] If true, the contents between the tokens will not be parsed.\n    @param {Boolean} [opts.wordBoundary] If true, the match must be on a word boundary\n    @param {Boolean} [opts.spaceBoundary] If true, the match must be on a sppace boundary\n**/\n\nDiscourse.BBCode.register = function(codeName, args, emitter) {\n\n  // Optional second param for args\n  if (typeof args === \"function\") {\n    emitter = args;\n    args = {};\n  }\n\n  Discourse.Dialect.replaceBlock({\n    start: new RegExp(\"\\\\[\" + codeName + \"(=[^\\\\[\\\\]]+)?\\\\]([\\\\s\\\\S]*)\", \"igm\"),\n    stop: new RegExp(\"\\\\[\\\\/\" + codeName + \"\\\\]\", \"igm\"),\n    emitter: function(blockContents, matches, options) {\n      while (blockContents.length \u0026\u0026 (typeof blockContents[0] === \"string\" || blockContents[0] instanceof String)) {\n        blockContents[0] = String(blockContents[0]).replace(/^\\s+/, '');\n        if (!blockContents[0].length) {\n          blockContents.shift();\n        } else {\n          break;\n        }\n      }\n\n      var contents = [];\n      if (blockContents.length) {\n        var self = this;\n\n        var nextContents = blockContents.slice(1);\n        blockContents = this.processBlock(blockContents[0], nextContents).concat(nextContents);\n\n        blockContents.forEach(function (bc) {\n          if (typeof bc === \"string\" || bc instanceof String) {\n            var processed = self.processInline(String(bc));\n            if (processed.length) {\n              contents.push(['p'].concat(processed));\n            }\n          } else {\n            contents.push(bc);\n          }\n        });\n      }\n      if (!args.singlePara \u0026\u0026 contents.length === 1) {\n        contents[0].shift();\n        contents = contents[0];\n      }\n      var result = emitter(contents, matches[1] ? matches[1].replace(/^=|\\\"/g, '') : null, options);\n      return args.noWrap ? result : ['p', result];\n    }\n  });\n};\n\nDiscourse.BBCode.replaceBBCode = function (tag, emitter, opts) {\n  opts = opts || {};\n  opts = _.merge(opts, { start: \"[\" + tag + \"]\", stop: \"[/\" + tag + \"]\", emitter: emitter });\n  Discourse.Dialect.inlineBetween(opts);\n\n  tag = tag.toUpperCase();\n  opts = _.merge(opts, { start: \"[\" + tag + \"]\", stop: \"[/\" + tag + \"]\", emitter: emitter });\n  Discourse.Dialect.inlineBetween(opts);\n};\n\n/**\n  Shortcut to call replaceBBCode with `rawContents` as true.\n\n  @method replaceBBCode\n  @param {tag} tag the tag we want to match\n  @param {function} emitter the function that creates JsonML for the tag\n**/\nDiscourse.BBCode.rawBBCode = function (tag, emitter) {\n  Discourse.BBCode.replaceBBCode(tag, emitter, { rawContents: true });\n};\n\n/**\n  Creates a BBCode handler that accepts parameters. Passes them to the emitter.\n\n  @method replaceBBCodeParamsRaw\n  @param {tag} tag the tag we want to match\n  @param {function} emitter the function that creates JsonML for the tag\n**/\nDiscourse.BBCode.replaceBBCodeParamsRaw = function (tag, emitter) {\n  var opts = {\n    rawContents: true,\n    emitter: function(contents) {\n      var regexp = /^([^\\]]+)\\]([\\S\\s]*)$/,\n          m = regexp.exec(contents);\n\n      if (m) { return emitter.call(this, m[1], m[2]); }\n    }\n  };\n\n  Discourse.Dialect.inlineBetween(_.merge(opts, { start: \"[\" + tag + \"=\", stop: \"[/\" + tag + \"]\" }));\n\n  tag = tag.toUpperCase();\n  Discourse.Dialect.inlineBetween(_.merge(opts, { start: \"[\" + tag + \"=\", stop: \"[/\" + tag + \"]\" }));\n};\n\n/**\n  Filters an array of JSON-ML nodes, removing nodes that represent empty lines (\"\\n\").\n\n  @method removeEmptyLines\n  @param {Array} [contents] Array of JSON-ML nodes\n**/\nDiscourse.BBCode.removeEmptyLines = function (contents) {\n  var result = [];\n  for (var i=0; i \u003c contents.length; i++) {\n    if (contents[i] !== \"\\n\") { result.push(contents[i]); }\n  }\n  return result;\n};\n\nDiscourse.BBCode.replaceBBCode('b', function(contents) { return ['span', {'class': 'bbcode-b'}].concat(contents); });\nDiscourse.BBCode.replaceBBCode('i', function(contents) { return ['span', {'class': 'bbcode-i'}].concat(contents); });\nDiscourse.BBCode.replaceBBCode('u', function(contents) { return ['span', {'class': 'bbcode-u'}].concat(contents); });\nDiscourse.BBCode.replaceBBCode('s', function(contents) { return ['span', {'class': 'bbcode-s'}].concat(contents); });\nDiscourse.Markdown.whiteListTag('span', 'class', /^bbcode-[bius]$/);\n\nDiscourse.BBCode.replaceBBCode('ul', function(contents) { return ['ul'].concat(Discourse.BBCode.removeEmptyLines(contents)); });\nDiscourse.BBCode.replaceBBCode('ol', function(contents) { return ['ol'].concat(Discourse.BBCode.removeEmptyLines(contents)); });\nDiscourse.BBCode.replaceBBCode('li', function(contents) { return ['li'].concat(Discourse.BBCode.removeEmptyLines(contents)); });\n\nDiscourse.BBCode.rawBBCode('img', function(contents) { return ['img', {href: contents}]; });\nDiscourse.BBCode.rawBBCode('email', function(contents) { return ['a', {href: \"mailto:\" + contents, 'data-bbcode': true}, contents]; });\nDiscourse.BBCode.rawBBCode('url', function(contents) { return ['a', {href: contents, 'data-bbcode': true}, contents]; });\nDiscourse.BBCode.rawBBCode('spoiler', function(contents) {\n  if (/\u003cimg/i.test(contents)) {\n    return ['div', { 'class': 'spoiler' }, contents];\n  } else {\n    return ['span', { 'class': 'spoiler' }, contents];\n  }\n});\n\nDiscourse.BBCode.replaceBBCodeParamsRaw(\"url\", function(param, contents) {\n  return ['a', {href: param, 'data-bbcode': true}].concat(contents);\n});\n\nDiscourse.BBCode.replaceBBCodeParamsRaw(\"email\", function(param, contents) {\n  return ['a', {href: \"mailto:\" + param, 'data-bbcode': true}].concat(contents);\n});\n\nDiscourse.BBCode.register('size', function(contents, params) {\n  return ['span', {'class': \"bbcode-size-\" + (parseInt(params, 10) || 1)}].concat(contents);\n});\nDiscourse.Markdown.whiteListTag('span', 'class', /^bbcode-size-\\d+$/);\n\n// Handles `[code] ... [/code]` blocks\nDiscourse.Dialect.replaceBlock({\n  start: /(\\[code\\])([\\s\\S]*)/igm,\n  stop: /\\[\\/code\\]/igm,\n  rawContents: true,\n\n  emitter: function(blockContents) {\n    var inner = blockContents.join(\"\\n\").replace(/^\\s+/,'');\n    return ['p', ['pre', ['code', {'class': Discourse.SiteSettings.default_code_lang}, inner]]];\n  }\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  markdown-js doesn't ensure that em/strong codes are present on word boundaries.
  So we create our own handlers here.
**/

// From PageDown
var aLetter = /[a-zA-Z0-9\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376-\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0523\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0621-\u064a\u0660-\u0669\u066e-\u066f\u0671-\u06d3\u06d5\u06e5-\u06e6\u06ee-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07c0-\u07ea\u07f4-\u07f5\u07fa\u0904-\u0939\u093d\u0950\u0958-\u0961\u0966-\u096f\u0971-\u0972\u097b-\u097f\u0985-\u098c\u098f-\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc-\u09dd\u09df-\u09e1\u09e6-\u09f1\u0a05-\u0a0a\u0a0f-\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32-\u0a33\u0a35-\u0a36\u0a38-\u0a39\u0a59-\u0a5c\u0a5e\u0a66-\u0a6f\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2-\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0-\u0ae1\u0ae6-\u0aef\u0b05-\u0b0c\u0b0f-\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32-\u0b33\u0b35-\u0b39\u0b3d\u0b5c-\u0b5d\u0b5f-\u0b61\u0b66-\u0b6f\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99-\u0b9a\u0b9c\u0b9e-\u0b9f\u0ba3-\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0be6-\u0bef\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58-\u0c59\u0c60-\u0c61\u0c66-\u0c6f\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0-\u0ce1\u0ce6-\u0cef\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d28\u0d2a-\u0d39\u0d3d\u0d60-\u0d61\u0d66-\u0d6f\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32-\u0e33\u0e40-\u0e46\u0e50-\u0e59\u0e81-\u0e82\u0e84\u0e87-\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa-\u0eab\u0ead-\u0eb0\u0eb2-\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0ed0-\u0ed9\u0edc-\u0edd\u0f00\u0f20-\u0f29\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8b\u1000-\u102a\u103f-\u1049\u1050-\u1055\u105a-\u105d\u1061\u1065-\u1066\u106e-\u1070\u1075-\u1081\u108e\u1090-\u1099\u10a0-\u10c5\u10d0-\u10fa\u10fc\u1100-\u1159\u115f-\u11a2\u11a8-\u11f9\u1200-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u1676\u1681-\u169a\u16a0-\u16ea\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u17e0-\u17e9\u1810-\u1819\u1820-\u1877\u1880-\u18a8\u18aa\u1900-\u191c\u1946-\u196d\u1970-\u1974\u1980-\u19a9\u19c1-\u19c7\u19d0-\u19d9\u1a00-\u1a16\u1b05-\u1b33\u1b45-\u1b4b\u1b50-\u1b59\u1b83-\u1ba0\u1bae-\u1bb9\u1c00-\u1c23\u1c40-\u1c49\u1c4d-\u1c7d\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u203f-\u2040\u2054\u2071\u207f\u2090-\u2094\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2183-\u2184\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2c6f\u2c71-\u2c7d\u2c80-\u2ce4\u2d00-\u2d25\u2d30-\u2d65\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3006\u3031-\u3035\u303b-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31b7\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fc3\ua000-\ua48c\ua500-\ua60c\ua610-\ua62b\ua640-\ua65f\ua662-\ua66e\ua67f-\ua697\ua717-\ua71f\ua722-\ua788\ua78b-\ua78c\ua7fb-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8d0-\ua8d9\ua900-\ua925\ua930-\ua946\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa50-\uaa59\uac00-\ud7a3\uf900-\ufa2d\ufa30-\ufa6a\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe33-\ufe34\ufe4d-\ufe4f\ufe70-\ufe74\ufe76-\ufefc\uff10-\uff19\uff21-\uff3a\uff3f\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]/;

var replaceMarkdown = function(match, tag) {
  Discourse.Dialect.registerInline(match, function(text, matched, prev){
    if(!text || text.length < match.length + 1) {
      return;
    }
    var lastText = prev[prev.length-1];
    lastText = typeof lastText === "string" && lastText;
    lastText = lastText && lastText[lastText.length-1];
    if(lastText && (lastText === "/" || lastText.match(aLetter))){
      return;
    }

    if(text[match.length].match(/\s/)) {
      return;
    }

    var endText = new RegExp("[^\\s|" + match[0] + "]" + match.replace(/\*/g,"\\*") + "([^" + match[0] + "]|$)");
    var finish = text.split("\n")[0].search(endText);
    if(finish && finish >= 0) {
      var newText = text.substring(match.length,finish+1);
      newText = this.processInline(newText);
      var array = typeof tag === "string" ? [tag].concat(newText) : [tag[0], [tag[1]].concat(newText)];
      return [finish + match.length + 1, array];
    }
  });
};

replaceMarkdown('***', ['strong','em']);
replaceMarkdown('___', ['strong','em']);
replaceMarkdown('**', 'strong');
replaceMarkdown('__', 'strong');
replaceMarkdown('*', 'em');
replaceMarkdown('_', 'em');




// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/dialects/bold_italics_dialect.js'] = "/**\n  markdown-js doesn't ensure that em/strong codes are present on word boundaries.\n  So we create our own handlers here.\n**/\n\n// From PageDown\nvar aLetter = /[a-zA-Z0-9\\u00aa\\u00b5\\u00ba\\u00c0-\\u00d6\\u00d8-\\u00f6\\u00f8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376-\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0523\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0621-\\u064a\\u0660-\\u0669\\u066e-\\u066f\\u0671-\\u06d3\\u06d5\\u06e5-\\u06e6\\u06ee-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07c0-\\u07ea\\u07f4-\\u07f5\\u07fa\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0966-\\u096f\\u0971-\\u0972\\u097b-\\u097f\\u0985-\\u098c\\u098f-\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc-\\u09dd\\u09df-\\u09e1\\u09e6-\\u09f1\\u0a05-\\u0a0a\\u0a0f-\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32-\\u0a33\\u0a35-\\u0a36\\u0a38-\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a66-\\u0a6f\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2-\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0-\\u0ae1\\u0ae6-\\u0aef\\u0b05-\\u0b0c\\u0b0f-\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32-\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c-\\u0b5d\\u0b5f-\\u0b61\\u0b66-\\u0b6f\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99-\\u0b9a\\u0b9c\\u0b9e-\\u0b9f\\u0ba3-\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0be6-\\u0bef\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58-\\u0c59\\u0c60-\\u0c61\\u0c66-\\u0c6f\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0-\\u0ce1\\u0ce6-\\u0cef\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d28\\u0d2a-\\u0d39\\u0d3d\\u0d60-\\u0d61\\u0d66-\\u0d6f\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32-\\u0e33\\u0e40-\\u0e46\\u0e50-\\u0e59\\u0e81-\\u0e82\\u0e84\\u0e87-\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa-\\u0eab\\u0ead-\\u0eb0\\u0eb2-\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0ed0-\\u0ed9\\u0edc-\\u0edd\\u0f00\\u0f20-\\u0f29\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8b\\u1000-\\u102a\\u103f-\\u1049\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065-\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u1090-\\u1099\\u10a0-\\u10c5\\u10d0-\\u10fa\\u10fc\\u1100-\\u1159\\u115f-\\u11a2\\u11a8-\\u11f9\\u1200-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u1676\\u1681-\\u169a\\u16a0-\\u16ea\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u17e0-\\u17e9\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u1900-\\u191c\\u1946-\\u196d\\u1970-\\u1974\\u1980-\\u19a9\\u19c1-\\u19c7\\u19d0-\\u19d9\\u1a00-\\u1a16\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b50-\\u1b59\\u1b83-\\u1ba0\\u1bae-\\u1bb9\\u1c00-\\u1c23\\u1c40-\\u1c49\\u1c4d-\\u1c7d\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u203f-\\u2040\\u2054\\u2071\\u207f\\u2090-\\u2094\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2183-\\u2184\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2c6f\\u2c71-\\u2c7d\\u2c80-\\u2ce4\\u2d00-\\u2d25\\u2d30-\\u2d65\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3006\\u3031-\\u3035\\u303b-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31b7\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fc3\\ua000-\\ua48c\\ua500-\\ua60c\\ua610-\\ua62b\\ua640-\\ua65f\\ua662-\\ua66e\\ua67f-\\ua697\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78c\\ua7fb-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8d0-\\ua8d9\\ua900-\\ua925\\ua930-\\ua946\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa50-\\uaa59\\uac00-\\ud7a3\\uf900-\\ufa2d\\ufa30-\\ufa6a\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40-\\ufb41\\ufb43-\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe33-\\ufe34\\ufe4d-\\ufe4f\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff10-\\uff19\\uff21-\\uff3a\\uff3f\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]/;\n\nvar replaceMarkdown = function(match, tag) {\n  Discourse.Dialect.registerInline(match, function(text, matched, prev){\n    if(!text || text.length \u003c match.length + 1) {\n      return;\n    }\n    var lastText = prev[prev.length-1];\n    lastText = typeof lastText === \"string\" \u0026\u0026 lastText;\n    lastText = lastText \u0026\u0026 lastText[lastText.length-1];\n    if(lastText \u0026\u0026 (lastText === \"/\" || lastText.match(aLetter))){\n      return;\n    }\n\n    if(text[match.length].match(/\\s/)) {\n      return;\n    }\n\n    var endText = new RegExp(\"[^\\\\s|\" + match[0] + \"]\" + match.replace(/\\*/g,\"\\\\*\") + \"([^\" + match[0] + \"]|$)\");\n    var finish = text.split(\"\\n\")[0].search(endText);\n    if(finish \u0026\u0026 finish \u003e= 0) {\n      var newText = text.substring(match.length,finish+1);\n      newText = this.processInline(newText);\n      var array = typeof tag === \"string\" ? [tag].concat(newText) : [tag[0], [tag[1]].concat(newText)];\n      return [finish + match.length + 1, array];\n    }\n  });\n};\n\nreplaceMarkdown('***', ['strong','em']);\nreplaceMarkdown('___', ['strong','em']);\nreplaceMarkdown('**', 'strong');\nreplaceMarkdown('__', 'strong');\nreplaceMarkdown('*', 'em');\nreplaceMarkdown('_', 'em');\n\n\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  Support for various code blocks
**/


var acceptableCodeClasses =
  ["lang-auto", "1c", "actionscript", "apache", "applescript", "avrasm", "axapta", "bash", "brainfuck",
   "clojure", "cmake", "coffeescript", "cpp", "cs", "css", "d", "delphi", "diff", "xml", "django", "dos",
   "erlang-repl", "erlang", "glsl", "go", "handlebars", "haskell", "http", "ini", "java", "javascript",
   "json", "lisp", "lua", "markdown", "matlab", "mel", "nginx", "objectivec", "parser3", "perl", "php",
   "profile", "python", "r", "rib", "rsl", "ruby", "rust", "scala", "smalltalk", "sql", "tex", "text",
   "vala", "vbscript", "vhdl"];

function flattenBlocks(blocks) {
  var result = "";
  blocks.forEach(function(b) {
    result += b;
    if (b.trailing) { result += b.trailing; }
  });
  return result;
}

Discourse.Dialect.replaceBlock({
  start: /^`{3}([^\n\[\]]+)?\n?([\s\S]*)?/gm,
  stop: /^```$/gm,
  emitter: function(blockContents, matches) {

    var klass = Discourse.SiteSettings.default_code_lang;
    if (matches[1] && acceptableCodeClasses.indexOf(matches[1]) !== -1) {
      klass = matches[1];
    }
    return ['p', ['pre', ['code', {'class': klass}, flattenBlocks(blockContents) ]]];
  }
});

// Ensure that content in a code block is fully escaped. This way it's not white listed
// and we can use HTML and Javascript examples.
Discourse.Dialect.on('parseNode', function (event) {
  var node = event.node,
      path = event.path;

  if (node[0] === 'code') {
    var contents = node[node.length-1],
        regexp;

    if (path && path[path.length-1] && path[path.length-1][0] && path[path.length-1][0] === "pre") {
      regexp = / +$/g;

    } else {
      regexp = /^ +| +$/g;
    }
    node[node.length-1] = Handlebars.Utils.escapeExpression(contents.replace(regexp,''));
  }
});

Discourse.Dialect.replaceBlock({
  start: /(<pre[^\>]*\>)([\s\S]*)/igm,
  stop: /<\/pre>/igm,
  rawContents: true,
  skipIfTradtionalLinebreaks: true,

  emitter: function(blockContents) {
    return ['p', ['pre', flattenBlocks(blockContents)]];
  }
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/dialects/code_dialect.js'] = "/**\n  Support for various code blocks\n**/\n\n\nvar acceptableCodeClasses =\n  [\"lang-auto\", \"1c\", \"actionscript\", \"apache\", \"applescript\", \"avrasm\", \"axapta\", \"bash\", \"brainfuck\",\n   \"clojure\", \"cmake\", \"coffeescript\", \"cpp\", \"cs\", \"css\", \"d\", \"delphi\", \"diff\", \"xml\", \"django\", \"dos\",\n   \"erlang-repl\", \"erlang\", \"glsl\", \"go\", \"handlebars\", \"haskell\", \"http\", \"ini\", \"java\", \"javascript\",\n   \"json\", \"lisp\", \"lua\", \"markdown\", \"matlab\", \"mel\", \"nginx\", \"objectivec\", \"parser3\", \"perl\", \"php\",\n   \"profile\", \"python\", \"r\", \"rib\", \"rsl\", \"ruby\", \"rust\", \"scala\", \"smalltalk\", \"sql\", \"tex\", \"text\",\n   \"vala\", \"vbscript\", \"vhdl\"];\n\nfunction flattenBlocks(blocks) {\n  var result = \"\";\n  blocks.forEach(function(b) {\n    result += b;\n    if (b.trailing) { result += b.trailing; }\n  });\n  return result;\n}\n\nDiscourse.Dialect.replaceBlock({\n  start: /^`{3}([^\\n\\[\\]]+)?\\n?([\\s\\S]*)?/gm,\n  stop: /^```$/gm,\n  emitter: function(blockContents, matches) {\n\n    var klass = Discourse.SiteSettings.default_code_lang;\n    if (matches[1] \u0026\u0026 acceptableCodeClasses.indexOf(matches[1]) !== -1) {\n      klass = matches[1];\n    }\n    return ['p', ['pre', ['code', {'class': klass}, flattenBlocks(blockContents) ]]];\n  }\n});\n\n// Ensure that content in a code block is fully escaped. This way it's not white listed\n// and we can use HTML and Javascript examples.\nDiscourse.Dialect.on('parseNode', function (event) {\n  var node = event.node,\n      path = event.path;\n\n  if (node[0] === 'code') {\n    var contents = node[node.length-1],\n        regexp;\n\n    if (path \u0026\u0026 path[path.length-1] \u0026\u0026 path[path.length-1][0] \u0026\u0026 path[path.length-1][0] === \"pre\") {\n      regexp = / +$/g;\n\n    } else {\n      regexp = /^ +| +$/g;\n    }\n    node[node.length-1] = Handlebars.Utils.escapeExpression(contents.replace(regexp,''));\n  }\n});\n\nDiscourse.Dialect.replaceBlock({\n  start: /(\u003cpre[^\\\u003e]*\\\u003e)([\\s\\S]*)/igm,\n  stop: /\u003c\\/pre\u003e/igm,\n  rawContents: true,\n  skipIfTradtionalLinebreaks: true,\n\n  emitter: function(blockContents) {\n    return ['p', ['pre', flattenBlocks(blockContents)]];\n  }\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  If a row begins with HTML tags, don't parse it.
**/

var blockTags = ['address', 'article', 'aside', 'audio', 'blockquote', 'canvas', 'dd', 'div',
                 'dl', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3',
                 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'iframe', 'noscript', 'ol', 'output',
                 'p', 'pre', 'section', 'table', 'tfoot', 'ul', 'video'],

    splitAtLast = function(tag, block, next, first) {
      var endTag = "</" + tag + ">",
          endTagIndex = first ? block.indexOf(endTag) : block.lastIndexOf(endTag);

      if (endTagIndex !== -1) {
        endTagIndex += endTag.length;

        var leading = block.substr(0, endTagIndex),
            trailing = block.substr(endTagIndex).replace(/^\s+/, '');

        if (trailing.length) {
          next.unshift(trailing);
        }

        return [ leading ];
      }
    };

Discourse.Dialect.registerBlock('html', function(block, next) {
  var split, pos;

  // Fix manual blockquote paragraphing even though it's not strictly correct
  // PERF NOTE: /\S+<blockquote/ is a perf hog for search, try on huge string
  if (pos = block.search(/<blockquote/) >= 0) {
    if(block.substring(0, pos).search(/\s/) === -1) {
      split = splitAtLast('blockquote', block, next, true);
      if (split) { return this.processInline(split[0]); }
    }
  }

  var m = /^<([^>]+)\>/.exec(block);
  if (m && m[1]) {
    var tag = m[1].split(/\s/);
    if (tag && tag[0] && blockTags.indexOf(tag[0]) !== -1) {
      split = splitAtLast(tag[0], block, next);
      if (split) {
        if (split.length === 1 && split[0] === block) { return; }
        return split;
      }
      return [ block.toString() ];
    }
  }
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/dialects/html.js'] = "/**\n  If a row begins with HTML tags, don't parse it.\n**/\n\nvar blockTags = ['address', 'article', 'aside', 'audio', 'blockquote', 'canvas', 'dd', 'div',\n                 'dl', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3',\n                 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'iframe', 'noscript', 'ol', 'output',\n                 'p', 'pre', 'section', 'table', 'tfoot', 'ul', 'video'],\n\n    splitAtLast = function(tag, block, next, first) {\n      var endTag = \"\u003c/\" + tag + \"\u003e\",\n          endTagIndex = first ? block.indexOf(endTag) : block.lastIndexOf(endTag);\n\n      if (endTagIndex !== -1) {\n        endTagIndex += endTag.length;\n\n        var leading = block.substr(0, endTagIndex),\n            trailing = block.substr(endTagIndex).replace(/^\\s+/, '');\n\n        if (trailing.length) {\n          next.unshift(trailing);\n        }\n\n        return [ leading ];\n      }\n    };\n\nDiscourse.Dialect.registerBlock('html', function(block, next) {\n  var split, pos;\n\n  // Fix manual blockquote paragraphing even though it's not strictly correct\n  // PERF NOTE: /\\S+\u003cblockquote/ is a perf hog for search, try on huge string\n  if (pos = block.search(/\u003cblockquote/) \u003e= 0) {\n    if(block.substring(0, pos).search(/\\s/) === -1) {\n      split = splitAtLast('blockquote', block, next, true);\n      if (split) { return this.processInline(split[0]); }\n    }\n  }\n\n  var m = /^\u003c([^\u003e]+)\\\u003e/.exec(block);\n  if (m \u0026\u0026 m[1]) {\n    var tag = m[1].split(/\\s/);\n    if (tag \u0026\u0026 tag[0] \u0026\u0026 blockTags.indexOf(tag[0]) !== -1) {\n      split = splitAtLast(tag[0], block, next);\n      if (split) {\n        if (split.length === 1 \u0026\u0026 split[0] === block) { return; }\n        return split;\n      }\n      return [ block.toString() ];\n    }\n  }\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  Supports Discourse's custom @mention syntax for calling out a user in a post.
  It will add a special class to them, and create a link if the user is found in a
  local map.
**/

Discourse.Dialect.inlineRegexp({
  start: '@',
  // NOTE: we really should be using SiteSettings here, but it loads later in process
  // also, if we do, we must ensure serverside version works as well
  matcher: /^(@[A-Za-z0-9][A-Za-z0-9_]{1,40})/m,
  wordBoundary: true,

  emitter: function(matches) {
    var username = matches[1],
        mentionLookup = this.dialect.options.mentionLookup;

    if (mentionLookup && mentionLookup(username.substr(1))) {
      return ['a', {'class': 'mention', href: Discourse.getURL("/users/") + username.substr(1).toLowerCase()}, username];
    } else {
      return ['span', {'class': 'mention'}, username];
    }
  }
});

// We have to prune @mentions that are within links.
Discourse.Dialect.on("parseNode", function(event) {
  var node = event.node,
      path = event.path;

  if (node[1] && node[1]["class"] === 'mention')  {
    var parent = path[path.length - 1];
    // If the parent is an 'a', remove it
    if (parent && parent[0] === 'a') {
      var username = node[2];
      node.length = 0;
      node[0] = "__RAW";
      node[1] = username;
    }
  }

});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/dialects/mention_dialect.js'] = "/**\n  Supports Discourse's custom @mention syntax for calling out a user in a post.\n  It will add a special class to them, and create a link if the user is found in a\n  local map.\n**/\n\nDiscourse.Dialect.inlineRegexp({\n  start: '@',\n  // NOTE: we really should be using SiteSettings here, but it loads later in process\n  // also, if we do, we must ensure serverside version works as well\n  matcher: /^(@[A-Za-z0-9][A-Za-z0-9_]{1,40})/m,\n  wordBoundary: true,\n\n  emitter: function(matches) {\n    var username = matches[1],\n        mentionLookup = this.dialect.options.mentionLookup;\n\n    if (mentionLookup \u0026\u0026 mentionLookup(username.substr(1))) {\n      return ['a', {'class': 'mention', href: Discourse.getURL(\"/users/\") + username.substr(1).toLowerCase()}, username];\n    } else {\n      return ['span', {'class': 'mention'}, username];\n    }\n  }\n});\n\n// We have to prune @mentions that are within links.\nDiscourse.Dialect.on(\"parseNode\", function(event) {\n  var node = event.node,\n      path = event.path;\n\n  if (node[1] \u0026\u0026 node[1][\"class\"] === 'mention')  {\n    var parent = path[path.length - 1];\n    // If the parent is an 'a', remove it\n    if (parent \u0026\u0026 parent[0] === 'a') {\n      var username = node[2];\n      node.length = 0;\n      node[0] = \"__RAW\";\n      node[1] = username;\n    }\n  }\n\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

Discourse.Dialect.on('parseNode', function (event) {
  var node = event.node,
      path = event.path;

  if (node[0] === 'a') {

    // It's invalid HTML to nest a link within another so strip it out.
    for (var i=0; i<path.length; i++) {
      if (path[i][0] === 'a') {
        var parent = path[path.length - 1],
            pos = parent.indexOf(node);

        // Just leave the link text
        if (pos !== -1) {
          parent[pos] = node[2];
        }
        return;
      }
    }
  }
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/dialects/nested_link_dialects.js'] = "Discourse.Dialect.on('parseNode', function (event) {\n  var node = event.node,\n      path = event.path;\n\n  if (node[0] === 'a') {\n\n    // It's invalid HTML to nest a link within another so strip it out.\n    for (var i=0; i\u003cpath.length; i++) {\n      if (path[i][0] === 'a') {\n        var parent = path[path.length - 1],\n            pos = parent.indexOf(node);\n\n        // Just leave the link text\n        if (pos !== -1) {\n          parent[pos] = node[2];\n        }\n        return;\n      }\n    }\n  }\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  Support for the newline behavior in markdown that most expect. Look through all text nodes
  in the tree, replace any new lines with `br`s.
**/

Discourse.Dialect.postProcessText(function (text, event) {
  var opts = event.dialect.options,
      insideCounts = event.insideCounts,
      linebreaks = opts.traditional_markdown_linebreaks || Discourse.SiteSettings.traditional_markdown_linebreaks;

  if (linebreaks || (insideCounts.pre > 0)) { return; }

  if (text === "\n") {
    // If the tag is just a new line, replace it with a `<br>`
    return [['br']];
  } else {


    // If the text node contains new lines, perhaps with text between them, insert the
    // `<br>` tags.
    var split = text.split(/\n+/);
    if (split.length) {
      var replacement = [];
      for (var i=0; i<split.length; i++) {
        if (split[i].length > 0) { replacement.push(split[i]); }
        if (i !== split.length-1) { replacement.push(['br']); }
      }

      return replacement;
    }
  }

});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/dialects/newline_dialect.js'] = "/**\n  Support for the newline behavior in markdown that most expect. Look through all text nodes\n  in the tree, replace any new lines with `br`s.\n**/\n\nDiscourse.Dialect.postProcessText(function (text, event) {\n  var opts = event.dialect.options,\n      insideCounts = event.insideCounts,\n      linebreaks = opts.traditional_markdown_linebreaks || Discourse.SiteSettings.traditional_markdown_linebreaks;\n\n  if (linebreaks || (insideCounts.pre \u003e 0)) { return; }\n\n  if (text === \"\\n\") {\n    // If the tag is just a new line, replace it with a `\u003cbr\u003e`\n    return [['br']];\n  } else {\n\n\n    // If the text node contains new lines, perhaps with text between them, insert the\n    // `\u003cbr\u003e` tags.\n    var split = text.split(/\\n+/);\n    if (split.length) {\n      var replacement = [];\n      for (var i=0; i\u003csplit.length; i++) {\n        if (split[i].length \u003e 0) { replacement.push(split[i]); }\n        if (i !== split.length-1) { replacement.push(['br']); }\n      }\n\n      return replacement;\n    }\n  }\n\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  Given a node in the document and its parent, determine whether it is on its
  own line or not.

  @method isOnOneLine
  @namespace Discourse.Dialect
**/

var isOnOneLine = function(link, parent) {
  if (!parent) { return false; }

  var siblings = parent.slice(1);
  if ((!siblings) || (siblings.length < 1)) { return false; }

  var idx = siblings.indexOf(link);
  if (idx === -1) { return false; }

  if (idx > 0) {
    var prev = siblings[idx-1];
    if (prev[0] !== 'br') { return false; }
  }

  if (idx < siblings.length) {
    var next = siblings[idx+1];
    if (next && (!((next[0] === 'br') || (typeof next === 'string' && next.trim() === "")))) { return false; }
  }

  return true;
};

/**
  We only onebox stuff that is on its own line. This navigates the JsonML tree and
  correctly inserts the oneboxes.

  @event parseNode
  @namespace Discourse.Dialect
**/
Discourse.Dialect.on("parseNode", function(event) {
  var node = event.node,
      path = event.path;

  // We only care about links
  if (node[0] !== 'a')  { return; }

  var parent = path[path.length - 1];

  // We don't onebox bbcode
  if (node[1]['data-bbcode']) {
    delete node[1]['data-bbcode'];
    return;
  }

  // We don't onebox mentions
  if (node[1]['class'] === 'mention') { return; }

  // Don't onebox links within a list
  for (var i=0; i<path.length; i++) {
    if (path[i][0] === 'li') { return; }
  }

  // If the link has a different label text than the link itself, don't onebox it.
  var label = node[node.length-1];
  if (label !== node[1]['href']) { return; }

  if (isOnOneLine(node, parent)) {

    node[1]['class'] = 'onebox';
    node[1].target = '_blank';

    if (Discourse && Discourse.Onebox) {
      var contents = Discourse.Onebox.lookupCache(node[1].href);
      if (contents) {
        node[0] = '__RAW';
        node[1] = contents;
        node.length = 2;
      }
    }
  }
});



// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/dialects/onebox_dialect.js'] = "/**\n  Given a node in the document and its parent, determine whether it is on its\n  own line or not.\n\n  @method isOnOneLine\n  @namespace Discourse.Dialect\n**/\n\nvar isOnOneLine = function(link, parent) {\n  if (!parent) { return false; }\n\n  var siblings = parent.slice(1);\n  if ((!siblings) || (siblings.length \u003c 1)) { return false; }\n\n  var idx = siblings.indexOf(link);\n  if (idx === -1) { return false; }\n\n  if (idx \u003e 0) {\n    var prev = siblings[idx-1];\n    if (prev[0] !== 'br') { return false; }\n  }\n\n  if (idx \u003c siblings.length) {\n    var next = siblings[idx+1];\n    if (next \u0026\u0026 (!((next[0] === 'br') || (typeof next === 'string' \u0026\u0026 next.trim() === \"\")))) { return false; }\n  }\n\n  return true;\n};\n\n/**\n  We only onebox stuff that is on its own line. This navigates the JsonML tree and\n  correctly inserts the oneboxes.\n\n  @event parseNode\n  @namespace Discourse.Dialect\n**/\nDiscourse.Dialect.on(\"parseNode\", function(event) {\n  var node = event.node,\n      path = event.path;\n\n  // We only care about links\n  if (node[0] !== 'a')  { return; }\n\n  var parent = path[path.length - 1];\n\n  // We don't onebox bbcode\n  if (node[1]['data-bbcode']) {\n    delete node[1]['data-bbcode'];\n    return;\n  }\n\n  // We don't onebox mentions\n  if (node[1]['class'] === 'mention') { return; }\n\n  // Don't onebox links within a list\n  for (var i=0; i\u003cpath.length; i++) {\n    if (path[i][0] === 'li') { return; }\n  }\n\n  // If the link has a different label text than the link itself, don't onebox it.\n  var label = node[node.length-1];\n  if (label !== node[1]['href']) { return; }\n\n  if (isOnOneLine(node, parent)) {\n\n    node[1]['class'] = 'onebox';\n    node[1].target = '_blank';\n\n    if (Discourse \u0026\u0026 Discourse.Onebox) {\n      var contents = Discourse.Onebox.lookupCache(node[1].href);\n      if (contents) {\n        node[0] = '__RAW';\n        node[1] = contents;\n        node.length = 2;\n      }\n    }\n  }\n});\n\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

var esc = Handlebars.Utils.escapeExpression;
Discourse.BBCode.register('quote', {noWrap: true, singlePara: true}, function(contents, bbParams, options) {
  var params = {'class': 'quote'},
      username = null;

  if (bbParams) {
    var paramsSplit = bbParams.split(/\,\s*/);
    username = paramsSplit[0];

    paramsSplit.forEach(function(p,i) {
      if (i > 0) {
        var assignment = p.split(':');
        if (assignment[0] && assignment[1]) {
          var escaped = esc(assignment[0]);
          // don't escape attributes, makes no sense
          if(escaped === assignment[0]) {
            params['data-' + assignment[0]] = esc(assignment[1].trim());
          }
        }
      }
    });
  }

  var avatarImg;
  if (options.lookupAvatarByPostNumber) {
    // client-side, we can retrieve the avatar from the post
    var postNumber = parseInt(params['data-post'], 10);
    avatarImg = options.lookupAvatarByPostNumber(postNumber);
  } else if (options.lookupAvatar) {
    // server-side, we need to lookup the avatar from the username
    avatarImg = options.lookupAvatar(username);
  }

  // If there's no username just return a simple quote
  if (!username) {
    return ['p', ['aside', params, ['blockquote'].concat(contents)]];
  }

  return ['aside', params,
             ['div', {'class': 'title'},
               ['div', {'class': 'quote-controls'}],
               avatarImg ? ['__RAW', avatarImg] : "",
               username ? I18n.t('user.said', {username: username}) : ""
             ],
             ['blockquote'].concat(contents)
          ];
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/dialects/quote_dialect.js'] = "var esc = Handlebars.Utils.escapeExpression;\nDiscourse.BBCode.register('quote', {noWrap: true, singlePara: true}, function(contents, bbParams, options) {\n  var params = {'class': 'quote'},\n      username = null;\n\n  if (bbParams) {\n    var paramsSplit = bbParams.split(/\\,\\s*/);\n    username = paramsSplit[0];\n\n    paramsSplit.forEach(function(p,i) {\n      if (i \u003e 0) {\n        var assignment = p.split(':');\n        if (assignment[0] \u0026\u0026 assignment[1]) {\n          var escaped = esc(assignment[0]);\n          // don't escape attributes, makes no sense\n          if(escaped === assignment[0]) {\n            params['data-' + assignment[0]] = esc(assignment[1].trim());\n          }\n        }\n      }\n    });\n  }\n\n  var avatarImg;\n  if (options.lookupAvatarByPostNumber) {\n    // client-side, we can retrieve the avatar from the post\n    var postNumber = parseInt(params['data-post'], 10);\n    avatarImg = options.lookupAvatarByPostNumber(postNumber);\n  } else if (options.lookupAvatar) {\n    // server-side, we need to lookup the avatar from the username\n    avatarImg = options.lookupAvatar(username);\n  }\n\n  // If there's no username just return a simple quote\n  if (!username) {\n    return ['p', ['aside', params, ['blockquote'].concat(contents)]];\n  }\n\n  return ['aside', params,\n             ['div', {'class': 'title'},\n               ['div', {'class': 'quote-controls'}],\n               avatarImg ? ['__RAW', avatarImg] : \"\",\n               username ? I18n.t('user.said', {username: username}) : \"\"\n             ],\n             ['blockquote'].concat(contents)\n          ];\n});\n";
define("discourse/controllers/application", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Controller.extend({
      styleCategory: null,

      canSignUp: function() {
        return !Discourse.SiteSettings.invite_only &&
               Discourse.SiteSettings.allow_new_registrations &&
               !Discourse.SiteSettings.enable_sso;
      }.property(),
    });
  });

Discourse.ApplicationController = require('discourse/controllers/application').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/application.js'] = "define(\"discourse/controllers/application\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Controller.extend({\n      styleCategory: null,\n\n      canSignUp: function() {\n        return !Discourse.SiteSettings.invite_only \u0026\u0026\n               Discourse.SiteSettings.allow_new_registrations \u0026\u0026\n               !Discourse.SiteSettings.enable_sso;\n      }.property(),\n    });\n  });";
define("discourse/controllers/avatar-selector", 
  ["discourse/mixins/modal-functionality","discourse/controllers/controller","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var ModalFunctionality = __dependency1__["default"];

    var DiscourseController = __dependency2__["default"];

    __exports__["default"] = DiscourseController.extend(ModalFunctionality, {

      selectedUploadId: function(){
          switch(this.get("selected")){
          case "system":
            return this.get("system_avatar_upload_id");
          case "gravatar":
            return this.get("gravatar_avatar_upload_id");
          default:
            return this.get("custom_avatar_upload_id");
          }
      }.property(
            'selected',
            'system_avatar_upload_id',
            'gravatar_avatar_upload_id',
            'custom_avatar_upload_id'),

      actions: {
        useUploadedAvatar: function() {
          this.set("selected", "uploaded");
        },
        useGravatar: function() {
          this.set("selected", "gravatar");
        },
        useSystem: function() {
          this.set("selected", "system");
        },
        refreshGravatar: function(){
          var self = this;
          self.set("gravatarRefreshDisabled", true);
          Discourse
              .ajax("/user_avatar/" + this.get("username") + "/refresh_gravatar", {method: 'POST'})
              .then(function(result){
                self.set("gravatarRefreshDisabled", false);
                self.set("gravatar_avatar_upload_id", result.upload_id);
              });
        }
      }
    });
  });

Discourse.AvatarSelectorController = require('discourse/controllers/avatar-selector').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/avatar-selector.js'] = "define(\"discourse/controllers/avatar-selector\", \n  [\"discourse/mixins/modal-functionality\",\"discourse/controllers/controller\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ModalFunctionality = __dependency1__[\"default\"];\n\n    var DiscourseController = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = DiscourseController.extend(ModalFunctionality, {\n\n      selectedUploadId: function(){\n          switch(this.get(\"selected\")){\n          case \"system\":\n            return this.get(\"system_avatar_upload_id\");\n          case \"gravatar\":\n            return this.get(\"gravatar_avatar_upload_id\");\n          default:\n            return this.get(\"custom_avatar_upload_id\");\n          }\n      }.property(\n            'selected',\n            'system_avatar_upload_id',\n            'gravatar_avatar_upload_id',\n            'custom_avatar_upload_id'),\n\n      actions: {\n        useUploadedAvatar: function() {\n          this.set(\"selected\", \"uploaded\");\n        },\n        useGravatar: function() {\n          this.set(\"selected\", \"gravatar\");\n        },\n        useSystem: function() {\n          this.set(\"selected\", \"system\");\n        },\n        refreshGravatar: function(){\n          var self = this;\n          self.set(\"gravatarRefreshDisabled\", true);\n          Discourse\n              .ajax(\"/user_avatar/\" + this.get(\"username\") + \"/refresh_gravatar\", {method: 'POST'})\n              .then(function(result){\n                self.set(\"gravatarRefreshDisabled\", false);\n                self.set(\"gravatar_avatar_upload_id\", result.upload_id);\n              });\n        }\n      }\n    });\n  });";
define("discourse/controllers/badges/index", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Controller.extend({
      badgeGroups: function(){
        var sorted = _.sortBy(this.get('model'), function(badge){
          var pos = badge.get('badge_grouping.position');
          var type = badge.get('badge_type_id');
          var name = badge.get('displayName');

          return ("000" + pos).slice(-4) + (10-type) + name;
        });

        var grouped = [];
        var group = [], groupId;

        sorted.forEach(function(badge){
          if(groupId !== badge.badge_grouping_id){
            if(group && group.length > 0){
              grouped.push({badges: group, badgeGrouping: group[0].badge_grouping});
            }
            group = [];
            groupId = badge.badge_grouping_id;
          }
          group.push(badge);
        });

        if(group && group.length > 0){
          grouped.push({badges: group, badgeGrouping: group[0].badge_grouping});
        }

        return grouped;

      }.property('model')
    });
  });

Discourse.BadgesIndexController = require('discourse/controllers/badges/index').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/badges/index.js'] = "define(\"discourse/controllers/badges/index\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Controller.extend({\n      badgeGroups: function(){\n        var sorted = _.sortBy(this.get('model'), function(badge){\n          var pos = badge.get('badge_grouping.position');\n          var type = badge.get('badge_type_id');\n          var name = badge.get('displayName');\n\n          return (\"000\" + pos).slice(-4) + (10-type) + name;\n        });\n\n        var grouped = [];\n        var group = [], groupId;\n\n        sorted.forEach(function(badge){\n          if(groupId !== badge.badge_grouping_id){\n            if(group \u0026\u0026 group.length \u003e 0){\n              grouped.push({badges: group, badgeGrouping: group[0].badge_grouping});\n            }\n            group = [];\n            groupId = badge.badge_grouping_id;\n          }\n          group.push(badge);\n        });\n\n        if(group \u0026\u0026 group.length \u003e 0){\n          grouped.push({badges: group, badgeGrouping: group[0].badge_grouping});\n        }\n\n        return grouped;\n\n      }.property('model')\n    });\n  });";
define("discourse/controllers/badges/show", 
  ["discourse/controllers/object","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var ObjectController = __dependency1__["default"];

    /**
      Controller for showing a particular badge.

      @class BadgesShowController
      @extends ObjectController
      @namespace Discourse
      @module Discourse
    **/
    __exports__["default"] = ObjectController.extend({

      actions: {
        loadMore: function() {
          var self = this;
          var userBadges = this.get('userBadges');

          Discourse.UserBadge.findByBadgeId(this.get('model.id'), {
            offset: userBadges.length
          }).then(function(userBadges) {
            self.get('userBadges').pushObjects(userBadges);
            if(userBadges.length === 0){
              self.set('noMoreBadges', true);
            }
          });
        }
      },

      layoutClass: function(){
        var ub = this.get("userBadges");
        if(ub && ub[0] && ub[0].post_id){
          return "user-badge-with-posts";
        } else {
          return "user-badge-no-posts";
        }
      }.property("userBadges"),

      canLoadMore: function() {
        if(this.get('noMoreBadges')) {
          return false;
        }

        if (this.get('userBadges')) {
          return this.get('model.grant_count') > this.get('userBadges.length');
        } else {
          return false;
        }
      }.property('noMoreBadges', 'model.grant_count', 'userBadges.length')
    });
  });

Discourse.BadgesShowController = require('discourse/controllers/badges/show').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/badges/show.js'] = "define(\"discourse/controllers/badges/show\", \n  [\"discourse/controllers/object\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ObjectController = __dependency1__[\"default\"];\n\n    /**\n      Controller for showing a particular badge.\n\n      @class BadgesShowController\n      @extends ObjectController\n      @namespace Discourse\n      @module Discourse\n    **/\n    __exports__[\"default\"] = ObjectController.extend({\n\n      actions: {\n        loadMore: function() {\n          var self = this;\n          var userBadges = this.get('userBadges');\n\n          Discourse.UserBadge.findByBadgeId(this.get('model.id'), {\n            offset: userBadges.length\n          }).then(function(userBadges) {\n            self.get('userBadges').pushObjects(userBadges);\n            if(userBadges.length === 0){\n              self.set('noMoreBadges', true);\n            }\n          });\n        }\n      },\n\n      layoutClass: function(){\n        var ub = this.get(\"userBadges\");\n        if(ub \u0026\u0026 ub[0] \u0026\u0026 ub[0].post_id){\n          return \"user-badge-with-posts\";\n        } else {\n          return \"user-badge-no-posts\";\n        }\n      }.property(\"userBadges\"),\n\n      canLoadMore: function() {\n        if(this.get('noMoreBadges')) {\n          return false;\n        }\n\n        if (this.get('userBadges')) {\n          return this.get('model.grant_count') \u003e this.get('userBadges.length');\n        } else {\n          return false;\n        }\n      }.property('noMoreBadges', 'model.grant_count', 'userBadges.length')\n    });\n  });";
define("discourse/controllers/bulk-notification-level", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      Support for changing the notification level of various topics

      @class BulkNotificationLevelControler
      @extends Ember.Controller
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Em.Controller.extend({
      needs: ['topic-bulk-actions'],

      notificationLevelId: null,

      notificationLevels: function() {
        var result = [];
        Object.keys(Discourse.Topic.NotificationLevel).forEach(function(k) {
          result.push({
            id: Discourse.Topic.NotificationLevel[k].toString(),
            name: I18n.t('topic.notifications.' + k.toLowerCase() + ".title"),
            description: I18n.t('topic.notifications.' + k.toLowerCase() + ".description")
          });
        });
        return result;
      }.property(),

      disabled: Em.computed.empty("notificationLevelId"),

      actions: {
        changeNotificationLevel: function() {
          this.get('controllers.topic-bulk-actions').performAndRefresh({
            type: 'change_notification_level',
            notification_level_id: this.get('notificationLevelId')
          });
        }
      }
    });
  });

Discourse.BulkNotificationLevelController = require('discourse/controllers/bulk-notification-level').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/bulk-notification-level.js'] = "define(\"discourse/controllers/bulk-notification-level\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      Support for changing the notification level of various topics\n\n      @class BulkNotificationLevelControler\n      @extends Ember.Controller\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Em.Controller.extend({\n      needs: ['topic-bulk-actions'],\n\n      notificationLevelId: null,\n\n      notificationLevels: function() {\n        var result = [];\n        Object.keys(Discourse.Topic.NotificationLevel).forEach(function(k) {\n          result.push({\n            id: Discourse.Topic.NotificationLevel[k].toString(),\n            name: I18n.t('topic.notifications.' + k.toLowerCase() + \".title\"),\n            description: I18n.t('topic.notifications.' + k.toLowerCase() + \".description\")\n          });\n        });\n        return result;\n      }.property(),\n\n      disabled: Em.computed.empty(\"notificationLevelId\"),\n\n      actions: {\n        changeNotificationLevel: function() {\n          this.get('controllers.topic-bulk-actions').performAndRefresh({\n            type: 'change_notification_level',\n            notification_level_id: this.get('notificationLevelId')\n          });\n        }\n      }\n    });\n  });";
define("discourse/controllers/change-owner", 
  ["discourse/mixins/modal-functionality","discourse/controllers/object","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var ModalFunctionality = __dependency1__["default"];

    var ObjectController = __dependency2__["default"];

    /**
      Modal related to changing the ownership of posts

      @class ChangeOwnerController
      @extends ObjectController
      @namespace Discourse
      @uses ModalFunctionality
      @module Discourse
     **/
    __exports__["default"] = ObjectController.extend(Discourse.SelectedPostsCount, ModalFunctionality, {
      needs: ['topic'],

      topicController: Em.computed.alias('controllers.topic'),
      selectedPosts: Em.computed.alias('topicController.selectedPosts'),

      buttonDisabled: function() {
        if (this.get('saving')) return true;
        return this.blank('new_user');
      }.property('saving', 'new_user'),

      buttonTitle: function() {
        if (this.get('saving')) return I18n.t('saving');
        return I18n.t('topic.change_owner.action');
      }.property('saving'),

      onShow: function() {
        this.setProperties({
          saving: false,
          new_user: ''
        });
      },

      actions: {
        changeOwnershipOfPosts: function() {
          this.set('saving', true);

          var postIds = this.get('selectedPosts').map(function(p) { return p.get('id'); }),
              self = this,
              saveOpts = {
                post_ids: postIds,
                username: this.get('new_user')
              };

          Discourse.Topic.changeOwners(this.get('id'), saveOpts).then(function(result) {
            // success
            self.send('closeModal');
            self.get('topicController').send('toggleMultiSelect');
            Em.run.next(function() { Discourse.URL.routeTo(result.url); });
          }, function() {
            // failure
            self.flash(I18n.t('topic.change_owner.error'), 'alert-error');
            self.set('saving', false);
          });
          return false;
        }
      }
    });
  });

Discourse.ChangeOwnerController = require('discourse/controllers/change-owner').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/change-owner.js'] = "define(\"discourse/controllers/change-owner\", \n  [\"discourse/mixins/modal-functionality\",\"discourse/controllers/object\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ModalFunctionality = __dependency1__[\"default\"];\n\n    var ObjectController = __dependency2__[\"default\"];\n\n    /**\n      Modal related to changing the ownership of posts\n\n      @class ChangeOwnerController\n      @extends ObjectController\n      @namespace Discourse\n      @uses ModalFunctionality\n      @module Discourse\n     **/\n    __exports__[\"default\"] = ObjectController.extend(Discourse.SelectedPostsCount, ModalFunctionality, {\n      needs: ['topic'],\n\n      topicController: Em.computed.alias('controllers.topic'),\n      selectedPosts: Em.computed.alias('topicController.selectedPosts'),\n\n      buttonDisabled: function() {\n        if (this.get('saving')) return true;\n        return this.blank('new_user');\n      }.property('saving', 'new_user'),\n\n      buttonTitle: function() {\n        if (this.get('saving')) return I18n.t('saving');\n        return I18n.t('topic.change_owner.action');\n      }.property('saving'),\n\n      onShow: function() {\n        this.setProperties({\n          saving: false,\n          new_user: ''\n        });\n      },\n\n      actions: {\n        changeOwnershipOfPosts: function() {\n          this.set('saving', true);\n\n          var postIds = this.get('selectedPosts').map(function(p) { return p.get('id'); }),\n              self = this,\n              saveOpts = {\n                post_ids: postIds,\n                username: this.get('new_user')\n              };\n\n          Discourse.Topic.changeOwners(this.get('id'), saveOpts).then(function(result) {\n            // success\n            self.send('closeModal');\n            self.get('topicController').send('toggleMultiSelect');\n            Em.run.next(function() { Discourse.URL.routeTo(result.url); });\n          }, function() {\n            // failure\n            self.flash(I18n.t('topic.change_owner.error'), 'alert-error');\n            self.set('saving', false);\n          });\n          return false;\n        }\n      }\n    });\n  });";
define("discourse/controllers/composer-messages", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      A controller for displaying messages as the user composes a message.

      @class ComposerMessagesController
      @extends Ember.ArrayController
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Ember.ArrayController.extend({
      needs: ['composer'],

      // Whether we've checked our messages
      checkedMessages: false,

      /**
        Initialize the controller
      **/
      init: function() {
        this._super();
        this.reset();
      },

      actions: {
        /**
          Closes and hides a message.

          @method closeMessage
          @params {Object} message The message to dismiss
        **/
        closeMessage: function(message) {
          this.removeObject(message);
        },

        hideMessage: function(message) {
          var messagesByTemplate = this.get('messagesByTemplate'),
            templateName = message.get('templateName');

          // kind of hacky but the visibility depends on this
          messagesByTemplate[templateName] = undefined;
          this.removeObject(message);
        }
      },

      /**
        Displays a new message

        @method popup
        @params {Object} msg The message to display
      **/
      popup: function(msg) {
        var messagesByTemplate = this.get('messagesByTemplate'),
            templateName = msg.get('templateName'),
            existing = messagesByTemplate[templateName];

        if (!existing) {
          this.pushObject(msg);
          messagesByTemplate[templateName] = msg;
        }
      },

      /**
        Resets all active messages. For example if composing a new post.

        @method reset
      **/
      reset: function() {
        this.clear();
        this.set('messagesByTemplate', {});
        this.set('queuedForTyping', []);
        this.set('checkedMessages', false);
      },

      /**
        Called after the user has typed a reply. Some messages only get shown after being
        typed.

        @method typedReply
      **/
      typedReply: function() {
        var self = this;
        this.get('queuedForTyping').forEach(function (msg) {
          self.popup(msg);
        });
      },

      /**
        Figure out if there are any messages that should be displayed above the composer.

        @method queryFor
        @params {Discourse.Composer} composer The composer model
      **/
      queryFor: function(composer) {
        if (this.get('checkedMessages')) { return; }

        var self = this,
            queuedForTyping = self.get('queuedForTyping');

        Discourse.ComposerMessage.find(composer).then(function (messages) {
          self.set('checkedMessages', true);
          messages.forEach(function (msg) {
            if (msg.wait_for_typing) {
              queuedForTyping.addObject(msg);
            } else {
              self.popup(msg);
            }
          });
        });
      }

    });
  });

Discourse.ComposerMessagesController = require('discourse/controllers/composer-messages').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/composer-messages.js'] = "define(\"discourse/controllers/composer-messages\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      A controller for displaying messages as the user composes a message.\n\n      @class ComposerMessagesController\n      @extends Ember.ArrayController\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Ember.ArrayController.extend({\n      needs: ['composer'],\n\n      // Whether we've checked our messages\n      checkedMessages: false,\n\n      /**\n        Initialize the controller\n      **/\n      init: function() {\n        this._super();\n        this.reset();\n      },\n\n      actions: {\n        /**\n          Closes and hides a message.\n\n          @method closeMessage\n          @params {Object} message The message to dismiss\n        **/\n        closeMessage: function(message) {\n          this.removeObject(message);\n        },\n\n        hideMessage: function(message) {\n          var messagesByTemplate = this.get('messagesByTemplate'),\n            templateName = message.get('templateName');\n\n          // kind of hacky but the visibility depends on this\n          messagesByTemplate[templateName] = undefined;\n          this.removeObject(message);\n        }\n      },\n\n      /**\n        Displays a new message\n\n        @method popup\n        @params {Object} msg The message to display\n      **/\n      popup: function(msg) {\n        var messagesByTemplate = this.get('messagesByTemplate'),\n            templateName = msg.get('templateName'),\n            existing = messagesByTemplate[templateName];\n\n        if (!existing) {\n          this.pushObject(msg);\n          messagesByTemplate[templateName] = msg;\n        }\n      },\n\n      /**\n        Resets all active messages. For example if composing a new post.\n\n        @method reset\n      **/\n      reset: function() {\n        this.clear();\n        this.set('messagesByTemplate', {});\n        this.set('queuedForTyping', []);\n        this.set('checkedMessages', false);\n      },\n\n      /**\n        Called after the user has typed a reply. Some messages only get shown after being\n        typed.\n\n        @method typedReply\n      **/\n      typedReply: function() {\n        var self = this;\n        this.get('queuedForTyping').forEach(function (msg) {\n          self.popup(msg);\n        });\n      },\n\n      /**\n        Figure out if there are any messages that should be displayed above the composer.\n\n        @method queryFor\n        @params {Discourse.Composer} composer The composer model\n      **/\n      queryFor: function(composer) {\n        if (this.get('checkedMessages')) { return; }\n\n        var self = this,\n            queuedForTyping = self.get('queuedForTyping');\n\n        Discourse.ComposerMessage.find(composer).then(function (messages) {\n          self.set('checkedMessages', true);\n          messages.forEach(function (msg) {\n            if (msg.wait_for_typing) {\n              queuedForTyping.addObject(msg);\n            } else {\n              self.popup(msg);\n            }\n          });\n        });\n      }\n\n    });\n  });";
define("discourse/controllers/composer", 
  ["discourse/controllers/controller","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var DiscourseController = __dependency1__["default"];

    __exports__["default"] = DiscourseController.extend({
      needs: ['modal', 'topic', 'composer-messages'],

      replyAsNewTopicDraft: Em.computed.equal('model.draftKey', Discourse.Composer.REPLY_AS_NEW_TOPIC_KEY),
      checkedMessages: false,

      showEditReason: false,
      editReason: null,
      maxTitleLength: Discourse.computed.setting('max_topic_title_length'),
      scopedCategoryId: null,

      _initializeSimilar: function() {
        this.set('similarTopics', []);
      }.on('init'),

      actions: {
        // Toggle the reply view
        toggle: function() {
          this.toggle();
        },

        togglePreview: function() {
          this.get('model').togglePreview();
        },

        // Import a quote from the post
        importQuote: function() {
          this.get('model').importQuote();
        },

        cancel: function() {
          this.cancelComposer();
        },

        save: function() {
          this.save();
        },

        displayEditReason: function() {
          this.set("showEditReason", true);
        },

        hitEsc: function() {
          if (this.get('model.viewOpen')) {
            this.shrink();
          }
        },

        openIfDraft: function() {
          if (this.get('model.viewDraft')) {
            this.set('model.composeState', Discourse.Composer.OPEN);
          }
        },

      },

      updateDraftStatus: function() {
        var c = this.get('model');
        if (c) { c.updateDraftStatus(); }
      },

      appendText: function(text) {
        var c = this.get('model');
        if (c) { c.appendText(text); }
      },

      appendBlockAtCursor: function(text) {
        var c = this.get('model');
        if (c) { c.appendText(text, $('#wmd-input').caret(), {block: true}); }
      },

      categories: function() {
        return Discourse.Category.list();
      }.property(),


      toggle: function() {
        this.closeAutocomplete();
        switch (this.get('model.composeState')) {
          case Discourse.Composer.OPEN:
            if (this.blank('model.reply') && this.blank('model.title')) {
              this.close();
            } else {
              this.shrink();
            }
            break;
          case Discourse.Composer.DRAFT:
            this.set('model.composeState', Discourse.Composer.OPEN);
            break;
          case Discourse.Composer.SAVING:
            this.close();
        }
        return false;
      },

      disableSubmit: function() {
        return this.get('model.loading');
      }.property('model.loading'),

      save: function(force) {
        var composer = this.get('model'),
            self = this;

        if(composer.get('cantSubmitPost')) {
          var now = Date.now();
          this.setProperties({
            'view.showTitleTip': now,
            'view.showCategoryTip': now,
            'view.showReplyTip': now
          });
          return;
        }

        composer.set('disableDrafts', true);

        // for now handle a very narrow use case
        // if we are replying to a topic AND not on the topic pop the window up
        if(!force && composer.get('replyingToTopic')) {
          var topic = this.get('topic');
          if (!topic || topic.get('id') !== composer.get('topic.id'))
          {
            var message = I18n.t("composer.posting_not_on_topic", {title: this.get('model.topic.title')});

            var buttons = [{
              "label": I18n.t("composer.cancel"),
              "class": "cancel",
              "link": true
            }];

            if(topic) {
              buttons.push({
                "label": I18n.t("composer.reply_here") + "<br/><div class='topic-title overflow-ellipsis'>" + topic.get('title') + "</div>",
                "class": "btn btn-reply-here",
                "callback": function(){
                  composer.set('topic', topic);
                  composer.set('post', null);
                  self.save(true);
                }
              });
            }

            buttons.push({
              "label": I18n.t("composer.reply_original") + "<br/><div class='topic-title overflow-ellipsis'>" + this.get('model.topic.title') + "</div>",
              "class": "btn-primary btn-reply-on-original",
              "callback": function(){
                self.save(true);
              }
            });

            bootbox.dialog(message, buttons, {"classes": "reply-where-modal"});
            return;
          }
        }

        return composer.save({
          imageSizes: this.get('view').imageSizes(),
          editReason: this.get("editReason")
        }).then(function(opts) {

          // If we replied as a new topic successfully, remove the draft.
          if (self.get('replyAsNewTopicDraft')) {
            self.destroyDraft();
          }

          opts = opts || {};
          self.close();

          var currentUser = Discourse.User.current();
          if (composer.get('creatingTopic')) {
            currentUser.set('topic_count', currentUser.get('topic_count') + 1);
          } else {
            currentUser.set('reply_count', currentUser.get('reply_count') + 1);
          }

          if ((!composer.get('replyingToTopic')) || (!Discourse.User.currentProp('disable_jump_reply'))) {
            Discourse.URL.routeTo(opts.post.get('url'));
          }
        }, function(error) {
          composer.set('disableDrafts', false);
          bootbox.alert(error);
        });
      },

      /**
        Checks to see if a reply has been typed. This is signaled by a keyUp
        event in a view.

        @method checkReplyLength
      **/
      checkReplyLength: function() {
        if (this.present('model.reply')) {
          // Notify the composer messages controller that a reply has been typed. Some
          // messages only appear after typing.
          this.get('controllers.composer-messages').typedReply();
        }
      },

      /**
        Fired after a user stops typing. Considers whether to check for similar
        topics based on the current composer state.

        @method findSimilarTopics
      **/
      findSimilarTopics: function() {

        // We don't care about similar topics unless creating a topic
        if (!this.get('model.creatingTopic')) return;

        var body = this.get('model.reply'),
            title = this.get('model.title'),
            self = this,
            message;

        // Ensure the fields are of the minimum length
        if (body.length < Discourse.SiteSettings.min_body_similar_length ||
            title.length < Discourse.SiteSettings.min_title_similar_length) { return; }

        // TODO pass the 200 in from somewhere
        body = body.substr(0, 200);

        // Done search over and over
        if((title + body) === this.get('lastSimilaritySearch')) { return; }
        this.set('lastSimilaritySearch', title + body);

        var messageController = this.get('controllers.composer-messages'),
            similarTopics = this.get('similarTopics');

        Discourse.Topic.findSimilarTo(title, body).then(function (newTopics) {
          similarTopics.clear();
          similarTopics.pushObjects(newTopics);

          if (similarTopics.get('length') > 0) {
            message = Discourse.ComposerMessage.create({
              templateName: 'composer/similar_topics',
              similarTopics: similarTopics,
              extraClass: 'similar-topics'
            });

            self.set('similarTopicsMessage', message);
            messageController.popup(message);
          } else {
            message = self.get('similarTopicsMessage');
            if (message) {
              messageController.send('hideMessage', message);
            }
          }
        });

      },

      saveDraft: function() {
        var model = this.get('model');
        if (model) { model.saveDraft(); }
      },

      /**
        Open the composer view

        @method open
        @param {Object} opts Options for creating a post
          @param {String} opts.action The action we're performing: edit, reply or createTopic
          @param {Discourse.Post} [opts.post] The post we're replying to
          @param {Discourse.Topic} [opts.topic] The topic we're replying to
          @param {String} [opts.quote] If we're opening a reply from a quote, the quote we're making
      **/
      open: function(opts) {
        opts = opts || {};

        if (!opts.draftKey) {
          alert("composer was opened without a draft key");
          throw "composer opened without a proper draft key";
        }

        // If we show the subcategory list, scope the categories drop down to
        // the category we opened the composer with.
        if (Discourse.SiteSettings.show_subcategory_list) {
          this.set('scopedCategoryId', opts.categoryId);
        }

        var composerMessages = this.get('controllers.composer-messages'),
            self = this,
            composerModel = this.get('model');

        this.setProperties({ showEditReason: false, editReason: null });
        composerMessages.reset();

        // If we want a different draft than the current composer, close it and clear our model.
        if (composerModel && opts.draftKey !== composerModel.draftKey &&
            composerModel.composeState === Discourse.Composer.DRAFT) {
          this.close();
          composerModel = null;
        }

        return new Ember.RSVP.Promise(function(resolve, reject) {
          if (composerModel && composerModel.get('replyDirty')) {

            // If we're already open, we don't have to do anything
            if (composerModel.get('composeState') === Discourse.Composer.OPEN &&
                composerModel.get('draftKey') === opts.draftKey) {
              return resolve();
            }

            // If it's the same draft, just open it up again.
            if (composerModel.get('composeState') === Discourse.Composer.DRAFT &&
                composerModel.get('draftKey') === opts.draftKey &&
                composerModel.action === opts.action) {

                composerModel.set('composeState', Discourse.Composer.OPEN);
                return resolve();
            }

            // If it's a different draft, cancel it and try opening again.
            return self.cancelComposer().then(function() {
              return self.open(opts);
            }).then(resolve, reject);
          }

          // we need a draft sequence for the composer to work
          if (opts.draftSequence === void 0) {
            return Discourse.Draft.get(opts.draftKey).then(function(data) {
              opts.draftSequence = data.draft_sequence;
              opts.draft = data.draft;
              self._setModel(composerModel, opts);
            }).then(resolve, reject);
          }

          self._setModel(composerModel, opts);
          resolve();
        });
      },

      // Given a potential instance and options, set the model for this composer.
      _setModel: function(composerModel, opts) {
        if (opts.draft) {
          composerModel = Discourse.Composer.loadDraft(opts.draftKey, opts.draftSequence, opts.draft);
          if (composerModel) {
            composerModel.set('topic', opts.topic);
          }
        } else {
          composerModel = composerModel || Discourse.Composer.create();
          composerModel.open(opts);
        }

        this.set('model', composerModel);
        composerModel.set('composeState', Discourse.Composer.OPEN);

        var composerMessages = this.get('controllers.composer-messages');
        composerMessages.queryFor(composerModel);
      },

      // View a new reply we've made
      viewNewReply: function() {
        Discourse.URL.routeTo(this.get('createdPost.url'));
        this.close();
        return false;
      },

      destroyDraft: function() {
        var key = this.get('model.draftKey');
        if (key) {
          Discourse.Draft.clear(key, this.get('model.draftSequence'));
        }
      },

      cancelComposer: function() {
        var self = this;

        return new Ember.RSVP.Promise(function (resolve) {
          if (self.get('model.hasMetaData') || self.get('model.replyDirty')) {
            bootbox.confirm(I18n.t("post.abandon.confirm"), I18n.t("post.abandon.no_value"),
                I18n.t("post.abandon.yes_value"), function(result) {
              if (result) {
                self.destroyDraft();
                self.get('model').clearState();
                self.close();
                resolve();
              }
            });
          } else {
            // it is possible there is some sort of crazy draft with no body ... just give up on it
            self.destroyDraft();
            self.get('model').clearState();
            self.close();
            resolve();
          }
        });
      },


      shrink: function() {
        if (this.get('model.replyDirty')) {
          this.collapse();
        } else {
          this.close();
        }
      },

      collapse: function() {
        this.saveDraft();
        this.set('model.composeState', Discourse.Composer.DRAFT);
      },

      close: function() {
        this.setProperties({
          model: null,
          'view.showTitleTip': false,
          'view.showCategoryTip': false,
          'view.showReplyTip': false
        });
      },

      closeAutocomplete: function() {
        $('#wmd-input').autocomplete({ cancel: true });
      },

      showOptions: function() {
        var _ref;
        return (_ref = this.get('controllers.modal')) ? _ref.show(Discourse.ArchetypeOptionsModalView.create({
          archetype: this.get('model.archetype'),
          metaData: this.get('model.metaData')
        })) : void 0;
      },

      canEdit: function() {
        return this.get("model.action") === "edit" && Discourse.User.current().get("can_edit");
      }.property("model.action")

    });
  });

Discourse.ComposerController = require('discourse/controllers/composer').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/composer.js'] = "define(\"discourse/controllers/composer\", \n  [\"discourse/controllers/controller\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DiscourseController = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = DiscourseController.extend({\n      needs: ['modal', 'topic', 'composer-messages'],\n\n      replyAsNewTopicDraft: Em.computed.equal('model.draftKey', Discourse.Composer.REPLY_AS_NEW_TOPIC_KEY),\n      checkedMessages: false,\n\n      showEditReason: false,\n      editReason: null,\n      maxTitleLength: Discourse.computed.setting('max_topic_title_length'),\n      scopedCategoryId: null,\n\n      _initializeSimilar: function() {\n        this.set('similarTopics', []);\n      }.on('init'),\n\n      actions: {\n        // Toggle the reply view\n        toggle: function() {\n          this.toggle();\n        },\n\n        togglePreview: function() {\n          this.get('model').togglePreview();\n        },\n\n        // Import a quote from the post\n        importQuote: function() {\n          this.get('model').importQuote();\n        },\n\n        cancel: function() {\n          this.cancelComposer();\n        },\n\n        save: function() {\n          this.save();\n        },\n\n        displayEditReason: function() {\n          this.set(\"showEditReason\", true);\n        },\n\n        hitEsc: function() {\n          if (this.get('model.viewOpen')) {\n            this.shrink();\n          }\n        },\n\n        openIfDraft: function() {\n          if (this.get('model.viewDraft')) {\n            this.set('model.composeState', Discourse.Composer.OPEN);\n          }\n        },\n\n      },\n\n      updateDraftStatus: function() {\n        var c = this.get('model');\n        if (c) { c.updateDraftStatus(); }\n      },\n\n      appendText: function(text) {\n        var c = this.get('model');\n        if (c) { c.appendText(text); }\n      },\n\n      appendBlockAtCursor: function(text) {\n        var c = this.get('model');\n        if (c) { c.appendText(text, $('#wmd-input').caret(), {block: true}); }\n      },\n\n      categories: function() {\n        return Discourse.Category.list();\n      }.property(),\n\n\n      toggle: function() {\n        this.closeAutocomplete();\n        switch (this.get('model.composeState')) {\n          case Discourse.Composer.OPEN:\n            if (this.blank('model.reply') \u0026\u0026 this.blank('model.title')) {\n              this.close();\n            } else {\n              this.shrink();\n            }\n            break;\n          case Discourse.Composer.DRAFT:\n            this.set('model.composeState', Discourse.Composer.OPEN);\n            break;\n          case Discourse.Composer.SAVING:\n            this.close();\n        }\n        return false;\n      },\n\n      disableSubmit: function() {\n        return this.get('model.loading');\n      }.property('model.loading'),\n\n      save: function(force) {\n        var composer = this.get('model'),\n            self = this;\n\n        if(composer.get('cantSubmitPost')) {\n          var now = Date.now();\n          this.setProperties({\n            'view.showTitleTip': now,\n            'view.showCategoryTip': now,\n            'view.showReplyTip': now\n          });\n          return;\n        }\n\n        composer.set('disableDrafts', true);\n\n        // for now handle a very narrow use case\n        // if we are replying to a topic AND not on the topic pop the window up\n        if(!force \u0026\u0026 composer.get('replyingToTopic')) {\n          var topic = this.get('topic');\n          if (!topic || topic.get('id') !== composer.get('topic.id'))\n          {\n            var message = I18n.t(\"composer.posting_not_on_topic\", {title: this.get('model.topic.title')});\n\n            var buttons = [{\n              \"label\": I18n.t(\"composer.cancel\"),\n              \"class\": \"cancel\",\n              \"link\": true\n            }];\n\n            if(topic) {\n              buttons.push({\n                \"label\": I18n.t(\"composer.reply_here\") + \"\u003cbr/\u003e\u003cdiv class='topic-title overflow-ellipsis'\u003e\" + topic.get('title') + \"\u003c/div\u003e\",\n                \"class\": \"btn btn-reply-here\",\n                \"callback\": function(){\n                  composer.set('topic', topic);\n                  composer.set('post', null);\n                  self.save(true);\n                }\n              });\n            }\n\n            buttons.push({\n              \"label\": I18n.t(\"composer.reply_original\") + \"\u003cbr/\u003e\u003cdiv class='topic-title overflow-ellipsis'\u003e\" + this.get('model.topic.title') + \"\u003c/div\u003e\",\n              \"class\": \"btn-primary btn-reply-on-original\",\n              \"callback\": function(){\n                self.save(true);\n              }\n            });\n\n            bootbox.dialog(message, buttons, {\"classes\": \"reply-where-modal\"});\n            return;\n          }\n        }\n\n        return composer.save({\n          imageSizes: this.get('view').imageSizes(),\n          editReason: this.get(\"editReason\")\n        }).then(function(opts) {\n\n          // If we replied as a new topic successfully, remove the draft.\n          if (self.get('replyAsNewTopicDraft')) {\n            self.destroyDraft();\n          }\n\n          opts = opts || {};\n          self.close();\n\n          var currentUser = Discourse.User.current();\n          if (composer.get('creatingTopic')) {\n            currentUser.set('topic_count', currentUser.get('topic_count') + 1);\n          } else {\n            currentUser.set('reply_count', currentUser.get('reply_count') + 1);\n          }\n\n          if ((!composer.get('replyingToTopic')) || (!Discourse.User.currentProp('disable_jump_reply'))) {\n            Discourse.URL.routeTo(opts.post.get('url'));\n          }\n        }, function(error) {\n          composer.set('disableDrafts', false);\n          bootbox.alert(error);\n        });\n      },\n\n      /**\n        Checks to see if a reply has been typed. This is signaled by a keyUp\n        event in a view.\n\n        @method checkReplyLength\n      **/\n      checkReplyLength: function() {\n        if (this.present('model.reply')) {\n          // Notify the composer messages controller that a reply has been typed. Some\n          // messages only appear after typing.\n          this.get('controllers.composer-messages').typedReply();\n        }\n      },\n\n      /**\n        Fired after a user stops typing. Considers whether to check for similar\n        topics based on the current composer state.\n\n        @method findSimilarTopics\n      **/\n      findSimilarTopics: function() {\n\n        // We don't care about similar topics unless creating a topic\n        if (!this.get('model.creatingTopic')) return;\n\n        var body = this.get('model.reply'),\n            title = this.get('model.title'),\n            self = this,\n            message;\n\n        // Ensure the fields are of the minimum length\n        if (body.length \u003c Discourse.SiteSettings.min_body_similar_length ||\n            title.length \u003c Discourse.SiteSettings.min_title_similar_length) { return; }\n\n        // TODO pass the 200 in from somewhere\n        body = body.substr(0, 200);\n\n        // Done search over and over\n        if((title + body) === this.get('lastSimilaritySearch')) { return; }\n        this.set('lastSimilaritySearch', title + body);\n\n        var messageController = this.get('controllers.composer-messages'),\n            similarTopics = this.get('similarTopics');\n\n        Discourse.Topic.findSimilarTo(title, body).then(function (newTopics) {\n          similarTopics.clear();\n          similarTopics.pushObjects(newTopics);\n\n          if (similarTopics.get('length') \u003e 0) {\n            message = Discourse.ComposerMessage.create({\n              templateName: 'composer/similar_topics',\n              similarTopics: similarTopics,\n              extraClass: 'similar-topics'\n            });\n\n            self.set('similarTopicsMessage', message);\n            messageController.popup(message);\n          } else {\n            message = self.get('similarTopicsMessage');\n            if (message) {\n              messageController.send('hideMessage', message);\n            }\n          }\n        });\n\n      },\n\n      saveDraft: function() {\n        var model = this.get('model');\n        if (model) { model.saveDraft(); }\n      },\n\n      /**\n        Open the composer view\n\n        @method open\n        @param {Object} opts Options for creating a post\n          @param {String} opts.action The action we're performing: edit, reply or createTopic\n          @param {Discourse.Post} [opts.post] The post we're replying to\n          @param {Discourse.Topic} [opts.topic] The topic we're replying to\n          @param {String} [opts.quote] If we're opening a reply from a quote, the quote we're making\n      **/\n      open: function(opts) {\n        opts = opts || {};\n\n        if (!opts.draftKey) {\n          alert(\"composer was opened without a draft key\");\n          throw \"composer opened without a proper draft key\";\n        }\n\n        // If we show the subcategory list, scope the categories drop down to\n        // the category we opened the composer with.\n        if (Discourse.SiteSettings.show_subcategory_list) {\n          this.set('scopedCategoryId', opts.categoryId);\n        }\n\n        var composerMessages = this.get('controllers.composer-messages'),\n            self = this,\n            composerModel = this.get('model');\n\n        this.setProperties({ showEditReason: false, editReason: null });\n        composerMessages.reset();\n\n        // If we want a different draft than the current composer, close it and clear our model.\n        if (composerModel \u0026\u0026 opts.draftKey !== composerModel.draftKey \u0026\u0026\n            composerModel.composeState === Discourse.Composer.DRAFT) {\n          this.close();\n          composerModel = null;\n        }\n\n        return new Ember.RSVP.Promise(function(resolve, reject) {\n          if (composerModel \u0026\u0026 composerModel.get('replyDirty')) {\n\n            // If we're already open, we don't have to do anything\n            if (composerModel.get('composeState') === Discourse.Composer.OPEN \u0026\u0026\n                composerModel.get('draftKey') === opts.draftKey) {\n              return resolve();\n            }\n\n            // If it's the same draft, just open it up again.\n            if (composerModel.get('composeState') === Discourse.Composer.DRAFT \u0026\u0026\n                composerModel.get('draftKey') === opts.draftKey \u0026\u0026\n                composerModel.action === opts.action) {\n\n                composerModel.set('composeState', Discourse.Composer.OPEN);\n                return resolve();\n            }\n\n            // If it's a different draft, cancel it and try opening again.\n            return self.cancelComposer().then(function() {\n              return self.open(opts);\n            }).then(resolve, reject);\n          }\n\n          // we need a draft sequence for the composer to work\n          if (opts.draftSequence === void 0) {\n            return Discourse.Draft.get(opts.draftKey).then(function(data) {\n              opts.draftSequence = data.draft_sequence;\n              opts.draft = data.draft;\n              self._setModel(composerModel, opts);\n            }).then(resolve, reject);\n          }\n\n          self._setModel(composerModel, opts);\n          resolve();\n        });\n      },\n\n      // Given a potential instance and options, set the model for this composer.\n      _setModel: function(composerModel, opts) {\n        if (opts.draft) {\n          composerModel = Discourse.Composer.loadDraft(opts.draftKey, opts.draftSequence, opts.draft);\n          if (composerModel) {\n            composerModel.set('topic', opts.topic);\n          }\n        } else {\n          composerModel = composerModel || Discourse.Composer.create();\n          composerModel.open(opts);\n        }\n\n        this.set('model', composerModel);\n        composerModel.set('composeState', Discourse.Composer.OPEN);\n\n        var composerMessages = this.get('controllers.composer-messages');\n        composerMessages.queryFor(composerModel);\n      },\n\n      // View a new reply we've made\n      viewNewReply: function() {\n        Discourse.URL.routeTo(this.get('createdPost.url'));\n        this.close();\n        return false;\n      },\n\n      destroyDraft: function() {\n        var key = this.get('model.draftKey');\n        if (key) {\n          Discourse.Draft.clear(key, this.get('model.draftSequence'));\n        }\n      },\n\n      cancelComposer: function() {\n        var self = this;\n\n        return new Ember.RSVP.Promise(function (resolve) {\n          if (self.get('model.hasMetaData') || self.get('model.replyDirty')) {\n            bootbox.confirm(I18n.t(\"post.abandon.confirm\"), I18n.t(\"post.abandon.no_value\"),\n                I18n.t(\"post.abandon.yes_value\"), function(result) {\n              if (result) {\n                self.destroyDraft();\n                self.get('model').clearState();\n                self.close();\n                resolve();\n              }\n            });\n          } else {\n            // it is possible there is some sort of crazy draft with no body ... just give up on it\n            self.destroyDraft();\n            self.get('model').clearState();\n            self.close();\n            resolve();\n          }\n        });\n      },\n\n\n      shrink: function() {\n        if (this.get('model.replyDirty')) {\n          this.collapse();\n        } else {\n          this.close();\n        }\n      },\n\n      collapse: function() {\n        this.saveDraft();\n        this.set('model.composeState', Discourse.Composer.DRAFT);\n      },\n\n      close: function() {\n        this.setProperties({\n          model: null,\n          'view.showTitleTip': false,\n          'view.showCategoryTip': false,\n          'view.showReplyTip': false\n        });\n      },\n\n      closeAutocomplete: function() {\n        $('#wmd-input').autocomplete({ cancel: true });\n      },\n\n      showOptions: function() {\n        var _ref;\n        return (_ref = this.get('controllers.modal')) ? _ref.show(Discourse.ArchetypeOptionsModalView.create({\n          archetype: this.get('model.archetype'),\n          metaData: this.get('model.metaData')\n        })) : void 0;\n      },\n\n      canEdit: function() {\n        return this.get(\"model.action\") === \"edit\" \u0026\u0026 Discourse.User.current().get(\"can_edit\");\n      }.property(\"model.action\")\n\n    });\n  });";
define("discourse/controllers/create-account", 
  ["discourse/mixins/modal-functionality","discourse/controllers/controller","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var ModalFunctionality = __dependency1__["default"];

    var DiscourseController = __dependency2__["default"];

    __exports__["default"] = DiscourseController.extend(ModalFunctionality, {
      needs: ['login'],

      uniqueUsernameValidation: null,
      globalNicknameExists: false,
      complete: false,
      accountPasswordConfirm: 0,
      accountChallenge: 0,
      formSubmitted: false,
      rejectedEmails: Em.A([]),
      rejectedPasswords: Em.A([]),
      prefilledUsername: null,
      tosAccepted: false,

      hasAuthOptions: Em.computed.notEmpty('authOptions'),
      canCreateLocal: Discourse.computed.setting('enable_local_logins'),
      showCreateForm: Em.computed.or('hasAuthOptions', 'canCreateLocal'),

      resetForm: function() {
        this.setProperties({
          accountName: '',
          accountEmail: '',
          accountUsername: '',
          accountPassword: '',
          authOptions: null,
          globalNicknameExists: false,
          complete: false,
          formSubmitted: false,
          rejectedEmails: Em.A([]),
          rejectedPasswords: Em.A([]),
          prefilledUsername: null
        });
      },

      submitDisabled: function() {
        // Even if password is required, we respect the tos setting
        if (this.get('tosAcceptRequired') && !this.get('tosAccepted')) return true;

        if (!this.get('passwordRequired')) return false; // 3rd party auth
        if (this.get('formSubmitted')) return true;
        if (this.get('nameValidation.failed')) return true;
        if (this.get('emailValidation.failed')) return true;
        if (this.get('usernameValidation.failed')) return true;
        if (this.get('passwordValidation.failed')) return true;
        return false;
      }.property('passwordRequired', 'nameValidation.failed', 'emailValidation.failed', 'usernameValidation.failed', 'passwordValidation.failed', 'formSubmitted', 'tosAccepted'),

      passwordRequired: function() {
        return this.blank('authOptions.auth_provider');
      }.property('authOptions.auth_provider'),

      passwordInstructions: function() {
        return I18n.t('user.password.instructions', {count: Discourse.SiteSettings.min_password_length});
      }.property(),

      // Validate the name
      nameValidation: function() {
        // If blank, fail without a reason
        if (this.blank('accountName')) return Discourse.InputValidation.create({ failed: true });

        if (this.get('accountPasswordConfirm') === 0) {
          this.fetchConfirmationValue();
        }

        // If too short
        if (this.get('accountName').length < 3) {
          return Discourse.InputValidation.create({
            failed: true,
            reason: I18n.t('user.name.too_short')
          });
        }

        // Looks good!
        return Discourse.InputValidation.create({
          ok: true,
          reason: I18n.t('user.name.ok')
        });
      }.property('accountName'),

      // Check the email address
      emailValidation: function() {
        // If blank, fail without a reason
        var email;
        if (this.blank('accountEmail')) {
          return Discourse.InputValidation.create({
            failed: true
          });
        }

        email = this.get("accountEmail");

        if (this.get('rejectedEmails').contains(email)) {
          return Discourse.InputValidation.create({
            failed: true,
            reason: I18n.t('user.email.invalid')
          });
        }

        if ((this.get('authOptions.email') === email) && this.get('authOptions.email_valid')) {
          return Discourse.InputValidation.create({
            ok: true,
            reason: I18n.t('user.email.authenticated', {
              provider: this.get('authOptions.auth_provider')
            })
          });
        }

        if (Discourse.Utilities.emailValid(email)) {
          return Discourse.InputValidation.create({
            ok: true,
            reason: I18n.t('user.email.ok')
          });
        }

        return Discourse.InputValidation.create({
          failed: true,
          reason: I18n.t('user.email.invalid')
        });
      }.property('accountEmail', 'rejectedEmails.@each'),

      emailValidated: function() {
        return this.get('authOptions.email') === this.get("accountEmail") && this.get('authOptions.email_valid');
      }.property('accountEmail', 'authOptions.email', 'authOptions.email_valid'),

      prefillUsername: function() {
        if (this.get('prefilledUsername')) {
          // If username field has been filled automatically, and email field just changed,
          // then remove the username.
          if (this.get('accountUsername') === this.get('prefilledUsername')) {
            this.set('accountUsername', '');
          }
          this.set('prefilledUsername', null);
        }
        if (this.get('emailValidation.ok') && (this.blank('accountUsername') || this.get('authOptions.email'))) {
          // If email is valid and username has not been entered yet,
          // or email and username were filled automatically by 3rd parth auth,
          // then look for a registered username that matches the email.
          this.fetchExistingUsername();
        }
      }.observes('emailValidation', 'accountEmail'),

      fetchExistingUsername: Discourse.debounce(function() {
        var self = this;
        Discourse.User.checkUsername(null, this.get('accountEmail')).then(function(result) {
          if (result.suggestion && (self.blank('accountUsername') || self.get('accountUsername') === self.get('authOptions.username'))) {
            self.set('accountUsername', result.suggestion);
            self.set('prefilledUsername', result.suggestion);
          }
        });
      }, 500),

      usernameMatch: function() {
        if (this.usernameNeedsToBeValidatedWithEmail()) {
          if (this.get('emailValidation.failed')) {
            if (this.shouldCheckUsernameMatch()) {
              return this.set('uniqueUsernameValidation', Discourse.InputValidation.create({
                failed: true,
                reason: I18n.t('user.username.enter_email')
              }));
            } else {
              return this.set('uniqueUsernameValidation', Discourse.InputValidation.create({ failed: true }));
            }
          } else if (this.shouldCheckUsernameMatch()) {
            this.set('uniqueUsernameValidation', Discourse.InputValidation.create({
              failed: true,
              reason: I18n.t('user.username.checking')
            }));
            return this.checkUsernameAvailability();
          }
        }
      }.observes('accountEmail'),

      basicUsernameValidation: function() {
        this.set('uniqueUsernameValidation', null);

        if (this.get('accountUsername') === this.get('prefilledUsername')) {
          return Discourse.InputValidation.create({
            ok: true,
            reason: I18n.t('user.username.prefilled')
          });
        }

        // If blank, fail without a reason
        if (this.blank('accountUsername')) {
          return Discourse.InputValidation.create({
            failed: true
          });
        }

        // If too short
        if (this.get('accountUsername').length < Discourse.SiteSettings.min_username_length) {
          return Discourse.InputValidation.create({
            failed: true,
            reason: I18n.t('user.username.too_short')
          });
        }

        // If too long
        if (this.get('accountUsername').length > Discourse.SiteSettings.max_username_length) {
          return Discourse.InputValidation.create({
            failed: true,
            reason: I18n.t('user.username.too_long')
          });
        }

        this.checkUsernameAvailability();
        // Let's check it out asynchronously
        return Discourse.InputValidation.create({
          failed: true,
          reason: I18n.t('user.username.checking')
        });
      }.property('accountUsername'),

      shouldCheckUsernameMatch: function() {
        return !this.blank('accountUsername') && this.get('accountUsername').length > 2;
      },

      checkUsernameAvailability: Discourse.debounce(function() {
        var _this = this;
        if (this.shouldCheckUsernameMatch()) {
          return Discourse.User.checkUsername(this.get('accountUsername'), this.get('accountEmail')).then(function(result) {
            _this.set('globalNicknameExists', false);
            if (result.available) {
              if (result.global_match) {
                _this.set('globalNicknameExists', true);
                return _this.set('uniqueUsernameValidation', Discourse.InputValidation.create({
                  ok: true,
                  reason: I18n.t('user.username.global_match')
                }));
              } else {
                return _this.set('uniqueUsernameValidation', Discourse.InputValidation.create({
                  ok: true,
                  reason: I18n.t('user.username.available')
                }));
              }
            } else {
              if (result.suggestion) {
                if (result.global_match !== void 0 && result.global_match === false) {
                  _this.set('globalNicknameExists', true);
                  return _this.set('uniqueUsernameValidation', Discourse.InputValidation.create({
                    failed: true,
                    reason: I18n.t('user.username.global_mismatch', result)
                  }));
                } else {
                  return _this.set('uniqueUsernameValidation', Discourse.InputValidation.create({
                    failed: true,
                    reason: I18n.t('user.username.not_available', result)
                  }));
                }
              } else if (result.errors) {
                return _this.set('uniqueUsernameValidation', Discourse.InputValidation.create({
                  failed: true,
                  reason: result.errors.join(' ')
                }));
              } else {
                _this.set('globalNicknameExists', true);
                return _this.set('uniqueUsernameValidation', Discourse.InputValidation.create({
                  failed: true,
                  reason: I18n.t('user.username.enter_email')
                }));
              }
            }
          });
        }
      }, 500),

      // Actually wait for the async name check before we're 100% sure we're good to go
      usernameValidation: function() {
        var basicValidation, uniqueUsername;
        basicValidation = this.get('basicUsernameValidation');
        uniqueUsername = this.get('uniqueUsernameValidation');
        if (uniqueUsername) {
          return uniqueUsername;
        }
        return basicValidation;
      }.property('uniqueUsernameValidation', 'basicUsernameValidation'),

      usernameNeedsToBeValidatedWithEmail: function() {
        return( this.get('globalNicknameExists') || false );
      },

      // Validate the password
      passwordValidation: function() {
        var password;
        if (!this.get('passwordRequired')) {
          return Discourse.InputValidation.create({
            ok: true
          });
        }

        // If blank, fail without a reason
        password = this.get("accountPassword");
        if (this.blank('accountPassword')) {
          return Discourse.InputValidation.create({ failed: true });
        }

        // If too short
        if (password.length < Discourse.SiteSettings.min_password_length) {
          return Discourse.InputValidation.create({
            failed: true,
            reason: I18n.t('user.password.too_short')
          });
        }

        if (this.get('rejectedPasswords').contains(password)) {
          return Discourse.InputValidation.create({
            failed: true,
            reason: I18n.t('user.password.common')
          });
        }

        // Looks good!
        return Discourse.InputValidation.create({
          ok: true,
          reason: I18n.t('user.password.ok')
        });
      }.property('accountPassword', 'rejectedPasswords.@each'),

      fetchConfirmationValue: function() {
        var createAccountController = this;
        return Discourse.ajax('/users/hp.json').then(function (json) {
          createAccountController.set('accountPasswordConfirm', json.value);
          createAccountController.set('accountChallenge', json.challenge.split("").reverse().join(""));
        });
      },

      tosAcceptRequired: Discourse.computed.setting('tos_accept_required'),

      actions: {
        externalLogin: function(provider) {
          this.get('controllers.login').send('externalLogin', provider);
        },

        createAccount: function() {
          var self = this;
          this.set('formSubmitted', true);
          var name = this.get('accountName');
          var email = this.get('accountEmail');
          var password = this.get('accountPassword');
          var username = this.get('accountUsername');
          var passwordConfirm = this.get('accountPasswordConfirm');
          var challenge = this.get('accountChallenge');
          return Discourse.User.createAccount(name, email, password, username, passwordConfirm, challenge).then(function(result) {
            if (result.success) {
              self.flash(result.message);
              self.set('complete', true);
            } else {
              self.flash(result.message || I18n.t('create_account.failed'), 'error');
              if (result.errors && result.errors.email && result.errors.email.length > 0 && result.values) {
                self.get('rejectedEmails').pushObject(result.values.email);
              }
              if (result.errors && result.errors.password && result.errors.password.length > 0) {
                self.get('rejectedPasswords').pushObject(password);
              }
              self.set('formSubmitted', false);
            }
            if (result.active && !Discourse.SiteSettings.must_approve_users) {
              return window.location.reload();
            }
          }, function() {
            self.set('formSubmitted', false);
            return self.flash(I18n.t('create_account.failed'), 'error');
          });
        }
      }
    });
  });

Discourse.CreateAccountController = require('discourse/controllers/create-account').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/create-account.js'] = "define(\"discourse/controllers/create-account\", \n  [\"discourse/mixins/modal-functionality\",\"discourse/controllers/controller\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ModalFunctionality = __dependency1__[\"default\"];\n\n    var DiscourseController = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = DiscourseController.extend(ModalFunctionality, {\n      needs: ['login'],\n\n      uniqueUsernameValidation: null,\n      globalNicknameExists: false,\n      complete: false,\n      accountPasswordConfirm: 0,\n      accountChallenge: 0,\n      formSubmitted: false,\n      rejectedEmails: Em.A([]),\n      rejectedPasswords: Em.A([]),\n      prefilledUsername: null,\n      tosAccepted: false,\n\n      hasAuthOptions: Em.computed.notEmpty('authOptions'),\n      canCreateLocal: Discourse.computed.setting('enable_local_logins'),\n      showCreateForm: Em.computed.or('hasAuthOptions', 'canCreateLocal'),\n\n      resetForm: function() {\n        this.setProperties({\n          accountName: '',\n          accountEmail: '',\n          accountUsername: '',\n          accountPassword: '',\n          authOptions: null,\n          globalNicknameExists: false,\n          complete: false,\n          formSubmitted: false,\n          rejectedEmails: Em.A([]),\n          rejectedPasswords: Em.A([]),\n          prefilledUsername: null\n        });\n      },\n\n      submitDisabled: function() {\n        // Even if password is required, we respect the tos setting\n        if (this.get('tosAcceptRequired') \u0026\u0026 !this.get('tosAccepted')) return true;\n\n        if (!this.get('passwordRequired')) return false; // 3rd party auth\n        if (this.get('formSubmitted')) return true;\n        if (this.get('nameValidation.failed')) return true;\n        if (this.get('emailValidation.failed')) return true;\n        if (this.get('usernameValidation.failed')) return true;\n        if (this.get('passwordValidation.failed')) return true;\n        return false;\n      }.property('passwordRequired', 'nameValidation.failed', 'emailValidation.failed', 'usernameValidation.failed', 'passwordValidation.failed', 'formSubmitted', 'tosAccepted'),\n\n      passwordRequired: function() {\n        return this.blank('authOptions.auth_provider');\n      }.property('authOptions.auth_provider'),\n\n      passwordInstructions: function() {\n        return I18n.t('user.password.instructions', {count: Discourse.SiteSettings.min_password_length});\n      }.property(),\n\n      // Validate the name\n      nameValidation: function() {\n        // If blank, fail without a reason\n        if (this.blank('accountName')) return Discourse.InputValidation.create({ failed: true });\n\n        if (this.get('accountPasswordConfirm') === 0) {\n          this.fetchConfirmationValue();\n        }\n\n        // If too short\n        if (this.get('accountName').length \u003c 3) {\n          return Discourse.InputValidation.create({\n            failed: true,\n            reason: I18n.t('user.name.too_short')\n          });\n        }\n\n        // Looks good!\n        return Discourse.InputValidation.create({\n          ok: true,\n          reason: I18n.t('user.name.ok')\n        });\n      }.property('accountName'),\n\n      // Check the email address\n      emailValidation: function() {\n        // If blank, fail without a reason\n        var email;\n        if (this.blank('accountEmail')) {\n          return Discourse.InputValidation.create({\n            failed: true\n          });\n        }\n\n        email = this.get(\"accountEmail\");\n\n        if (this.get('rejectedEmails').contains(email)) {\n          return Discourse.InputValidation.create({\n            failed: true,\n            reason: I18n.t('user.email.invalid')\n          });\n        }\n\n        if ((this.get('authOptions.email') === email) \u0026\u0026 this.get('authOptions.email_valid')) {\n          return Discourse.InputValidation.create({\n            ok: true,\n            reason: I18n.t('user.email.authenticated', {\n              provider: this.get('authOptions.auth_provider')\n            })\n          });\n        }\n\n        if (Discourse.Utilities.emailValid(email)) {\n          return Discourse.InputValidation.create({\n            ok: true,\n            reason: I18n.t('user.email.ok')\n          });\n        }\n\n        return Discourse.InputValidation.create({\n          failed: true,\n          reason: I18n.t('user.email.invalid')\n        });\n      }.property('accountEmail', 'rejectedEmails.@each'),\n\n      emailValidated: function() {\n        return this.get('authOptions.email') === this.get(\"accountEmail\") \u0026\u0026 this.get('authOptions.email_valid');\n      }.property('accountEmail', 'authOptions.email', 'authOptions.email_valid'),\n\n      prefillUsername: function() {\n        if (this.get('prefilledUsername')) {\n          // If username field has been filled automatically, and email field just changed,\n          // then remove the username.\n          if (this.get('accountUsername') === this.get('prefilledUsername')) {\n            this.set('accountUsername', '');\n          }\n          this.set('prefilledUsername', null);\n        }\n        if (this.get('emailValidation.ok') \u0026\u0026 (this.blank('accountUsername') || this.get('authOptions.email'))) {\n          // If email is valid and username has not been entered yet,\n          // or email and username were filled automatically by 3rd parth auth,\n          // then look for a registered username that matches the email.\n          this.fetchExistingUsername();\n        }\n      }.observes('emailValidation', 'accountEmail'),\n\n      fetchExistingUsername: Discourse.debounce(function() {\n        var self = this;\n        Discourse.User.checkUsername(null, this.get('accountEmail')).then(function(result) {\n          if (result.suggestion \u0026\u0026 (self.blank('accountUsername') || self.get('accountUsername') === self.get('authOptions.username'))) {\n            self.set('accountUsername', result.suggestion);\n            self.set('prefilledUsername', result.suggestion);\n          }\n        });\n      }, 500),\n\n      usernameMatch: function() {\n        if (this.usernameNeedsToBeValidatedWithEmail()) {\n          if (this.get('emailValidation.failed')) {\n            if (this.shouldCheckUsernameMatch()) {\n              return this.set('uniqueUsernameValidation', Discourse.InputValidation.create({\n                failed: true,\n                reason: I18n.t('user.username.enter_email')\n              }));\n            } else {\n              return this.set('uniqueUsernameValidation', Discourse.InputValidation.create({ failed: true }));\n            }\n          } else if (this.shouldCheckUsernameMatch()) {\n            this.set('uniqueUsernameValidation', Discourse.InputValidation.create({\n              failed: true,\n              reason: I18n.t('user.username.checking')\n            }));\n            return this.checkUsernameAvailability();\n          }\n        }\n      }.observes('accountEmail'),\n\n      basicUsernameValidation: function() {\n        this.set('uniqueUsernameValidation', null);\n\n        if (this.get('accountUsername') === this.get('prefilledUsername')) {\n          return Discourse.InputValidation.create({\n            ok: true,\n            reason: I18n.t('user.username.prefilled')\n          });\n        }\n\n        // If blank, fail without a reason\n        if (this.blank('accountUsername')) {\n          return Discourse.InputValidation.create({\n            failed: true\n          });\n        }\n\n        // If too short\n        if (this.get('accountUsername').length \u003c Discourse.SiteSettings.min_username_length) {\n          return Discourse.InputValidation.create({\n            failed: true,\n            reason: I18n.t('user.username.too_short')\n          });\n        }\n\n        // If too long\n        if (this.get('accountUsername').length \u003e Discourse.SiteSettings.max_username_length) {\n          return Discourse.InputValidation.create({\n            failed: true,\n            reason: I18n.t('user.username.too_long')\n          });\n        }\n\n        this.checkUsernameAvailability();\n        // Let's check it out asynchronously\n        return Discourse.InputValidation.create({\n          failed: true,\n          reason: I18n.t('user.username.checking')\n        });\n      }.property('accountUsername'),\n\n      shouldCheckUsernameMatch: function() {\n        return !this.blank('accountUsername') \u0026\u0026 this.get('accountUsername').length \u003e 2;\n      },\n\n      checkUsernameAvailability: Discourse.debounce(function() {\n        var _this = this;\n        if (this.shouldCheckUsernameMatch()) {\n          return Discourse.User.checkUsername(this.get('accountUsername'), this.get('accountEmail')).then(function(result) {\n            _this.set('globalNicknameExists', false);\n            if (result.available) {\n              if (result.global_match) {\n                _this.set('globalNicknameExists', true);\n                return _this.set('uniqueUsernameValidation', Discourse.InputValidation.create({\n                  ok: true,\n                  reason: I18n.t('user.username.global_match')\n                }));\n              } else {\n                return _this.set('uniqueUsernameValidation', Discourse.InputValidation.create({\n                  ok: true,\n                  reason: I18n.t('user.username.available')\n                }));\n              }\n            } else {\n              if (result.suggestion) {\n                if (result.global_match !== void 0 \u0026\u0026 result.global_match === false) {\n                  _this.set('globalNicknameExists', true);\n                  return _this.set('uniqueUsernameValidation', Discourse.InputValidation.create({\n                    failed: true,\n                    reason: I18n.t('user.username.global_mismatch', result)\n                  }));\n                } else {\n                  return _this.set('uniqueUsernameValidation', Discourse.InputValidation.create({\n                    failed: true,\n                    reason: I18n.t('user.username.not_available', result)\n                  }));\n                }\n              } else if (result.errors) {\n                return _this.set('uniqueUsernameValidation', Discourse.InputValidation.create({\n                  failed: true,\n                  reason: result.errors.join(' ')\n                }));\n              } else {\n                _this.set('globalNicknameExists', true);\n                return _this.set('uniqueUsernameValidation', Discourse.InputValidation.create({\n                  failed: true,\n                  reason: I18n.t('user.username.enter_email')\n                }));\n              }\n            }\n          });\n        }\n      }, 500),\n\n      // Actually wait for the async name check before we're 100% sure we're good to go\n      usernameValidation: function() {\n        var basicValidation, uniqueUsername;\n        basicValidation = this.get('basicUsernameValidation');\n        uniqueUsername = this.get('uniqueUsernameValidation');\n        if (uniqueUsername) {\n          return uniqueUsername;\n        }\n        return basicValidation;\n      }.property('uniqueUsernameValidation', 'basicUsernameValidation'),\n\n      usernameNeedsToBeValidatedWithEmail: function() {\n        return( this.get('globalNicknameExists') || false );\n      },\n\n      // Validate the password\n      passwordValidation: function() {\n        var password;\n        if (!this.get('passwordRequired')) {\n          return Discourse.InputValidation.create({\n            ok: true\n          });\n        }\n\n        // If blank, fail without a reason\n        password = this.get(\"accountPassword\");\n        if (this.blank('accountPassword')) {\n          return Discourse.InputValidation.create({ failed: true });\n        }\n\n        // If too short\n        if (password.length \u003c Discourse.SiteSettings.min_password_length) {\n          return Discourse.InputValidation.create({\n            failed: true,\n            reason: I18n.t('user.password.too_short')\n          });\n        }\n\n        if (this.get('rejectedPasswords').contains(password)) {\n          return Discourse.InputValidation.create({\n            failed: true,\n            reason: I18n.t('user.password.common')\n          });\n        }\n\n        // Looks good!\n        return Discourse.InputValidation.create({\n          ok: true,\n          reason: I18n.t('user.password.ok')\n        });\n      }.property('accountPassword', 'rejectedPasswords.@each'),\n\n      fetchConfirmationValue: function() {\n        var createAccountController = this;\n        return Discourse.ajax('/users/hp.json').then(function (json) {\n          createAccountController.set('accountPasswordConfirm', json.value);\n          createAccountController.set('accountChallenge', json.challenge.split(\"\").reverse().join(\"\"));\n        });\n      },\n\n      tosAcceptRequired: Discourse.computed.setting('tos_accept_required'),\n\n      actions: {\n        externalLogin: function(provider) {\n          this.get('controllers.login').send('externalLogin', provider);\n        },\n\n        createAccount: function() {\n          var self = this;\n          this.set('formSubmitted', true);\n          var name = this.get('accountName');\n          var email = this.get('accountEmail');\n          var password = this.get('accountPassword');\n          var username = this.get('accountUsername');\n          var passwordConfirm = this.get('accountPasswordConfirm');\n          var challenge = this.get('accountChallenge');\n          return Discourse.User.createAccount(name, email, password, username, passwordConfirm, challenge).then(function(result) {\n            if (result.success) {\n              self.flash(result.message);\n              self.set('complete', true);\n            } else {\n              self.flash(result.message || I18n.t('create_account.failed'), 'error');\n              if (result.errors \u0026\u0026 result.errors.email \u0026\u0026 result.errors.email.length \u003e 0 \u0026\u0026 result.values) {\n                self.get('rejectedEmails').pushObject(result.values.email);\n              }\n              if (result.errors \u0026\u0026 result.errors.password \u0026\u0026 result.errors.password.length \u003e 0) {\n                self.get('rejectedPasswords').pushObject(password);\n              }\n              self.set('formSubmitted', false);\n            }\n            if (result.active \u0026\u0026 !Discourse.SiteSettings.must_approve_users) {\n              return window.location.reload();\n            }\n          }, function() {\n            self.set('formSubmitted', false);\n            return self.flash(I18n.t('create_account.failed'), 'error');\n          });\n        }\n      }\n    });\n  });";
define("discourse/controllers/discovery", 
  ["discourse/controllers/object","discourse/models/top-period","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var ObjectController = __dependency1__["default"];
    var TopPeriod = __dependency2__["default"];

    __exports__["default"] = ObjectController.extend({
      needs: ['navigation/category'],
      loading: false,
      loadingSpinner: false,
      scheduledSpinner: null,

      category: Em.computed.alias('controllers.navigation/category.category'),
      noSubcategories: Em.computed.alias('controllers.navigation/category.noSubcategories'),

      showMoreUrl: function(period) {
        var url = '', category = this.get('category');
        if (category) {
          url = '/category/' + Discourse.Category.slugFor(category) + (this.get('noSubcategories') ? '/none' : '') + '/l';
        }
        url += '/top/' + period;
        return url;
      },

      periods: function() {
        var self = this,
            periods = [];
        Discourse.Site.currentProp('periods').forEach(function(p) {
          periods.pushObject(TopPeriod.create({ id: p,
                                                showMoreUrl: self.showMoreUrl(p),
                                                periods: periods }));
        });
        return periods;
      }.property('category', 'noSubcategories'),

    });
  });

Discourse.DiscoveryController = require('discourse/controllers/discovery').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/discovery.js'] = "define(\"discourse/controllers/discovery\", \n  [\"discourse/controllers/object\",\"discourse/models/top-period\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ObjectController = __dependency1__[\"default\"];\n    var TopPeriod = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = ObjectController.extend({\n      needs: ['navigation/category'],\n      loading: false,\n      loadingSpinner: false,\n      scheduledSpinner: null,\n\n      category: Em.computed.alias('controllers.navigation/category.category'),\n      noSubcategories: Em.computed.alias('controllers.navigation/category.noSubcategories'),\n\n      showMoreUrl: function(period) {\n        var url = '', category = this.get('category');\n        if (category) {\n          url = '/category/' + Discourse.Category.slugFor(category) + (this.get('noSubcategories') ? '/none' : '') + '/l';\n        }\n        url += '/top/' + period;\n        return url;\n      },\n\n      periods: function() {\n        var self = this,\n            periods = [];\n        Discourse.Site.currentProp('periods').forEach(function(p) {\n          periods.pushObject(TopPeriod.create({ id: p,\n                                                showMoreUrl: self.showMoreUrl(p),\n                                                periods: periods }));\n        });\n        return periods;\n      }.property('category', 'noSubcategories'),\n\n    });\n  });";
define("discourse/controllers/discovery/categories", 
  ["discourse/controllers/discovery","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var DiscoveryController = __dependency1__["default"];

    __exports__["default"] = DiscoveryController.extend({
      needs: ['modal', 'discovery'],

      withLogo: Em.computed.filterBy('categories', 'logo_url'),
      showPostsColumn: Em.computed.empty('withLogo'),

      actions: {
        refresh: function() {
          var self = this;

          // Don't refresh if we're still loading
          if (this.get('controllers.discovery.loading')) { return; }

          this.send('loading');
          Discourse.CategoryList.list('categories').then(function(list) {
            self.set('model', list);
            self.send('loadingComplete');
          });
        }
      },

      canEdit: function() {
        return Discourse.User.currentProp('staff');
      }.property(),

      latestTopicOnly: function() {
        return this.get('categories').find(function(c) { return c.get('featuredTopics.length') > 1; }) === undefined;
      }.property('categories.@each.featuredTopics.length')

    });
  });

Discourse.DiscoveryCategorysController = require('discourse/controllers/discovery/categories').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/discovery/categories.js'] = "define(\"discourse/controllers/discovery/categories\", \n  [\"discourse/controllers/discovery\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DiscoveryController = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = DiscoveryController.extend({\n      needs: ['modal', 'discovery'],\n\n      withLogo: Em.computed.filterBy('categories', 'logo_url'),\n      showPostsColumn: Em.computed.empty('withLogo'),\n\n      actions: {\n        refresh: function() {\n          var self = this;\n\n          // Don't refresh if we're still loading\n          if (this.get('controllers.discovery.loading')) { return; }\n\n          this.send('loading');\n          Discourse.CategoryList.list('categories').then(function(list) {\n            self.set('model', list);\n            self.send('loadingComplete');\n          });\n        }\n      },\n\n      canEdit: function() {\n        return Discourse.User.currentProp('staff');\n      }.property(),\n\n      latestTopicOnly: function() {\n        return this.get('categories').find(function(c) { return c.get('featuredTopics.length') \u003e 1; }) === undefined;\n      }.property('categories.@each.featuredTopics.length')\n\n    });\n  });";
define("discourse/controllers/discovery/topics", 
  ["discourse/controllers/discovery","discourse/controllers/discovery-sortable","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var DiscoveryController = __dependency1__["default"];
    var queryParams = __dependency2__.queryParams;

    var controllerOpts = {
      needs: ['discovery'],
      bulkSelectEnabled: false,
      selected: [],
      period: null,

      redirectedReason: Em.computed.alias('currentUser.redirected_to_top_reason'),

      order: 'default',
      ascending: false,

      actions: {

        changeSort: function(sortBy) {
          if (sortBy === this.get('order')) {
            this.toggleProperty('ascending');
          } else {
            this.setProperties({ order: sortBy, ascending: false });
          }
          this.get('model').refreshSort(sortBy, this.get('ascending'));
        },

        // Show newly inserted topics
        showInserted: function() {
          var tracker = Discourse.TopicTrackingState.current();

          // Move inserted into topics
          this.get('content').loadBefore(tracker.get('newIncoming'));
          tracker.resetTracking();
          return false;
        },

        refresh: function() {
          var filter = this.get('model.filter'),
              self = this;

          // Don't refresh if we're still loading
          if (this.get('controllers.discovery.loading')) { return; }

          this.send('loading');
          Discourse.TopicList.find(filter).then(function(list) {
            self.setProperties({ model: list, selected: [] });

            var tracking = Discourse.TopicTrackingState.current();
            if (tracking) {
              tracking.sync(list, filter);
            }

            self.send('loadingComplete');
          });
        },

        toggleBulkSelect: function() {
          this.toggleProperty('bulkSelectEnabled');
          this.get('selected').clear();
        },

        resetNew: function() {
          var self = this;

          Discourse.TopicTrackingState.current().resetNew();
          Discourse.Topic.resetNew().then(function() {
            self.send('refresh');
          });
        },

        dismissRead: function(operationType) {
          var self = this,
              selected = this.get('selected'),
              operation;

          if(operationType === "posts"){
            operation = { type: 'dismiss_posts' };
          } else {
            operation = { type: 'change_notification_level',
                            notification_level_id: Discourse.Topic.NotificationLevel.REGULAR };
          }

          var promise;
          if (selected.length > 0) {
            promise = Discourse.Topic.bulkOperation(selected, operation);
          } else {
            promise = Discourse.Topic.bulkOperationByFilter(this.get('filter'), operation);
          }
          promise.then(function(result) {
            if (result && result.topic_ids) {
              var tracker = Discourse.TopicTrackingState.current();
              result.topic_ids.forEach(function(t) {
                tracker.removeTopic(t);
              });
              tracker.incrementMessageCount();
            }
            self.send('refresh');
          });
        }
      },


      topicTrackingState: function() {
        return Discourse.TopicTrackingState.current();
      }.property(),

      showDismissRead: function() {
        return this.get('filter') === 'unread' && this.get('topics.length') > 0;
      }.property('filter', 'topics.length'),

      showResetNew: function() {
        return this.get('filter') === 'new' && this.get('topics.length') > 0;
      }.property('filter', 'topics.length'),

      showDismissAtTop: function() {
        return (this.get('filter') === 'new' ||
               this.get('filter') === 'unread') &&
               this.get('topics.length') >= 30;
      }.property('filter', 'topics.length'),

      canBulkSelect: Em.computed.alias('currentUser.staff'),
      hasTopics: Em.computed.gt('topics.length', 0),
      showTable: Em.computed.or('hasTopics', 'topicTrackingState.hasIncoming'),
      allLoaded: Em.computed.empty('more_topics_url'),
      latest: Discourse.computed.endWith('filter', 'latest'),
      top: Em.computed.notEmpty('period'),
      yearly: Em.computed.equal('period', 'yearly'),
      monthly: Em.computed.equal('period', 'monthly'),
      weekly: Em.computed.equal('period', 'weekly'),
      daily: Em.computed.equal('period', 'daily'),

      footerMessage: function() {
        if (!this.get('allLoaded')) { return; }

        var category = this.get('category');
        if( category ) {
          return I18n.t('topics.bottom.category', {category: category.get('name')});
        } else {
          var split = this.get('filter').split('/');
          if (this.get('topics.length') === 0) {
            return I18n.t("topics.none." + split[0], {
              category: split[1]
            });
          } else {
            return I18n.t("topics.bottom." + split[0], {
              category: split[1]
            });
          }
        }
      }.property('allLoaded', 'topics.length'),

      footerEducation: function() {
        if (!this.get('allLoaded') || this.get('topics.length') > 0 || !Discourse.User.current()) { return; }

        var split = this.get('filter').split('/');

        if (split[0] !== 'new' && split[0] !== 'unread' && split[0] !== 'starred') { return; }

        return I18n.t("topics.none.educate." + split[0], {
          userPrefsUrl: Discourse.getURL("/users/") + (Discourse.User.currentProp("username_lower")) + "/preferences"
        });
      }.property('allLoaded', 'topics.length'),

      loadMoreTopics: function() {
        return this.get('model').loadMore();
      }
    };

    Ember.keys(queryParams).forEach(function(p) {
      // If we don't have a default value, initialize it to null
      if (typeof controllerOpts[p] === 'undefined') {
        controllerOpts[p] = null;
      }
    });

    __exports__["default"] = DiscoveryController.extend(controllerOpts);
  });

Discourse.DiscoveryTopicsController = require('discourse/controllers/discovery/topics').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/discovery/topics.js'] = "define(\"discourse/controllers/discovery/topics\", \n  [\"discourse/controllers/discovery\",\"discourse/controllers/discovery-sortable\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var DiscoveryController = __dependency1__[\"default\"];\n    var queryParams = __dependency2__.queryParams;\n\n    var controllerOpts = {\n      needs: ['discovery'],\n      bulkSelectEnabled: false,\n      selected: [],\n      period: null,\n\n      redirectedReason: Em.computed.alias('currentUser.redirected_to_top_reason'),\n\n      order: 'default',\n      ascending: false,\n\n      actions: {\n\n        changeSort: function(sortBy) {\n          if (sortBy === this.get('order')) {\n            this.toggleProperty('ascending');\n          } else {\n            this.setProperties({ order: sortBy, ascending: false });\n          }\n          this.get('model').refreshSort(sortBy, this.get('ascending'));\n        },\n\n        // Show newly inserted topics\n        showInserted: function() {\n          var tracker = Discourse.TopicTrackingState.current();\n\n          // Move inserted into topics\n          this.get('content').loadBefore(tracker.get('newIncoming'));\n          tracker.resetTracking();\n          return false;\n        },\n\n        refresh: function() {\n          var filter = this.get('model.filter'),\n              self = this;\n\n          // Don't refresh if we're still loading\n          if (this.get('controllers.discovery.loading')) { return; }\n\n          this.send('loading');\n          Discourse.TopicList.find(filter).then(function(list) {\n            self.setProperties({ model: list, selected: [] });\n\n            var tracking = Discourse.TopicTrackingState.current();\n            if (tracking) {\n              tracking.sync(list, filter);\n            }\n\n            self.send('loadingComplete');\n          });\n        },\n\n        toggleBulkSelect: function() {\n          this.toggleProperty('bulkSelectEnabled');\n          this.get('selected').clear();\n        },\n\n        resetNew: function() {\n          var self = this;\n\n          Discourse.TopicTrackingState.current().resetNew();\n          Discourse.Topic.resetNew().then(function() {\n            self.send('refresh');\n          });\n        },\n\n        dismissRead: function(operationType) {\n          var self = this,\n              selected = this.get('selected'),\n              operation;\n\n          if(operationType === \"posts\"){\n            operation = { type: 'dismiss_posts' };\n          } else {\n            operation = { type: 'change_notification_level',\n                            notification_level_id: Discourse.Topic.NotificationLevel.REGULAR };\n          }\n\n          var promise;\n          if (selected.length \u003e 0) {\n            promise = Discourse.Topic.bulkOperation(selected, operation);\n          } else {\n            promise = Discourse.Topic.bulkOperationByFilter(this.get('filter'), operation);\n          }\n          promise.then(function(result) {\n            if (result \u0026\u0026 result.topic_ids) {\n              var tracker = Discourse.TopicTrackingState.current();\n              result.topic_ids.forEach(function(t) {\n                tracker.removeTopic(t);\n              });\n              tracker.incrementMessageCount();\n            }\n            self.send('refresh');\n          });\n        }\n      },\n\n\n      topicTrackingState: function() {\n        return Discourse.TopicTrackingState.current();\n      }.property(),\n\n      showDismissRead: function() {\n        return this.get('filter') === 'unread' \u0026\u0026 this.get('topics.length') \u003e 0;\n      }.property('filter', 'topics.length'),\n\n      showResetNew: function() {\n        return this.get('filter') === 'new' \u0026\u0026 this.get('topics.length') \u003e 0;\n      }.property('filter', 'topics.length'),\n\n      showDismissAtTop: function() {\n        return (this.get('filter') === 'new' ||\n               this.get('filter') === 'unread') \u0026\u0026\n               this.get('topics.length') \u003e= 30;\n      }.property('filter', 'topics.length'),\n\n      canBulkSelect: Em.computed.alias('currentUser.staff'),\n      hasTopics: Em.computed.gt('topics.length', 0),\n      showTable: Em.computed.or('hasTopics', 'topicTrackingState.hasIncoming'),\n      allLoaded: Em.computed.empty('more_topics_url'),\n      latest: Discourse.computed.endWith('filter', 'latest'),\n      top: Em.computed.notEmpty('period'),\n      yearly: Em.computed.equal('period', 'yearly'),\n      monthly: Em.computed.equal('period', 'monthly'),\n      weekly: Em.computed.equal('period', 'weekly'),\n      daily: Em.computed.equal('period', 'daily'),\n\n      footerMessage: function() {\n        if (!this.get('allLoaded')) { return; }\n\n        var category = this.get('category');\n        if( category ) {\n          return I18n.t('topics.bottom.category', {category: category.get('name')});\n        } else {\n          var split = this.get('filter').split('/');\n          if (this.get('topics.length') === 0) {\n            return I18n.t(\"topics.none.\" + split[0], {\n              category: split[1]\n            });\n          } else {\n            return I18n.t(\"topics.bottom.\" + split[0], {\n              category: split[1]\n            });\n          }\n        }\n      }.property('allLoaded', 'topics.length'),\n\n      footerEducation: function() {\n        if (!this.get('allLoaded') || this.get('topics.length') \u003e 0 || !Discourse.User.current()) { return; }\n\n        var split = this.get('filter').split('/');\n\n        if (split[0] !== 'new' \u0026\u0026 split[0] !== 'unread' \u0026\u0026 split[0] !== 'starred') { return; }\n\n        return I18n.t(\"topics.none.educate.\" + split[0], {\n          userPrefsUrl: Discourse.getURL(\"/users/\") + (Discourse.User.currentProp(\"username_lower\")) + \"/preferences\"\n        });\n      }.property('allLoaded', 'topics.length'),\n\n      loadMoreTopics: function() {\n        return this.get('model').loadMore();\n      }\n    };\n\n    Ember.keys(queryParams).forEach(function(p) {\n      // If we don't have a default value, initialize it to null\n      if (typeof controllerOpts[p] === 'undefined') {\n        controllerOpts[p] = null;\n      }\n    });\n\n    __exports__[\"default\"] = DiscoveryController.extend(controllerOpts);\n  });";
define("discourse/controllers/edit-category", 
  ["discourse/mixins/modal-functionality","discourse/controllers/object","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var ModalFunctionality = __dependency1__["default"];

    var ObjectController = __dependency2__["default"];

    /**
      Modal for editing / creating a category

      @class EditCategoryController
      @extends ObjectController
      @namespace Discourse
      @uses ModalFunctionality
      @module Discourse
    **/
    __exports__["default"] = ObjectController.extend(ModalFunctionality, {
      foregroundColors: ['FFFFFF', '000000'],
      categoryUploadUrl: '/category/uploads',

      parentCategories: function() {
        return Discourse.Category.list().filter(function (c) {
          return !c.get('parentCategory');
        });
      }.property(),

      // We can change the parent if there are no children
      subCategories: function() {
        if (Em.isEmpty(this.get('id'))) { return null; }
        return Discourse.Category.list().filterBy('parent_category_id', this.get('id'));
      }.property('model.id'),

      canSelectParentCategory: Em.computed.not('isUncategorizedCategory'),

      onShow: function() {
        this.changeSize();
        this.titleChanged();
      },

      changeSize: function() {
        if (this.present('description')) {
          this.set('controllers.modal.modalClass', 'edit-category-modal full');
        } else {
          this.set('controllers.modal.modalClass', 'edit-category-modal small');
        }
      }.observes('description'),

      title: function() {
        if (this.get('id')) {
          return I18n.t("category.edit_long") + " : " + this.get('model.name');
        }
        return I18n.t("category.create") + (this.get('model.name') ? (" : " + this.get('model.name')) : '');
      }.property('id', 'model.name'),

      titleChanged: function() {
        this.set('controllers.modal.title', this.get('title'));
      }.observes('title'),

      disabled: function() {
        if (this.get('saving') || this.get('deleting')) return true;
        if (!this.get('name')) return true;
        if (!this.get('color')) return true;
        return false;
      }.property('saving', 'name', 'color', 'deleting'),

      emailInEnabled: Discourse.computed.setting('email_in'),

      deleteDisabled: function() {
        return (this.get('deleting') || this.get('saving') || false);
      }.property('disabled', 'saving', 'deleting'),

      colorStyle: function() {
        return "background-color: #" + (this.get('color')) + "; color: #" + (this.get('text_color')) + ";";
      }.property('color', 'text_color'),

      categoryBadgePreview: function() {
        var c = Discourse.Category.create({
          name: this.get('categoryName'),
          color: this.get('color'),
          text_color: this.get('text_color'),
          parent_category_id: parseInt(this.get('parent_category_id'),10),
          read_restricted: this.get('model.read_restricted')
        });
        return Discourse.HTML.categoryBadge(c, {showParent: true, link: false});
      }.property('parent_category_id', 'categoryName', 'color', 'text_color'),

      // background colors are available as a pipe-separated string
      backgroundColors: function() {
        var categories = Discourse.Category.list();
        return Discourse.SiteSettings.category_colors.split("|").map(function(i) { return i.toUpperCase(); }).concat(
                    categories.map(function(c) { return c.color.toUpperCase(); }) ).uniq();
      }.property('Discourse.SiteSettings.category_colors'),

      usedBackgroundColors: function() {
        var categories = Discourse.Category.list();

        var currentCat = this.get('model');

        return categories.map(function(c) {
          // If editing a category, don't include its color:
          return (currentCat.get('id') && currentCat.get('color').toUpperCase() === c.color.toUpperCase()) ? null : c.color.toUpperCase();
        }, this).compact();
      }.property('id', 'color'),

      categoryName: function() {
        var name = this.get('name') || "";
        return name.trim().length > 0 ? name : I18n.t("preview");
      }.property('name'),

      buttonTitle: function() {
        if (this.get('saving')) return I18n.t("saving");
        if (this.get('isUncategorizedCategory')) return I18n.t("save");
        return (this.get('id') ? I18n.t("category.save") : I18n.t("category.create"));
      }.property('saving', 'id'),

      deleteButtonTitle: function() {
        return I18n.t('category.delete');
      }.property(),

      showDescription: function() {
        return !this.get('isUncategorizedCategory') && this.get('id');
      }.property('isUncategorizedCategory', 'id'),

      showPositionInput: Discourse.computed.setting('fixed_category_positions'),

      actions: {
        showCategoryTopic: function() {
          this.send('closeModal');
          Discourse.URL.routeTo(this.get('topic_url'));
          return false;
        },

        editPermissions: function(){
          this.set('editingPermissions', true);
        },

        addPermission: function(group, permission_id){
          this.get('model').addPermission({group_name: group + "", permission: Discourse.PermissionType.create({id: permission_id})});
        },

        removePermission: function(permission){
          this.get('model').removePermission(permission);
        },

        saveCategory: function() {
          var self = this,
              model = this.get('model'),
              parentCategory = Discourse.Category.list().findBy('id', parseInt(model.get('parent_category_id'), 10));

          this.set('saving', true);
          model.set('parentCategory', parentCategory);

          self.set('saving', false);
          this.get('model').save().then(function(result) {
            self.send('closeModal');
            model.setProperties({slug: result.category.slug, id: result.category.id });
            Discourse.URL.redirectTo("/category/" + Discourse.Category.slugFor(model));

          }).catch(function(error) {
            if (error && error.responseText) {
              self.flash($.parseJSON(error.responseText).errors[0]);
            } else {
              self.flash(I18n.t('generic_error'));
            }
            self.set('saving', false);
          });
        },

        deleteCategory: function() {
          var self = this;
          this.set('deleting', true);

          this.send('hideModal');
          bootbox.confirm(I18n.t("category.delete_confirm"), I18n.t("no_value"), I18n.t("yes_value"), function(result) {
            if (result) {
              self.get('model').destroy().then(function(){
                // success
                self.send('closeModal');
                Discourse.URL.redirectTo("/categories");
              }, function(error){

                if (error && error.responseText) {
                  self.flash($.parseJSON(error.responseText).errors[0]);
                } else {
                  self.flash(I18n.t('generic_error'));
                }

                self.send('showModal');
                self.displayErrors([I18n.t("category.delete_error")]);
                self.set('deleting', false);
              });
            } else {
              self.send('showModal');
              self.set('deleting', false);
            }
          });
        }
      }

    });
  });

Discourse.EditCategoryController = require('discourse/controllers/edit-category').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/edit-category.js'] = "define(\"discourse/controllers/edit-category\", \n  [\"discourse/mixins/modal-functionality\",\"discourse/controllers/object\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ModalFunctionality = __dependency1__[\"default\"];\n\n    var ObjectController = __dependency2__[\"default\"];\n\n    /**\n      Modal for editing / creating a category\n\n      @class EditCategoryController\n      @extends ObjectController\n      @namespace Discourse\n      @uses ModalFunctionality\n      @module Discourse\n    **/\n    __exports__[\"default\"] = ObjectController.extend(ModalFunctionality, {\n      foregroundColors: ['FFFFFF', '000000'],\n      categoryUploadUrl: '/category/uploads',\n\n      parentCategories: function() {\n        return Discourse.Category.list().filter(function (c) {\n          return !c.get('parentCategory');\n        });\n      }.property(),\n\n      // We can change the parent if there are no children\n      subCategories: function() {\n        if (Em.isEmpty(this.get('id'))) { return null; }\n        return Discourse.Category.list().filterBy('parent_category_id', this.get('id'));\n      }.property('model.id'),\n\n      canSelectParentCategory: Em.computed.not('isUncategorizedCategory'),\n\n      onShow: function() {\n        this.changeSize();\n        this.titleChanged();\n      },\n\n      changeSize: function() {\n        if (this.present('description')) {\n          this.set('controllers.modal.modalClass', 'edit-category-modal full');\n        } else {\n          this.set('controllers.modal.modalClass', 'edit-category-modal small');\n        }\n      }.observes('description'),\n\n      title: function() {\n        if (this.get('id')) {\n          return I18n.t(\"category.edit_long\") + \" : \" + this.get('model.name');\n        }\n        return I18n.t(\"category.create\") + (this.get('model.name') ? (\" : \" + this.get('model.name')) : '');\n      }.property('id', 'model.name'),\n\n      titleChanged: function() {\n        this.set('controllers.modal.title', this.get('title'));\n      }.observes('title'),\n\n      disabled: function() {\n        if (this.get('saving') || this.get('deleting')) return true;\n        if (!this.get('name')) return true;\n        if (!this.get('color')) return true;\n        return false;\n      }.property('saving', 'name', 'color', 'deleting'),\n\n      emailInEnabled: Discourse.computed.setting('email_in'),\n\n      deleteDisabled: function() {\n        return (this.get('deleting') || this.get('saving') || false);\n      }.property('disabled', 'saving', 'deleting'),\n\n      colorStyle: function() {\n        return \"background-color: #\" + (this.get('color')) + \"; color: #\" + (this.get('text_color')) + \";\";\n      }.property('color', 'text_color'),\n\n      categoryBadgePreview: function() {\n        var c = Discourse.Category.create({\n          name: this.get('categoryName'),\n          color: this.get('color'),\n          text_color: this.get('text_color'),\n          parent_category_id: parseInt(this.get('parent_category_id'),10),\n          read_restricted: this.get('model.read_restricted')\n        });\n        return Discourse.HTML.categoryBadge(c, {showParent: true, link: false});\n      }.property('parent_category_id', 'categoryName', 'color', 'text_color'),\n\n      // background colors are available as a pipe-separated string\n      backgroundColors: function() {\n        var categories = Discourse.Category.list();\n        return Discourse.SiteSettings.category_colors.split(\"|\").map(function(i) { return i.toUpperCase(); }).concat(\n                    categories.map(function(c) { return c.color.toUpperCase(); }) ).uniq();\n      }.property('Discourse.SiteSettings.category_colors'),\n\n      usedBackgroundColors: function() {\n        var categories = Discourse.Category.list();\n\n        var currentCat = this.get('model');\n\n        return categories.map(function(c) {\n          // If editing a category, don't include its color:\n          return (currentCat.get('id') \u0026\u0026 currentCat.get('color').toUpperCase() === c.color.toUpperCase()) ? null : c.color.toUpperCase();\n        }, this).compact();\n      }.property('id', 'color'),\n\n      categoryName: function() {\n        var name = this.get('name') || \"\";\n        return name.trim().length \u003e 0 ? name : I18n.t(\"preview\");\n      }.property('name'),\n\n      buttonTitle: function() {\n        if (this.get('saving')) return I18n.t(\"saving\");\n        if (this.get('isUncategorizedCategory')) return I18n.t(\"save\");\n        return (this.get('id') ? I18n.t(\"category.save\") : I18n.t(\"category.create\"));\n      }.property('saving', 'id'),\n\n      deleteButtonTitle: function() {\n        return I18n.t('category.delete');\n      }.property(),\n\n      showDescription: function() {\n        return !this.get('isUncategorizedCategory') \u0026\u0026 this.get('id');\n      }.property('isUncategorizedCategory', 'id'),\n\n      showPositionInput: Discourse.computed.setting('fixed_category_positions'),\n\n      actions: {\n        showCategoryTopic: function() {\n          this.send('closeModal');\n          Discourse.URL.routeTo(this.get('topic_url'));\n          return false;\n        },\n\n        editPermissions: function(){\n          this.set('editingPermissions', true);\n        },\n\n        addPermission: function(group, permission_id){\n          this.get('model').addPermission({group_name: group + \"\", permission: Discourse.PermissionType.create({id: permission_id})});\n        },\n\n        removePermission: function(permission){\n          this.get('model').removePermission(permission);\n        },\n\n        saveCategory: function() {\n          var self = this,\n              model = this.get('model'),\n              parentCategory = Discourse.Category.list().findBy('id', parseInt(model.get('parent_category_id'), 10));\n\n          this.set('saving', true);\n          model.set('parentCategory', parentCategory);\n\n          self.set('saving', false);\n          this.get('model').save().then(function(result) {\n            self.send('closeModal');\n            model.setProperties({slug: result.category.slug, id: result.category.id });\n            Discourse.URL.redirectTo(\"/category/\" + Discourse.Category.slugFor(model));\n\n          }).catch(function(error) {\n            if (error \u0026\u0026 error.responseText) {\n              self.flash($.parseJSON(error.responseText).errors[0]);\n            } else {\n              self.flash(I18n.t('generic_error'));\n            }\n            self.set('saving', false);\n          });\n        },\n\n        deleteCategory: function() {\n          var self = this;\n          this.set('deleting', true);\n\n          this.send('hideModal');\n          bootbox.confirm(I18n.t(\"category.delete_confirm\"), I18n.t(\"no_value\"), I18n.t(\"yes_value\"), function(result) {\n            if (result) {\n              self.get('model').destroy().then(function(){\n                // success\n                self.send('closeModal');\n                Discourse.URL.redirectTo(\"/categories\");\n              }, function(error){\n\n                if (error \u0026\u0026 error.responseText) {\n                  self.flash($.parseJSON(error.responseText).errors[0]);\n                } else {\n                  self.flash(I18n.t('generic_error'));\n                }\n\n                self.send('showModal');\n                self.displayErrors([I18n.t(\"category.delete_error\")]);\n                self.set('deleting', false);\n              });\n            } else {\n              self.send('showModal');\n              self.set('deleting', false);\n            }\n          });\n        }\n      }\n\n    });\n  });";
define("discourse/controllers/edit-topic-auto-close", 
  ["discourse/mixins/modal-functionality","discourse/controllers/object","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var ModalFunctionality = __dependency1__["default"];

    var ObjectController = __dependency2__["default"];

    /**
      Modal related to auto closing of topics

      @class EditTopicAutoCloseController
      @extends ObjectController
      @namespace Discourse
      @uses ModalFunctionality
      @module Discourse
    **/
    __exports__["default"] = ObjectController.extend(ModalFunctionality, {
      auto_close_valid: true,
      auto_close_invalid: Em.computed.not('auto_close_valid'),

      setAutoCloseTime: function() {
        if( this.get('details.auto_close_at') ) {
          var closeTime = new Date( this.get('details.auto_close_at') );
          if (closeTime > new Date()) {
            this.set('auto_close_time', moment(closeTime).format("YYYY-MM-DD HH:mm"));
          }
        } else {
          this.set('details.auto_close_time', '');
        }
      }.observes('details.auto_close_at'),

      actions: {
        saveAutoClose: function() {
          this.setAutoClose( this.get('auto_close_time') );
        },

        removeAutoClose: function() {
          this.setAutoClose(null);
        }
      },

      setAutoClose: function(time) {
        var self = this;
        this.send('hideModal');
        Discourse.ajax({
          url: '/t/' + this.get('id') + '/autoclose',
          type: 'PUT',
          dataType: 'json',
          data: { auto_close_time: Discourse.Utilities.timestampFromAutocloseString(time) }
        }).then(function(result){
          if (result.success) {
            self.send('closeModal');
            self.set('details.auto_close_at', result.auto_close_at);
          } else {
            bootbox.alert(I18n.t('composer.auto_close_error'), function() { self.send('showModal'); } );
          }
        }, function () {
          bootbox.alert(I18n.t('composer.auto_close_error'), function() { self.send('showModal'); } );
        });
      }

    });
  });

Discourse.EditTopicAutoCloseController = require('discourse/controllers/edit-topic-auto-close').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/edit-topic-auto-close.js'] = "define(\"discourse/controllers/edit-topic-auto-close\", \n  [\"discourse/mixins/modal-functionality\",\"discourse/controllers/object\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ModalFunctionality = __dependency1__[\"default\"];\n\n    var ObjectController = __dependency2__[\"default\"];\n\n    /**\n      Modal related to auto closing of topics\n\n      @class EditTopicAutoCloseController\n      @extends ObjectController\n      @namespace Discourse\n      @uses ModalFunctionality\n      @module Discourse\n    **/\n    __exports__[\"default\"] = ObjectController.extend(ModalFunctionality, {\n      auto_close_valid: true,\n      auto_close_invalid: Em.computed.not('auto_close_valid'),\n\n      setAutoCloseTime: function() {\n        if( this.get('details.auto_close_at') ) {\n          var closeTime = new Date( this.get('details.auto_close_at') );\n          if (closeTime \u003e new Date()) {\n            this.set('auto_close_time', moment(closeTime).format(\"YYYY-MM-DD HH:mm\"));\n          }\n        } else {\n          this.set('details.auto_close_time', '');\n        }\n      }.observes('details.auto_close_at'),\n\n      actions: {\n        saveAutoClose: function() {\n          this.setAutoClose( this.get('auto_close_time') );\n        },\n\n        removeAutoClose: function() {\n          this.setAutoClose(null);\n        }\n      },\n\n      setAutoClose: function(time) {\n        var self = this;\n        this.send('hideModal');\n        Discourse.ajax({\n          url: '/t/' + this.get('id') + '/autoclose',\n          type: 'PUT',\n          dataType: 'json',\n          data: { auto_close_time: Discourse.Utilities.timestampFromAutocloseString(time) }\n        }).then(function(result){\n          if (result.success) {\n            self.send('closeModal');\n            self.set('details.auto_close_at', result.auto_close_at);\n          } else {\n            bootbox.alert(I18n.t('composer.auto_close_error'), function() { self.send('showModal'); } );\n          }\n        }, function () {\n          bootbox.alert(I18n.t('composer.auto_close_error'), function() { self.send('showModal'); } );\n        });\n      }\n\n    });\n  });";
define("discourse/controllers/exception", 
  ["discourse/controllers/object","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var ObjectController = __dependency1__["default"];


    var ButtonBackBright = {
          classes: "btn-primary",
          action: "back",
          key: "errors.buttons.back"
        },
        ButtonBackDim = {
          classes: "",
          action: "back",
          key: "errors.buttons.back"
        },
        ButtonTryAgain = {
          classes: "btn-primary",
          action: "tryLoading",
          key: "errors.buttons.again"
        },
        ButtonLoadPage = {
          classes: "btn-primary",
          action: "tryLoading",
          key: "errors.buttons.fixed"
        };

    /**
      The controller for the nice error page

      @class ExceptionController
      @extends ObjectController
      @namespace Discourse
      @module Discourse
    **/
    __exports__["default"] = ObjectController.extend({
      thrown: null,
      lastTransition: null,

      isNetwork: function() {
        // never made it on the wire
        if (this.get('thrown.readyState') === 0) return true;
        // timed out
        if (this.get('thrown.jqTextStatus') === "timeout") return true;
        return false;
      }.property(),
      isForbidden: Em.computed.equal('thrown.status', 403),
      isServer: Em.computed.gte('thrown.status', 500),
      isUnknown: Em.computed.none('isNetwork', 'isServer'),

      // TODO
      // make ajax requests to /srv/status with exponential backoff
      // if one succeeds, set networkFixed to true, which puts a "Fixed!" message on the page
      networkFixed: false,
      loading: false,

      _init: function() {
        this.set('loading', false);
      }.on('init'),

      reason: function() {
        if (this.get('isNetwork')) {
          return I18n.t('errors.reasons.network');
        } else if (this.get('isServer')) {
          return I18n.t('errors.reasons.server');
        } else if (this.get('isForbidden')) {
          return I18n.t('errors.reasons.forbidden');
        } else {
          // TODO
          return I18n.t('errors.reasons.unknown');
        }
      }.property('isNetwork', 'isServer', 'isUnknown'),

      requestUrl: Em.computed.alias('thrown.requestedUrl'),

      desc: function() {
        if (this.get('networkFixed')) {
          return I18n.t('errors.desc.network_fixed');
        } else if (this.get('isNetwork')) {
          return I18n.t('errors.desc.network');
        } else if (this.get('isServer')) {
          return I18n.t('errors.desc.server', { status: this.get('thrown.status') + " " + this.get('thrown.statusText') });
        } else {
          // TODO
          return I18n.t('errors.desc.unknown');
        }
      }.property('networkFixed', 'isNetwork', 'isServer', 'isUnknown'),

      enabledButtons: function() {
        if (this.get('networkFixed')) {
          return [ButtonLoadPage];
        } else if (this.get('isNetwork')) {
          return [ButtonBackDim, ButtonTryAgain];
        } else {
          return [ButtonBackBright, ButtonTryAgain];
        }
      }.property('networkFixed', 'isNetwork', 'isServer', 'isUnknown'),

      actions: {
        back: function() {
          window.history.back();
        },

        tryLoading: function() {
          this.set('loading', true);
          var self = this;
          Em.run.schedule('afterRender', function() {
            self.get('lastTransition').retry();
            self.set('loading', false);
          });
        }
      }
    });
  });

Discourse.ExceptionController = require('discourse/controllers/exception').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/exception.js'] = "define(\"discourse/controllers/exception\", \n  [\"discourse/controllers/object\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ObjectController = __dependency1__[\"default\"];\n\n\n    var ButtonBackBright = {\n          classes: \"btn-primary\",\n          action: \"back\",\n          key: \"errors.buttons.back\"\n        },\n        ButtonBackDim = {\n          classes: \"\",\n          action: \"back\",\n          key: \"errors.buttons.back\"\n        },\n        ButtonTryAgain = {\n          classes: \"btn-primary\",\n          action: \"tryLoading\",\n          key: \"errors.buttons.again\"\n        },\n        ButtonLoadPage = {\n          classes: \"btn-primary\",\n          action: \"tryLoading\",\n          key: \"errors.buttons.fixed\"\n        };\n\n    /**\n      The controller for the nice error page\n\n      @class ExceptionController\n      @extends ObjectController\n      @namespace Discourse\n      @module Discourse\n    **/\n    __exports__[\"default\"] = ObjectController.extend({\n      thrown: null,\n      lastTransition: null,\n\n      isNetwork: function() {\n        // never made it on the wire\n        if (this.get('thrown.readyState') === 0) return true;\n        // timed out\n        if (this.get('thrown.jqTextStatus') === \"timeout\") return true;\n        return false;\n      }.property(),\n      isForbidden: Em.computed.equal('thrown.status', 403),\n      isServer: Em.computed.gte('thrown.status', 500),\n      isUnknown: Em.computed.none('isNetwork', 'isServer'),\n\n      // TODO\n      // make ajax requests to /srv/status with exponential backoff\n      // if one succeeds, set networkFixed to true, which puts a \"Fixed!\" message on the page\n      networkFixed: false,\n      loading: false,\n\n      _init: function() {\n        this.set('loading', false);\n      }.on('init'),\n\n      reason: function() {\n        if (this.get('isNetwork')) {\n          return I18n.t('errors.reasons.network');\n        } else if (this.get('isServer')) {\n          return I18n.t('errors.reasons.server');\n        } else if (this.get('isForbidden')) {\n          return I18n.t('errors.reasons.forbidden');\n        } else {\n          // TODO\n          return I18n.t('errors.reasons.unknown');\n        }\n      }.property('isNetwork', 'isServer', 'isUnknown'),\n\n      requestUrl: Em.computed.alias('thrown.requestedUrl'),\n\n      desc: function() {\n        if (this.get('networkFixed')) {\n          return I18n.t('errors.desc.network_fixed');\n        } else if (this.get('isNetwork')) {\n          return I18n.t('errors.desc.network');\n        } else if (this.get('isServer')) {\n          return I18n.t('errors.desc.server', { status: this.get('thrown.status') + \" \" + this.get('thrown.statusText') });\n        } else {\n          // TODO\n          return I18n.t('errors.desc.unknown');\n        }\n      }.property('networkFixed', 'isNetwork', 'isServer', 'isUnknown'),\n\n      enabledButtons: function() {\n        if (this.get('networkFixed')) {\n          return [ButtonLoadPage];\n        } else if (this.get('isNetwork')) {\n          return [ButtonBackDim, ButtonTryAgain];\n        } else {\n          return [ButtonBackBright, ButtonTryAgain];\n        }\n      }.property('networkFixed', 'isNetwork', 'isServer', 'isUnknown'),\n\n      actions: {\n        back: function() {\n          window.history.back();\n        },\n\n        tryLoading: function() {\n          this.set('loading', true);\n          var self = this;\n          Em.run.schedule('afterRender', function() {\n            self.get('lastTransition').retry();\n            self.set('loading', false);\n          });\n        }\n      }\n    });\n  });";
define("discourse/controllers/flag-action-type", 
  ["discourse/controllers/object","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var ObjectController = __dependency1__["default"];

    /**
      Supports logic for flags in the modal

      @class FlagActionTypeController
      @extends ObjectController
      @namespace Discourse
      @module Discourse
    **/
    __exports__["default"] = ObjectController.extend({
      needs: ['flag'],

      message: Em.computed.alias('controllers.flag.message'),

      customPlaceholder: function(){
        return I18n.t("flagging.custom_placeholder_" + this.get('name_key'));
      }.property('name_key'),

      formattedName: function(){
        return this.get('name').replace("{{username}}", this.get('controllers.flag.username'));
      }.property('name'),

      selected: function() {
        return this.get('model') === this.get('controllers.flag.selected');
      }.property('controllers.flag.selected'),

      showMessageInput: Em.computed.and('is_custom_flag', 'selected'),
      showDescription: Em.computed.not('showMessageInput'),

      customMessageLengthClasses: function() {
        return (this.get('message.length') < Discourse.SiteSettings.min_private_message_post_length) ? "too-short" : "ok";
      }.property('message.length'),

      customMessageLength: function() {
        var len = this.get('message.length') || 0;
        var minLen = Discourse.SiteSettings.min_private_message_post_length;
        if (len === 0) {
          return I18n.t("flagging.custom_message.at_least", { n: minLen });
        } else if (len < minLen) {
          return I18n.t("flagging.custom_message.more", { n: minLen - len });
        } else {
          return I18n.t("flagging.custom_message.left", {
            n: Discourse.PostActionType.MAX_MESSAGE_LENGTH - len
          });
        }
      }.property('message.length')

    });
  });

Discourse.FlagActionTypeController = require('discourse/controllers/flag-action-type').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/flag-action-type.js'] = "define(\"discourse/controllers/flag-action-type\", \n  [\"discourse/controllers/object\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ObjectController = __dependency1__[\"default\"];\n\n    /**\n      Supports logic for flags in the modal\n\n      @class FlagActionTypeController\n      @extends ObjectController\n      @namespace Discourse\n      @module Discourse\n    **/\n    __exports__[\"default\"] = ObjectController.extend({\n      needs: ['flag'],\n\n      message: Em.computed.alias('controllers.flag.message'),\n\n      customPlaceholder: function(){\n        return I18n.t(\"flagging.custom_placeholder_\" + this.get('name_key'));\n      }.property('name_key'),\n\n      formattedName: function(){\n        return this.get('name').replace(\"{{username}}\", this.get('controllers.flag.username'));\n      }.property('name'),\n\n      selected: function() {\n        return this.get('model') === this.get('controllers.flag.selected');\n      }.property('controllers.flag.selected'),\n\n      showMessageInput: Em.computed.and('is_custom_flag', 'selected'),\n      showDescription: Em.computed.not('showMessageInput'),\n\n      customMessageLengthClasses: function() {\n        return (this.get('message.length') \u003c Discourse.SiteSettings.min_private_message_post_length) ? \"too-short\" : \"ok\";\n      }.property('message.length'),\n\n      customMessageLength: function() {\n        var len = this.get('message.length') || 0;\n        var minLen = Discourse.SiteSettings.min_private_message_post_length;\n        if (len === 0) {\n          return I18n.t(\"flagging.custom_message.at_least\", { n: minLen });\n        } else if (len \u003c minLen) {\n          return I18n.t(\"flagging.custom_message.more\", { n: minLen - len });\n        } else {\n          return I18n.t(\"flagging.custom_message.left\", {\n            n: Discourse.PostActionType.MAX_MESSAGE_LENGTH - len\n          });\n        }\n      }.property('message.length')\n\n    });\n  });";
define("discourse/controllers/flag", 
  ["discourse/mixins/modal-functionality","discourse/controllers/object","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var ModalFunctionality = __dependency1__["default"];
    var ObjectController = __dependency2__["default"];

    __exports__["default"] = ObjectController.extend(ModalFunctionality, {

      onShow: function() {
        this.set('selected', null);
      },

      flagsAvailable: function() {
        if (!this.get('flagTopic')) {
          return this.get('model.flagsAvailable');
        } else {
          var self = this,
              lookup = Em.Object.create();

          _.each(this.get("actions_summary"),function(a) {
            var actionSummary;
            a.flagTopic = self.get('model');
            a.actionType = Discourse.Site.current().topicFlagTypeById(a.id);
            actionSummary = Discourse.ActionSummary.create(a);
            lookup.set(a.actionType.get('name_key'), actionSummary);
          });
          this.set('topicActionByName', lookup);

          return Discourse.Site.currentProp('topic_flag_types').filter(function(item) {
            return _.any(self.get("actions_summary"), function(a) {
              return (a.id === item.get('id') && a.can_act);
            });
          });
        }
      }.property('post', 'flagTopic', 'actions_summary.@each.can_act'),

      submitEnabled: function() {
        var selected = this.get('selected');
        if (!selected) return false;

        if (selected.get('is_custom_flag')) {
          var len = this.get('message.length') || 0;
          return len >= Discourse.SiteSettings.min_private_message_post_length &&
                 len <= Discourse.PostActionType.MAX_MESSAGE_LENGTH;
        }
        return true;
      }.property('selected.is_custom_flag', 'message.length'),

      submitDisabled: Em.computed.not('submitEnabled'),

      // Staff accounts can "take action"
      canTakeAction: function() {
        if (this.get("flagTopic")) return false;

        // We can only take actions on non-custom flags
        if (this.get('selected.is_custom_flag')) return false;
        return Discourse.User.currentProp('staff');
      }.property('selected.is_custom_flag'),

      submitText: function(){
        if (this.get('selected.is_custom_flag')) {
          return "<i class='fa fa-envelope'></i>" + (I18n.t(this.get('flagTopic') ? "flagging_topic.notify_action" : "flagging.notify_action"));
        } else {
          return "<i class='fa fa-flag'></i>" + (I18n.t(this.get('flagTopic') ? "flagging_topic.action" : "flagging.action"));
        }
      }.property('selected.is_custom_flag'),

      actions: {
        takeAction: function() {
          this.send('createFlag', {takeAction: true});
          this.set('hidden', true);
        },

        createFlag: function(opts) {
          var self = this;
          var postAction; // an instance of ActionSummary
          if (!this.get('flagTopic')) {
            postAction = this.get('actionByName.' + this.get('selected.name_key'));
          } else {
            postAction = this.get('topicActionByName.' + this.get('selected.name_key'));
          }
          var params = this.get('selected.is_custom_flag') ? {message: this.get('message')} : {};

          if (opts) params = $.extend(params, opts);

          this.send('hideModal');
          postAction.act(params).then(function(result) {
            self.send('closeModal');
          }, function(errors) {
            self.send('closeModal');
            if (errors && errors.responseText) {
              bootbox.alert($.parseJSON(errors.responseText).errors);
            } else {
              bootbox.alert(I18n.t('generic_error'));
            }
          });
        },

        changePostActionType: function(action) {
          this.set('selected', action);
        },
      },

      canDeleteSpammer: function() {
        if (this.get("flagTopic")) return false;

        if (Discourse.User.currentProp('staff') && this.get('selected.name_key') === 'spam') {
          return this.get('userDetails.can_be_deleted') && this.get('userDetails.can_delete_all_posts');
        } else {
          return false;
        }
      }.property('selected.name_key', 'userDetails.can_be_deleted', 'userDetails.can_delete_all_posts'),

      usernameChanged: function() {
        this.set('userDetails', null);
        this.fetchUserDetails();
      }.observes('username'),

      fetchUserDetails: function() {
        if( Discourse.User.currentProp('staff') && this.get('username') ) {
          var flagController = this;
          Discourse.AdminUser.find(this.get('username').toLowerCase()).then(function(user){
            flagController.set('userDetails', user);
          });
        }
      }

    });
  });

Discourse.FlagController = require('discourse/controllers/flag').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/flag.js'] = "define(\"discourse/controllers/flag\", \n  [\"discourse/mixins/modal-functionality\",\"discourse/controllers/object\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ModalFunctionality = __dependency1__[\"default\"];\n    var ObjectController = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = ObjectController.extend(ModalFunctionality, {\n\n      onShow: function() {\n        this.set('selected', null);\n      },\n\n      flagsAvailable: function() {\n        if (!this.get('flagTopic')) {\n          return this.get('model.flagsAvailable');\n        } else {\n          var self = this,\n              lookup = Em.Object.create();\n\n          _.each(this.get(\"actions_summary\"),function(a) {\n            var actionSummary;\n            a.flagTopic = self.get('model');\n            a.actionType = Discourse.Site.current().topicFlagTypeById(a.id);\n            actionSummary = Discourse.ActionSummary.create(a);\n            lookup.set(a.actionType.get('name_key'), actionSummary);\n          });\n          this.set('topicActionByName', lookup);\n\n          return Discourse.Site.currentProp('topic_flag_types').filter(function(item) {\n            return _.any(self.get(\"actions_summary\"), function(a) {\n              return (a.id === item.get('id') \u0026\u0026 a.can_act);\n            });\n          });\n        }\n      }.property('post', 'flagTopic', 'actions_summary.@each.can_act'),\n\n      submitEnabled: function() {\n        var selected = this.get('selected');\n        if (!selected) return false;\n\n        if (selected.get('is_custom_flag')) {\n          var len = this.get('message.length') || 0;\n          return len \u003e= Discourse.SiteSettings.min_private_message_post_length \u0026\u0026\n                 len \u003c= Discourse.PostActionType.MAX_MESSAGE_LENGTH;\n        }\n        return true;\n      }.property('selected.is_custom_flag', 'message.length'),\n\n      submitDisabled: Em.computed.not('submitEnabled'),\n\n      // Staff accounts can \"take action\"\n      canTakeAction: function() {\n        if (this.get(\"flagTopic\")) return false;\n\n        // We can only take actions on non-custom flags\n        if (this.get('selected.is_custom_flag')) return false;\n        return Discourse.User.currentProp('staff');\n      }.property('selected.is_custom_flag'),\n\n      submitText: function(){\n        if (this.get('selected.is_custom_flag')) {\n          return \"\u003ci class='fa fa-envelope'\u003e\u003c/i\u003e\" + (I18n.t(this.get('flagTopic') ? \"flagging_topic.notify_action\" : \"flagging.notify_action\"));\n        } else {\n          return \"\u003ci class='fa fa-flag'\u003e\u003c/i\u003e\" + (I18n.t(this.get('flagTopic') ? \"flagging_topic.action\" : \"flagging.action\"));\n        }\n      }.property('selected.is_custom_flag'),\n\n      actions: {\n        takeAction: function() {\n          this.send('createFlag', {takeAction: true});\n          this.set('hidden', true);\n        },\n\n        createFlag: function(opts) {\n          var self = this;\n          var postAction; // an instance of ActionSummary\n          if (!this.get('flagTopic')) {\n            postAction = this.get('actionByName.' + this.get('selected.name_key'));\n          } else {\n            postAction = this.get('topicActionByName.' + this.get('selected.name_key'));\n          }\n          var params = this.get('selected.is_custom_flag') ? {message: this.get('message')} : {};\n\n          if (opts) params = $.extend(params, opts);\n\n          this.send('hideModal');\n          postAction.act(params).then(function(result) {\n            self.send('closeModal');\n          }, function(errors) {\n            self.send('closeModal');\n            if (errors \u0026\u0026 errors.responseText) {\n              bootbox.alert($.parseJSON(errors.responseText).errors);\n            } else {\n              bootbox.alert(I18n.t('generic_error'));\n            }\n          });\n        },\n\n        changePostActionType: function(action) {\n          this.set('selected', action);\n        },\n      },\n\n      canDeleteSpammer: function() {\n        if (this.get(\"flagTopic\")) return false;\n\n        if (Discourse.User.currentProp('staff') \u0026\u0026 this.get('selected.name_key') === 'spam') {\n          return this.get('userDetails.can_be_deleted') \u0026\u0026 this.get('userDetails.can_delete_all_posts');\n        } else {\n          return false;\n        }\n      }.property('selected.name_key', 'userDetails.can_be_deleted', 'userDetails.can_delete_all_posts'),\n\n      usernameChanged: function() {\n        this.set('userDetails', null);\n        this.fetchUserDetails();\n      }.observes('username'),\n\n      fetchUserDetails: function() {\n        if( Discourse.User.currentProp('staff') \u0026\u0026 this.get('username') ) {\n          var flagController = this;\n          Discourse.AdminUser.find(this.get('username').toLowerCase()).then(function(user){\n            flagController.set('userDetails', user);\n          });\n        }\n      }\n\n    });\n  });";
define("discourse/controllers/forgot-password", 
  ["discourse/mixins/modal-functionality","discourse/controllers/controller","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var ModalFunctionality = __dependency1__["default"];

    var DiscourseController = __dependency2__["default"];

    __exports__["default"] = DiscourseController.extend(ModalFunctionality, {

      // You need a value in the field to submit it.
      submitDisabled: function() {
        return this.blank('accountEmailOrUsername') || this.get('disabled');
      }.property('accountEmailOrUsername', 'disabled'),

      actions: {
        submit: function() {
          var self = this;

          if (this.get('submitDisabled')) return false;

          this.set('disabled', true);

          var success = function() {
            // don't tell people what happened, this keeps it more secure (ensure same on server)
            var escaped = Handlebars.Utils.escapeExpression(self.get('accountEmailOrUsername'));
            if (self.get('accountEmailOrUsername').match(/@/)) {
              self.flash(I18n.t('forgot_password.complete_email', {email: escaped}));
            } else {
              self.flash(I18n.t('forgot_password.complete_username', {username: escaped}));
            }
          };

          var fail = function(e) {
            self.flash(e.responseJSON.errors[0], 'alert-error');
          };

          Discourse.ajax('/session/forgot_password', {
            data: { login: this.get('accountEmailOrUsername') },
            type: 'POST'
          }).then(success, fail).finally(function(){
            setTimeout(function(){
              self.set('disabled',false);
            }, 10*1000);
          });

          return false;
        }
      }

    });
  });

Discourse.ForgotPasswordController = require('discourse/controllers/forgot-password').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/forgot-password.js'] = "define(\"discourse/controllers/forgot-password\", \n  [\"discourse/mixins/modal-functionality\",\"discourse/controllers/controller\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ModalFunctionality = __dependency1__[\"default\"];\n\n    var DiscourseController = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = DiscourseController.extend(ModalFunctionality, {\n\n      // You need a value in the field to submit it.\n      submitDisabled: function() {\n        return this.blank('accountEmailOrUsername') || this.get('disabled');\n      }.property('accountEmailOrUsername', 'disabled'),\n\n      actions: {\n        submit: function() {\n          var self = this;\n\n          if (this.get('submitDisabled')) return false;\n\n          this.set('disabled', true);\n\n          var success = function() {\n            // don't tell people what happened, this keeps it more secure (ensure same on server)\n            var escaped = Handlebars.Utils.escapeExpression(self.get('accountEmailOrUsername'));\n            if (self.get('accountEmailOrUsername').match(/@/)) {\n              self.flash(I18n.t('forgot_password.complete_email', {email: escaped}));\n            } else {\n              self.flash(I18n.t('forgot_password.complete_username', {username: escaped}));\n            }\n          };\n\n          var fail = function(e) {\n            self.flash(e.responseJSON.errors[0], 'alert-error');\n          };\n\n          Discourse.ajax('/session/forgot_password', {\n            data: { login: this.get('accountEmailOrUsername') },\n            type: 'POST'\n          }).then(success, fail).finally(function(){\n            setTimeout(function(){\n              self.set('disabled',false);\n            }, 10*1000);\n          });\n\n          return false;\n        }\n      }\n\n    });\n  });";
define("discourse/controllers/group", 
  ["discourse/controllers/object","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var ObjectController = __dependency1__["default"];

    /**
      The basic controller for a group

      @class GroupController
      @extends ObjectController
      @namespace Discourse
      @module Discourse
    **/
    __exports__["default"] = ObjectController.extend({
      counts: null,

      // It would be nice if bootstrap marked action lists as selected when their links
      // were 'active' not the `li` tags.
      showingIndex: Em.computed.equal('showing', 'index'),
      showingMembers: Em.computed.equal('showing', 'members')
    });
  });

Discourse.GroupController = require('discourse/controllers/group').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/group.js'] = "define(\"discourse/controllers/group\", \n  [\"discourse/controllers/object\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ObjectController = __dependency1__[\"default\"];\n\n    /**\n      The basic controller for a group\n\n      @class GroupController\n      @extends ObjectController\n      @namespace Discourse\n      @module Discourse\n    **/\n    __exports__[\"default\"] = ObjectController.extend({\n      counts: null,\n\n      // It would be nice if bootstrap marked action lists as selected when their links\n      // were 'active' not the `li` tags.\n      showingIndex: Em.computed.equal('showing', 'index'),\n      showingMembers: Em.computed.equal('showing', 'members')\n    });\n  });";
define("discourse/controllers/group/index", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      Handles displaying posts within a group

      @class GroupIndexController
      @extends Ember.ArrayController
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Ember.ArrayController.extend({
      needs: ['group'],
      loading: false,

      actions: {
        loadMore: function() {

          if (this.get('loading')) { return; }
          this.set('loading', true);
          var posts = this.get('model'),
              self = this;
          if (posts && posts.length) {
            var lastPostId = posts[posts.length-1].get('id'),
                group = this.get('controllers.group.model');

            group.findPosts({beforePostId: lastPostId}).then(function(newPosts) {
              posts.addObjects(newPosts);
              self.set('loading', false);
            });
          }
        }
      }
    });
  });

Discourse.GroupIndexController = require('discourse/controllers/group/index').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/group/index.js'] = "define(\"discourse/controllers/group/index\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      Handles displaying posts within a group\n\n      @class GroupIndexController\n      @extends Ember.ArrayController\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Ember.ArrayController.extend({\n      needs: ['group'],\n      loading: false,\n\n      actions: {\n        loadMore: function() {\n\n          if (this.get('loading')) { return; }\n          this.set('loading', true);\n          var posts = this.get('model'),\n              self = this;\n          if (posts \u0026\u0026 posts.length) {\n            var lastPostId = posts[posts.length-1].get('id'),\n                group = this.get('controllers.group.model');\n\n            group.findPosts({beforePostId: lastPostId}).then(function(newPosts) {\n              posts.addObjects(newPosts);\n              self.set('loading', false);\n            });\n          }\n        }\n      }\n    });\n  });";
define("discourse/controllers/group/post", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Em.ObjectController.extend({

      byName: function() {
        var result = "",
            longName = this.get('user_long_name'),
            title = this.get('user_title');

        if (!Em.isEmpty(longName)) {
          result += longName;
        }
        if (!Em.isEmpty(title)) {
          if (result.length > 0) {
            result += ", ";
          }
          result += title;
        }
        return result;
      }.property()

    });
  });

Discourse.GroupPostController = require('discourse/controllers/group/post').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/group/post.js'] = "define(\"discourse/controllers/group/post\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Em.ObjectController.extend({\n\n      byName: function() {\n        var result = \"\",\n            longName = this.get('user_long_name'),\n            title = this.get('user_title');\n\n        if (!Em.isEmpty(longName)) {\n          result += longName;\n        }\n        if (!Em.isEmpty(title)) {\n          if (result.length \u003e 0) {\n            result += \", \";\n          }\n          result += title;\n        }\n        return result;\n      }.property()\n\n    });\n  });";
define("discourse/controllers/header", 
  ["discourse/controllers/controller","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var DiscourseController = __dependency1__["default"];

    __exports__["default"] = DiscourseController.extend({
      topic: null,
      showExtraInfo: null,
      notifications: null,
      loadingNotifications: false,
      needs: ['application'],

      canSignUp: Em.computed.alias('controllers.application.canSignUp'),

      showSignUpButton: function() {
        return this.get('canSignUp') && !this.get('showExtraInfo');
      }.property('canSignUp', 'showExtraInfo'),

      showStarButton: function() {
        return Discourse.User.current() && !this.get('topic.isPrivateMessage');
      }.property('topic.isPrivateMessage'),

      _resetCachedNotifications: function(){
        // a bit hacky, but if we have no focus, hide notifications first
        var visible = $("#notifications-dropdown").is(":visible");

        if(!Discourse.get("hasFocus")) {
          if(visible){
            $("html").click();
          }
          this.set("notifications", null);
          return;
        }
        if(visible){
          this.refreshNotifications();
        } else {
          this.set("notifications", null);
        }
      }.observes("currentUser.lastNotificationChange"),

      refreshNotifications: function(){
        var self = this;
        if (self.get("loadingNotifications")) { return; }

        self.set("loadingNotifications", true);
        Discourse.ajax("/notifications").then(function(result) {
          self.setProperties({
            'currentUser.unread_notifications': 0,
            notifications: result
          });
        }).finally(function(){
          self.set("loadingNotifications", false);
        });
      },

      actions: {
        toggleStar: function() {
          var topic = this.get('topic');
          if (topic) topic.toggleStar();
          return false;
        },

        showNotifications: function(headerView) {
          var self = this;

          if (self.get('currentUser.unread_notifications') || self.get('currentUser.unread_private_messages') || !self.get('notifications')) {
            self.refreshNotifications();
          }
          headerView.showDropdownBySelector("#user-notifications");
        },

        jumpToTopPost: function () {
          var topic = this.get('topic');
          if (topic) {
            Discourse.URL.routeTo(topic.get('firstPostUrl'));
          }
        }
      }

    });
  });

Discourse.HeaderController = require('discourse/controllers/header').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/header.js'] = "define(\"discourse/controllers/header\", \n  [\"discourse/controllers/controller\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DiscourseController = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = DiscourseController.extend({\n      topic: null,\n      showExtraInfo: null,\n      notifications: null,\n      loadingNotifications: false,\n      needs: ['application'],\n\n      canSignUp: Em.computed.alias('controllers.application.canSignUp'),\n\n      showSignUpButton: function() {\n        return this.get('canSignUp') \u0026\u0026 !this.get('showExtraInfo');\n      }.property('canSignUp', 'showExtraInfo'),\n\n      showStarButton: function() {\n        return Discourse.User.current() \u0026\u0026 !this.get('topic.isPrivateMessage');\n      }.property('topic.isPrivateMessage'),\n\n      _resetCachedNotifications: function(){\n        // a bit hacky, but if we have no focus, hide notifications first\n        var visible = $(\"#notifications-dropdown\").is(\":visible\");\n\n        if(!Discourse.get(\"hasFocus\")) {\n          if(visible){\n            $(\"html\").click();\n          }\n          this.set(\"notifications\", null);\n          return;\n        }\n        if(visible){\n          this.refreshNotifications();\n        } else {\n          this.set(\"notifications\", null);\n        }\n      }.observes(\"currentUser.lastNotificationChange\"),\n\n      refreshNotifications: function(){\n        var self = this;\n        if (self.get(\"loadingNotifications\")) { return; }\n\n        self.set(\"loadingNotifications\", true);\n        Discourse.ajax(\"/notifications\").then(function(result) {\n          self.setProperties({\n            'currentUser.unread_notifications': 0,\n            notifications: result\n          });\n        }).finally(function(){\n          self.set(\"loadingNotifications\", false);\n        });\n      },\n\n      actions: {\n        toggleStar: function() {\n          var topic = this.get('topic');\n          if (topic) topic.toggleStar();\n          return false;\n        },\n\n        showNotifications: function(headerView) {\n          var self = this;\n\n          if (self.get('currentUser.unread_notifications') || self.get('currentUser.unread_private_messages') || !self.get('notifications')) {\n            self.refreshNotifications();\n          }\n          headerView.showDropdownBySelector(\"#user-notifications\");\n        },\n\n        jumpToTopPost: function () {\n          var topic = this.get('topic');\n          if (topic) {\n            Discourse.URL.routeTo(topic.get('firstPostUrl'));\n          }\n        }\n      }\n\n    });\n  });";
define("discourse/controllers/history", 
  ["discourse/mixins/modal-functionality","discourse/controllers/object","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var ModalFunctionality = __dependency1__["default"];

    var ObjectController = __dependency2__["default"];

    /**
      This controller handles displaying of history

      @class HistoryController
      @extends ObjectController
      @namespace Discourse
      @uses ModalFunctionality
      @module Discourse
    **/
    __exports__["default"] = ObjectController.extend(ModalFunctionality, {
      loading: false,
      viewMode: "side_by_side",
      revisionsTextKey: "post.revisions.controls.comparing_previous_to_current_out_of_total",

      refresh: function(postId, postVersion) {
        this.set("loading", true);

        var self = this;
        Discourse.Post.loadRevision(postId, postVersion).then(function (result) {
          self.setProperties({ loading: false, model: result });
        });
      },

      createdAtDate: function() { return moment(this.get("created_at")).format("LLLL"); }.property("created_at"),

      previousVersion: function() { return this.get("version") - 1; }.property("version"),

      displayGoToFirst: Em.computed.gt("version", 3),
      displayGoToPrevious: Em.computed.gt("version", 2),
      displayRevisions: Em.computed.gt("revisions_count", 2),
      displayGoToNext: function() { return this.get("version") < this.get("revisions_count"); }.property("version", "revisions_count"),
      displayGoToLast: function() { return this.get("version") < this.get("revisions_count") - 1; }.property("version", "revisions_count"),

      displayingInline: Em.computed.equal("viewMode", "inline"),
      displayingSideBySide: Em.computed.equal("viewMode", "side_by_side"),
      displayingSideBySideMarkdown: Em.computed.equal("viewMode", "side_by_side_markdown"),

      category_diff: function() {
        var viewMode = this.get("viewMode");
        var changes = this.get("category_changes");

        if (changes === null) { return; }

        var prevCategory = Discourse.Category.findById(changes.previous_category_id);
        var curCategory = Discourse.Category.findById(changes.current_category_id);

        var raw = "";
        var opts = { allowUncategorized: true };
        prevCategory = Discourse.HTML.categoryBadge(prevCategory, opts);
        curCategory = Discourse.HTML.categoryBadge(curCategory, opts);

        if(viewMode === "side_by_side_markdown" || viewMode === "side_by_side") {
          raw = "<div class='span8'>" + prevCategory +  "</div> <div class='span8 offset1'>" + curCategory +  "</div>";
        } else {
          var diff = "<del>" + prevCategory + "</del> " + "<ins>" + curCategory + "</ins>";
          raw = "<div class='inline-diff'>" + diff +  "</div>";
        }

        return raw;

      }.property("viewMode", "category_changes"),

      wiki_diff: function() {
        var viewMode = this.get("viewMode");
        var changes = this.get("wiki_changes");
        if (changes === null) { return; }

        if (viewMode === "inline") {
          var diff = changes["current_wiki"] ? '<i class="fa fa-pencil-square-o fa-2x"></i>' : '<span class="fa-stack"><i class="fa fa-pencil-square-o fa-stack-2x"></i><i class="fa fa-ban fa-stack-2x"></i></span>';
          return "<div class='inline-diff'>" + diff + "</div>";
        } else {
          var prev = changes["previous_wiki"] ? '<i class="fa fa-pencil-square-o fa-2x"></i>' : "&nbsp;";
          var curr = changes["current_wiki"] ? '<i class="fa fa-pencil-square-o fa-2x"></i>' : '<span class="fa-stack"><i class="fa fa-pencil-square-o fa-stack-2x"></i><i class="fa fa-ban fa-stack-2x"></i></span>';
          return "<div class='span8'>" + prev + "</div><div class='span8 offset1'>" + curr + "</div>";
        }
      }.property("viewMode", "wiki_changes"),

      title_diff: function() {
        var viewMode = this.get("viewMode");
        if(viewMode === "side_by_side_markdown") {
          viewMode = "side_by_side";
        }
        return this.get("title_changes." + viewMode);
      }.property("viewMode", "title_changes"),

      body_diff: function() {
        return this.get("body_changes." + this.get("viewMode"));
      }.property("viewMode", "body_changes"),

      actions: {
        loadFirstVersion: function() { this.refresh(this.get("post_id"), 2); },
        loadPreviousVersion: function() { this.refresh(this.get("post_id"), this.get("version") - 1); },
        loadNextVersion: function() { this.refresh(this.get("post_id"), this.get("version") + 1); },
        loadLastVersion: function() { this.refresh(this.get("post_id"), this.get("revisions_count")); },

        displayInline: function() { this.set("viewMode", "inline"); },
        displaySideBySide: function() { this.set("viewMode", "side_by_side"); },
        displaySideBySideMarkdown: function() { this.set("viewMode", "side_by_side_markdown"); }
      }
    });
  });

Discourse.HistoryController = require('discourse/controllers/history').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/history.js'] = "define(\"discourse/controllers/history\", \n  [\"discourse/mixins/modal-functionality\",\"discourse/controllers/object\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ModalFunctionality = __dependency1__[\"default\"];\n\n    var ObjectController = __dependency2__[\"default\"];\n\n    /**\n      This controller handles displaying of history\n\n      @class HistoryController\n      @extends ObjectController\n      @namespace Discourse\n      @uses ModalFunctionality\n      @module Discourse\n    **/\n    __exports__[\"default\"] = ObjectController.extend(ModalFunctionality, {\n      loading: false,\n      viewMode: \"side_by_side\",\n      revisionsTextKey: \"post.revisions.controls.comparing_previous_to_current_out_of_total\",\n\n      refresh: function(postId, postVersion) {\n        this.set(\"loading\", true);\n\n        var self = this;\n        Discourse.Post.loadRevision(postId, postVersion).then(function (result) {\n          self.setProperties({ loading: false, model: result });\n        });\n      },\n\n      createdAtDate: function() { return moment(this.get(\"created_at\")).format(\"LLLL\"); }.property(\"created_at\"),\n\n      previousVersion: function() { return this.get(\"version\") - 1; }.property(\"version\"),\n\n      displayGoToFirst: Em.computed.gt(\"version\", 3),\n      displayGoToPrevious: Em.computed.gt(\"version\", 2),\n      displayRevisions: Em.computed.gt(\"revisions_count\", 2),\n      displayGoToNext: function() { return this.get(\"version\") \u003c this.get(\"revisions_count\"); }.property(\"version\", \"revisions_count\"),\n      displayGoToLast: function() { return this.get(\"version\") \u003c this.get(\"revisions_count\") - 1; }.property(\"version\", \"revisions_count\"),\n\n      displayingInline: Em.computed.equal(\"viewMode\", \"inline\"),\n      displayingSideBySide: Em.computed.equal(\"viewMode\", \"side_by_side\"),\n      displayingSideBySideMarkdown: Em.computed.equal(\"viewMode\", \"side_by_side_markdown\"),\n\n      category_diff: function() {\n        var viewMode = this.get(\"viewMode\");\n        var changes = this.get(\"category_changes\");\n\n        if (changes === null) { return; }\n\n        var prevCategory = Discourse.Category.findById(changes.previous_category_id);\n        var curCategory = Discourse.Category.findById(changes.current_category_id);\n\n        var raw = \"\";\n        var opts = { allowUncategorized: true };\n        prevCategory = Discourse.HTML.categoryBadge(prevCategory, opts);\n        curCategory = Discourse.HTML.categoryBadge(curCategory, opts);\n\n        if(viewMode === \"side_by_side_markdown\" || viewMode === \"side_by_side\") {\n          raw = \"\u003cdiv class='span8'\u003e\" + prevCategory +  \"\u003c/div\u003e \u003cdiv class='span8 offset1'\u003e\" + curCategory +  \"\u003c/div\u003e\";\n        } else {\n          var diff = \"\u003cdel\u003e\" + prevCategory + \"\u003c/del\u003e \" + \"\u003cins\u003e\" + curCategory + \"\u003c/ins\u003e\";\n          raw = \"\u003cdiv class='inline-diff'\u003e\" + diff +  \"\u003c/div\u003e\";\n        }\n\n        return raw;\n\n      }.property(\"viewMode\", \"category_changes\"),\n\n      wiki_diff: function() {\n        var viewMode = this.get(\"viewMode\");\n        var changes = this.get(\"wiki_changes\");\n        if (changes === null) { return; }\n\n        if (viewMode === \"inline\") {\n          var diff = changes[\"current_wiki\"] ? '\u003ci class=\"fa fa-pencil-square-o fa-2x\"\u003e\u003c/i\u003e' : '\u003cspan class=\"fa-stack\"\u003e\u003ci class=\"fa fa-pencil-square-o fa-stack-2x\"\u003e\u003c/i\u003e\u003ci class=\"fa fa-ban fa-stack-2x\"\u003e\u003c/i\u003e\u003c/span\u003e';\n          return \"\u003cdiv class='inline-diff'\u003e\" + diff + \"\u003c/div\u003e\";\n        } else {\n          var prev = changes[\"previous_wiki\"] ? '\u003ci class=\"fa fa-pencil-square-o fa-2x\"\u003e\u003c/i\u003e' : \"\u0026nbsp;\";\n          var curr = changes[\"current_wiki\"] ? '\u003ci class=\"fa fa-pencil-square-o fa-2x\"\u003e\u003c/i\u003e' : '\u003cspan class=\"fa-stack\"\u003e\u003ci class=\"fa fa-pencil-square-o fa-stack-2x\"\u003e\u003c/i\u003e\u003ci class=\"fa fa-ban fa-stack-2x\"\u003e\u003c/i\u003e\u003c/span\u003e';\n          return \"\u003cdiv class='span8'\u003e\" + prev + \"\u003c/div\u003e\u003cdiv class='span8 offset1'\u003e\" + curr + \"\u003c/div\u003e\";\n        }\n      }.property(\"viewMode\", \"wiki_changes\"),\n\n      title_diff: function() {\n        var viewMode = this.get(\"viewMode\");\n        if(viewMode === \"side_by_side_markdown\") {\n          viewMode = \"side_by_side\";\n        }\n        return this.get(\"title_changes.\" + viewMode);\n      }.property(\"viewMode\", \"title_changes\"),\n\n      body_diff: function() {\n        return this.get(\"body_changes.\" + this.get(\"viewMode\"));\n      }.property(\"viewMode\", \"body_changes\"),\n\n      actions: {\n        loadFirstVersion: function() { this.refresh(this.get(\"post_id\"), 2); },\n        loadPreviousVersion: function() { this.refresh(this.get(\"post_id\"), this.get(\"version\") - 1); },\n        loadNextVersion: function() { this.refresh(this.get(\"post_id\"), this.get(\"version\") + 1); },\n        loadLastVersion: function() { this.refresh(this.get(\"post_id\"), this.get(\"revisions_count\")); },\n\n        displayInline: function() { this.set(\"viewMode\", \"inline\"); },\n        displaySideBySide: function() { this.set(\"viewMode\", \"side_by_side\"); },\n        displaySideBySideMarkdown: function() { this.set(\"viewMode\", \"side_by_side_markdown\"); }\n      }\n    });\n  });";
define("discourse/controllers/invite-private", 
  ["discourse/mixins/modal-functionality","discourse/controllers/object","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var ModalFunctionality = __dependency1__["default"];

    var ObjectController = __dependency2__["default"];

    __exports__["default"] = ObjectController.extend(ModalFunctionality, {
      modalClass: 'invite',

      isAdmin: function(){
        return Discourse.User.currentProp("admin");
      }.property(),

      onShow: function(){
        this.set('controllers.modal.modalClass', 'invite-modal');
        this.set('emailOrUsername', '');
      },

      disabled: function() {
        if (this.get('saving')) return true;
        return this.blank('emailOrUsername');
      }.property('emailOrUsername', 'saving'),

      buttonTitle: function() {
        if (this.get('saving')) return I18n.t('topic.inviting');
        return I18n.t('topic.invite_private.action');
      }.property('saving'),

      actions: {
        invite: function() {
          if (this.get('disabled')) return;

          var self = this;
          this.setProperties({saving: true, error: false});

          // Invite the user to the private message
          this.get('model').createInvite(this.get('emailOrUsername')).then(function(result) {
            self.setProperties({saving: true, finished: true});

            if(result && result.user) {
              self.get('model.details.allowed_users').pushObject(result.user);
            }
          }).catch(function() {
            self.setProperties({error: true, saving: false});
          });
          return false;
        }
      }

    });
  });

Discourse.InvitePrivateController = require('discourse/controllers/invite-private').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/invite-private.js'] = "define(\"discourse/controllers/invite-private\", \n  [\"discourse/mixins/modal-functionality\",\"discourse/controllers/object\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ModalFunctionality = __dependency1__[\"default\"];\n\n    var ObjectController = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = ObjectController.extend(ModalFunctionality, {\n      modalClass: 'invite',\n\n      isAdmin: function(){\n        return Discourse.User.currentProp(\"admin\");\n      }.property(),\n\n      onShow: function(){\n        this.set('controllers.modal.modalClass', 'invite-modal');\n        this.set('emailOrUsername', '');\n      },\n\n      disabled: function() {\n        if (this.get('saving')) return true;\n        return this.blank('emailOrUsername');\n      }.property('emailOrUsername', 'saving'),\n\n      buttonTitle: function() {\n        if (this.get('saving')) return I18n.t('topic.inviting');\n        return I18n.t('topic.invite_private.action');\n      }.property('saving'),\n\n      actions: {\n        invite: function() {\n          if (this.get('disabled')) return;\n\n          var self = this;\n          this.setProperties({saving: true, error: false});\n\n          // Invite the user to the private message\n          this.get('model').createInvite(this.get('emailOrUsername')).then(function(result) {\n            self.setProperties({saving: true, finished: true});\n\n            if(result \u0026\u0026 result.user) {\n              self.get('model.details.allowed_users').pushObject(result.user);\n            }\n          }).catch(function() {\n            self.setProperties({error: true, saving: false});\n          });\n          return false;\n        }\n      }\n\n    });\n  });";
define("discourse/controllers/invite", 
  ["discourse/mixins/modal-functionality","discourse/controllers/object","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var ModalFunctionality = __dependency1__["default"];

    var ObjectController = __dependency2__["default"];

    __exports__["default"] = ObjectController.extend(ModalFunctionality, {
      needs: ['user-invited'],

      // If this isn't defined, it will proxy to the user model on the preferences
      // page which is wrong.
      email: null,

      isAdmin: function(){
        return Discourse.User.currentProp("admin");
      }.property(),

      /**
        Can we submit the form?

        @property disabled
      **/
      disabled: function() {
        if (this.get('saving')) return true;
        if (this.blank('email')) return true;
        if (!Discourse.Utilities.emailValid(this.get('email'))) return true;
        if (this.get('isPrivateTopic') && this.blank('groupNames')) return true;
        return false;
      }.property('email', 'isPrivateTopic', 'groupNames', 'saving'),

      /**
        The current text for the invite button

        @property buttonTitle
      **/
      buttonTitle: function() {
        if (this.get('saving')) return I18n.t('topic.inviting');
        return I18n.t('topic.invite_reply.action');
      }.property('saving'),

      /**
        We are inviting to a topic if the model isn't the current user. The current user would
        mean we are inviting to the forum in general.

        @property invitingToTopic
      **/
      invitingToTopic: function() {
        return this.get('model') !== Discourse.User.current();
      }.property('model'),

      /**
        Is Private Topic? (i.e. visible only to specific group members)

        @property isPrivateTopic
      **/
      isPrivateTopic: Em.computed.and('invitingToTopic', 'model.category.read_restricted'),

      /**
        Instructional text for the modal.

        @property inviteInstructions
      **/
      inviteInstructions: function() {
        if (this.get('invitingToTopic')) {
          return I18n.t('topic.invite_reply.to_topic');
        } else {
          return I18n.t('topic.invite_reply.to_forum');
        }
      }.property('invitingToTopic'),

      /**
        Instructional text for the group selection.

        @property groupInstructions
      **/
      groupInstructions: function() {
        if (this.get('isPrivateTopic')) {
          return I18n.t('topic.automatically_add_to_groups_required');
        } else {
          return I18n.t('topic.automatically_add_to_groups_optional');
        }
      }.property('isPrivateTopic'),

      /**
        Function to find groups.
      **/
      groupFinder: function(term) {
        return Discourse.Group.findAll({search: term, ignore_automatic: true});
      },

      /**
        The "success" text for when the invite was created.

        @property successMessage
      **/
      successMessage: function() {
        return I18n.t('topic.invite_reply.success', { email: this.get('email') });
      }.property('email'),

      /**
        Reset the modal to allow a new user to be invited.

        @method reset
      **/
      reset: function() {
        this.setProperties({
          email: null,
          groupNames: null,
          error: false,
          saving: false,
          finished: false
        });
      },

      actions: {

        /**
          Create the invite and update the modal accordingly.

          @method createInvite
        **/
        createInvite: function() {

          if (this.get('disabled')) { return; }

          var self = this;
          var groupNames = this.get('groupNames');
          var userInvitedController = this.get('controllers.user-invited');

          this.setProperties({ saving: true, error: false });
          this.get('model').createInvite(this.get('email'), groupNames).then(function() {
            self.setProperties({ saving: false, finished: true });
            if (!self.get('invitingToTopic')) {
              Discourse.Invite.findInvitedBy(Discourse.User.current()).then(function (invite_model) {
                userInvitedController.set('model', invite_model);
                userInvitedController.set('totalInvites', invite_model.invites.length);
              });
            }
          }).catch(function() {
            self.setProperties({ saving: false, error: true });
          });
          return false;
        }
      }


    });
  });

Discourse.InviteController = require('discourse/controllers/invite').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/invite.js'] = "define(\"discourse/controllers/invite\", \n  [\"discourse/mixins/modal-functionality\",\"discourse/controllers/object\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ModalFunctionality = __dependency1__[\"default\"];\n\n    var ObjectController = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = ObjectController.extend(ModalFunctionality, {\n      needs: ['user-invited'],\n\n      // If this isn't defined, it will proxy to the user model on the preferences\n      // page which is wrong.\n      email: null,\n\n      isAdmin: function(){\n        return Discourse.User.currentProp(\"admin\");\n      }.property(),\n\n      /**\n        Can we submit the form?\n\n        @property disabled\n      **/\n      disabled: function() {\n        if (this.get('saving')) return true;\n        if (this.blank('email')) return true;\n        if (!Discourse.Utilities.emailValid(this.get('email'))) return true;\n        if (this.get('isPrivateTopic') \u0026\u0026 this.blank('groupNames')) return true;\n        return false;\n      }.property('email', 'isPrivateTopic', 'groupNames', 'saving'),\n\n      /**\n        The current text for the invite button\n\n        @property buttonTitle\n      **/\n      buttonTitle: function() {\n        if (this.get('saving')) return I18n.t('topic.inviting');\n        return I18n.t('topic.invite_reply.action');\n      }.property('saving'),\n\n      /**\n        We are inviting to a topic if the model isn't the current user. The current user would\n        mean we are inviting to the forum in general.\n\n        @property invitingToTopic\n      **/\n      invitingToTopic: function() {\n        return this.get('model') !== Discourse.User.current();\n      }.property('model'),\n\n      /**\n        Is Private Topic? (i.e. visible only to specific group members)\n\n        @property isPrivateTopic\n      **/\n      isPrivateTopic: Em.computed.and('invitingToTopic', 'model.category.read_restricted'),\n\n      /**\n        Instructional text for the modal.\n\n        @property inviteInstructions\n      **/\n      inviteInstructions: function() {\n        if (this.get('invitingToTopic')) {\n          return I18n.t('topic.invite_reply.to_topic');\n        } else {\n          return I18n.t('topic.invite_reply.to_forum');\n        }\n      }.property('invitingToTopic'),\n\n      /**\n        Instructional text for the group selection.\n\n        @property groupInstructions\n      **/\n      groupInstructions: function() {\n        if (this.get('isPrivateTopic')) {\n          return I18n.t('topic.automatically_add_to_groups_required');\n        } else {\n          return I18n.t('topic.automatically_add_to_groups_optional');\n        }\n      }.property('isPrivateTopic'),\n\n      /**\n        Function to find groups.\n      **/\n      groupFinder: function(term) {\n        return Discourse.Group.findAll({search: term, ignore_automatic: true});\n      },\n\n      /**\n        The \"success\" text for when the invite was created.\n\n        @property successMessage\n      **/\n      successMessage: function() {\n        return I18n.t('topic.invite_reply.success', { email: this.get('email') });\n      }.property('email'),\n\n      /**\n        Reset the modal to allow a new user to be invited.\n\n        @method reset\n      **/\n      reset: function() {\n        this.setProperties({\n          email: null,\n          groupNames: null,\n          error: false,\n          saving: false,\n          finished: false\n        });\n      },\n\n      actions: {\n\n        /**\n          Create the invite and update the modal accordingly.\n\n          @method createInvite\n        **/\n        createInvite: function() {\n\n          if (this.get('disabled')) { return; }\n\n          var self = this;\n          var groupNames = this.get('groupNames');\n          var userInvitedController = this.get('controllers.user-invited');\n\n          this.setProperties({ saving: true, error: false });\n          this.get('model').createInvite(this.get('email'), groupNames).then(function() {\n            self.setProperties({ saving: false, finished: true });\n            if (!self.get('invitingToTopic')) {\n              Discourse.Invite.findInvitedBy(Discourse.User.current()).then(function (invite_model) {\n                userInvitedController.set('model', invite_model);\n                userInvitedController.set('totalInvites', invite_model.invites.length);\n              });\n            }\n          }).catch(function() {\n            self.setProperties({ saving: false, error: true });\n          });\n          return false;\n        }\n      }\n\n\n    });\n  });";
define("discourse/controllers/keyboard-shortcuts-help", 
  ["discourse/mixins/modal-functionality","discourse/controllers/controller","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var ModalFunctionality = __dependency1__["default"];

    var DiscourseController = __dependency2__["default"];

    __exports__["default"] = DiscourseController.extend(ModalFunctionality, {
      needs: ['modal'],

      onShow: function() {
        this.set('controllers.modal.modalClass', 'keyboard-shortcuts-modal');
      }
    });
  });

Discourse.KeyboardShortcutsHelpController = require('discourse/controllers/keyboard-shortcuts-help').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/keyboard-shortcuts-help.js'] = "define(\"discourse/controllers/keyboard-shortcuts-help\", \n  [\"discourse/mixins/modal-functionality\",\"discourse/controllers/controller\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ModalFunctionality = __dependency1__[\"default\"];\n\n    var DiscourseController = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = DiscourseController.extend(ModalFunctionality, {\n      needs: ['modal'],\n\n      onShow: function() {\n        this.set('controllers.modal.modalClass', 'keyboard-shortcuts-modal');\n      }\n    });\n  });";
define("discourse/controllers/login", 
  ["discourse/mixins/modal-functionality","discourse/controllers/controller","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var ModalFunctionality = __dependency1__["default"];

    var DiscourseController = __dependency2__["default"];

    __exports__["default"] = DiscourseController.extend(ModalFunctionality, {
      needs: ['modal', 'createAccount', 'application'],
      authenticate: null,
      loggingIn: false,
      loggedIn: false,

      canLoginLocal: Discourse.computed.setting('enable_local_logins'),

      resetForm: function() {
        this.set('authenticate', null);
        this.set('loggingIn', false);
        this.set('loggedIn', false);
      },

      site: function() {
        return Discourse.Site.current();
      }.property(),

      /**
       Determines whether at least one login button is enabled
      **/
      hasAtLeastOneLoginButton: function() {
        return Em.get("Discourse.LoginMethod.all").length > 0;
      }.property("Discourse.LoginMethod.all.@each"),

      loginButtonText: function() {
        return this.get('loggingIn') ? I18n.t('login.logging_in') : I18n.t('login.title');
      }.property('loggingIn'),

      loginDisabled: Em.computed.or('loggingIn', 'loggedIn'),

      showSignupLink: function() {
        return this.get('controllers.application.canSignUp') &&
               !this.get('loggingIn') &&
               this.blank('authenticate');
      }.property('loggingIn', 'authenticate'),

      showSpinner: function() {
        return this.get('loggingIn') || this.get('authenticate');
      }.property('loggingIn', 'authenticate'),

      actions: {
        login: function() {
          var self = this;

          if(this.blank('loginName') || this.blank('loginPassword')){
            self.flash(I18n.t('login.blank_username_or_password'), 'error');
            return;
          }

          this.set('loggingIn', true);

          Discourse.ajax("/session", {
            data: { login: this.get('loginName'), password: this.get('loginPassword') },
            type: 'POST'
          }).then(function (result) {
            // Successful login
            if (result.error) {
              self.set('loggingIn', false);
              if( result.reason === 'not_activated' ) {
                self.send('showNotActivated', {
                  username: self.get('loginName'),
                  sentTo: result.sent_to_email,
                  currentEmail: result.current_email
                });
              }
              self.flash(result.error, 'error');
            } else {
              self.set('loggedIn', true);
              // Trigger the browser's password manager using the hidden static login form:
              var $hidden_login_form = $('#hidden-login-form');
              $hidden_login_form.find('input[name=username]').val(self.get('loginName'));
              $hidden_login_form.find('input[name=password]').val(self.get('loginPassword'));
              $hidden_login_form.find('input[name=redirect]').val(window.location.href);
              $hidden_login_form.submit();
            }

          }, function() {
            // Failed to login
            self.flash(I18n.t('login.error'), 'error');
            self.set('loggingIn', false);
          });

          return false;
        },

        externalLogin: function(loginMethod){
          var name = loginMethod.get("name");
          var customLogin = loginMethod.get("customLogin");

          if(customLogin){
            customLogin();
          } else {
            this.set('authenticate', name);
            var left = this.get('lastX') - 400;
            var top = this.get('lastY') - 200;

            var height = loginMethod.get("frameHeight") || 400;
            var width = loginMethod.get("frameWidth") || 800;
            var w = window.open(Discourse.getURL("/auth/" + name), "_blank",
                "menubar=no,status=no,height=" + height + ",width=" + width +  ",left=" + left + ",top=" + top);
            var self = this;
            var timer = setInterval(function() {
              if(!w || w.closed) {
                clearInterval(timer);
                self.set('authenticate', null);
              }
            }, 1000);
          }
        },

        createAccount: function() {
          var createAccountController = this.get('controllers.createAccount');
          createAccountController.resetForm();
          this.send('showCreateAccount');
        }
      },

      authMessage: (function() {
        if (this.blank('authenticate')) return "";
        var method = Discourse.get('LoginMethod.all').findProperty("name", this.get("authenticate"));
        if(method){
          return method.get('message');
        }
      }).property('authenticate'),

      authenticationComplete: function(options) {
        if (options.requires_invite) {
          this.send('showLogin');
          this.flash(I18n.t('login.requires_invite'), 'success');
          this.set('authenticate', null);
          return;
        }
        if (options.awaiting_approval) {
          this.send('showLogin');
          this.flash(I18n.t('login.awaiting_approval'), 'success');
          this.set('authenticate', null);
          return;
        }
        if (options.awaiting_activation) {
          this.send('showLogin');
          this.flash(I18n.t('login.awaiting_confirmation'), 'success');
          this.set('authenticate', null);
          return;
        }
        // Reload the page if we're authenticated
        if (options.authenticated) {
          if (window.location.pathname === Discourse.getURL('/login')) {
            window.location.pathname = Discourse.getURL('/');
          } else {
            window.location.reload();
          }
          return;
        }

        var createAccountController = this.get('controllers.createAccount');
        createAccountController.setProperties({
          accountEmail: options.email,
          accountUsername: options.username,
          accountName: options.name,
          authOptions: Em.Object.create(options)
        });
        this.send('showCreateAccount');
      }

    });
  });

Discourse.LoginController = require('discourse/controllers/login').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/login.js'] = "define(\"discourse/controllers/login\", \n  [\"discourse/mixins/modal-functionality\",\"discourse/controllers/controller\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ModalFunctionality = __dependency1__[\"default\"];\n\n    var DiscourseController = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = DiscourseController.extend(ModalFunctionality, {\n      needs: ['modal', 'createAccount', 'application'],\n      authenticate: null,\n      loggingIn: false,\n      loggedIn: false,\n\n      canLoginLocal: Discourse.computed.setting('enable_local_logins'),\n\n      resetForm: function() {\n        this.set('authenticate', null);\n        this.set('loggingIn', false);\n        this.set('loggedIn', false);\n      },\n\n      site: function() {\n        return Discourse.Site.current();\n      }.property(),\n\n      /**\n       Determines whether at least one login button is enabled\n      **/\n      hasAtLeastOneLoginButton: function() {\n        return Em.get(\"Discourse.LoginMethod.all\").length \u003e 0;\n      }.property(\"Discourse.LoginMethod.all.@each\"),\n\n      loginButtonText: function() {\n        return this.get('loggingIn') ? I18n.t('login.logging_in') : I18n.t('login.title');\n      }.property('loggingIn'),\n\n      loginDisabled: Em.computed.or('loggingIn', 'loggedIn'),\n\n      showSignupLink: function() {\n        return this.get('controllers.application.canSignUp') \u0026\u0026\n               !this.get('loggingIn') \u0026\u0026\n               this.blank('authenticate');\n      }.property('loggingIn', 'authenticate'),\n\n      showSpinner: function() {\n        return this.get('loggingIn') || this.get('authenticate');\n      }.property('loggingIn', 'authenticate'),\n\n      actions: {\n        login: function() {\n          var self = this;\n\n          if(this.blank('loginName') || this.blank('loginPassword')){\n            self.flash(I18n.t('login.blank_username_or_password'), 'error');\n            return;\n          }\n\n          this.set('loggingIn', true);\n\n          Discourse.ajax(\"/session\", {\n            data: { login: this.get('loginName'), password: this.get('loginPassword') },\n            type: 'POST'\n          }).then(function (result) {\n            // Successful login\n            if (result.error) {\n              self.set('loggingIn', false);\n              if( result.reason === 'not_activated' ) {\n                self.send('showNotActivated', {\n                  username: self.get('loginName'),\n                  sentTo: result.sent_to_email,\n                  currentEmail: result.current_email\n                });\n              }\n              self.flash(result.error, 'error');\n            } else {\n              self.set('loggedIn', true);\n              // Trigger the browser's password manager using the hidden static login form:\n              var $hidden_login_form = $('#hidden-login-form');\n              $hidden_login_form.find('input[name=username]').val(self.get('loginName'));\n              $hidden_login_form.find('input[name=password]').val(self.get('loginPassword'));\n              $hidden_login_form.find('input[name=redirect]').val(window.location.href);\n              $hidden_login_form.submit();\n            }\n\n          }, function() {\n            // Failed to login\n            self.flash(I18n.t('login.error'), 'error');\n            self.set('loggingIn', false);\n          });\n\n          return false;\n        },\n\n        externalLogin: function(loginMethod){\n          var name = loginMethod.get(\"name\");\n          var customLogin = loginMethod.get(\"customLogin\");\n\n          if(customLogin){\n            customLogin();\n          } else {\n            this.set('authenticate', name);\n            var left = this.get('lastX') - 400;\n            var top = this.get('lastY') - 200;\n\n            var height = loginMethod.get(\"frameHeight\") || 400;\n            var width = loginMethod.get(\"frameWidth\") || 800;\n            var w = window.open(Discourse.getURL(\"/auth/\" + name), \"_blank\",\n                \"menubar=no,status=no,height=\" + height + \",width=\" + width +  \",left=\" + left + \",top=\" + top);\n            var self = this;\n            var timer = setInterval(function() {\n              if(!w || w.closed) {\n                clearInterval(timer);\n                self.set('authenticate', null);\n              }\n            }, 1000);\n          }\n        },\n\n        createAccount: function() {\n          var createAccountController = this.get('controllers.createAccount');\n          createAccountController.resetForm();\n          this.send('showCreateAccount');\n        }\n      },\n\n      authMessage: (function() {\n        if (this.blank('authenticate')) return \"\";\n        var method = Discourse.get('LoginMethod.all').findProperty(\"name\", this.get(\"authenticate\"));\n        if(method){\n          return method.get('message');\n        }\n      }).property('authenticate'),\n\n      authenticationComplete: function(options) {\n        if (options.requires_invite) {\n          this.send('showLogin');\n          this.flash(I18n.t('login.requires_invite'), 'success');\n          this.set('authenticate', null);\n          return;\n        }\n        if (options.awaiting_approval) {\n          this.send('showLogin');\n          this.flash(I18n.t('login.awaiting_approval'), 'success');\n          this.set('authenticate', null);\n          return;\n        }\n        if (options.awaiting_activation) {\n          this.send('showLogin');\n          this.flash(I18n.t('login.awaiting_confirmation'), 'success');\n          this.set('authenticate', null);\n          return;\n        }\n        // Reload the page if we're authenticated\n        if (options.authenticated) {\n          if (window.location.pathname === Discourse.getURL('/login')) {\n            window.location.pathname = Discourse.getURL('/');\n          } else {\n            window.location.reload();\n          }\n          return;\n        }\n\n        var createAccountController = this.get('controllers.createAccount');\n        createAccountController.setProperties({\n          accountEmail: options.email,\n          accountUsername: options.username,\n          accountName: options.name,\n          authOptions: Em.Object.create(options)\n        });\n        this.send('showCreateAccount');\n      }\n\n    });\n  });";
define("discourse/controllers/merge-topic", 
  ["discourse/mixins/modal-functionality","discourse/controllers/object","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var ModalFunctionality = __dependency1__["default"];

    var ObjectController = __dependency2__["default"];

    /**
      Modal related to merging of topics

      @class MergeTopicController
      @extends ObjectController
      @namespace Discourse
      @uses ModalFunctionality
      @module Discourse
    **/
    __exports__["default"] = ObjectController.extend(Discourse.SelectedPostsCount, ModalFunctionality, {
      needs: ['topic'],

      topicController: Em.computed.alias('controllers.topic'),
      selectedPosts: Em.computed.alias('topicController.selectedPosts'),
      selectedReplies: Em.computed.alias('topicController.selectedReplies'),
      allPostsSelected: Em.computed.alias('topicController.allPostsSelected'),

      buttonDisabled: function() {
        if (this.get('saving')) return true;
        return this.blank('selectedTopicId');
      }.property('selectedTopicId', 'saving'),

      buttonTitle: function() {
        if (this.get('saving')) return I18n.t('saving');
        return I18n.t('topic.merge_topic.title');
      }.property('saving'),

      onShow: function() {
        this.set('controllers.modal.modalClass', 'split-modal');
      },

      actions: {
        movePostsToExistingTopic: function() {
          this.set('saving', true);

          var promise = null;
          if (this.get('allPostsSelected')) {
            promise = Discourse.Topic.mergeTopic(this.get('id'), this.get('selectedTopicId'));
          } else {
            var postIds = this.get('selectedPosts').map(function(p) { return p.get('id'); }),
                replyPostIds = this.get('selectedReplies').map(function(p) { return p.get('id'); });

            promise = Discourse.Topic.movePosts(this.get('id'), {
              destination_topic_id: this.get('selectedTopicId'),
              post_ids: postIds,
              reply_post_ids: replyPostIds
            });
          }

          var mergeTopicController = this;
          promise.then(function(result) {
            // Posts moved
            mergeTopicController.send('closeModal');
            mergeTopicController.get('topicController').send('toggleMultiSelect');
            Em.run.next(function() { Discourse.URL.routeTo(result.url); });
          }, function() {
            // Error moving posts
            mergeTopicController.flash(I18n.t('topic.merge_topic.error'));
            mergeTopicController.set('saving', false);
          });
          return false;
        }
      }

    });
  });

Discourse.MergeTopicController = require('discourse/controllers/merge-topic').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/merge-topic.js'] = "define(\"discourse/controllers/merge-topic\", \n  [\"discourse/mixins/modal-functionality\",\"discourse/controllers/object\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ModalFunctionality = __dependency1__[\"default\"];\n\n    var ObjectController = __dependency2__[\"default\"];\n\n    /**\n      Modal related to merging of topics\n\n      @class MergeTopicController\n      @extends ObjectController\n      @namespace Discourse\n      @uses ModalFunctionality\n      @module Discourse\n    **/\n    __exports__[\"default\"] = ObjectController.extend(Discourse.SelectedPostsCount, ModalFunctionality, {\n      needs: ['topic'],\n\n      topicController: Em.computed.alias('controllers.topic'),\n      selectedPosts: Em.computed.alias('topicController.selectedPosts'),\n      selectedReplies: Em.computed.alias('topicController.selectedReplies'),\n      allPostsSelected: Em.computed.alias('topicController.allPostsSelected'),\n\n      buttonDisabled: function() {\n        if (this.get('saving')) return true;\n        return this.blank('selectedTopicId');\n      }.property('selectedTopicId', 'saving'),\n\n      buttonTitle: function() {\n        if (this.get('saving')) return I18n.t('saving');\n        return I18n.t('topic.merge_topic.title');\n      }.property('saving'),\n\n      onShow: function() {\n        this.set('controllers.modal.modalClass', 'split-modal');\n      },\n\n      actions: {\n        movePostsToExistingTopic: function() {\n          this.set('saving', true);\n\n          var promise = null;\n          if (this.get('allPostsSelected')) {\n            promise = Discourse.Topic.mergeTopic(this.get('id'), this.get('selectedTopicId'));\n          } else {\n            var postIds = this.get('selectedPosts').map(function(p) { return p.get('id'); }),\n                replyPostIds = this.get('selectedReplies').map(function(p) { return p.get('id'); });\n\n            promise = Discourse.Topic.movePosts(this.get('id'), {\n              destination_topic_id: this.get('selectedTopicId'),\n              post_ids: postIds,\n              reply_post_ids: replyPostIds\n            });\n          }\n\n          var mergeTopicController = this;\n          promise.then(function(result) {\n            // Posts moved\n            mergeTopicController.send('closeModal');\n            mergeTopicController.get('topicController').send('toggleMultiSelect');\n            Em.run.next(function() { Discourse.URL.routeTo(result.url); });\n          }, function() {\n            // Error moving posts\n            mergeTopicController.flash(I18n.t('topic.merge_topic.error'));\n            mergeTopicController.set('saving', false);\n          });\n          return false;\n        }\n      }\n\n    });\n  });";
define("discourse/controllers/modal", 
  ["discourse/controllers/controller","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var DiscourseController = __dependency1__["default"];

    __exports__["default"] = DiscourseController.extend({});
  });

Discourse.ModalController = require('discourse/controllers/modal').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/modal.js'] = "define(\"discourse/controllers/modal\", \n  [\"discourse/controllers/controller\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DiscourseController = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = DiscourseController.extend({});\n  });";
define("discourse/controllers/navigation/categories", 
  ["discourse/controllers/navigation/default","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var NavigationDefaultController = __dependency1__["default"];

    __exports__["default"] = NavigationDefaultController.extend();
  });

Discourse.NavigationCategorysController = require('discourse/controllers/navigation/categories').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/navigation/categories.js'] = "define(\"discourse/controllers/navigation/categories\", \n  [\"discourse/controllers/navigation/default\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var NavigationDefaultController = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = NavigationDefaultController.extend();\n  });";
define("discourse/controllers/navigation/category", 
  ["discourse/controllers/navigation/default","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var NavigationDefaultController = __dependency1__["default"];

    __exports__["default"] = NavigationDefaultController.extend({
      subcategoryListSetting: Discourse.computed.setting('show_subcategory_list'),
      showingParentCategory: Em.computed.none('category.parentCategory'),
      showingSubcategoryList: Em.computed.and('subcategoryListSetting', 'showingParentCategory'),

      navItems: function() {
        if (this.get('showingSubcategoryList')) { return []; }
        return Discourse.NavItem.buildList(this.get('category'), { noSubcategories: this.get('noSubcategories') });
      }.property('category', 'noSubcategories')
    });
  });

Discourse.NavigationCategoryController = require('discourse/controllers/navigation/category').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/navigation/category.js'] = "define(\"discourse/controllers/navigation/category\", \n  [\"discourse/controllers/navigation/default\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var NavigationDefaultController = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = NavigationDefaultController.extend({\n      subcategoryListSetting: Discourse.computed.setting('show_subcategory_list'),\n      showingParentCategory: Em.computed.none('category.parentCategory'),\n      showingSubcategoryList: Em.computed.and('subcategoryListSetting', 'showingParentCategory'),\n\n      navItems: function() {\n        if (this.get('showingSubcategoryList')) { return []; }\n        return Discourse.NavItem.buildList(this.get('category'), { noSubcategories: this.get('noSubcategories') });\n      }.property('category', 'noSubcategories')\n    });\n  });";
define("discourse/controllers/not-activated", 
  ["discourse/mixins/modal-functionality","discourse/controllers/controller","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var ModalFunctionality = __dependency1__["default"];

    var DiscourseController = __dependency2__["default"];

    __exports__["default"] = DiscourseController.extend(ModalFunctionality, {
      emailSent: false,

      actions: {
        sendActivationEmail: function() {
          Discourse.ajax('/users/' + this.get('username') + '/send_activation_email', {type: 'POST'});
          this.set('emailSent', true);
        }
      }

    });
  });

Discourse.NotActivatedController = require('discourse/controllers/not-activated').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/not-activated.js'] = "define(\"discourse/controllers/not-activated\", \n  [\"discourse/mixins/modal-functionality\",\"discourse/controllers/controller\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ModalFunctionality = __dependency1__[\"default\"];\n\n    var DiscourseController = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = DiscourseController.extend(ModalFunctionality, {\n      emailSent: false,\n\n      actions: {\n        sendActivationEmail: function() {\n          Discourse.ajax('/users/' + this.get('username') + '/send_activation_email', {type: 'POST'});\n          this.set('emailSent', true);\n        }\n      }\n\n    });\n  });";
define("discourse/controllers/notification", 
  ["discourse/controllers/object","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var ObjectController = __dependency1__["default"];

    var INVITED_TYPE= 8;

    __exports__["default"] = ObjectController.extend({

      scope: function () {
        return "notifications." + Discourse.Site.currentProp("notificationLookup")[this.get("notification_type")];
      }.property("notification_type"),

      username: Em.computed.alias("data.display_username"),

      safe: function (prop) {
        var val = this.get(prop);
        if (val) { val = Handlebars.Utils.escapeExpression(val); }
        return val;
      },

      url: function () {
        var badgeId = this.safe("data.badge_id");
        if (badgeId) {
          var badgeName = this.safe("data.badge_name");
          return '/badges/' + badgeId + '/' + badgeName.replace(/[^A-Za-z0-9_]+/g, '-').toLowerCase();
        }

        var topicId = this.safe('topic_id');
        if (topicId) {
          return Discourse.Utilities.postUrl(this.safe("slug"), topicId, this.safe("post_number"));
        }

        if (this.get('notification_type') === INVITED_TYPE) {
          return '/my/invited';
        }
      }.property("data.{badge_id, badge_name}", "slug", "topic_id", "post_number"),

      description: function () {
        var badgeName = this.safe("data.badge_name");
        if (badgeName) { return badgeName; }
        return this.blank("data.topic_title") ? "" : this.safe("data.topic_title");
      }.property("data.{badge_name, topic_title}")

    });
  });

Discourse.NotificationController = require('discourse/controllers/notification').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/notification.js'] = "define(\"discourse/controllers/notification\", \n  [\"discourse/controllers/object\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ObjectController = __dependency1__[\"default\"];\n\n    var INVITED_TYPE= 8;\n\n    __exports__[\"default\"] = ObjectController.extend({\n\n      scope: function () {\n        return \"notifications.\" + Discourse.Site.currentProp(\"notificationLookup\")[this.get(\"notification_type\")];\n      }.property(\"notification_type\"),\n\n      username: Em.computed.alias(\"data.display_username\"),\n\n      safe: function (prop) {\n        var val = this.get(prop);\n        if (val) { val = Handlebars.Utils.escapeExpression(val); }\n        return val;\n      },\n\n      url: function () {\n        var badgeId = this.safe(\"data.badge_id\");\n        if (badgeId) {\n          var badgeName = this.safe(\"data.badge_name\");\n          return '/badges/' + badgeId + '/' + badgeName.replace(/[^A-Za-z0-9_]+/g, '-').toLowerCase();\n        }\n\n        var topicId = this.safe('topic_id');\n        if (topicId) {\n          return Discourse.Utilities.postUrl(this.safe(\"slug\"), topicId, this.safe(\"post_number\"));\n        }\n\n        if (this.get('notification_type') === INVITED_TYPE) {\n          return '/my/invited';\n        }\n      }.property(\"data.{badge_id, badge_name}\", \"slug\", \"topic_id\", \"post_number\"),\n\n      description: function () {\n        var badgeName = this.safe(\"data.badge_name\");\n        if (badgeName) { return badgeName; }\n        return this.blank(\"data.topic_title\") ? \"\" : this.safe(\"data.topic_title\");\n      }.property(\"data.{badge_name, topic_title}\")\n\n    });\n  });";
define("discourse/controllers/notifications", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.ArrayController.extend(Discourse.HasCurrentUser, {
      needs: ['header'],
      loadingNotifications: Em.computed.alias('controllers.header.loadingNotifications')
    });
  });

Discourse.NotificationsController = require('discourse/controllers/notifications').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/notifications.js'] = "define(\"discourse/controllers/notifications\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.ArrayController.extend(Discourse.HasCurrentUser, {\n      needs: ['header'],\n      loadingNotifications: Em.computed.alias('controllers.header.loadingNotifications')\n    });\n  });";
define("discourse/controllers/preferences", 
  ["discourse/controllers/object","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var ObjectController = __dependency1__["default"];

    /**
      This controller supports actions related to updating one's preferences

      @class PreferencesController
      @extends ObjectController
      @namespace Discourse
      @module Discourse
    **/
    __exports__["default"] = ObjectController.extend({

      allowAvatarUpload: Discourse.computed.setting('allow_uploaded_avatars'),
      allowUserLocale: Discourse.computed.setting('allow_user_locale'),
      ssoOverridesAvatar: Discourse.computed.setting('sso_overrides_avatar'),

      selectedCategories: function(){
        return [].concat(this.get("watchedCategories"), this.get("trackedCategories"), this.get("mutedCategories"));
      }.property("watchedCategories", "trackedCategories", "mutedCategories"),

      // By default we haven't saved anything
      saved: false,

      newNameInput: null,

      saveDisabled: function() {
        if (this.get('saving')) return true;
        if (this.blank('email')) return true;
        return false;
      }.property('saving', 'email'),

      cannotDeleteAccount: Em.computed.not('can_delete_account'),
      deleteDisabled: Em.computed.or('saving', 'deleting', 'cannotDeleteAccount'),

      canEditName: Discourse.computed.setting('enable_names'),

      canSelectTitle: function() {
        return Discourse.SiteSettings.enable_badges && this.get('model.has_title_badges');
      }.property('model.badge_count'),

      canChangePassword: function() {
        return !Discourse.SiteSettings.enable_sso && Discourse.SiteSettings.enable_local_logins;
      }.property(),

      availableLocales: function() {
        return Discourse.SiteSettings.available_locales.split('|').map( function(s) {
          return {name: s, value: s};
        });
      }.property(),

      digestFrequencies: [{ name: I18n.t('user.email_digests.daily'), value: 1 },
                          { name: I18n.t('user.email_digests.weekly'), value: 7 },
                          { name: I18n.t('user.email_digests.bi_weekly'), value: 14 }],

      autoTrackDurations: [{ name: I18n.t('user.auto_track_options.never'), value: -1 },
                           { name: I18n.t('user.auto_track_options.always'), value: 0 },
                           { name: I18n.t('user.auto_track_options.after_n_seconds', { count: 30 }), value: 30000 },
                           { name: I18n.t('user.auto_track_options.after_n_minutes', { count: 1 }), value: 60000 },
                           { name: I18n.t('user.auto_track_options.after_n_minutes', { count: 2 }), value: 120000 },
                           { name: I18n.t('user.auto_track_options.after_n_minutes', { count: 3 }), value: 180000 },
                           { name: I18n.t('user.auto_track_options.after_n_minutes', { count: 4 }), value: 240000 },
                           { name: I18n.t('user.auto_track_options.after_n_minutes', { count: 5 }), value: 300000 },
                           { name: I18n.t('user.auto_track_options.after_n_minutes', { count: 10 }), value: 600000 }],

      considerNewTopicOptions: [{ name: I18n.t('user.new_topic_duration.not_viewed'), value: -1 },
                                { name: I18n.t('user.new_topic_duration.after_n_days', { count: 1 }), value: 60 * 24 },
                                { name: I18n.t('user.new_topic_duration.after_n_days', { count: 2 }), value: 60 * 48 },
                                { name: I18n.t('user.new_topic_duration.after_n_weeks', { count: 1 }), value: 7 * 60 * 24 },
                                { name: I18n.t('user.new_topic_duration.after_n_weeks', { count: 2 }), value: 2 * 7 * 60 * 24 },
                                { name: I18n.t('user.new_topic_duration.last_here'), value: -2 }],

      saveButtonText: function() {
        return this.get('saving') ? I18n.t('saving') : I18n.t('save');
      }.property('saving'),

      imageUploadUrl: Discourse.computed.url('username', '/users/%@/preferences/user_image'),

      actions: {

        save: function() {
          var self = this;
          this.setProperties({ saving: true, saved: false });

          // Cook the bio for preview
          var model = this.get('model');
          model.set('name', this.get('newNameInput'));
          return model.save().then(function() {
            // model was saved
            self.set('saving', false);
            if (Discourse.User.currentProp('id') === model.get('id')) {
              Discourse.User.currentProp('name', model.get('name'));
            }
            self.set('bio_cooked', Discourse.Markdown.cook(Discourse.Markdown.sanitize(self.get('bio_raw'))));
            self.set('saved', true);
          }, function() {
            // model failed to save
            self.set('saving', false);
            alert(I18n.t('generic_error'));
          });
        },

        changePassword: function() {
          var self = this;
          if (!this.get('passwordProgress')) {
            this.set('passwordProgress', I18n.t("user.change_password.in_progress"));
            return this.get('model').changePassword().then(function() {
              // password changed
              self.setProperties({
                changePasswordProgress: false,
                passwordProgress: I18n.t("user.change_password.success")
              });
            }, function() {
              // password failed to change
              self.setProperties({
                changePasswordProgress: false,
                passwordProgress: I18n.t("user.change_password.error")
              });
            });
          }
        },

        delete: function() {
          this.set('deleting', true);
          var self = this,
              message = I18n.t('user.delete_account_confirm'),
              model = this.get('model'),
              buttons = [{
            "label": I18n.t("cancel"),
            "class": "cancel-inline",
            "link":  true,
            "callback": function() {
              self.set('deleting', false);
            }
          }, {
            "label": '<i class="fa fa-exclamation-triangle"></i> ' + I18n.t("user.delete_account"),
            "class": "btn btn-danger",
            "callback": function() {
              model.delete().then(function() {
                bootbox.alert(I18n.t('user.deleted_yourself'), function() {
                  window.location.pathname = Discourse.getURL('/');
                });
              }, function() {
                bootbox.alert(I18n.t('user.delete_yourself_not_allowed'));
                self.set('deleting', false);
              });
            }
          }];
          bootbox.dialog(message, buttons, {"classes": "delete-account"});
        }
      }

    });
  });

Discourse.PreferencesController = require('discourse/controllers/preferences').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/preferences.js'] = "define(\"discourse/controllers/preferences\", \n  [\"discourse/controllers/object\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ObjectController = __dependency1__[\"default\"];\n\n    /**\n      This controller supports actions related to updating one's preferences\n\n      @class PreferencesController\n      @extends ObjectController\n      @namespace Discourse\n      @module Discourse\n    **/\n    __exports__[\"default\"] = ObjectController.extend({\n\n      allowAvatarUpload: Discourse.computed.setting('allow_uploaded_avatars'),\n      allowUserLocale: Discourse.computed.setting('allow_user_locale'),\n      ssoOverridesAvatar: Discourse.computed.setting('sso_overrides_avatar'),\n\n      selectedCategories: function(){\n        return [].concat(this.get(\"watchedCategories\"), this.get(\"trackedCategories\"), this.get(\"mutedCategories\"));\n      }.property(\"watchedCategories\", \"trackedCategories\", \"mutedCategories\"),\n\n      // By default we haven't saved anything\n      saved: false,\n\n      newNameInput: null,\n\n      saveDisabled: function() {\n        if (this.get('saving')) return true;\n        if (this.blank('email')) return true;\n        return false;\n      }.property('saving', 'email'),\n\n      cannotDeleteAccount: Em.computed.not('can_delete_account'),\n      deleteDisabled: Em.computed.or('saving', 'deleting', 'cannotDeleteAccount'),\n\n      canEditName: Discourse.computed.setting('enable_names'),\n\n      canSelectTitle: function() {\n        return Discourse.SiteSettings.enable_badges \u0026\u0026 this.get('model.has_title_badges');\n      }.property('model.badge_count'),\n\n      canChangePassword: function() {\n        return !Discourse.SiteSettings.enable_sso \u0026\u0026 Discourse.SiteSettings.enable_local_logins;\n      }.property(),\n\n      availableLocales: function() {\n        return Discourse.SiteSettings.available_locales.split('|').map( function(s) {\n          return {name: s, value: s};\n        });\n      }.property(),\n\n      digestFrequencies: [{ name: I18n.t('user.email_digests.daily'), value: 1 },\n                          { name: I18n.t('user.email_digests.weekly'), value: 7 },\n                          { name: I18n.t('user.email_digests.bi_weekly'), value: 14 }],\n\n      autoTrackDurations: [{ name: I18n.t('user.auto_track_options.never'), value: -1 },\n                           { name: I18n.t('user.auto_track_options.always'), value: 0 },\n                           { name: I18n.t('user.auto_track_options.after_n_seconds', { count: 30 }), value: 30000 },\n                           { name: I18n.t('user.auto_track_options.after_n_minutes', { count: 1 }), value: 60000 },\n                           { name: I18n.t('user.auto_track_options.after_n_minutes', { count: 2 }), value: 120000 },\n                           { name: I18n.t('user.auto_track_options.after_n_minutes', { count: 3 }), value: 180000 },\n                           { name: I18n.t('user.auto_track_options.after_n_minutes', { count: 4 }), value: 240000 },\n                           { name: I18n.t('user.auto_track_options.after_n_minutes', { count: 5 }), value: 300000 },\n                           { name: I18n.t('user.auto_track_options.after_n_minutes', { count: 10 }), value: 600000 }],\n\n      considerNewTopicOptions: [{ name: I18n.t('user.new_topic_duration.not_viewed'), value: -1 },\n                                { name: I18n.t('user.new_topic_duration.after_n_days', { count: 1 }), value: 60 * 24 },\n                                { name: I18n.t('user.new_topic_duration.after_n_days', { count: 2 }), value: 60 * 48 },\n                                { name: I18n.t('user.new_topic_duration.after_n_weeks', { count: 1 }), value: 7 * 60 * 24 },\n                                { name: I18n.t('user.new_topic_duration.after_n_weeks', { count: 2 }), value: 2 * 7 * 60 * 24 },\n                                { name: I18n.t('user.new_topic_duration.last_here'), value: -2 }],\n\n      saveButtonText: function() {\n        return this.get('saving') ? I18n.t('saving') : I18n.t('save');\n      }.property('saving'),\n\n      imageUploadUrl: Discourse.computed.url('username', '/users/%@/preferences/user_image'),\n\n      actions: {\n\n        save: function() {\n          var self = this;\n          this.setProperties({ saving: true, saved: false });\n\n          // Cook the bio for preview\n          var model = this.get('model');\n          model.set('name', this.get('newNameInput'));\n          return model.save().then(function() {\n            // model was saved\n            self.set('saving', false);\n            if (Discourse.User.currentProp('id') === model.get('id')) {\n              Discourse.User.currentProp('name', model.get('name'));\n            }\n            self.set('bio_cooked', Discourse.Markdown.cook(Discourse.Markdown.sanitize(self.get('bio_raw'))));\n            self.set('saved', true);\n          }, function() {\n            // model failed to save\n            self.set('saving', false);\n            alert(I18n.t('generic_error'));\n          });\n        },\n\n        changePassword: function() {\n          var self = this;\n          if (!this.get('passwordProgress')) {\n            this.set('passwordProgress', I18n.t(\"user.change_password.in_progress\"));\n            return this.get('model').changePassword().then(function() {\n              // password changed\n              self.setProperties({\n                changePasswordProgress: false,\n                passwordProgress: I18n.t(\"user.change_password.success\")\n              });\n            }, function() {\n              // password failed to change\n              self.setProperties({\n                changePasswordProgress: false,\n                passwordProgress: I18n.t(\"user.change_password.error\")\n              });\n            });\n          }\n        },\n\n        delete: function() {\n          this.set('deleting', true);\n          var self = this,\n              message = I18n.t('user.delete_account_confirm'),\n              model = this.get('model'),\n              buttons = [{\n            \"label\": I18n.t(\"cancel\"),\n            \"class\": \"cancel-inline\",\n            \"link\":  true,\n            \"callback\": function() {\n              self.set('deleting', false);\n            }\n          }, {\n            \"label\": '\u003ci class=\"fa fa-exclamation-triangle\"\u003e\u003c/i\u003e ' + I18n.t(\"user.delete_account\"),\n            \"class\": \"btn btn-danger\",\n            \"callback\": function() {\n              model.delete().then(function() {\n                bootbox.alert(I18n.t('user.deleted_yourself'), function() {\n                  window.location.pathname = Discourse.getURL('/');\n                });\n              }, function() {\n                bootbox.alert(I18n.t('user.delete_yourself_not_allowed'));\n                self.set('deleting', false);\n              });\n            }\n          }];\n          bootbox.dialog(message, buttons, {\"classes\": \"delete-account\"});\n        }\n      }\n\n    });\n  });";
define("discourse/controllers/preferences/about", 
  ["discourse/controllers/object","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var ObjectController = __dependency1__["default"];

    /**
      This controller supports actions related to updating your "About Me" bio

      @class PreferencesAboutController
      @extends ObjectController
      @namespace Discourse
      @module Discourse
    **/
    __exports__["default"] = ObjectController.extend({
      saving: false,

      saveButtonText: function() {
        if (this.get('saving')) return I18n.t("saving");
        return I18n.t("user.change");
      }.property('saving')

    });
  });

Discourse.PreferencesAboutController = require('discourse/controllers/preferences/about').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/preferences/about.js'] = "define(\"discourse/controllers/preferences/about\", \n  [\"discourse/controllers/object\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ObjectController = __dependency1__[\"default\"];\n\n    /**\n      This controller supports actions related to updating your \"About Me\" bio\n\n      @class PreferencesAboutController\n      @extends ObjectController\n      @namespace Discourse\n      @module Discourse\n    **/\n    __exports__[\"default\"] = ObjectController.extend({\n      saving: false,\n\n      saveButtonText: function() {\n        if (this.get('saving')) return I18n.t(\"saving\");\n        return I18n.t(\"user.change\");\n      }.property('saving')\n\n    });\n  });";
define("discourse/controllers/preferences/badge-title", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      Controller for selecting a badge to use as your title.

      @class PreferencesBadgeTitleController
      @extends Ember.ArrayController
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Ember.ArrayController.extend({
      saving: false,
      saved: false,

      savingStatus: function() {
        if (this.get('saving')) {
          return I18n.t('saving');
        } else {
          return I18n.t('save');
        }
      }.property('saving'),

      selectableUserBadges: function() {
        var items = this.get('model').filterBy('badge.allow_title', true);
        items = _.uniq(items, false, function(e) { return e.get('badge.name'); });
        items.unshiftObject(Em.Object.create({
              badge: Discourse.Badge.create({name: I18n.t('badges.no_title')})
        }));
        return items;
      }.property('model'),

      selectedUserBadge: function() {
        var selectedUserBadgeId = parseInt(this.get('selectedUserBadgeId'));
        var selectedUserBadge = null;
        this.get('selectableUserBadges').forEach(function(userBadge) {
          if (userBadge.get('id') === selectedUserBadgeId) {
            selectedUserBadge = userBadge;
          }
        });
        return selectedUserBadge;
      }.property('selectedUserBadgeId'),

      titleNotChanged: Discourse.computed.propertyEqual('user.title', 'selectedUserBadge.badge.name'),

      disableSave: Em.computed.or('saving', 'titleNotChanged'),

      actions: {
        save: function() {
          var self = this;

          self.set('saved', false);
          self.set('saving', true);

          Discourse.ajax("/users/" + self.get('user.username_lower') + "/preferences/badge_title", {
            type: "PUT",
            data: {
              user_badge_id: self.get('selectedUserBadgeId')
            }
          }).then(function() {
            self.set('saved', true);
            self.set('saving', false);
            self.set('user.title', self.get('selectedUserBadge.badge.name'));
          }, function() {
            bootbox.alert(I18n.t('generic_error'));
          });
        }
      }
    });
  });

Discourse.PreferencesBadgeTitleController = require('discourse/controllers/preferences/badge-title').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/preferences/badge-title.js'] = "define(\"discourse/controllers/preferences/badge-title\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      Controller for selecting a badge to use as your title.\n\n      @class PreferencesBadgeTitleController\n      @extends Ember.ArrayController\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Ember.ArrayController.extend({\n      saving: false,\n      saved: false,\n\n      savingStatus: function() {\n        if (this.get('saving')) {\n          return I18n.t('saving');\n        } else {\n          return I18n.t('save');\n        }\n      }.property('saving'),\n\n      selectableUserBadges: function() {\n        var items = this.get('model').filterBy('badge.allow_title', true);\n        items = _.uniq(items, false, function(e) { return e.get('badge.name'); });\n        items.unshiftObject(Em.Object.create({\n              badge: Discourse.Badge.create({name: I18n.t('badges.no_title')})\n        }));\n        return items;\n      }.property('model'),\n\n      selectedUserBadge: function() {\n        var selectedUserBadgeId = parseInt(this.get('selectedUserBadgeId'));\n        var selectedUserBadge = null;\n        this.get('selectableUserBadges').forEach(function(userBadge) {\n          if (userBadge.get('id') === selectedUserBadgeId) {\n            selectedUserBadge = userBadge;\n          }\n        });\n        return selectedUserBadge;\n      }.property('selectedUserBadgeId'),\n\n      titleNotChanged: Discourse.computed.propertyEqual('user.title', 'selectedUserBadge.badge.name'),\n\n      disableSave: Em.computed.or('saving', 'titleNotChanged'),\n\n      actions: {\n        save: function() {\n          var self = this;\n\n          self.set('saved', false);\n          self.set('saving', true);\n\n          Discourse.ajax(\"/users/\" + self.get('user.username_lower') + \"/preferences/badge_title\", {\n            type: \"PUT\",\n            data: {\n              user_badge_id: self.get('selectedUserBadgeId')\n            }\n          }).then(function() {\n            self.set('saved', true);\n            self.set('saving', false);\n            self.set('user.title', self.get('selectedUserBadge.badge.name'));\n          }, function() {\n            bootbox.alert(I18n.t('generic_error'));\n          });\n        }\n      }\n    });\n  });";
define("discourse/controllers/preferences/email", 
  ["discourse/controllers/object","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var ObjectController = __dependency1__["default"];

    /**
      This controller supports actions related to updating one's email address

      @class PreferencesEmailController
      @extends ObjectController
      @namespace Discourse
      @module Discourse
    **/
    __exports__["default"] = ObjectController.extend({
      taken: false,
      saving: false,
      error: false,
      success: false,
      newEmail: null,

      newEmailEmpty: Em.computed.empty('newEmail'),
      saveDisabled: Em.computed.or('saving', 'newEmailEmpty', 'taken', 'unchanged'),
      unchanged: Discourse.computed.propertyEqual('newEmailLower', 'email'),

      newEmailLower: function() {
        return this.get('newEmail').toLowerCase();
      }.property('newEmail'),

      saveButtonText: function() {
        if (this.get('saving')) return I18n.t("saving");
        return I18n.t("user.change");
      }.property('saving'),

      actions: {
        changeEmail: function() {
          var self = this;
          this.set('saving', true);
          return this.get('content').changeEmail(this.get('newEmail')).then(function() {
            self.set('success', true);
          }, function() {
            self.setProperties({ error: true, saving: false });
          });
        }
      }

    });
  });

Discourse.PreferencesEmailController = require('discourse/controllers/preferences/email').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/preferences/email.js'] = "define(\"discourse/controllers/preferences/email\", \n  [\"discourse/controllers/object\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ObjectController = __dependency1__[\"default\"];\n\n    /**\n      This controller supports actions related to updating one's email address\n\n      @class PreferencesEmailController\n      @extends ObjectController\n      @namespace Discourse\n      @module Discourse\n    **/\n    __exports__[\"default\"] = ObjectController.extend({\n      taken: false,\n      saving: false,\n      error: false,\n      success: false,\n      newEmail: null,\n\n      newEmailEmpty: Em.computed.empty('newEmail'),\n      saveDisabled: Em.computed.or('saving', 'newEmailEmpty', 'taken', 'unchanged'),\n      unchanged: Discourse.computed.propertyEqual('newEmailLower', 'email'),\n\n      newEmailLower: function() {\n        return this.get('newEmail').toLowerCase();\n      }.property('newEmail'),\n\n      saveButtonText: function() {\n        if (this.get('saving')) return I18n.t(\"saving\");\n        return I18n.t(\"user.change\");\n      }.property('saving'),\n\n      actions: {\n        changeEmail: function() {\n          var self = this;\n          this.set('saving', true);\n          return this.get('content').changeEmail(this.get('newEmail')).then(function() {\n            self.set('success', true);\n          }, function() {\n            self.setProperties({ error: true, saving: false });\n          });\n        }\n      }\n\n    });\n  });";
define("discourse/controllers/preferences/username", 
  ["discourse/controllers/object","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var ObjectController = __dependency1__["default"];

    /**
      This controller supports actions related to updating one's username

      @class PreferencesUsernameController
      @extends ObjectController
      @namespace Discourse
      @module Discourse
    **/
    __exports__["default"] = ObjectController.extend({
      taken: false,
      saving: false,
      error: false,
      errorMessage: null,
      newUsername: null,

      newUsernameEmpty: Em.computed.empty('newUsername'),
      saveDisabled: Em.computed.or('saving', 'newUsernameEmpty', 'taken', 'unchanged', 'errorMessage'),
      unchanged: Discourse.computed.propertyEqual('newUsername', 'username'),

      checkTaken: function() {
        if( this.get('newUsername') && this.get('newUsername').length < 3 ) {
          this.set('errorMessage', I18n.t('user.name.too_short'));
        } else {
          var self = this;
          this.set('taken', false);
          this.set('errorMessage', null);
          if (this.blank('newUsername')) return;
          if (this.get('unchanged')) return;
          Discourse.User.checkUsername(this.get('newUsername'), undefined, this.get('content.id')).then(function(result) {
            if (result.errors) {
              self.set('errorMessage', result.errors.join(' '));
            } else if (result.available === false) {
              self.set('taken', true);
            }
          });
        }
      }.observes('newUsername'),

      saveButtonText: function() {
        if (this.get('saving')) return I18n.t("saving");
        return I18n.t("user.change");
      }.property('saving'),

      actions: {
        changeUsername: function() {
          var self = this;
          return bootbox.confirm(I18n.t("user.change_username.confirm"), I18n.t("no_value"), I18n.t("yes_value"), function(result) {
            if (result) {
              self.set('saving', true);
              self.get('content').changeUsername(self.get('newUsername')).then(function() {
                Discourse.URL.redirectTo("/users/" + self.get('newUsername').toLowerCase() + "/preferences");
              }, function() {
                // error
                self.set('error', true);
                self.set('saving', false);
              });
            }
          });
        }
      }

    });
  });

Discourse.PreferencesUsernameController = require('discourse/controllers/preferences/username').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/preferences/username.js'] = "define(\"discourse/controllers/preferences/username\", \n  [\"discourse/controllers/object\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ObjectController = __dependency1__[\"default\"];\n\n    /**\n      This controller supports actions related to updating one's username\n\n      @class PreferencesUsernameController\n      @extends ObjectController\n      @namespace Discourse\n      @module Discourse\n    **/\n    __exports__[\"default\"] = ObjectController.extend({\n      taken: false,\n      saving: false,\n      error: false,\n      errorMessage: null,\n      newUsername: null,\n\n      newUsernameEmpty: Em.computed.empty('newUsername'),\n      saveDisabled: Em.computed.or('saving', 'newUsernameEmpty', 'taken', 'unchanged', 'errorMessage'),\n      unchanged: Discourse.computed.propertyEqual('newUsername', 'username'),\n\n      checkTaken: function() {\n        if( this.get('newUsername') \u0026\u0026 this.get('newUsername').length \u003c 3 ) {\n          this.set('errorMessage', I18n.t('user.name.too_short'));\n        } else {\n          var self = this;\n          this.set('taken', false);\n          this.set('errorMessage', null);\n          if (this.blank('newUsername')) return;\n          if (this.get('unchanged')) return;\n          Discourse.User.checkUsername(this.get('newUsername'), undefined, this.get('content.id')).then(function(result) {\n            if (result.errors) {\n              self.set('errorMessage', result.errors.join(' '));\n            } else if (result.available === false) {\n              self.set('taken', true);\n            }\n          });\n        }\n      }.observes('newUsername'),\n\n      saveButtonText: function() {\n        if (this.get('saving')) return I18n.t(\"saving\");\n        return I18n.t(\"user.change\");\n      }.property('saving'),\n\n      actions: {\n        changeUsername: function() {\n          var self = this;\n          return bootbox.confirm(I18n.t(\"user.change_username.confirm\"), I18n.t(\"no_value\"), I18n.t(\"yes_value\"), function(result) {\n            if (result) {\n              self.set('saving', true);\n              self.get('content').changeUsername(self.get('newUsername')).then(function() {\n                Discourse.URL.redirectTo(\"/users/\" + self.get('newUsername').toLowerCase() + \"/preferences\");\n              }, function() {\n                // error\n                self.set('error', true);\n                self.set('saving', false);\n              });\n            }\n          });\n        }\n      }\n\n    });\n  });";
define("discourse/controllers/quote-button", 
  ["discourse/controllers/controller","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var DiscourseController = __dependency1__["default"];

    /*global assetPath:true */

    __exports__["default"] = DiscourseController.extend({
      needs: ['topic', 'composer'],

      init: function() {
        this._super();
        $LAB.script(assetPath('defer/html-sanitizer-bundle'));
      },

      /**
        If the buffer is cleared, clear out other state (post)
      **/
      bufferChanged: function() {
        if (this.blank('buffer')) this.set('post', null);
      }.observes('buffer'),

      /**
        Save the currently selected text and displays the
        "quote reply" button

        @method selectText
      **/
      selectText: function(postId) {
        // anonymous users cannot "quote-reply"
        if (!Discourse.User.current()) return;

        // don't display the "quote-reply" button if we can't create a post
        if (!this.get('controllers.topic.model.details.can_create_post')) return;

        var selection = window.getSelection();
        // no selections
        if (selection.rangeCount === 0) return;

        // retrieve the selected range
        var range = selection.getRangeAt(0),
            cloned = range.cloneRange(),
            $ancestor = $(range.commonAncestorContainer);

        if ($ancestor.closest('.cooked').length === 0) {
          this.set('buffer', '');
          return;
        }

        var selectedText = Discourse.Utilities.selectedText();
        if (this.get('buffer') === selectedText) return;

        // we need to retrieve the post data from the posts collection in the topic controller
        var postStream = this.get('controllers.topic.postStream');
        this.set('post', postStream.findLoadedPost(postId));
        this.set('buffer', selectedText);

        // create a marker element
        var markerElement = document.createElement("span");
        // containing a single invisible character
        markerElement.appendChild(document.createTextNode("\ufeff"));

        // collapse the range at the beginning/end of the selection
        range.collapse(!Discourse.Mobile.isMobileDevice);
        // and insert it at the start of our selection range
        range.insertNode(markerElement);

        // retrieve the position of the market
        var markerOffset = $(markerElement).offset(),
            $quoteButton = $('.quote-button');

        // remove the marker
        markerElement.parentNode.removeChild(markerElement);

        // work around Chrome that would sometimes lose the selection
        var sel = window.getSelection();
        sel.removeAllRanges();
        sel.addRange(cloned);

        // move the quote button above the marker
        Em.run.schedule('afterRender', function() {
          var top = markerOffset.top;
          var left = markerOffset.left;

          if (Discourse.Mobile.isMobileDevice) {
            top = top + 20;
            left = Math.min(left + 10, $(window).width() - $quoteButton.outerWidth());
          } else {
            top = top - $quoteButton.outerHeight() - 5;
          }

          $quoteButton.offset({ top: top, left: left });
        });
      },

      /**
        Quote the currently selected text

        @method quoteText
      **/
      quoteText: function() {
        var post = this.get('post');
        var composerController = this.get('controllers.composer');
        var composerOpts = {
          action: Discourse.Composer.REPLY,
          draftKey: this.get('post.topic.draft_key')
        };

        if(post.get('post_number') === 1) {
          composerOpts.topic = post.get("topic");
        } else {
          composerOpts.post = post;
        }

        // If the composer is associated with a different post, we don't change it.
        var composerPost = composerController.get('content.post');
        if (composerPost && (composerPost.get('id') !== this.get('post.id'))) {
          composerOpts.post = composerPost;
        }

        var buffer = this.get('buffer');
        var quotedText = Discourse.Quote.build(post, buffer);
        composerOpts.quote = quotedText;
        if (composerController.get('content.viewOpen') || composerController.get('content.viewDraft')) {
          composerController.appendBlockAtCursor(quotedText.trim());
        } else {
          composerController.open(composerOpts);
        }
        this.set('buffer', '');
        return false;
      },

      /**
        Deselect the currently selected text

        @method deselectText
      **/
      deselectText: function() {
        // clear selected text
        window.getSelection().removeAllRanges();
        // clean up the buffer
        this.set('buffer', '');
      }

    });
  });

Discourse.QuoteButtonController = require('discourse/controllers/quote-button').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/quote-button.js'] = "define(\"discourse/controllers/quote-button\", \n  [\"discourse/controllers/controller\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DiscourseController = __dependency1__[\"default\"];\n\n    /*global assetPath:true */\n\n    __exports__[\"default\"] = DiscourseController.extend({\n      needs: ['topic', 'composer'],\n\n      init: function() {\n        this._super();\n        $LAB.script(assetPath('defer/html-sanitizer-bundle'));\n      },\n\n      /**\n        If the buffer is cleared, clear out other state (post)\n      **/\n      bufferChanged: function() {\n        if (this.blank('buffer')) this.set('post', null);\n      }.observes('buffer'),\n\n      /**\n        Save the currently selected text and displays the\n        \"quote reply\" button\n\n        @method selectText\n      **/\n      selectText: function(postId) {\n        // anonymous users cannot \"quote-reply\"\n        if (!Discourse.User.current()) return;\n\n        // don't display the \"quote-reply\" button if we can't create a post\n        if (!this.get('controllers.topic.model.details.can_create_post')) return;\n\n        var selection = window.getSelection();\n        // no selections\n        if (selection.rangeCount === 0) return;\n\n        // retrieve the selected range\n        var range = selection.getRangeAt(0),\n            cloned = range.cloneRange(),\n            $ancestor = $(range.commonAncestorContainer);\n\n        if ($ancestor.closest('.cooked').length === 0) {\n          this.set('buffer', '');\n          return;\n        }\n\n        var selectedText = Discourse.Utilities.selectedText();\n        if (this.get('buffer') === selectedText) return;\n\n        // we need to retrieve the post data from the posts collection in the topic controller\n        var postStream = this.get('controllers.topic.postStream');\n        this.set('post', postStream.findLoadedPost(postId));\n        this.set('buffer', selectedText);\n\n        // create a marker element\n        var markerElement = document.createElement(\"span\");\n        // containing a single invisible character\n        markerElement.appendChild(document.createTextNode(\"\\ufeff\"));\n\n        // collapse the range at the beginning/end of the selection\n        range.collapse(!Discourse.Mobile.isMobileDevice);\n        // and insert it at the start of our selection range\n        range.insertNode(markerElement);\n\n        // retrieve the position of the market\n        var markerOffset = $(markerElement).offset(),\n            $quoteButton = $('.quote-button');\n\n        // remove the marker\n        markerElement.parentNode.removeChild(markerElement);\n\n        // work around Chrome that would sometimes lose the selection\n        var sel = window.getSelection();\n        sel.removeAllRanges();\n        sel.addRange(cloned);\n\n        // move the quote button above the marker\n        Em.run.schedule('afterRender', function() {\n          var top = markerOffset.top;\n          var left = markerOffset.left;\n\n          if (Discourse.Mobile.isMobileDevice) {\n            top = top + 20;\n            left = Math.min(left + 10, $(window).width() - $quoteButton.outerWidth());\n          } else {\n            top = top - $quoteButton.outerHeight() - 5;\n          }\n\n          $quoteButton.offset({ top: top, left: left });\n        });\n      },\n\n      /**\n        Quote the currently selected text\n\n        @method quoteText\n      **/\n      quoteText: function() {\n        var post = this.get('post');\n        var composerController = this.get('controllers.composer');\n        var composerOpts = {\n          action: Discourse.Composer.REPLY,\n          draftKey: this.get('post.topic.draft_key')\n        };\n\n        if(post.get('post_number') === 1) {\n          composerOpts.topic = post.get(\"topic\");\n        } else {\n          composerOpts.post = post;\n        }\n\n        // If the composer is associated with a different post, we don't change it.\n        var composerPost = composerController.get('content.post');\n        if (composerPost \u0026\u0026 (composerPost.get('id') !== this.get('post.id'))) {\n          composerOpts.post = composerPost;\n        }\n\n        var buffer = this.get('buffer');\n        var quotedText = Discourse.Quote.build(post, buffer);\n        composerOpts.quote = quotedText;\n        if (composerController.get('content.viewOpen') || composerController.get('content.viewDraft')) {\n          composerController.appendBlockAtCursor(quotedText.trim());\n        } else {\n          composerController.open(composerOpts);\n        }\n        this.set('buffer', '');\n        return false;\n      },\n\n      /**\n        Deselect the currently selected text\n\n        @method deselectText\n      **/\n      deselectText: function() {\n        // clear selected text\n        window.getSelection().removeAllRanges();\n        // clean up the buffer\n        this.set('buffer', '');\n      }\n\n    });\n  });";
define("discourse/controllers/search", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Em.Controller.extend(Discourse.Presence, {

      contextChanged: function(){
        if(this.get('searchContextEnabled')){
          this._dontSearch = true;
          this.set('searchContextEnabled', false);
          this._dontSearch = false;
        }
      }.observes("searchContext"),

      searchContextDescription: function(){
        var ctx = this.get('searchContext');
        if (ctx) {
          switch(Em.get(ctx, 'type')) {
            case 'topic':
              return I18n.t('search.context.topic');
            case 'user':
              return I18n.t('search.context.user', {username: Em.get(ctx, 'user.username')});
            case 'category':
              return I18n.t('search.context.category', {category: Em.get(ctx, 'category.name')});
          }
        }
      }.property('searchContext'),

      searchContextEnabledChanged: function(){
        if(this._dontSearch){ return; }
        this.newSearchNeeded();
      }.observes('searchContextEnabled'),

      // If we need to perform another search
      newSearchNeeded: function() {
        this.set('noResults', false);
        var term = (this.get('term') || '').trim();
        if (term.length >= Discourse.SiteSettings.min_search_term_length) {
          this.set('loading', true);
          this.searchTerm(term, this.get('typeFilter'));
        } else {
          this.setProperties({ content: null });
        }
        this.set('selectedIndex', 0);
      }.observes('term', 'typeFilter'),

      searchTerm: Discourse.debouncePromise(function(term, typeFilter) {
        var self = this;

        var context;
        if(this.get('searchContextEnabled')){
          context = this.get('searchContext');
        }

        return Discourse.Search.forTerm(term, {
          typeFilter: typeFilter,
          searchContext: context
        }).then(function(results) {
          self.setProperties({ noResults: !results, content: results });
          self.set('loading', false);
        }).catch(function() {
          self.set('loading', false);
        });
      }, 400),

      showCancelFilter: function() {
        if (this.get('loading')) return false;
        return this.present('typeFilter');
      }.property('typeFilter', 'loading'),

      termChanged: function() {
        this.cancelTypeFilter();
      }.observes('term'),

      actions: {
        moreOfType: function(type) {
          this.set('typeFilter', type);
        },

        cancelType: function() {
          this.cancelTypeFilter();
        }
      },

      cancelTypeFilter: function() {
        this.set('typeFilter', null);
      }
    });
  });

Discourse.SearchController = require('discourse/controllers/search').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/search.js'] = "define(\"discourse/controllers/search\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Em.Controller.extend(Discourse.Presence, {\n\n      contextChanged: function(){\n        if(this.get('searchContextEnabled')){\n          this._dontSearch = true;\n          this.set('searchContextEnabled', false);\n          this._dontSearch = false;\n        }\n      }.observes(\"searchContext\"),\n\n      searchContextDescription: function(){\n        var ctx = this.get('searchContext');\n        if (ctx) {\n          switch(Em.get(ctx, 'type')) {\n            case 'topic':\n              return I18n.t('search.context.topic');\n            case 'user':\n              return I18n.t('search.context.user', {username: Em.get(ctx, 'user.username')});\n            case 'category':\n              return I18n.t('search.context.category', {category: Em.get(ctx, 'category.name')});\n          }\n        }\n      }.property('searchContext'),\n\n      searchContextEnabledChanged: function(){\n        if(this._dontSearch){ return; }\n        this.newSearchNeeded();\n      }.observes('searchContextEnabled'),\n\n      // If we need to perform another search\n      newSearchNeeded: function() {\n        this.set('noResults', false);\n        var term = (this.get('term') || '').trim();\n        if (term.length \u003e= Discourse.SiteSettings.min_search_term_length) {\n          this.set('loading', true);\n          this.searchTerm(term, this.get('typeFilter'));\n        } else {\n          this.setProperties({ content: null });\n        }\n        this.set('selectedIndex', 0);\n      }.observes('term', 'typeFilter'),\n\n      searchTerm: Discourse.debouncePromise(function(term, typeFilter) {\n        var self = this;\n\n        var context;\n        if(this.get('searchContextEnabled')){\n          context = this.get('searchContext');\n        }\n\n        return Discourse.Search.forTerm(term, {\n          typeFilter: typeFilter,\n          searchContext: context\n        }).then(function(results) {\n          self.setProperties({ noResults: !results, content: results });\n          self.set('loading', false);\n        }).catch(function() {\n          self.set('loading', false);\n        });\n      }, 400),\n\n      showCancelFilter: function() {\n        if (this.get('loading')) return false;\n        return this.present('typeFilter');\n      }.property('typeFilter', 'loading'),\n\n      termChanged: function() {\n        this.cancelTypeFilter();\n      }.observes('term'),\n\n      actions: {\n        moreOfType: function(type) {\n          this.set('typeFilter', type);\n        },\n\n        cancelType: function() {\n          this.cancelTypeFilter();\n        }\n      },\n\n      cancelTypeFilter: function() {\n        this.set('typeFilter', null);\n      }\n    });\n  });";
define("discourse/controllers/share", 
  ["discourse/controllers/controller","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var DiscourseController = __dependency1__["default"];

    __exports__["default"] = DiscourseController.extend({
      needs: ['topic'],

      // Close the share controller
      actions: {
        close: function() {
          this.setProperties({ link: '', postNumber: '' });
          return false;
        },

        sharePopup: function(target, url) {
          window.open(url, '', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,width=600,height=' + Discourse.ShareLink.popupHeight(target));
          return false;
        }
      },

      shareLinks: function() {
        return Discourse.SiteSettings.share_links.split('|').map(function(i) {
          if( Discourse.ShareLink.supportedTargets.indexOf(i) >= 0 ) {
            return Discourse.ShareLink.create({target: i, link: this.get('link'), topicTitle: this.get('controllers.topic.title')});
          } else {
            return null;
          }
        }, this).compact();
      }.property('link')

    });
  });

Discourse.ShareController = require('discourse/controllers/share').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/share.js'] = "define(\"discourse/controllers/share\", \n  [\"discourse/controllers/controller\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DiscourseController = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = DiscourseController.extend({\n      needs: ['topic'],\n\n      // Close the share controller\n      actions: {\n        close: function() {\n          this.setProperties({ link: '', postNumber: '' });\n          return false;\n        },\n\n        sharePopup: function(target, url) {\n          window.open(url, '', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,width=600,height=' + Discourse.ShareLink.popupHeight(target));\n          return false;\n        }\n      },\n\n      shareLinks: function() {\n        return Discourse.SiteSettings.share_links.split('|').map(function(i) {\n          if( Discourse.ShareLink.supportedTargets.indexOf(i) \u003e= 0 ) {\n            return Discourse.ShareLink.create({target: i, link: this.get('link'), topicTitle: this.get('controllers.topic.title')});\n          } else {\n            return null;\n          }\n        }, this).compact();\n      }.property('link')\n\n    });\n  });";
define("discourse/controllers/site-map-category", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.ObjectController.extend(Discourse.HasCurrentUser, {
      needs: ['site-map'],

      unreadTotal: function() {
        return parseInt(this.get('unreadTopics'), 10) +
               parseInt(this.get('newTopics'), 10);
      }.property('unreadTopics', 'newTopics'),

      showTopicCount: Em.computed.not('currentUser')
    });
  });

Discourse.SiteMapCategoryController = require('discourse/controllers/site-map-category').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/site-map-category.js'] = "define(\"discourse/controllers/site-map-category\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.ObjectController.extend(Discourse.HasCurrentUser, {\n      needs: ['site-map'],\n\n      unreadTotal: function() {\n        return parseInt(this.get('unreadTopics'), 10) +\n               parseInt(this.get('newTopics'), 10);\n      }.property('unreadTopics', 'newTopics'),\n\n      showTopicCount: Em.computed.not('currentUser')\n    });\n  });";
define("discourse/controllers/site-map", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.ArrayController.extend(Discourse.HasCurrentUser, {
      showBadgesLink: function(){return Discourse.SiteSettings.enable_badges;}.property(),
      showAdminLinks: Em.computed.alias('currentUser.staff'),
      flaggedPostsCount: Em.computed.alias("currentUser.site_flagged_posts_count"),

      faqUrl: function() {
        return Discourse.SiteSettings.faq_url ? Discourse.SiteSettings.faq_url : Discourse.getURL('/faq');
      }.property(),

      badgesUrl: Discourse.getURL('/badges'),

      showKeyboardShortcuts: function(){
        return !Discourse.Mobile.mobileView && !this.capabilities.touch;
      }.property(),

      showMobileToggle: function(){
        return Discourse.Mobile.mobileView || (Discourse.SiteSettings.enable_mobile_theme && this.capabilities.touch);
      }.property(),

      mobileViewLinkTextKey: function() {
        return Discourse.Mobile.mobileView ? "desktop_view" : "mobile_view";
      }.property(),

      categories: function() {
        var hideUncategorized = !Discourse.SiteSettings.allow_uncategorized_topics,
            showSubcatList = Discourse.SiteSettings.show_subcategory_list,
            isStaff = Discourse.User.currentProp('staff');
        return Discourse.Category.list().reject(function(c) {
          if (showSubcatList && c.get('parent_category_id')) { return true; }
          if (hideUncategorized && c.get('isUncategorizedCategory') && !isStaff) { return true; }
          return false;
        });
      }.property(),

      actions: {
        keyboardShortcuts: function(){
          Discourse.__container__.lookup('controller:application').send('showKeyboardShortcutsHelp');
        },
        toggleMobileView: function() {
          Discourse.Mobile.toggleMobileView();
        }
      }
    });
  });

Discourse.SiteMapController = require('discourse/controllers/site-map').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/site-map.js'] = "define(\"discourse/controllers/site-map\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.ArrayController.extend(Discourse.HasCurrentUser, {\n      showBadgesLink: function(){return Discourse.SiteSettings.enable_badges;}.property(),\n      showAdminLinks: Em.computed.alias('currentUser.staff'),\n      flaggedPostsCount: Em.computed.alias(\"currentUser.site_flagged_posts_count\"),\n\n      faqUrl: function() {\n        return Discourse.SiteSettings.faq_url ? Discourse.SiteSettings.faq_url : Discourse.getURL('/faq');\n      }.property(),\n\n      badgesUrl: Discourse.getURL('/badges'),\n\n      showKeyboardShortcuts: function(){\n        return !Discourse.Mobile.mobileView \u0026\u0026 !this.capabilities.touch;\n      }.property(),\n\n      showMobileToggle: function(){\n        return Discourse.Mobile.mobileView || (Discourse.SiteSettings.enable_mobile_theme \u0026\u0026 this.capabilities.touch);\n      }.property(),\n\n      mobileViewLinkTextKey: function() {\n        return Discourse.Mobile.mobileView ? \"desktop_view\" : \"mobile_view\";\n      }.property(),\n\n      categories: function() {\n        var hideUncategorized = !Discourse.SiteSettings.allow_uncategorized_topics,\n            showSubcatList = Discourse.SiteSettings.show_subcategory_list,\n            isStaff = Discourse.User.currentProp('staff');\n        return Discourse.Category.list().reject(function(c) {\n          if (showSubcatList \u0026\u0026 c.get('parent_category_id')) { return true; }\n          if (hideUncategorized \u0026\u0026 c.get('isUncategorizedCategory') \u0026\u0026 !isStaff) { return true; }\n          return false;\n        });\n      }.property(),\n\n      actions: {\n        keyboardShortcuts: function(){\n          Discourse.__container__.lookup('controller:application').send('showKeyboardShortcutsHelp');\n        },\n        toggleMobileView: function() {\n          Discourse.Mobile.toggleMobileView();\n        }\n      }\n    });\n  });";
define("discourse/controllers/split-topic", 
  ["discourse/mixins/modal-functionality","discourse/controllers/object","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var ModalFunctionality = __dependency1__["default"];

    var ObjectController = __dependency2__["default"];

    /**
      Modal related to auto closing of topics

      @class SplitTopicController
      @extends ObjectController
      @namespace Discourse
      @uses ModalFunctionality
      @module Discourse
    **/
    __exports__["default"] = ObjectController.extend(Discourse.SelectedPostsCount, ModalFunctionality, {
      needs: ['topic'],

      topicController: Em.computed.alias('controllers.topic'),
      selectedPosts: Em.computed.alias('topicController.selectedPosts'),
      selectedReplies: Em.computed.alias('topicController.selectedReplies'),

      buttonDisabled: function() {
        if (this.get('saving')) return true;
        return this.blank('topicName');
      }.property('saving', 'topicName'),

      buttonTitle: function() {
        if (this.get('saving')) return I18n.t('saving');
        return I18n.t('topic.split_topic.action');
      }.property('saving'),

      onShow: function() {
        this.setProperties({
          'controllers.modal.modalClass': 'split-modal',
          saving: false,
          categoryId: null,
          topicName: ''
        });
      },

      actions: {
        movePostsToNewTopic: function() {
          this.set('saving', true);

          var postIds = this.get('selectedPosts').map(function(p) { return p.get('id'); }),
              replyPostIds = this.get('selectedReplies').map(function(p) { return p.get('id'); }),
              self = this,
              categoryId = this.get('categoryId'),
              saveOpts = {
                title: this.get('topicName'),
                post_ids: postIds,
                reply_post_ids: replyPostIds
              };

          if (!Ember.isNone(categoryId)) { saveOpts.category_id = categoryId; }

          Discourse.Topic.movePosts(this.get('id'), saveOpts).then(function(result) {
            // Posts moved
            self.send('closeModal');
            self.get('topicController').send('toggleMultiSelect');
            Em.run.next(function() { Discourse.URL.routeTo(result.url); });
          }).catch(function(xhr) {

            var error = I18n.t('topic.split_topic.error');

            if (xhr) {
              var json = xhr.responseJSON;
              if (json && json.errors) {
                error = json.errors[0];
              }
            }

            // Error moving posts
            self.flash(error);
            self.set('saving', false);
          });
          return false;
        }
      }


    });
  });

Discourse.SplitTopicController = require('discourse/controllers/split-topic').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/split-topic.js'] = "define(\"discourse/controllers/split-topic\", \n  [\"discourse/mixins/modal-functionality\",\"discourse/controllers/object\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ModalFunctionality = __dependency1__[\"default\"];\n\n    var ObjectController = __dependency2__[\"default\"];\n\n    /**\n      Modal related to auto closing of topics\n\n      @class SplitTopicController\n      @extends ObjectController\n      @namespace Discourse\n      @uses ModalFunctionality\n      @module Discourse\n    **/\n    __exports__[\"default\"] = ObjectController.extend(Discourse.SelectedPostsCount, ModalFunctionality, {\n      needs: ['topic'],\n\n      topicController: Em.computed.alias('controllers.topic'),\n      selectedPosts: Em.computed.alias('topicController.selectedPosts'),\n      selectedReplies: Em.computed.alias('topicController.selectedReplies'),\n\n      buttonDisabled: function() {\n        if (this.get('saving')) return true;\n        return this.blank('topicName');\n      }.property('saving', 'topicName'),\n\n      buttonTitle: function() {\n        if (this.get('saving')) return I18n.t('saving');\n        return I18n.t('topic.split_topic.action');\n      }.property('saving'),\n\n      onShow: function() {\n        this.setProperties({\n          'controllers.modal.modalClass': 'split-modal',\n          saving: false,\n          categoryId: null,\n          topicName: ''\n        });\n      },\n\n      actions: {\n        movePostsToNewTopic: function() {\n          this.set('saving', true);\n\n          var postIds = this.get('selectedPosts').map(function(p) { return p.get('id'); }),\n              replyPostIds = this.get('selectedReplies').map(function(p) { return p.get('id'); }),\n              self = this,\n              categoryId = this.get('categoryId'),\n              saveOpts = {\n                title: this.get('topicName'),\n                post_ids: postIds,\n                reply_post_ids: replyPostIds\n              };\n\n          if (!Ember.isNone(categoryId)) { saveOpts.category_id = categoryId; }\n\n          Discourse.Topic.movePosts(this.get('id'), saveOpts).then(function(result) {\n            // Posts moved\n            self.send('closeModal');\n            self.get('topicController').send('toggleMultiSelect');\n            Em.run.next(function() { Discourse.URL.routeTo(result.url); });\n          }).catch(function(xhr) {\n\n            var error = I18n.t('topic.split_topic.error');\n\n            if (xhr) {\n              var json = xhr.responseJSON;\n              if (json \u0026\u0026 json.errors) {\n                error = json.errors[0];\n              }\n            }\n\n            // Error moving posts\n            self.flash(error);\n            self.set('saving', false);\n          });\n          return false;\n        }\n      }\n\n\n    });\n  });";
define("discourse/controllers/static", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Em.ObjectController.extend({
      showLoginButton: Em.computed.equal('path', 'login'),

      actions: {
        markFaqRead: function() {
          Discourse.ajax("/users/read-faq", { method: "POST" });
        }
      }
    });
  });

Discourse.StaticController = require('discourse/controllers/static').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/static.js'] = "define(\"discourse/controllers/static\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Em.ObjectController.extend({\n      showLoginButton: Em.computed.equal('path', 'login'),\n\n      actions: {\n        markFaqRead: function() {\n          Discourse.ajax(\"/users/read-faq\", { method: \"POST\" });\n        }\n      }\n    });\n  });";
define("discourse/controllers/topic-admin-menu", 
  ["discourse/controllers/object","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var ObjectController = __dependency1__["default"];

    /**
      This controller supports the admin menu on topics

      @class TopicAdminMenuController
      @extends ObjectController
      @namespace Discourse
      @module Discourse
    **/
    __exports__["default"] = ObjectController.extend({
      menuVisible: false,
      needs: ['modal'],

      actions: {
        show: function() {
          this.set('menuVisible', true);
        },

        hide: function() {
          this.set('menuVisible', false);
        }
      },

      showRecover: Em.computed.and('deleted', 'details.can_recover')
    });
  });

Discourse.TopicAdminMenuController = require('discourse/controllers/topic-admin-menu').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/topic-admin-menu.js'] = "define(\"discourse/controllers/topic-admin-menu\", \n  [\"discourse/controllers/object\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ObjectController = __dependency1__[\"default\"];\n\n    /**\n      This controller supports the admin menu on topics\n\n      @class TopicAdminMenuController\n      @extends ObjectController\n      @namespace Discourse\n      @module Discourse\n    **/\n    __exports__[\"default\"] = ObjectController.extend({\n      menuVisible: false,\n      needs: ['modal'],\n\n      actions: {\n        show: function() {\n          this.set('menuVisible', true);\n        },\n\n        hide: function() {\n          this.set('menuVisible', false);\n        }\n      },\n\n      showRecover: Em.computed.and('deleted', 'details.can_recover')\n    });\n  });";
define("discourse/controllers/topic-bulk-actions", 
  ["discourse/mixins/modal-functionality","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var ModalFunctionality = __dependency1__["default"];

    /**
      Modal for performing bulk actions on topics

      @class TopicBulkActionsController
      @extends Ember.ArrayController
      @namespace Discourse
      @uses ModalFunctionality
      @module Discourse
    **/
    __exports__["default"] = Ember.ArrayController.extend(ModalFunctionality, {
      needs: ['discovery/topics'],

      onShow: function() {
        this.set('controllers.modal.modalClass', 'topic-bulk-actions-modal small');
      },

      perform: function(operation) {
        this.set('loading', true);

        var self = this,
            topics = this.get('model');
        return Discourse.Topic.bulkOperation(this.get('model'), operation).then(function(result) {
          self.set('loading', false);
          if (result && result.topic_ids) {
            return result.topic_ids.map(function (t) {
              return topics.findBy('id', t);
            });
          }
          return result;
        }).catch(function() {
          bootbox.alert(I18n.t('generic_error'));
          self.set('loading', false);
        });
      },

      forEachPerformed: function(operation, cb) {
        var self = this;
        this.perform(operation).then(function (topics) {
          if (topics) {
            topics.forEach(cb);
            self.send('closeModal');
          }
        });
      },

      performAndRefresh: function(operation) {
        var self = this;
        return this.perform(operation).then(function() {
          self.get('controllers.discovery/topics').send('refresh');
          self.send('closeModal');
        });
      },

      actions: {
        showChangeCategory: function() {
          this.send('changeBulkTemplate', 'modal/bulk_change_category');
          this.set('controllers.modal.modalClass', 'topic-bulk-actions-modal full');
        },

        showNotificationLevel: function() {
          this.send('changeBulkTemplate', 'modal/bulk_notification_level');
        },

        deleteTopics: function() {
          this.performAndRefresh({type: 'delete'});
        },

        closeTopics: function() {
          this.forEachPerformed({type: 'close'}, function(t) {
            t.set('closed', true);
          });
        },

        changeCategory: function() {
          var categoryId = parseInt(this.get('newCategoryId'), 10) || 0,
              category = Discourse.Category.findById(categoryId),
              self = this;
          this.perform({type: 'change_category', category_id: categoryId}).then(function(topics) {
            topics.forEach(function(t) {
              t.set('category', category);
            });
            self.get('controllers.discovery/topics').send('refresh');
            self.send('closeModal');
          });
        },

        resetRead: function() {
          this.performAndRefresh({ type: 'reset_read' });
        }
      }
    });
  });

Discourse.TopicBulkActionsController = require('discourse/controllers/topic-bulk-actions').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/topic-bulk-actions.js'] = "define(\"discourse/controllers/topic-bulk-actions\", \n  [\"discourse/mixins/modal-functionality\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ModalFunctionality = __dependency1__[\"default\"];\n\n    /**\n      Modal for performing bulk actions on topics\n\n      @class TopicBulkActionsController\n      @extends Ember.ArrayController\n      @namespace Discourse\n      @uses ModalFunctionality\n      @module Discourse\n    **/\n    __exports__[\"default\"] = Ember.ArrayController.extend(ModalFunctionality, {\n      needs: ['discovery/topics'],\n\n      onShow: function() {\n        this.set('controllers.modal.modalClass', 'topic-bulk-actions-modal small');\n      },\n\n      perform: function(operation) {\n        this.set('loading', true);\n\n        var self = this,\n            topics = this.get('model');\n        return Discourse.Topic.bulkOperation(this.get('model'), operation).then(function(result) {\n          self.set('loading', false);\n          if (result \u0026\u0026 result.topic_ids) {\n            return result.topic_ids.map(function (t) {\n              return topics.findBy('id', t);\n            });\n          }\n          return result;\n        }).catch(function() {\n          bootbox.alert(I18n.t('generic_error'));\n          self.set('loading', false);\n        });\n      },\n\n      forEachPerformed: function(operation, cb) {\n        var self = this;\n        this.perform(operation).then(function (topics) {\n          if (topics) {\n            topics.forEach(cb);\n            self.send('closeModal');\n          }\n        });\n      },\n\n      performAndRefresh: function(operation) {\n        var self = this;\n        return this.perform(operation).then(function() {\n          self.get('controllers.discovery/topics').send('refresh');\n          self.send('closeModal');\n        });\n      },\n\n      actions: {\n        showChangeCategory: function() {\n          this.send('changeBulkTemplate', 'modal/bulk_change_category');\n          this.set('controllers.modal.modalClass', 'topic-bulk-actions-modal full');\n        },\n\n        showNotificationLevel: function() {\n          this.send('changeBulkTemplate', 'modal/bulk_notification_level');\n        },\n\n        deleteTopics: function() {\n          this.performAndRefresh({type: 'delete'});\n        },\n\n        closeTopics: function() {\n          this.forEachPerformed({type: 'close'}, function(t) {\n            t.set('closed', true);\n          });\n        },\n\n        changeCategory: function() {\n          var categoryId = parseInt(this.get('newCategoryId'), 10) || 0,\n              category = Discourse.Category.findById(categoryId),\n              self = this;\n          this.perform({type: 'change_category', category_id: categoryId}).then(function(topics) {\n            topics.forEach(function(t) {\n              t.set('category', category);\n            });\n            self.get('controllers.discovery/topics').send('refresh');\n            self.send('closeModal');\n          });\n        },\n\n        resetRead: function() {\n          this.performAndRefresh({ type: 'reset_read' });\n        }\n      }\n    });\n  });";
define("discourse/controllers/topic-entrance", 
  ["exports"],
  function(__exports__) {
    "use strict";
    function entranceDate(dt, showTime) {
      var today = new Date();

      if (dt.toDateString() === today.toDateString()) {
        return moment(dt).format(I18n.t("dates.time"));
      }

      if (dt.getYear() === today.getYear()) {
        // No year
        return moment(dt).format(
          showTime ? I18n.t("dates.long_date_without_year_with_linebreak") : I18n.t("dates.long_no_year_no_time")
        );
      }

      return moment(dt).format(
        showTime ? I18n.t('dates.long_date_with_year_with_linebreak') : I18n.t('dates.long_date_with_year_without_time')
      );
    }

    __exports__["default"] = Ember.ObjectController.extend({
      position: null,

      createdDate: function() {
        return new Date(this.get('model.created_at'));
      }.property('model.created_at'),

      bumpedDate: function() {
        return new Date(this.get('model.bumped_at'));
      }.property('model.bumped_at'),

      showTime: function() {
        var diffMs = this.get('bumpedDate').getTime() - this.get('createdDate').getTime();
        return diffMs < (1000 * 60 * 60 * 24 * 2);
      }.property('createdDate', 'bumpedDate'),

      topDate: function() {
        return entranceDate(this.get('createdDate'), this.get('showTime'));
      }.property('createdDate'),

      bottomDate: function() {
        return entranceDate(this.get('bumpedDate'), this.get('showTime'));
      }.property('bumpedDate'),

      actions: {
        show: function(data) {
          // Show the chooser but only if the model changes
          if (this.get('model') !== data.topic) {
            this.set('model', data.topic);
            this.set('position', data.position);
          }
        },

        enterTop: function() {
          Discourse.URL.routeTo(this.get('url'));
        },

        enterBottom: function() {
          Discourse.URL.routeTo(this.get('lastPostUrl'));
        }
      }
    });
  });

Discourse.TopicEntranceController = require('discourse/controllers/topic-entrance').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/topic-entrance.js'] = "define(\"discourse/controllers/topic-entrance\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    function entranceDate(dt, showTime) {\n      var today = new Date();\n\n      if (dt.toDateString() === today.toDateString()) {\n        return moment(dt).format(I18n.t(\"dates.time\"));\n      }\n\n      if (dt.getYear() === today.getYear()) {\n        // No year\n        return moment(dt).format(\n          showTime ? I18n.t(\"dates.long_date_without_year_with_linebreak\") : I18n.t(\"dates.long_no_year_no_time\")\n        );\n      }\n\n      return moment(dt).format(\n        showTime ? I18n.t('dates.long_date_with_year_with_linebreak') : I18n.t('dates.long_date_with_year_without_time')\n      );\n    }\n\n    __exports__[\"default\"] = Ember.ObjectController.extend({\n      position: null,\n\n      createdDate: function() {\n        return new Date(this.get('model.created_at'));\n      }.property('model.created_at'),\n\n      bumpedDate: function() {\n        return new Date(this.get('model.bumped_at'));\n      }.property('model.bumped_at'),\n\n      showTime: function() {\n        var diffMs = this.get('bumpedDate').getTime() - this.get('createdDate').getTime();\n        return diffMs \u003c (1000 * 60 * 60 * 24 * 2);\n      }.property('createdDate', 'bumpedDate'),\n\n      topDate: function() {\n        return entranceDate(this.get('createdDate'), this.get('showTime'));\n      }.property('createdDate'),\n\n      bottomDate: function() {\n        return entranceDate(this.get('bumpedDate'), this.get('showTime'));\n      }.property('bumpedDate'),\n\n      actions: {\n        show: function(data) {\n          // Show the chooser but only if the model changes\n          if (this.get('model') !== data.topic) {\n            this.set('model', data.topic);\n            this.set('position', data.position);\n          }\n        },\n\n        enterTop: function() {\n          Discourse.URL.routeTo(this.get('url'));\n        },\n\n        enterBottom: function() {\n          Discourse.URL.routeTo(this.get('lastPostUrl'));\n        }\n      }\n    });\n  });";
define("discourse/controllers/topic-list-item", 
  ["discourse/controllers/object","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var ObjectController = __dependency1__["default"];

    /**
      Handles displaying of a topic as a list item

      @class TopicListItemController
      @extends ObjectController
      @namespace Discourse
      @module Discourse
    **/
    __exports__["default"] = Ember.ObjectController.extend({
      needs: ['discovery/topics'],

      canStar: Em.computed.alias('controllers.discovery/topics.currentUser.id'),
      bulkSelectEnabled: Em.computed.alias('controllers.discovery/topics.bulkSelectEnabled'),

      checked: function(key, value) {
        var selected = this.get('controllers.discovery/topics.selected'),
            topic = this.get('model');

        if (arguments.length > 1) {
          if (value) {
            selected.addObject(topic);
          } else {
            selected.removeObject(topic);
          }
        }
        return selected.contains(topic);
      }.property('controllers.discovery/topics.selected.length'),

      titleColSpan: function() {
        // Uncategorized pinned topics will span the title and category column in the topic list.
        return (!this.get('controllers.discovery/topics.hideCategory') &&
                 this.get('model.isPinnedUncategorized') ? 2 : 1);
      }.property('controllers.discovery/topics.hideCategory', 'model.isPinnedUncategorized'),

      hideCategory: function() {
        return this.get('controllers.discovery/topics.hideCategory') || this.get('titleColSpan') > 1;
      }.property('controllers.discovery/topics.hideCategory', 'titleColSpan'),

      actions: {
        toggleStar: function() {
          this.get('model').toggleStar();
        }
      }
    });
  });

Discourse.TopicListItemController = require('discourse/controllers/topic-list-item').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/topic-list-item.js'] = "define(\"discourse/controllers/topic-list-item\", \n  [\"discourse/controllers/object\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ObjectController = __dependency1__[\"default\"];\n\n    /**\n      Handles displaying of a topic as a list item\n\n      @class TopicListItemController\n      @extends ObjectController\n      @namespace Discourse\n      @module Discourse\n    **/\n    __exports__[\"default\"] = Ember.ObjectController.extend({\n      needs: ['discovery/topics'],\n\n      canStar: Em.computed.alias('controllers.discovery/topics.currentUser.id'),\n      bulkSelectEnabled: Em.computed.alias('controllers.discovery/topics.bulkSelectEnabled'),\n\n      checked: function(key, value) {\n        var selected = this.get('controllers.discovery/topics.selected'),\n            topic = this.get('model');\n\n        if (arguments.length \u003e 1) {\n          if (value) {\n            selected.addObject(topic);\n          } else {\n            selected.removeObject(topic);\n          }\n        }\n        return selected.contains(topic);\n      }.property('controllers.discovery/topics.selected.length'),\n\n      titleColSpan: function() {\n        // Uncategorized pinned topics will span the title and category column in the topic list.\n        return (!this.get('controllers.discovery/topics.hideCategory') \u0026\u0026\n                 this.get('model.isPinnedUncategorized') ? 2 : 1);\n      }.property('controllers.discovery/topics.hideCategory', 'model.isPinnedUncategorized'),\n\n      hideCategory: function() {\n        return this.get('controllers.discovery/topics.hideCategory') || this.get('titleColSpan') \u003e 1;\n      }.property('controllers.discovery/topics.hideCategory', 'titleColSpan'),\n\n      actions: {\n        toggleStar: function() {\n          this.get('model').toggleStar();\n        }\n      }\n    });\n  });";
define("discourse/controllers/topic-progress", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.ObjectController.extend({
      needs: ['topic'],
      progressPosition: null,
      expanded: false,

      actions: {
        toggleExpansion: function(opts) {
          this.toggleProperty('expanded');
          if (this.get('expanded')) {
            this.set('toPostIndex', this.get('progressPosition'));
            if(opts && opts.highlight){
              // TODO: somehow move to view?
              Em.run.next(function(){
                $('.jump-form input').select().focus();
              });
            }
          }
        },

        jumpPost: function() {
          var postIndex = parseInt(this.get('toPostIndex'), 10);

          // Validate the post index first
          if (isNaN(postIndex) || postIndex < 1) {
            postIndex = 1;
          }
          if (postIndex > this.get('postStream.filteredPostsCount')) {
            postIndex = this.get('postStream.filteredPostsCount');
          }
          this.set('toPostIndex', postIndex);
          var stream = this.get('postStream'),
              idStream = stream.get('stream'),
              postId = idStream[postIndex - 1];

          if (!postId) {
            Em.Logger.warn("jump-post code broken - requested an index outside the stream array");
            return;
          }

          var post = stream.findLoadedPost(postId);
          if (post) {
            this.jumpTo(this.get('model').urlForPostNumber(post.get('post_number')));
          } else {
            var self = this;
            // need to load it
            stream.findPostsByIds([postId]).then(function(arr) {
              post = arr[0];
              self.jumpTo(self.get('model').urlForPostNumber(post.get('post_number')));
            });
          }
        },

        jumpTop: function() {
          this.jumpTo(this.get('firstPostUrl'));
        },

        jumpBottom: function() {
          this.jumpTo(this.get('lastPostUrl'));
        }
      },

      // Route and close the expansion
      jumpTo: function(url) {
        this.set('expanded', false);
        Discourse.URL.routeTo(url);
      },

      streamPercentage: function() {
        if (!this.get('postStream.loaded')) { return 0; }
        if (this.get('postStream.highest_post_number') === 0) { return 0; }
        var perc = this.get('progressPosition') / this.get('postStream.filteredPostsCount');
        return (perc > 1.0) ? 1.0 : perc;
      }.property('postStream.loaded', 'progressPosition', 'postStream.filteredPostsCount'),

      jumpTopDisabled: function() {
        return this.get('progressPosition') <= 3;
      }.property('progressPosition'),

      filteredPostCountChanged: function(){
        if(this.get('postStream.filteredPostsCount') < this.get('progressPosition')){
          this.set('progressPosition', this.get('postStream.filteredPostsCount'));
        }
      }.observes('postStream.filteredPostsCount'),

      jumpBottomDisabled: function() {
        return this.get('progressPosition') >= this.get('postStream.filteredPostsCount') ||
               this.get('progressPosition') >= this.get('highest_post_number');
      }.property('postStream.filteredPostsCount', 'highest_post_number', 'progressPosition'),

      hideProgress: function() {
        if (!this.get('postStream.loaded')) return true;
        if (!this.get('currentPost')) return true;
        if (this.get('postStream.filteredPostsCount') < 2) return true;
        return false;
      }.property('postStream.loaded', 'currentPost', 'postStream.filteredPostsCount'),

      hugeNumberOfPosts: function() {
        return (this.get('postStream.filteredPostsCount') >= Discourse.SiteSettings.short_progress_text_threshold);
      }.property('highest_post_number'),

      jumpToBottomTitle: function() {
        if (this.get('hugeNumberOfPosts')) {
          return I18n.t('topic.progress.jump_bottom_with_number', {post_number: this.get('highest_post_number')});
        } else {
          return I18n.t('topic.progress.jump_bottom');
        }
      }.property('hugeNumberOfPosts', 'highest_post_number')

    });
  });

Discourse.TopicProgressController = require('discourse/controllers/topic-progress').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/topic-progress.js'] = "define(\"discourse/controllers/topic-progress\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.ObjectController.extend({\n      needs: ['topic'],\n      progressPosition: null,\n      expanded: false,\n\n      actions: {\n        toggleExpansion: function(opts) {\n          this.toggleProperty('expanded');\n          if (this.get('expanded')) {\n            this.set('toPostIndex', this.get('progressPosition'));\n            if(opts \u0026\u0026 opts.highlight){\n              // TODO: somehow move to view?\n              Em.run.next(function(){\n                $('.jump-form input').select().focus();\n              });\n            }\n          }\n        },\n\n        jumpPost: function() {\n          var postIndex = parseInt(this.get('toPostIndex'), 10);\n\n          // Validate the post index first\n          if (isNaN(postIndex) || postIndex \u003c 1) {\n            postIndex = 1;\n          }\n          if (postIndex \u003e this.get('postStream.filteredPostsCount')) {\n            postIndex = this.get('postStream.filteredPostsCount');\n          }\n          this.set('toPostIndex', postIndex);\n          var stream = this.get('postStream'),\n              idStream = stream.get('stream'),\n              postId = idStream[postIndex - 1];\n\n          if (!postId) {\n            Em.Logger.warn(\"jump-post code broken - requested an index outside the stream array\");\n            return;\n          }\n\n          var post = stream.findLoadedPost(postId);\n          if (post) {\n            this.jumpTo(this.get('model').urlForPostNumber(post.get('post_number')));\n          } else {\n            var self = this;\n            // need to load it\n            stream.findPostsByIds([postId]).then(function(arr) {\n              post = arr[0];\n              self.jumpTo(self.get('model').urlForPostNumber(post.get('post_number')));\n            });\n          }\n        },\n\n        jumpTop: function() {\n          this.jumpTo(this.get('firstPostUrl'));\n        },\n\n        jumpBottom: function() {\n          this.jumpTo(this.get('lastPostUrl'));\n        }\n      },\n\n      // Route and close the expansion\n      jumpTo: function(url) {\n        this.set('expanded', false);\n        Discourse.URL.routeTo(url);\n      },\n\n      streamPercentage: function() {\n        if (!this.get('postStream.loaded')) { return 0; }\n        if (this.get('postStream.highest_post_number') === 0) { return 0; }\n        var perc = this.get('progressPosition') / this.get('postStream.filteredPostsCount');\n        return (perc \u003e 1.0) ? 1.0 : perc;\n      }.property('postStream.loaded', 'progressPosition', 'postStream.filteredPostsCount'),\n\n      jumpTopDisabled: function() {\n        return this.get('progressPosition') \u003c= 3;\n      }.property('progressPosition'),\n\n      filteredPostCountChanged: function(){\n        if(this.get('postStream.filteredPostsCount') \u003c this.get('progressPosition')){\n          this.set('progressPosition', this.get('postStream.filteredPostsCount'));\n        }\n      }.observes('postStream.filteredPostsCount'),\n\n      jumpBottomDisabled: function() {\n        return this.get('progressPosition') \u003e= this.get('postStream.filteredPostsCount') ||\n               this.get('progressPosition') \u003e= this.get('highest_post_number');\n      }.property('postStream.filteredPostsCount', 'highest_post_number', 'progressPosition'),\n\n      hideProgress: function() {\n        if (!this.get('postStream.loaded')) return true;\n        if (!this.get('currentPost')) return true;\n        if (this.get('postStream.filteredPostsCount') \u003c 2) return true;\n        return false;\n      }.property('postStream.loaded', 'currentPost', 'postStream.filteredPostsCount'),\n\n      hugeNumberOfPosts: function() {\n        return (this.get('postStream.filteredPostsCount') \u003e= Discourse.SiteSettings.short_progress_text_threshold);\n      }.property('highest_post_number'),\n\n      jumpToBottomTitle: function() {\n        if (this.get('hugeNumberOfPosts')) {\n          return I18n.t('topic.progress.jump_bottom_with_number', {post_number: this.get('highest_post_number')});\n        } else {\n          return I18n.t('topic.progress.jump_bottom');\n        }\n      }.property('hugeNumberOfPosts', 'highest_post_number')\n\n    });\n  });";
define("discourse/controllers/topic", 
  ["discourse/controllers/object","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var ObjectController = __dependency1__["default"];

    __exports__["default"] = ObjectController.extend(Discourse.SelectedPostsCount, {
      multiSelect: false,
      needs: ['header', 'modal', 'composer', 'quote-button', 'search', 'topic-progress'],
      allPostsSelected: false,
      editingTopic: false,
      selectedPosts: null,
      selectedReplies: null,
      queryParams: ['filter', 'username_filters', 'show_deleted'],

      maxTitleLength: Discourse.computed.setting('max_topic_title_length'),

      contextChanged: function(){
        this.set('controllers.search.searchContext', this.get('model.searchContext'));
      }.observes('topic'),

      termChanged: function(){
        var dropdown = this.get('controllers.header.visibleDropdown');
        var term = this.get('controllers.search.term');

        if(dropdown === 'search-dropdown' && term){
          this.set('searchHighlight', term);
        } else {
          if(this.get('searchHighlight')){
            this.set('searchHighlight', null);
          }
        }

      }.observes('controllers.search.term', 'controllers.header.visibleDropdown'),

      filter: function(key, value) {
        if (arguments.length > 1) {
          this.set('postStream.summary', value === "summary");
        }
        return this.get('postStream.summary') ? "summary" : null;
      }.property('postStream.summary'),

      username_filters: Discourse.computed.queryAlias('postStream.streamFilters.username_filters'),

      init: function() {
        this._super();
        this.set('selectedPosts', []);
        this.set('selectedReplies', []);
      },

      actions: {
        // Post related methods
        replyToPost: function(post) {
          var composerController = this.get('controllers.composer'),
              quoteController = this.get('controllers.quote-button'),
              quotedText = Discourse.Quote.build(quoteController.get('post'), quoteController.get('buffer')),
              topic = post ? post.get('topic') : this.get('model');

          quoteController.set('buffer', '');

          if (composerController.get('content.topic.id') === topic.get('id') &&
              composerController.get('content.action') === Discourse.Composer.REPLY) {
            composerController.set('content.post', post);
            composerController.set('content.composeState', Discourse.Composer.OPEN);
            composerController.appendText(quotedText);
          } else {

            var opts = {
              action: Discourse.Composer.REPLY,
              draftKey: topic.get('draft_key'),
              draftSequence: topic.get('draft_sequence')
            };

            if(post && post.get("post_number") !== 1){
              opts.post = post;
            } else {
              opts.topic = topic;
            }

            composerController.open(opts).then(function() {
              composerController.appendText(quotedText);
            });
          }
          return false;
        },

        toggleLike: function(post) {
          var likeAction = post.get('actionByName.like');
          if (likeAction && likeAction.get('canToggle')) {
            likeAction.toggle();
          }
        },

        recoverPost: function(post) {
          // Recovering the first post recovers the topic instead
          if (post.get('post_number') === 1) {
            this.recoverTopic();
            return;
          }
          post.recover();
        },

        deletePost: function(post) {

          // Deleting the first post deletes the topic
          if (post.get('post_number') === 1) {
            this.deleteTopic();
            return;
          }

          var user = Discourse.User.current(),
              replyCount = post.get('reply_count'),
              self = this;

          // If the user is staff and the post has replies, ask if they want to delete replies too.
          if (user.get('staff') && replyCount > 0) {
            bootbox.dialog(I18n.t("post.controls.delete_replies.confirm", {count: replyCount}), [
              {label: I18n.t("cancel"),
               'class': 'btn-danger rightg'},
              {label: I18n.t("post.controls.delete_replies.no_value"),
                callback: function() {
                  post.destroy(user);
                }
              },
              {label: I18n.t("post.controls.delete_replies.yes_value"),
               'class': 'btn-primary',
                callback: function() {
                  Discourse.Post.deleteMany([post], [post]);
                  self.get('postStream.posts').forEach(function (p) {
                    if (p === post || p.get('reply_to_post_number') === post.get('post_number')) {
                      p.setDeletedState(user);
                    }
                  });
                }
              }
            ]);
          } else {
            post.destroy(user).then(null, function(e) {
              post.undoDeleteState();
              var response = $.parseJSON(e.responseText);
              if (response && response.errors) {
                bootbox.alert(response.errors[0]);
              } else {
                bootbox.alert(I18n.t('generic_error'));
              }
            });
          }
        },

        editPost: function(post) {
          if (!Discourse.User.current()) {
            return bootbox.alert(I18n.t('post.controls.edit_anonymous'));
          }

          this.get('controllers.composer').open({
            post: post,
            action: Discourse.Composer.EDIT,
            draftKey: post.get('topic.draft_key'),
            draftSequence: post.get('topic.draft_sequence')
          });
        },

        toggleBookmark: function(post) {
          if (!Discourse.User.current()) {
            alert(I18n.t("bookmarks.not_bookmarked"));
            return;
          }
          post.toggleProperty('bookmarked');
          return false;
        },

        jumpTop: function() {
          this.get('controllers.topic-progress').send('jumpTop');
        },

        selectAll: function() {
          var posts = this.get('postStream.posts'),
              selectedPosts = this.get('selectedPosts');
          if (posts) {
            selectedPosts.addObjects(posts);
          }
          this.set('allPostsSelected', true);
        },

        deselectAll: function() {
          this.get('selectedPosts').clear();
          this.get('selectedReplies').clear();
          this.set('allPostsSelected', false);
        },

        /**
          Toggle a participant for filtering

          @method toggleParticipant
        **/
        toggleParticipant: function(user) {
          this.get('postStream').toggleParticipant(Em.get(user, 'username'));
        },

        editTopic: function() {
          if (!this.get('details.can_edit')) return false;

          this.setProperties({
            editingTopic: true,
            newTitle: this.get('title'),
            newCategoryId: this.get('category_id')
          });
          return false;
        },

        // close editing mode
        cancelEditingTopic: function() {
          this.set('editingTopic', false);
        },

        toggleMultiSelect: function() {
          this.toggleProperty('multiSelect');
        },

        finishedEditingTopic: function() {
          if (this.get('editingTopic')) {

            var topic = this.get('model');

            // Topic title hasn't been sanitized yet, so the template shouldn't trust it.
            this.set('topicSaving', true);

            // manually update the titles & category
            var backup = topic.setPropertiesBackup({
              title: this.get('newTitle'),
              category_id: parseInt(this.get('newCategoryId'), 10),
              fancy_title: this.get('newTitle')
            });

            // save the modifications
            var self = this;
            topic.save().then(function(result){
              // update the title if it has been changed (cleaned up) server-side
              topic.setProperties(Em.getProperties(result.basic_topic, 'title', 'fancy_title'));
              self.set('topicSaving', false);
            }, function(error) {
              self.setProperties({ editingTopic: true, topicSaving: false });
              topic.setProperties(backup);
              if (error && error.responseText) {
                bootbox.alert($.parseJSON(error.responseText).errors[0]);
              } else {
                bootbox.alert(I18n.t('generic_error'));
              }
            });

            // close editing mode
            self.set('editingTopic', false);
          }
        },

        toggledSelectedPost: function(post) {
          this.performTogglePost(post);
        },

        toggledSelectedPostReplies: function(post) {
          var selectedReplies = this.get('selectedReplies');
          if (this.performTogglePost(post)) {
            selectedReplies.addObject(post);
          } else {
            selectedReplies.removeObject(post);
          }
        },

        deleteSelected: function() {
          var self = this;
          bootbox.confirm(I18n.t("post.delete.confirm", { count: this.get('selectedPostsCount')}), function(result) {
            if (result) {

              // If all posts are selected, it's the same thing as deleting the topic
              if (self.get('allPostsSelected')) {
                return self.deleteTopic();
              }

              var selectedPosts = self.get('selectedPosts'),
                  selectedReplies = self.get('selectedReplies'),
                  postStream = self.get('postStream'),
                  toRemove = [];

              Discourse.Post.deleteMany(selectedPosts, selectedReplies);
              postStream.get('posts').forEach(function (p) {
                if (self.postSelected(p)) { toRemove.addObject(p); }
              });

              postStream.removePosts(toRemove);
              self.send('toggleMultiSelect');
            }
          });
        },

        expandHidden: function(post) {
          post.expandHidden();
        },

        toggleVisibility: function() {
          this.get('content').toggleStatus('visible');
        },

        toggleClosed: function() {
          this.get('content').toggleStatus('closed');
        },

        makeBanner: function() {
          this.get('content').makeBanner();
        },

        removeBanner: function() {
          this.get('content').removeBanner();
        },

        togglePinned: function() {
          // Note that this is different than clearPin
          this.get('content').setStatus('pinned', this.get('pinned_at') ? false : true);
        },

        togglePinnedGlobally: function() {
          // Note that this is different than clearPin
          this.get('content').setStatus('pinned_globally', this.get('pinned_at') ? false : true);
        },

        toggleArchived: function() {
          this.get('content').toggleStatus('archived');
        },

        // Toggle the star on the topic
        toggleStar: function() {
          this.get('content').toggleStar();
        },

        /**
          Clears the pin from a topic for the currently logged in user

          @method clearPin
        **/
        clearPin: function() {
          this.get('content').clearPin();
        },

        replyAsNewTopic: function(post) {
          var composerController = this.get('controllers.composer'),
              quoteController = this.get('controllers.quote-button'),
              quotedText = Discourse.Quote.build(quoteController.get('post'), quoteController.get('buffer')),
              self = this;

          quoteController.deselectText();

          composerController.open({
            action: Discourse.Composer.CREATE_TOPIC,
            draftKey: Discourse.Composer.REPLY_AS_NEW_TOPIC_KEY
          }).then(function() {
            return Em.isEmpty(quotedText) ? Discourse.Post.loadQuote(post.get('id')) : quotedText;
          }).then(function(q) {
            var postUrl = "" + location.protocol + "//" + location.host + (post.get('url')),
                postLink = "[" + self.get('title') + "](" + postUrl + ")";
            composerController.appendText(I18n.t("post.continue_discussion", { postLink: postLink }) + "\n\n" + q);
          });
        },

        expandFirstPost: function(post) {
          var self = this;
          this.set('loadingExpanded', true);
          post.expand().then(function() {
            self.set('firstPostExpanded', true);
          }).catch(function(error) {
            bootbox.alert($.parseJSON(error.responseText).errors);
          }).finally(function() {
            self.set('loadingExpanded', false);
          });
        },

        retryLoading: function() {
          var self = this;
          self.set('retrying', true);
          this.get('postStream').refresh().then(function() {
            self.set('retrying', false);
          }, function() {
            self.set('retrying', false);
          });
        },

        toggleWiki: function(post) {
          post.toggleProperty('wiki');
        }
      },

      showExpandButton: function() {
        var post = this.get('post');
        return post.get('post_number') === 1 && post.get('topic.expandable_first_post');
      }.property(),

      canMergeTopic: function() {
        if (!this.get('details.can_move_posts')) return false;
        return (this.get('selectedPostsCount') > 0);
      }.property('selectedPostsCount'),

      canSplitTopic: function() {
        if (!this.get('details.can_move_posts')) return false;
        if (this.get('allPostsSelected')) return false;
        return (this.get('selectedPostsCount') > 0);
      }.property('selectedPostsCount'),

      canChangeOwner: function() {
        if (!Discourse.User.current() || !Discourse.User.current().admin) return false;
        return !!this.get('selectedPostsUsername');
      }.property('selectedPostsUsername'),

      categories: function() {
        return Discourse.Category.list();
      }.property(),

      canSelectAll: Em.computed.not('allPostsSelected'),

      canDeselectAll: function () {
        if (this.get('selectedPostsCount') > 0) return true;
        if (this.get('allPostsSelected')) return true;
      }.property('selectedPostsCount', 'allPostsSelected'),

      canDeleteSelected: function() {
        var selectedPosts = this.get('selectedPosts');

        if (this.get('allPostsSelected')) return true;
        if (this.get('selectedPostsCount') === 0) return false;

        var canDelete = true;
        selectedPosts.forEach(function(p) {
          if (!p.get('can_delete')) {
            canDelete = false;
            return false;
          }
        });
        return canDelete;
      }.property('selectedPostsCount'),

      hasError: Ember.computed.or('notFoundHtml', 'message'),

      multiSelectChanged: function() {
        // Deselect all posts when multi select is turned off
        if (!this.get('multiSelect')) {
          this.send('deselectAll');
        }
      }.observes('multiSelect'),

      deselectPost: function(post) {
        this.get('selectedPosts').removeObject(post);

        var selectedReplies = this.get('selectedReplies');
        selectedReplies.removeObject(post);

        var selectedReply = selectedReplies.findProperty('post_number', post.get('reply_to_post_number'));
        if (selectedReply) { selectedReplies.removeObject(selectedReply); }

        this.set('allPostsSelected', false);
      },

      postSelected: function(post) {
        if (this.get('allPostsSelected')) { return true; }
        if (this.get('selectedPosts').contains(post)) { return true; }
        if (this.get('selectedReplies').findProperty('post_number', post.get('reply_to_post_number'))) { return true; }

        return false;
      },

      showStarButton: function() {
        return Discourse.User.current() && !this.get('isPrivateMessage');
      }.property('isPrivateMessage'),

      loadingHTML: function() {
        return "<div class='spinner'>" + I18n.t('loading') + "</div>";
      }.property(),

      recoverTopic: function() {
        this.get('content').recover();
      },

      deleteTopic: function() {
        this.unsubscribe();
        this.get('content').destroy(Discourse.User.current());
      },

      // Receive notifications for this topic
      subscribe: function() {

        // Unsubscribe before subscribing again
        this.unsubscribe();

        var bus = Discourse.MessageBus;

        var topicController = this;
        bus.subscribe("/topic/" + (this.get('id')), function(data) {
          var topic = topicController.get('model');
          if (data.notification_level_change) {
            topic.set('details.notification_level', data.notification_level_change);
            topic.set('details.notifications_reason_id', data.notifications_reason_id);
            return;
          }

          var postStream = topicController.get('postStream');
          if (data.type === "revised" || data.type === "acted") {
            // TODO we could update less data for "acted"
            // (only post actions)
            postStream.triggerChangedPost(data.id, data.updated_at);
            return;
          }

          if (data.type === "deleted") {
            postStream.triggerDeletedPost(data.id, data.post_number);
            return;
          }

          if (data.type === "recovered") {
            postStream.triggerRecoveredPost(data.id, data.post_number);
            return;
          }

          if (data.type === "created") {
            postStream.triggerNewPostInStream(data.id);
            return;
          }

          // log a warning
          Em.Logger.warn("unknown topic bus message type", data);
        });
      },

      unsubscribe: function() {
        var topicId = this.get('content.id');
        if (!topicId) return;

        // there is a condition where the view never calls unsubscribe, navigate to a topic from a topic
        Discourse.MessageBus.unsubscribe('/topic/*');
      },

      // Topic related
      reply: function() {
        this.replyToPost();
      },

      performTogglePost: function(post) {
        var selectedPosts = this.get('selectedPosts');
        if (this.postSelected(post)) {
          this.deselectPost(post);
          return false;
        } else {
          selectedPosts.addObject(post);

          // If the user manually selects all posts, all posts are selected
          if (selectedPosts.length === this.get('posts_count')) {
            this.set('allPostsSelected', true);
          }
          return true;
        }
      },

      // If our current post is changed, notify the router
      _currentPostChanged: function() {
        var currentPost = this.get('currentPost');
        if (currentPost) {
          this.send('postChangedRoute', currentPost);
        }
      }.observes('currentPost'),

      readPosts: function(topicId, postNumbers) {
        var postStream = this.get('postStream');

        if(this.get('postStream.topic.id') === topicId){
          _.each(postStream.get('posts'), function(post){
            // optimise heavy loop
            // TODO identity map for postNumber
            if(_.include(postNumbers,post.post_number) && !post.read){
              post.set("read", true);
            }
          });

          var max = _.max(postNumbers);
          if(max > this.get('last_read_post_number')){
            this.set('last_read_post_number', max);
          }
        }
      },

      /**
        Called the the topmost visible post on the page changes.

        @method topVisibleChanged
        @params {Discourse.Post} post that is at the top
      **/
      topVisibleChanged: function(post) {
        if (!post) { return; }

        var postStream = this.get('postStream'),
            firstLoadedPost = postStream.get('firstLoadedPost');

        this.set('currentPost', post.get('post_number'));

        if (post.get('post_number') === 1) { return; }

        if (firstLoadedPost && firstLoadedPost === post) {
          // Note: jQuery shouldn't be done in a controller, but how else can we
          // trigger a scroll after a promise resolves in a controller? We need
          // to do this to preserve upwards infinte scrolling.
          var $body = $('body'),
              $elem = $('#post-cloak-' + post.get('post_number')),
              distToElement = $body.scrollTop() - $elem.position().top;

          postStream.prependMore().then(function() {
            Em.run.next(function () {
              $elem = $('#post-cloak-' + post.get('post_number'));

              // Quickly going back might mean the element is destroyed
              var position = $elem.position();
              if (position && position.top) {
                $('html, body').scrollTop(position.top + distToElement);
              }
            });
          });
        }
      },

      /**
        Called the the bottommost visible post on the page changes.

        @method bottomVisibleChanged
        @params {Discourse.Post} post that is at the bottom
      **/
      bottomVisibleChanged: function(post) {
        if (!post) { return; }

        var postStream = this.get('postStream'),
            lastLoadedPost = postStream.get('lastLoadedPost');

        this.set('controllers.topic-progress.progressPosition', postStream.progressIndexOfPost(post));

        if (lastLoadedPost && lastLoadedPost === post) {
          postStream.appendMore();
        }
      }

    });
  });

Discourse.TopicController = require('discourse/controllers/topic').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/topic.js'] = "define(\"discourse/controllers/topic\", \n  [\"discourse/controllers/object\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ObjectController = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = ObjectController.extend(Discourse.SelectedPostsCount, {\n      multiSelect: false,\n      needs: ['header', 'modal', 'composer', 'quote-button', 'search', 'topic-progress'],\n      allPostsSelected: false,\n      editingTopic: false,\n      selectedPosts: null,\n      selectedReplies: null,\n      queryParams: ['filter', 'username_filters', 'show_deleted'],\n\n      maxTitleLength: Discourse.computed.setting('max_topic_title_length'),\n\n      contextChanged: function(){\n        this.set('controllers.search.searchContext', this.get('model.searchContext'));\n      }.observes('topic'),\n\n      termChanged: function(){\n        var dropdown = this.get('controllers.header.visibleDropdown');\n        var term = this.get('controllers.search.term');\n\n        if(dropdown === 'search-dropdown' \u0026\u0026 term){\n          this.set('searchHighlight', term);\n        } else {\n          if(this.get('searchHighlight')){\n            this.set('searchHighlight', null);\n          }\n        }\n\n      }.observes('controllers.search.term', 'controllers.header.visibleDropdown'),\n\n      filter: function(key, value) {\n        if (arguments.length \u003e 1) {\n          this.set('postStream.summary', value === \"summary\");\n        }\n        return this.get('postStream.summary') ? \"summary\" : null;\n      }.property('postStream.summary'),\n\n      username_filters: Discourse.computed.queryAlias('postStream.streamFilters.username_filters'),\n\n      init: function() {\n        this._super();\n        this.set('selectedPosts', []);\n        this.set('selectedReplies', []);\n      },\n\n      actions: {\n        // Post related methods\n        replyToPost: function(post) {\n          var composerController = this.get('controllers.composer'),\n              quoteController = this.get('controllers.quote-button'),\n              quotedText = Discourse.Quote.build(quoteController.get('post'), quoteController.get('buffer')),\n              topic = post ? post.get('topic') : this.get('model');\n\n          quoteController.set('buffer', '');\n\n          if (composerController.get('content.topic.id') === topic.get('id') \u0026\u0026\n              composerController.get('content.action') === Discourse.Composer.REPLY) {\n            composerController.set('content.post', post);\n            composerController.set('content.composeState', Discourse.Composer.OPEN);\n            composerController.appendText(quotedText);\n          } else {\n\n            var opts = {\n              action: Discourse.Composer.REPLY,\n              draftKey: topic.get('draft_key'),\n              draftSequence: topic.get('draft_sequence')\n            };\n\n            if(post \u0026\u0026 post.get(\"post_number\") !== 1){\n              opts.post = post;\n            } else {\n              opts.topic = topic;\n            }\n\n            composerController.open(opts).then(function() {\n              composerController.appendText(quotedText);\n            });\n          }\n          return false;\n        },\n\n        toggleLike: function(post) {\n          var likeAction = post.get('actionByName.like');\n          if (likeAction \u0026\u0026 likeAction.get('canToggle')) {\n            likeAction.toggle();\n          }\n        },\n\n        recoverPost: function(post) {\n          // Recovering the first post recovers the topic instead\n          if (post.get('post_number') === 1) {\n            this.recoverTopic();\n            return;\n          }\n          post.recover();\n        },\n\n        deletePost: function(post) {\n\n          // Deleting the first post deletes the topic\n          if (post.get('post_number') === 1) {\n            this.deleteTopic();\n            return;\n          }\n\n          var user = Discourse.User.current(),\n              replyCount = post.get('reply_count'),\n              self = this;\n\n          // If the user is staff and the post has replies, ask if they want to delete replies too.\n          if (user.get('staff') \u0026\u0026 replyCount \u003e 0) {\n            bootbox.dialog(I18n.t(\"post.controls.delete_replies.confirm\", {count: replyCount}), [\n              {label: I18n.t(\"cancel\"),\n               'class': 'btn-danger rightg'},\n              {label: I18n.t(\"post.controls.delete_replies.no_value\"),\n                callback: function() {\n                  post.destroy(user);\n                }\n              },\n              {label: I18n.t(\"post.controls.delete_replies.yes_value\"),\n               'class': 'btn-primary',\n                callback: function() {\n                  Discourse.Post.deleteMany([post], [post]);\n                  self.get('postStream.posts').forEach(function (p) {\n                    if (p === post || p.get('reply_to_post_number') === post.get('post_number')) {\n                      p.setDeletedState(user);\n                    }\n                  });\n                }\n              }\n            ]);\n          } else {\n            post.destroy(user).then(null, function(e) {\n              post.undoDeleteState();\n              var response = $.parseJSON(e.responseText);\n              if (response \u0026\u0026 response.errors) {\n                bootbox.alert(response.errors[0]);\n              } else {\n                bootbox.alert(I18n.t('generic_error'));\n              }\n            });\n          }\n        },\n\n        editPost: function(post) {\n          if (!Discourse.User.current()) {\n            return bootbox.alert(I18n.t('post.controls.edit_anonymous'));\n          }\n\n          this.get('controllers.composer').open({\n            post: post,\n            action: Discourse.Composer.EDIT,\n            draftKey: post.get('topic.draft_key'),\n            draftSequence: post.get('topic.draft_sequence')\n          });\n        },\n\n        toggleBookmark: function(post) {\n          if (!Discourse.User.current()) {\n            alert(I18n.t(\"bookmarks.not_bookmarked\"));\n            return;\n          }\n          post.toggleProperty('bookmarked');\n          return false;\n        },\n\n        jumpTop: function() {\n          this.get('controllers.topic-progress').send('jumpTop');\n        },\n\n        selectAll: function() {\n          var posts = this.get('postStream.posts'),\n              selectedPosts = this.get('selectedPosts');\n          if (posts) {\n            selectedPosts.addObjects(posts);\n          }\n          this.set('allPostsSelected', true);\n        },\n\n        deselectAll: function() {\n          this.get('selectedPosts').clear();\n          this.get('selectedReplies').clear();\n          this.set('allPostsSelected', false);\n        },\n\n        /**\n          Toggle a participant for filtering\n\n          @method toggleParticipant\n        **/\n        toggleParticipant: function(user) {\n          this.get('postStream').toggleParticipant(Em.get(user, 'username'));\n        },\n\n        editTopic: function() {\n          if (!this.get('details.can_edit')) return false;\n\n          this.setProperties({\n            editingTopic: true,\n            newTitle: this.get('title'),\n            newCategoryId: this.get('category_id')\n          });\n          return false;\n        },\n\n        // close editing mode\n        cancelEditingTopic: function() {\n          this.set('editingTopic', false);\n        },\n\n        toggleMultiSelect: function() {\n          this.toggleProperty('multiSelect');\n        },\n\n        finishedEditingTopic: function() {\n          if (this.get('editingTopic')) {\n\n            var topic = this.get('model');\n\n            // Topic title hasn't been sanitized yet, so the template shouldn't trust it.\n            this.set('topicSaving', true);\n\n            // manually update the titles \u0026 category\n            var backup = topic.setPropertiesBackup({\n              title: this.get('newTitle'),\n              category_id: parseInt(this.get('newCategoryId'), 10),\n              fancy_title: this.get('newTitle')\n            });\n\n            // save the modifications\n            var self = this;\n            topic.save().then(function(result){\n              // update the title if it has been changed (cleaned up) server-side\n              topic.setProperties(Em.getProperties(result.basic_topic, 'title', 'fancy_title'));\n              self.set('topicSaving', false);\n            }, function(error) {\n              self.setProperties({ editingTopic: true, topicSaving: false });\n              topic.setProperties(backup);\n              if (error \u0026\u0026 error.responseText) {\n                bootbox.alert($.parseJSON(error.responseText).errors[0]);\n              } else {\n                bootbox.alert(I18n.t('generic_error'));\n              }\n            });\n\n            // close editing mode\n            self.set('editingTopic', false);\n          }\n        },\n\n        toggledSelectedPost: function(post) {\n          this.performTogglePost(post);\n        },\n\n        toggledSelectedPostReplies: function(post) {\n          var selectedReplies = this.get('selectedReplies');\n          if (this.performTogglePost(post)) {\n            selectedReplies.addObject(post);\n          } else {\n            selectedReplies.removeObject(post);\n          }\n        },\n\n        deleteSelected: function() {\n          var self = this;\n          bootbox.confirm(I18n.t(\"post.delete.confirm\", { count: this.get('selectedPostsCount')}), function(result) {\n            if (result) {\n\n              // If all posts are selected, it's the same thing as deleting the topic\n              if (self.get('allPostsSelected')) {\n                return self.deleteTopic();\n              }\n\n              var selectedPosts = self.get('selectedPosts'),\n                  selectedReplies = self.get('selectedReplies'),\n                  postStream = self.get('postStream'),\n                  toRemove = [];\n\n              Discourse.Post.deleteMany(selectedPosts, selectedReplies);\n              postStream.get('posts').forEach(function (p) {\n                if (self.postSelected(p)) { toRemove.addObject(p); }\n              });\n\n              postStream.removePosts(toRemove);\n              self.send('toggleMultiSelect');\n            }\n          });\n        },\n\n        expandHidden: function(post) {\n          post.expandHidden();\n        },\n\n        toggleVisibility: function() {\n          this.get('content').toggleStatus('visible');\n        },\n\n        toggleClosed: function() {\n          this.get('content').toggleStatus('closed');\n        },\n\n        makeBanner: function() {\n          this.get('content').makeBanner();\n        },\n\n        removeBanner: function() {\n          this.get('content').removeBanner();\n        },\n\n        togglePinned: function() {\n          // Note that this is different than clearPin\n          this.get('content').setStatus('pinned', this.get('pinned_at') ? false : true);\n        },\n\n        togglePinnedGlobally: function() {\n          // Note that this is different than clearPin\n          this.get('content').setStatus('pinned_globally', this.get('pinned_at') ? false : true);\n        },\n\n        toggleArchived: function() {\n          this.get('content').toggleStatus('archived');\n        },\n\n        // Toggle the star on the topic\n        toggleStar: function() {\n          this.get('content').toggleStar();\n        },\n\n        /**\n          Clears the pin from a topic for the currently logged in user\n\n          @method clearPin\n        **/\n        clearPin: function() {\n          this.get('content').clearPin();\n        },\n\n        replyAsNewTopic: function(post) {\n          var composerController = this.get('controllers.composer'),\n              quoteController = this.get('controllers.quote-button'),\n              quotedText = Discourse.Quote.build(quoteController.get('post'), quoteController.get('buffer')),\n              self = this;\n\n          quoteController.deselectText();\n\n          composerController.open({\n            action: Discourse.Composer.CREATE_TOPIC,\n            draftKey: Discourse.Composer.REPLY_AS_NEW_TOPIC_KEY\n          }).then(function() {\n            return Em.isEmpty(quotedText) ? Discourse.Post.loadQuote(post.get('id')) : quotedText;\n          }).then(function(q) {\n            var postUrl = \"\" + location.protocol + \"//\" + location.host + (post.get('url')),\n                postLink = \"[\" + self.get('title') + \"](\" + postUrl + \")\";\n            composerController.appendText(I18n.t(\"post.continue_discussion\", { postLink: postLink }) + \"\\n\\n\" + q);\n          });\n        },\n\n        expandFirstPost: function(post) {\n          var self = this;\n          this.set('loadingExpanded', true);\n          post.expand().then(function() {\n            self.set('firstPostExpanded', true);\n          }).catch(function(error) {\n            bootbox.alert($.parseJSON(error.responseText).errors);\n          }).finally(function() {\n            self.set('loadingExpanded', false);\n          });\n        },\n\n        retryLoading: function() {\n          var self = this;\n          self.set('retrying', true);\n          this.get('postStream').refresh().then(function() {\n            self.set('retrying', false);\n          }, function() {\n            self.set('retrying', false);\n          });\n        },\n\n        toggleWiki: function(post) {\n          post.toggleProperty('wiki');\n        }\n      },\n\n      showExpandButton: function() {\n        var post = this.get('post');\n        return post.get('post_number') === 1 \u0026\u0026 post.get('topic.expandable_first_post');\n      }.property(),\n\n      canMergeTopic: function() {\n        if (!this.get('details.can_move_posts')) return false;\n        return (this.get('selectedPostsCount') \u003e 0);\n      }.property('selectedPostsCount'),\n\n      canSplitTopic: function() {\n        if (!this.get('details.can_move_posts')) return false;\n        if (this.get('allPostsSelected')) return false;\n        return (this.get('selectedPostsCount') \u003e 0);\n      }.property('selectedPostsCount'),\n\n      canChangeOwner: function() {\n        if (!Discourse.User.current() || !Discourse.User.current().admin) return false;\n        return !!this.get('selectedPostsUsername');\n      }.property('selectedPostsUsername'),\n\n      categories: function() {\n        return Discourse.Category.list();\n      }.property(),\n\n      canSelectAll: Em.computed.not('allPostsSelected'),\n\n      canDeselectAll: function () {\n        if (this.get('selectedPostsCount') \u003e 0) return true;\n        if (this.get('allPostsSelected')) return true;\n      }.property('selectedPostsCount', 'allPostsSelected'),\n\n      canDeleteSelected: function() {\n        var selectedPosts = this.get('selectedPosts');\n\n        if (this.get('allPostsSelected')) return true;\n        if (this.get('selectedPostsCount') === 0) return false;\n\n        var canDelete = true;\n        selectedPosts.forEach(function(p) {\n          if (!p.get('can_delete')) {\n            canDelete = false;\n            return false;\n          }\n        });\n        return canDelete;\n      }.property('selectedPostsCount'),\n\n      hasError: Ember.computed.or('notFoundHtml', 'message'),\n\n      multiSelectChanged: function() {\n        // Deselect all posts when multi select is turned off\n        if (!this.get('multiSelect')) {\n          this.send('deselectAll');\n        }\n      }.observes('multiSelect'),\n\n      deselectPost: function(post) {\n        this.get('selectedPosts').removeObject(post);\n\n        var selectedReplies = this.get('selectedReplies');\n        selectedReplies.removeObject(post);\n\n        var selectedReply = selectedReplies.findProperty('post_number', post.get('reply_to_post_number'));\n        if (selectedReply) { selectedReplies.removeObject(selectedReply); }\n\n        this.set('allPostsSelected', false);\n      },\n\n      postSelected: function(post) {\n        if (this.get('allPostsSelected')) { return true; }\n        if (this.get('selectedPosts').contains(post)) { return true; }\n        if (this.get('selectedReplies').findProperty('post_number', post.get('reply_to_post_number'))) { return true; }\n\n        return false;\n      },\n\n      showStarButton: function() {\n        return Discourse.User.current() \u0026\u0026 !this.get('isPrivateMessage');\n      }.property('isPrivateMessage'),\n\n      loadingHTML: function() {\n        return \"\u003cdiv class='spinner'\u003e\" + I18n.t('loading') + \"\u003c/div\u003e\";\n      }.property(),\n\n      recoverTopic: function() {\n        this.get('content').recover();\n      },\n\n      deleteTopic: function() {\n        this.unsubscribe();\n        this.get('content').destroy(Discourse.User.current());\n      },\n\n      // Receive notifications for this topic\n      subscribe: function() {\n\n        // Unsubscribe before subscribing again\n        this.unsubscribe();\n\n        var bus = Discourse.MessageBus;\n\n        var topicController = this;\n        bus.subscribe(\"/topic/\" + (this.get('id')), function(data) {\n          var topic = topicController.get('model');\n          if (data.notification_level_change) {\n            topic.set('details.notification_level', data.notification_level_change);\n            topic.set('details.notifications_reason_id', data.notifications_reason_id);\n            return;\n          }\n\n          var postStream = topicController.get('postStream');\n          if (data.type === \"revised\" || data.type === \"acted\") {\n            // TODO we could update less data for \"acted\"\n            // (only post actions)\n            postStream.triggerChangedPost(data.id, data.updated_at);\n            return;\n          }\n\n          if (data.type === \"deleted\") {\n            postStream.triggerDeletedPost(data.id, data.post_number);\n            return;\n          }\n\n          if (data.type === \"recovered\") {\n            postStream.triggerRecoveredPost(data.id, data.post_number);\n            return;\n          }\n\n          if (data.type === \"created\") {\n            postStream.triggerNewPostInStream(data.id);\n            return;\n          }\n\n          // log a warning\n          Em.Logger.warn(\"unknown topic bus message type\", data);\n        });\n      },\n\n      unsubscribe: function() {\n        var topicId = this.get('content.id');\n        if (!topicId) return;\n\n        // there is a condition where the view never calls unsubscribe, navigate to a topic from a topic\n        Discourse.MessageBus.unsubscribe('/topic/*');\n      },\n\n      // Topic related\n      reply: function() {\n        this.replyToPost();\n      },\n\n      performTogglePost: function(post) {\n        var selectedPosts = this.get('selectedPosts');\n        if (this.postSelected(post)) {\n          this.deselectPost(post);\n          return false;\n        } else {\n          selectedPosts.addObject(post);\n\n          // If the user manually selects all posts, all posts are selected\n          if (selectedPosts.length === this.get('posts_count')) {\n            this.set('allPostsSelected', true);\n          }\n          return true;\n        }\n      },\n\n      // If our current post is changed, notify the router\n      _currentPostChanged: function() {\n        var currentPost = this.get('currentPost');\n        if (currentPost) {\n          this.send('postChangedRoute', currentPost);\n        }\n      }.observes('currentPost'),\n\n      readPosts: function(topicId, postNumbers) {\n        var postStream = this.get('postStream');\n\n        if(this.get('postStream.topic.id') === topicId){\n          _.each(postStream.get('posts'), function(post){\n            // optimise heavy loop\n            // TODO identity map for postNumber\n            if(_.include(postNumbers,post.post_number) \u0026\u0026 !post.read){\n              post.set(\"read\", true);\n            }\n          });\n\n          var max = _.max(postNumbers);\n          if(max \u003e this.get('last_read_post_number')){\n            this.set('last_read_post_number', max);\n          }\n        }\n      },\n\n      /**\n        Called the the topmost visible post on the page changes.\n\n        @method topVisibleChanged\n        @params {Discourse.Post} post that is at the top\n      **/\n      topVisibleChanged: function(post) {\n        if (!post) { return; }\n\n        var postStream = this.get('postStream'),\n            firstLoadedPost = postStream.get('firstLoadedPost');\n\n        this.set('currentPost', post.get('post_number'));\n\n        if (post.get('post_number') === 1) { return; }\n\n        if (firstLoadedPost \u0026\u0026 firstLoadedPost === post) {\n          // Note: jQuery shouldn't be done in a controller, but how else can we\n          // trigger a scroll after a promise resolves in a controller? We need\n          // to do this to preserve upwards infinte scrolling.\n          var $body = $('body'),\n              $elem = $('#post-cloak-' + post.get('post_number')),\n              distToElement = $body.scrollTop() - $elem.position().top;\n\n          postStream.prependMore().then(function() {\n            Em.run.next(function () {\n              $elem = $('#post-cloak-' + post.get('post_number'));\n\n              // Quickly going back might mean the element is destroyed\n              var position = $elem.position();\n              if (position \u0026\u0026 position.top) {\n                $('html, body').scrollTop(position.top + distToElement);\n              }\n            });\n          });\n        }\n      },\n\n      /**\n        Called the the bottommost visible post on the page changes.\n\n        @method bottomVisibleChanged\n        @params {Discourse.Post} post that is at the bottom\n      **/\n      bottomVisibleChanged: function(post) {\n        if (!post) { return; }\n\n        var postStream = this.get('postStream'),\n            lastLoadedPost = postStream.get('lastLoadedPost');\n\n        this.set('controllers.topic-progress.progressPosition', postStream.progressIndexOfPost(post));\n\n        if (lastLoadedPost \u0026\u0026 lastLoadedPost === post) {\n          postStream.appendMore();\n        }\n      }\n\n    });\n  });";
define("discourse/controllers/upload-selector", 
  ["discourse/mixins/modal-functionality","discourse/controllers/controller","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var ModalFunctionality = __dependency1__["default"];

    var DiscourseController = __dependency2__["default"];

    __exports__["default"] = DiscourseController.extend(ModalFunctionality, {
      remote: Em.computed.not("local"),
      local: false,
      showMore: false,

      _initialize: function() {
        this.setProperties({
          local: this.get("allowLocal"),
          showMore: false
        });
      }.on('init'),

      maxSize: Discourse.computed.setting('max_attachment_size_kb'),
      allowLocal: Em.computed.gt('maxSize', 0),

      actions: {
        useLocal: function() { this.setProperties({ local: true, showMore: false}); },
        useRemote: function() { this.set("local", false); },
        toggleShowMore: function() { this.toggleProperty("showMore"); }
      }

    });
  });

Discourse.UploadSelectorController = require('discourse/controllers/upload-selector').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/upload-selector.js'] = "define(\"discourse/controllers/upload-selector\", \n  [\"discourse/mixins/modal-functionality\",\"discourse/controllers/controller\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var ModalFunctionality = __dependency1__[\"default\"];\n\n    var DiscourseController = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = DiscourseController.extend(ModalFunctionality, {\n      remote: Em.computed.not(\"local\"),\n      local: false,\n      showMore: false,\n\n      _initialize: function() {\n        this.setProperties({\n          local: this.get(\"allowLocal\"),\n          showMore: false\n        });\n      }.on('init'),\n\n      maxSize: Discourse.computed.setting('max_attachment_size_kb'),\n      allowLocal: Em.computed.gt('maxSize', 0),\n\n      actions: {\n        useLocal: function() { this.setProperties({ local: true, showMore: false}); },\n        useRemote: function() { this.set(\"local\", false); },\n        toggleShowMore: function() { this.toggleProperty(\"showMore\"); }\n      }\n\n    });\n  });";
define("discourse/controllers/user-activity", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.ObjectController.extend();
  });

Discourse.UserActivityController = require('discourse/controllers/user-activity').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/user-activity.js'] = "define(\"discourse/controllers/user-activity\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.ObjectController.extend();\n  });";
define("discourse/controllers/user-badges", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.ArrayController.extend({
      sortProperties: ['grouping_position', 'badge.badge_type.sort_order', 'badge.name', 'badge.id']
    });
  });

Discourse.UserBadgesController = require('discourse/controllers/user-badges').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/user-badges.js'] = "define(\"discourse/controllers/user-badges\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.ArrayController.extend({\n      sortProperties: ['grouping_position', 'badge.badge_type.sort_order', 'badge.name', 'badge.id']\n    });\n  });";
define("discourse/controllers/user-dropdown", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.ArrayController.extend(Discourse.HasCurrentUser, {
      showAdminLinks: Em.computed.alias("currentUser.staff"),

      actions: {
        logout: function() {
          Discourse.logout();
          return false;
        }
      }
    });
  });

Discourse.UserDropdownController = require('discourse/controllers/user-dropdown').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/user-dropdown.js'] = "define(\"discourse/controllers/user-dropdown\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.ArrayController.extend(Discourse.HasCurrentUser, {\n      showAdminLinks: Em.computed.alias(\"currentUser.staff\"),\n\n      actions: {\n        logout: function() {\n          Discourse.logout();\n          return false;\n        }\n      }\n    });\n  });";
define("discourse/controllers/user-expansion", 
  ["discourse/controllers/object","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var ObjectController = __dependency1__["default"];

    __exports__["default"] = ObjectController.extend({
      needs: ['topic'],
      visible: false,
      user: null,
      username: null,
      participant: null,
      avatar: null,

      postStream: Em.computed.alias('controllers.topic.postStream'),
      enoughPostsForFiltering: Em.computed.gte('participant.post_count', 2),

      showFilter: Em.computed.and('postStream.hasNoFilters', 'enoughPostsForFiltering'),
      showName: Discourse.computed.propertyNotEqual('user.name', 'user.username'),

      hasUserFilters: Em.computed.gt('postStream.userFilters.length', 0),

      showBadges: Discourse.computed.setting('enable_badges'),

      moreBadgesCount: function() {
        return this.get('user.badge_count') - this.get('user.featured_user_badges.length');
      }.property('user.badge_count', 'user.featured_user_badges.@each'),

      showMoreBadges: Em.computed.gt('moreBadgesCount', 0),

      show: function(username, uploadedAvatarId) {
        // XSS protection (should be encapsulated)
        username = username.replace(/[^A-Za-z0-9_]/g, "");
        var url = "/users/" + username;

        // Don't show on mobile
        if (Discourse.Mobile.mobileView) {
          Discourse.URL.routeTo(url);
          return;
        }

        var currentUsername = this.get('username'),
            wasVisible = this.get('visible');

        if (uploadedAvatarId) {
          this.set('avatar', {username: username, uploaded_avatar_id: uploadedAvatarId});
        } else {
          this.set('avatar', null);
        }

        this.setProperties({visible: true, username: username});

        // If we click the avatar again, close it.
        if (username === currentUsername && wasVisible) {
          this.setProperties({ visible: false, username: null, avatar: null });
          return;
        }

        this.set('participant', null);

        // Retrieve their participants info
        var participants = this.get('controllers.topic.details.participants');
        if (participants) {
          this.set('participant', participants.findBy('username', username));
        }

        var self = this;
        self.set('user', null);
        Discourse.User.findByUsername(username).then(function (user) {
          self.set('user', user);
          self.set('avatar', user);
        });
      },

      close: function() {
        this.set('visible', false);
      },

      actions: {
        togglePosts: function(user) {
          var postStream = this.get('controllers.topic.postStream');
          postStream.toggleParticipant(user.get('username'));
          this.close();
        },

        cancelFilter: function() {
          var postStream = this.get('postStream');
          postStream.cancelFilter();
          postStream.refresh();
          this.close();
        }
      }

    });
  });

Discourse.UserExpansionController = require('discourse/controllers/user-expansion').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/user-expansion.js'] = "define(\"discourse/controllers/user-expansion\", \n  [\"discourse/controllers/object\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ObjectController = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = ObjectController.extend({\n      needs: ['topic'],\n      visible: false,\n      user: null,\n      username: null,\n      participant: null,\n      avatar: null,\n\n      postStream: Em.computed.alias('controllers.topic.postStream'),\n      enoughPostsForFiltering: Em.computed.gte('participant.post_count', 2),\n\n      showFilter: Em.computed.and('postStream.hasNoFilters', 'enoughPostsForFiltering'),\n      showName: Discourse.computed.propertyNotEqual('user.name', 'user.username'),\n\n      hasUserFilters: Em.computed.gt('postStream.userFilters.length', 0),\n\n      showBadges: Discourse.computed.setting('enable_badges'),\n\n      moreBadgesCount: function() {\n        return this.get('user.badge_count') - this.get('user.featured_user_badges.length');\n      }.property('user.badge_count', 'user.featured_user_badges.@each'),\n\n      showMoreBadges: Em.computed.gt('moreBadgesCount', 0),\n\n      show: function(username, uploadedAvatarId) {\n        // XSS protection (should be encapsulated)\n        username = username.replace(/[^A-Za-z0-9_]/g, \"\");\n        var url = \"/users/\" + username;\n\n        // Don't show on mobile\n        if (Discourse.Mobile.mobileView) {\n          Discourse.URL.routeTo(url);\n          return;\n        }\n\n        var currentUsername = this.get('username'),\n            wasVisible = this.get('visible');\n\n        if (uploadedAvatarId) {\n          this.set('avatar', {username: username, uploaded_avatar_id: uploadedAvatarId});\n        } else {\n          this.set('avatar', null);\n        }\n\n        this.setProperties({visible: true, username: username});\n\n        // If we click the avatar again, close it.\n        if (username === currentUsername \u0026\u0026 wasVisible) {\n          this.setProperties({ visible: false, username: null, avatar: null });\n          return;\n        }\n\n        this.set('participant', null);\n\n        // Retrieve their participants info\n        var participants = this.get('controllers.topic.details.participants');\n        if (participants) {\n          this.set('participant', participants.findBy('username', username));\n        }\n\n        var self = this;\n        self.set('user', null);\n        Discourse.User.findByUsername(username).then(function (user) {\n          self.set('user', user);\n          self.set('avatar', user);\n        });\n      },\n\n      close: function() {\n        this.set('visible', false);\n      },\n\n      actions: {\n        togglePosts: function(user) {\n          var postStream = this.get('controllers.topic.postStream');\n          postStream.toggleParticipant(user.get('username'));\n          this.close();\n        },\n\n        cancelFilter: function() {\n          var postStream = this.get('postStream');\n          postStream.cancelFilter();\n          postStream.refresh();\n          this.close();\n        }\n      }\n\n    });\n  });";
define("discourse/controllers/user-invited", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      This controller handles actions related to a user's invitations

      @class UserInvitedController
      @extends Ember.ArrayController
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Ember.ObjectController.extend({
      user: null,
      model: null,
      totalInvites: null,
      canLoadMore: true,
      invitesLoading: false,

      init: function() {
        this._super();
        this.set('searchTerm', '');
      },

      uploadText: function() { return I18n.t("user.invited.bulk_invite.text"); }.property(),

      /**
        Observe the search term box with a debouncer and change the results.

        @observes searchTerm
      **/
      _searchTermChanged: Discourse.debounce(function() {
        var self = this;
        Discourse.Invite.findInvitedBy(self.get('user'), this.get('searchTerm')).then(function (invites) {
          self.set('model', invites);
        });
      }, 250).observes('searchTerm'),

      /**
        Can the currently logged in user invite users to the site

        @property canInviteToForum
      **/
      canInviteToForum: function() {
        return Discourse.User.currentProp('can_invite_to_forum');
      }.property(),

      /**
        Can the currently logged in user bulk invite users to the site (only Admin is allowed to perform this operation)

        @property canBulkInvite
      **/
      canBulkInvite: function() {
        return Discourse.User.currentProp('admin');
      }.property(),

      /**
        Should the search filter input box be displayed?

        @property showSearch
      **/
      showSearch: function() {
        return this.get('totalInvites') > 9;
      }.property('totalInvites'),

      actions: {

        /**
          Rescind a given invite

          @method rescive
          @param {Discourse.Invite} invite the invite to rescind.
        **/
        rescind: function(invite) {
          invite.rescind();
          return false;
        },

        loadMore: function() {
          var self = this;
          var model = self.get('model');

          if(self.get('canLoadMore')) {
            self.set('invitesLoading', true);
            Discourse.Invite.findInvitedBy(self.get('user'), self.get('searchTerm'), model.invites.length).then(function(invite_model) {
              self.set('invitesLoading', false);
              model.invites.pushObjects(invite_model.invites);
              if(invite_model.invites.length === 0 || invite_model.invites.length < Discourse.SiteSettings.invites_per_page) {
                self.set('canLoadMore', false);
              }
            });
          }
        }
      }

    });
  });

Discourse.UserInvitedController = require('discourse/controllers/user-invited').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/user-invited.js'] = "define(\"discourse/controllers/user-invited\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      This controller handles actions related to a user's invitations\n\n      @class UserInvitedController\n      @extends Ember.ArrayController\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Ember.ObjectController.extend({\n      user: null,\n      model: null,\n      totalInvites: null,\n      canLoadMore: true,\n      invitesLoading: false,\n\n      init: function() {\n        this._super();\n        this.set('searchTerm', '');\n      },\n\n      uploadText: function() { return I18n.t(\"user.invited.bulk_invite.text\"); }.property(),\n\n      /**\n        Observe the search term box with a debouncer and change the results.\n\n        @observes searchTerm\n      **/\n      _searchTermChanged: Discourse.debounce(function() {\n        var self = this;\n        Discourse.Invite.findInvitedBy(self.get('user'), this.get('searchTerm')).then(function (invites) {\n          self.set('model', invites);\n        });\n      }, 250).observes('searchTerm'),\n\n      /**\n        Can the currently logged in user invite users to the site\n\n        @property canInviteToForum\n      **/\n      canInviteToForum: function() {\n        return Discourse.User.currentProp('can_invite_to_forum');\n      }.property(),\n\n      /**\n        Can the currently logged in user bulk invite users to the site (only Admin is allowed to perform this operation)\n\n        @property canBulkInvite\n      **/\n      canBulkInvite: function() {\n        return Discourse.User.currentProp('admin');\n      }.property(),\n\n      /**\n        Should the search filter input box be displayed?\n\n        @property showSearch\n      **/\n      showSearch: function() {\n        return this.get('totalInvites') \u003e 9;\n      }.property('totalInvites'),\n\n      actions: {\n\n        /**\n          Rescind a given invite\n\n          @method rescive\n          @param {Discourse.Invite} invite the invite to rescind.\n        **/\n        rescind: function(invite) {\n          invite.rescind();\n          return false;\n        },\n\n        loadMore: function() {\n          var self = this;\n          var model = self.get('model');\n\n          if(self.get('canLoadMore')) {\n            self.set('invitesLoading', true);\n            Discourse.Invite.findInvitedBy(self.get('user'), self.get('searchTerm'), model.invites.length).then(function(invite_model) {\n              self.set('invitesLoading', false);\n              model.invites.pushObjects(invite_model.invites);\n              if(invite_model.invites.length === 0 || invite_model.invites.length \u003c Discourse.SiteSettings.invites_per_page) {\n                self.set('canLoadMore', false);\n              }\n            });\n          }\n        }\n      }\n\n    });\n  });";
define("discourse/controllers/user-topics-list", 
  ["discourse/controllers/object","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var ObjectController = __dependency1__["default"];

    /**
      Lists of topics on a user's page.

      @class UserTopicsListController
      @extends ObjectController
      @namespace Discourse
      @module Discourse
    **/
    __exports__["default"] = ObjectController.extend({
      hideCategory: false,
      showParticipants: false,

      actions: {
        loadMore: function() {
          this.get('model').loadMore();
        }
      }

    });
  });

Discourse.UserTopicsListController = require('discourse/controllers/user-topics-list').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/user-topics-list.js'] = "define(\"discourse/controllers/user-topics-list\", \n  [\"discourse/controllers/object\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ObjectController = __dependency1__[\"default\"];\n\n    /**\n      Lists of topics on a user's page.\n\n      @class UserTopicsListController\n      @extends ObjectController\n      @namespace Discourse\n      @module Discourse\n    **/\n    __exports__[\"default\"] = ObjectController.extend({\n      hideCategory: false,\n      showParticipants: false,\n\n      actions: {\n        loadMore: function() {\n          this.get('model').loadMore();\n        }\n      }\n\n    });\n  });";
define("discourse/controllers/user", 
  ["discourse/controllers/object","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var ObjectController = __dependency1__["default"];

    __exports__["default"] = ObjectController.extend({

      viewingSelf: function() {
        return this.get('content.username') === Discourse.User.currentProp('username');
      }.property('content.username'),

      collapsedInfo: Em.computed.not('indexStream'),

      websiteName: function() {
        var website = this.get('website');
        if (Em.isEmpty(website)) { return; }
        return this.get('website').split("/")[2];
      }.property('website'),

      linkWebsite: Em.computed.not('isBasic'),

      canSeePrivateMessages: function() {
        return this.get('viewingSelf') || Discourse.User.currentProp('admin');
      }.property('viewingSelf'),

      showBadges: function() {
        return Discourse.SiteSettings.enable_badges && (this.get('content.badge_count') > 0);
      }.property('content.badge_count'),

      privateMessageView: function() {
        return (this.get('userActionType') === Discourse.UserAction.TYPES.messages_sent) ||
               (this.get('userActionType') === Discourse.UserAction.TYPES.messages_received);
      }.property('userActionType'),

      /**
        Can the currently logged in user invite users to the site

        @property canInviteToForum
      **/
      canInviteToForum: function() {
        return Discourse.User.currentProp('can_invite_to_forum');
      }.property(),

      privateMessagesActive: Em.computed.equal('pmView', 'index'),
      privateMessagesMineActive: Em.computed.equal('pmView', 'mine'),
      privateMessagesUnreadActive: Em.computed.equal('pmView', 'unread')

    });
  });

Discourse.UserController = require('discourse/controllers/user').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/controllers/user.js'] = "define(\"discourse/controllers/user\", \n  [\"discourse/controllers/object\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ObjectController = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = ObjectController.extend({\n\n      viewingSelf: function() {\n        return this.get('content.username') === Discourse.User.currentProp('username');\n      }.property('content.username'),\n\n      collapsedInfo: Em.computed.not('indexStream'),\n\n      websiteName: function() {\n        var website = this.get('website');\n        if (Em.isEmpty(website)) { return; }\n        return this.get('website').split(\"/\")[2];\n      }.property('website'),\n\n      linkWebsite: Em.computed.not('isBasic'),\n\n      canSeePrivateMessages: function() {\n        return this.get('viewingSelf') || Discourse.User.currentProp('admin');\n      }.property('viewingSelf'),\n\n      showBadges: function() {\n        return Discourse.SiteSettings.enable_badges \u0026\u0026 (this.get('content.badge_count') \u003e 0);\n      }.property('content.badge_count'),\n\n      privateMessageView: function() {\n        return (this.get('userActionType') === Discourse.UserAction.TYPES.messages_sent) ||\n               (this.get('userActionType') === Discourse.UserAction.TYPES.messages_received);\n      }.property('userActionType'),\n\n      /**\n        Can the currently logged in user invite users to the site\n\n        @property canInviteToForum\n      **/\n      canInviteToForum: function() {\n        return Discourse.User.currentProp('can_invite_to_forum');\n      }.property(),\n\n      privateMessagesActive: Em.computed.equal('pmView', 'index'),\n      privateMessagesMineActive: Em.computed.equal('pmView', 'mine'),\n      privateMessagesUnreadActive: Em.computed.equal('pmView', 'unread')\n\n    });\n  });";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

// needs Markdown.Converter.js at the moment


// To insert extra buttons:
//
//  Before this file is required, define a PagedownCustom object. Give it an attribtue of insertButtons, which is an array
//  of the buttons you want to insert. For example:
//
//      window.PagedownCustom = {
//        insertButtons: [
//          {
//            id: 'wmd-bark',
//            description: 'Bark',
//            execute: function() {
//              return alert('woof!');
//            }
//          }
//        ]
//      };
//
// To extend actions:
//
//      window.PagedownCustom = {
//          customActions: {
//             "doBlockquote": function(chunk, postProcessing, oldDoBlockquote) {
//               console.log('custom blockquote called!');
//               return oldDoBlockquote.call(this, chunk, postProcessing);
//             }
//          }
//      };


(function () {

    var util = {},
        position = {},
        ui = {},
        doc = window.document,
        re = window.RegExp,
        nav = window.navigator,
        SETTINGS = { lineLength: 72 },

    // Used to work around some browser bugs where we can't use feature testing.
        uaSniffed = {
            isIE: /msie/.test(nav.userAgent.toLowerCase()),
            isIE_5or6: /msie 6/.test(nav.userAgent.toLowerCase()) || /msie 5/.test(nav.userAgent.toLowerCase()),
            isOpera: /opera/.test(nav.userAgent.toLowerCase())
        };

    var defaultsStrings = {
        bold: "Strong <strong> Ctrl+B",
        boldexample: "strong text",

        italic: "Emphasis <em> Ctrl+I",
        italicexample: "emphasized text",

        link: "Hyperlink <a> Ctrl+L",
        linkdescription: "enter link description here",
        linkdialog: "<p><b>Insert Hyperlink</b></p><p>http://example.com/ \"optional title\"</p>",

        quote: "Blockquote <blockquote> Ctrl+Q",
        quoteexample: "Blockquote",

        code: "Code Sample <pre><code> Ctrl+K",
        codeexample: "enter code here",

        image: "Image <img> Ctrl+G",
        imagedescription: "enter image description here",
        imagedialog: "<p><b>Insert Image</b></p><p>http://example.com/images/diagram.jpg \"optional title\"<br><br>Need <a href='http://www.google.com/search?q=free+image+hosting' target='_blank'>free image hosting?</a></p>",

        olist: "Numbered List <ol> Ctrl+O",
        ulist: "Bulleted List <ul> Ctrl+U",
        litem: "List item",

        heading: "Heading <h1>/<h2> Ctrl+H",
        headingexample: "Heading",

        hr: "Horizontal Rule <hr> Ctrl+R",

        undo: "Undo - Ctrl+Z",
        redo: "Redo - Ctrl+Y",
        redomac: "Redo - Ctrl+Shift+Z",

        help: "Markdown Editing Help"
    };


    // -------------------------------------------------------------------
    //  YOUR CHANGES GO HERE
    //
    // I've tried to localize the things you are likely to change to
    // this area.
    // -------------------------------------------------------------------

    // The default text that appears in the dialog input box when entering
    // links.
    var imageDefaultText = "http://";
    var linkDefaultText = "http://";

    // -------------------------------------------------------------------
    //  END OF YOUR CHANGES
    // -------------------------------------------------------------------

    // options, if given, can have the following properties:
    //   options.helpButton = { handler: yourEventHandler }
    //   options.strings = { italicexample: "slanted text" }
    // `yourEventHandler` is the click handler for the help button.
    // If `options.helpButton` isn't given, not help button is created.
    // `options.strings` can have any or all of the same properties as
    // `defaultStrings` above, so you can just override some string displayed
    // to the user on a case-by-case basis, or translate all strings to
    // a different language.
    //
    // For backwards compatibility reasons, the `options` argument can also
    // be just the `helpButton` object, and `strings.help` can also be set via
    // `helpButton.title`. This should be considered legacy.
    //
    // The constructed editor object has the methods:
    // - getConverter() returns the markdown converter object that was passed to the constructor
    // - run() actually starts the editor; should be called after all necessary plugins are registered. Calling this more than once is a no-op.
    // - refreshPreview() forces the preview to be updated. This method is only available after run() was called.
    Markdown.Editor = function (markdownConverter, idPostfix, options) {

        options = options || {};

        if (typeof options.handler === "function") { //backwards compatible behavior
            options = { helpButton: options };
        }
        options.strings = options.strings || {};
        if (options.helpButton) {
            options.strings.help = options.strings.help || options.helpButton.title;
        }
        var getString = function (identifier) { return options.strings[identifier] || defaultsStrings[identifier]; }

        idPostfix = idPostfix || "";

        var hooks = this.hooks = new Markdown.HookCollection();
        hooks.addNoop("onPreviewRefresh");       // called with no arguments after the preview has been refreshed
        hooks.addNoop("postBlockquoteCreation"); // called with the user's selection *after* the blockquote was created; should return the actual to-be-inserted text
        hooks.addFalse("insertImageDialog");     /* called with one parameter: a callback to be called with the URL of the image. If the application creates
                                                  * its own image insertion dialog, this hook should return true, and the callback should be called with the chosen
                                                  * image url (or null if the user cancelled). If this hook returns false, the default dialog will be used.
                                                  */

        this.getConverter = function () { return markdownConverter; }

        var that = this,
            panels;

        this.run = function () {
            if (panels)
                return; // already initialized

            panels = new PanelCollection(idPostfix);
            var commandManager = new CommandManager(hooks, getString);
            var previewManager = new PreviewManager(markdownConverter, panels, function () { hooks.onPreviewRefresh(); });
            var undoManager, uiManager;

            if (false && !/\?noundo/.test(doc.location.href)) {
                undoManager = new UndoManager(function () {
                    previewManager.refresh();
                    if (uiManager) // not available on the first call
                        uiManager.setUndoRedoButtonStates();
                }, panels);
                this.textOperation = function (f) {
                    undoManager.setCommandMode();
                    f();
                    that.refreshPreview();
                }
            }

            uiManager = new UIManager(idPostfix, panels, undoManager, previewManager, commandManager, options.helpButton, getString);
            uiManager.setUndoRedoButtonStates();

            var forceRefresh = that.refreshPreview = function () { previewManager.refresh(true); };

            forceRefresh();
        };

    }

    // before: contains all the text in the input box BEFORE the selection.
    // after: contains all the text in the input box AFTER the selection.
    function Chunks() { }

    // startRegex: a regular expression to find the start tag
    // endRegex: a regular expresssion to find the end tag
    Chunks.prototype.findTags = function (startRegex, endRegex) {

        var chunkObj = this;
        var regex;

        if (startRegex) {

            regex = util.extendRegExp(startRegex, "", "$");

            this.before = this.before.replace(regex,
                function (match) {
                    chunkObj.startTag = chunkObj.startTag + match;
                    return "";
                });

            regex = util.extendRegExp(startRegex, "^", "");

            this.selection = this.selection.replace(regex,
                function (match) {
                    chunkObj.startTag = chunkObj.startTag + match;
                    return "";
                });
        }

        if (endRegex) {

            regex = util.extendRegExp(endRegex, "", "$");

            this.selection = this.selection.replace(regex,
                function (match) {
                    chunkObj.endTag = match + chunkObj.endTag;
                    return "";
                });

            regex = util.extendRegExp(endRegex, "^", "");

            this.after = this.after.replace(regex,
                function (match) {
                    chunkObj.endTag = match + chunkObj.endTag;
                    return "";
                });
        }
    };

    // If remove is false, the whitespace is transferred
    // to the before/after regions.
    //
    // If remove is true, the whitespace disappears.
    Chunks.prototype.trimWhitespace = function (remove) {
        var beforeReplacer, afterReplacer, that = this;
        if (remove) {
            beforeReplacer = afterReplacer = "";
        } else {
            beforeReplacer = function (s) { that.before += s; return ""; }
            afterReplacer = function (s) { that.after = s + that.after; return ""; }
        }

        this.selection = this.selection.replace(/^(\s*)/, beforeReplacer).replace(/(\s*)$/, afterReplacer);
    };


    Chunks.prototype.skipLines = function (nLinesBefore, nLinesAfter, findExtraNewlines) {

        if (nLinesBefore === undefined) {
            nLinesBefore = 1;
        }

        if (nLinesAfter === undefined) {
            nLinesAfter = 1;
        }

        nLinesBefore++;
        nLinesAfter++;

        var regexText;
        var replacementText;

        // chrome bug ... documented at: http://meta.stackoverflow.com/questions/63307/blockquote-glitch-in-editor-in-chrome-6-and-7/65985#65985
        if (navigator.userAgent.match(/Chrome/)) {
            "X".match(/()./);
        }

        this.selection = this.selection.replace(/(^\n*)/, "");

        this.startTag = this.startTag + re.$1;

        this.selection = this.selection.replace(/(\n*$)/, "");
        this.endTag = this.endTag + re.$1;
        this.startTag = this.startTag.replace(/(^\n*)/, "");
        this.before = this.before + re.$1;
        this.endTag = this.endTag.replace(/(\n*$)/, "");
        this.after = this.after + re.$1;

        if (this.before) {

            regexText = replacementText = "";

            while (nLinesBefore--) {
                regexText += "\\n?";
                replacementText += "\n";
            }

            if (findExtraNewlines) {
                regexText = "\\n*";
            }
            this.before = this.before.replace(new re(regexText + "$", ""), replacementText);
        }

        if (this.after) {

            regexText = replacementText = "";

            while (nLinesAfter--) {
                regexText += "\\n?";
                replacementText += "\n";
            }
            if (findExtraNewlines) {
                regexText = "\\n*";
            }

            this.after = this.after.replace(new re(regexText, ""), replacementText);
        }
    };

    // end of Chunks

    // A collection of the important regions on the page.
    // Cached so we don't have to keep traversing the DOM.
    // Also holds ieCachedRange and ieCachedScrollTop, where necessary; working around
    // this issue:
    // Internet explorer has problems with CSS sprite buttons that use HTML
    // lists.  When you click on the background image "button", IE will
    // select the non-existent link text and discard the selection in the
    // textarea.  The solution to this is to cache the textarea selection
    // on the button's mousedown event and set a flag.  In the part of the
    // code where we need to grab the selection, we check for the flag
    // and, if it's set, use the cached area instead of querying the
    // textarea.
    //
    // This ONLY affects Internet Explorer (tested on versions 6, 7
    // and 8) and ONLY on button clicks.  Keyboard shortcuts work
    // normally since the focus never leaves the textarea.
    function PanelCollection(postfix) {
        this.buttonBar = doc.getElementById("wmd-button-bar" + postfix);
        this.preview = doc.getElementById("wmd-preview" + postfix);
        this.input = doc.getElementById("wmd-input" + postfix);
    };

    // Returns true if the DOM element is visible, false if it's hidden.
    // Checks if display is anything other than none.
    util.isVisible = function (elem) {

        if (window.getComputedStyle) {
            // Most browsers
            return window.getComputedStyle(elem, null).getPropertyValue("display") !== "none";
        }
        else if (elem.currentStyle) {
            // IE
            return elem.currentStyle["display"] !== "none";
        }
    };


    // Adds a listener callback to a DOM element which is fired on a specified
    // event.
    util.addEvent = function (elem, event, listener) {
        if (elem.attachEvent) {
            // IE only.  The "on" is mandatory.
            elem.attachEvent("on" + event, listener);
        }
        else {
            // Other browsers.
            elem.addEventListener(event, listener, false);
        }
    };


    // Removes a listener callback from a DOM element which is fired on a specified
    // event.
    util.removeEvent = function (elem, event, listener) {
        if (elem.detachEvent) {
            // IE only.  The "on" is mandatory.
            elem.detachEvent("on" + event, listener);
        }
        else {
            // Other browsers.
            elem.removeEventListener(event, listener, false);
        }
    };

    // Converts \r\n and \r to \n.
    util.fixEolChars = function (text) {
        text = text.replace(/\r\n/g, "\n");
        text = text.replace(/\r/g, "\n");
        return text;
    };

    // Extends a regular expression.  Returns a new RegExp
    // using pre + regex + post as the expression.
    // Used in a few functions where we have a base
    // expression and we want to pre- or append some
    // conditions to it (e.g. adding "$" to the end).
    // The flags are unchanged.
    //
    // regex is a RegExp, pre and post are strings.
    util.extendRegExp = function (regex, pre, post) {

        if (pre === null || pre === undefined) {
            pre = "";
        }
        if (post === null || post === undefined) {
            post = "";
        }

        var pattern = regex.toString();
        var flags;

        // Replace the flags with empty space and store them.
        pattern = pattern.replace(/\/([gim]*)$/, function (wholeMatch, flagsPart) {
            flags = flagsPart;
            return "";
        });

        // Remove the slash delimiters on the regular expression.
        pattern = pattern.replace(/(^\/|\/$)/g, "");
        pattern = pre + pattern + post;

        return new re(pattern, flags);
    }

    // UNFINISHED
    // The assignment in the while loop makes jslint cranky.
    // I'll change it to a better loop later.
    position.getTop = function (elem, isInner) {
        var result = elem.offsetTop;
        if (!isInner) {
            while (elem = elem.offsetParent) {
                result += elem.offsetTop;
            }
        }
        return result;
    };

    position.getHeight = function (elem) {
        return elem.offsetHeight || elem.scrollHeight;
    };

    position.getWidth = function (elem) {
        return elem.offsetWidth || elem.scrollWidth;
    };

    position.getPageSize = function () {

        var scrollWidth, scrollHeight;
        var innerWidth, innerHeight;

        // It's not very clear which blocks work with which browsers.
        if (self.innerHeight && self.scrollMaxY) {
            scrollWidth = doc.body.scrollWidth;
            scrollHeight = self.innerHeight + self.scrollMaxY;
        }
        else if (doc.body.scrollHeight > doc.body.offsetHeight) {
            scrollWidth = doc.body.scrollWidth;
            scrollHeight = doc.body.scrollHeight;
        }
        else {
            scrollWidth = doc.body.offsetWidth;
            scrollHeight = doc.body.offsetHeight;
        }

        if (self.innerHeight) {
            // Non-IE browser
            innerWidth = self.innerWidth;
            innerHeight = self.innerHeight;
        }
        else if (doc.documentElement && doc.documentElement.clientHeight) {
            // Some versions of IE (IE 6 w/ a DOCTYPE declaration)
            innerWidth = doc.documentElement.clientWidth;
            innerHeight = doc.documentElement.clientHeight;
        }
        else if (doc.body) {
            // Other versions of IE
            innerWidth = doc.body.clientWidth;
            innerHeight = doc.body.clientHeight;
        }

        var maxWidth = Math.max(scrollWidth, innerWidth);
        var maxHeight = Math.max(scrollHeight, innerHeight);
        return [maxWidth, maxHeight, innerWidth, innerHeight];
    };

    // Handles pushing and popping TextareaStates for undo/redo commands.
    // I should rename the stack variables to list.
    function UndoManager(callback, panels) {

        var undoObj = this;
        var undoStack = []; // A stack of undo states
        var stackPtr = 0; // The index of the current state
        var mode = "none";
        var lastState; // The last state
        var timer; // The setTimeout handle for cancelling the timer
        var inputStateObj;

        // Set the mode for later logic steps.
        var setMode = function (newMode, noSave) {
            if (mode != newMode) {
                mode = newMode;
                if (!noSave) {
                    saveState();
                }
            }

            if (!uaSniffed.isIE || mode != "moving") {
                timer = setTimeout(refreshState, 1);
            }
            else {
                inputStateObj = null;
            }
        };

        var refreshState = function (isInitialState) {
            inputStateObj = new TextareaState(panels, isInitialState);
            timer = undefined;
        };

        this.setCommandMode = function () {
            mode = "command";
            saveState();
            timer = setTimeout(refreshState, 0);
        };

        this.canUndo = function () {
            return stackPtr > 1;
        };

        this.canRedo = function () {
            if (undoStack[stackPtr + 1]) {
                return true;
            }
            return false;
        };

        // Removes the last state and restores it.
        this.undo = function () {

            if (undoObj.canUndo()) {
                if (lastState) {
                    // What about setting state -1 to null or checking for undefined?
                    lastState.restore();
                    lastState = null;
                }
                else {
                    undoStack[stackPtr] = new TextareaState(panels);
                    undoStack[--stackPtr].restore();

                    if (callback) {
                        callback();
                    }
                }
            }

            mode = "none";
            panels.input.focus();
            refreshState();
        };

        // Redo an action.
        this.redo = function () {

            if (undoObj.canRedo()) {

                undoStack[++stackPtr].restore();

                if (callback) {
                    callback();
                }
            }

            mode = "none";
            panels.input.focus();
            refreshState();
        };

        // Push the input area state to the stack.
        var saveState = function () {
            var currState = inputStateObj || new TextareaState(panels);

            if (!currState) {
                return false;
            }
            if (mode == "moving") {
                if (!lastState) {
                    lastState = currState;
                }
                return;
            }
            if (lastState) {
                if (undoStack[stackPtr - 1].text != lastState.text) {
                    undoStack[stackPtr++] = lastState;
                }
                lastState = null;
            }
            undoStack[stackPtr++] = currState;
            undoStack[stackPtr + 1] = null;
            if (callback) {
                callback();
            }
        };

        var handleCtrlYZ = function (event) {

            var handled = false;

            if ((event.ctrlKey || event.metaKey) && !event.altKey) {

                // IE and Opera do not support charCode.
                var keyCode = event.charCode || event.keyCode;
                var keyCodeChar = String.fromCharCode(keyCode);

                switch (keyCodeChar.toLowerCase()) {

                    case "y":
                        if (!event.shiftKey) {
                          undoObj.redo();
                          handled = true;
                        }
                        break;

                    case "z":
                        if (!event.shiftKey) {
                            undoObj.undo();
                        }
                        else {
                            undoObj.redo();
                        }
                        handled = true;
                        break;
                }
            }

            if (handled) {
                if (event.preventDefault) {
                    event.preventDefault();
                }
                if (window.event) {
                    window.event.returnValue = false;
                }
                return;
            }
        };

        // Set the mode depending on what is going on in the input area.
        var handleModeChange = function (event) {

            if (!event.ctrlKey && !event.metaKey) {

                var keyCode = event.keyCode;

                if ((keyCode >= 33 && keyCode <= 40) || (keyCode >= 63232 && keyCode <= 63235)) {
                    // 33 - 40: page up/dn and arrow keys
                    // 63232 - 63235: page up/dn and arrow keys on safari
                    setMode("moving");
                }
                else if (keyCode == 8 || keyCode == 46 || keyCode == 127) {
                    // 8: backspace
                    // 46: delete
                    // 127: delete
                    setMode("deleting");
                }
                else if (keyCode == 13) {
                    // 13: Enter
                    setMode("newlines");
                }
                else if (keyCode == 27) {
                    // 27: escape
                    setMode("escape");
                }
                else if ((keyCode < 16 || keyCode > 20) && keyCode != 91) {
                    // 16-20 are shift, etc.
                    // 91: left window key
                    // I think this might be a little messed up since there are
                    // a lot of nonprinting keys above 20.
                    setMode("typing");
                }
            }
        };

        var setEventHandlers = function () {
            util.addEvent(panels.input, "keypress", function (event) {
                // keyCode 89: y
                // keyCode 90: z
                if ((event.ctrlKey || event.metaKey) && !event.altKey && (event.keyCode == 89 || event.keyCode == 90)) {
                    event.preventDefault();
                }
            });

            var handlePaste = function () {
                if (uaSniffed.isIE || (inputStateObj && inputStateObj.text != panels.input.value)) {
                    if (timer == undefined) {
                        mode = "paste";
                        saveState();
                        refreshState();
                    }
                }
            };

            util.addEvent(panels.input, "keydown", handleCtrlYZ);
            util.addEvent(panels.input, "keydown", handleModeChange);
            util.addEvent(panels.input, "mousedown", function () {
                setMode("moving");
            });

            panels.input.onpaste = handlePaste;
            panels.input.ondrop = handlePaste;
        };

        var init = function () {
            setEventHandlers();
            refreshState(true);
            saveState();
        };

        init();
    }

    // end of UndoManager

    // The input textarea state/contents.
    // This is used to implement undo/redo by the undo manager.
    function TextareaState(panels, isInitialState) {

        // Aliases
        var stateObj = this;
        var inputArea = panels.input;
        this.init = function () {
            if (!util.isVisible(inputArea)) {
                return;
            }
            if (!isInitialState && doc.activeElement && doc.activeElement !== inputArea) { // this happens when tabbing out of the input box
                return;
            }

            this.setInputAreaSelectionStartEnd();
            this.scrollTop = inputArea.scrollTop;
            if (!this.text && inputArea.selectionStart || inputArea.selectionStart === 0) {
                this.text = inputArea.value;
            }

        }

        // Sets the selected text in the input box after we've performed an
        // operation.
        this.setInputAreaSelection = function () {

            if (!util.isVisible(inputArea)) {
                return;
            }

            if (inputArea.selectionStart !== undefined && !uaSniffed.isOpera) {

                inputArea.focus();
                inputArea.selectionStart = stateObj.start;
                inputArea.selectionEnd = stateObj.end;
                inputArea.scrollTop = stateObj.scrollTop;
            }
            else if (doc.selection) {

                if (doc.activeElement && doc.activeElement !== inputArea) {
                    return;
                }

                inputArea.focus();
                var range = inputArea.createTextRange();
                range.moveStart("character", -inputArea.value.length);
                range.moveEnd("character", -inputArea.value.length);
                range.moveEnd("character", stateObj.end);
                range.moveStart("character", stateObj.start);
                range.select();
            }
        };

        this.setInputAreaSelectionStartEnd = function () {

            if (!panels.ieCachedRange && (inputArea.selectionStart || inputArea.selectionStart === 0)) {

                stateObj.start = inputArea.selectionStart;
                stateObj.end = inputArea.selectionEnd;
            }
            else if (doc.selection) {

                stateObj.text = util.fixEolChars(inputArea.value);

                // IE loses the selection in the textarea when buttons are
                // clicked.  On IE we cache the selection. Here, if something is cached,
                // we take it.
                var range = panels.ieCachedRange || doc.selection.createRange();

                var fixedRange = util.fixEolChars(range.text);
                var marker = "\x07";
                var markedRange = marker + fixedRange + marker;
                range.text = markedRange;
                var inputText = util.fixEolChars(inputArea.value);

                range.moveStart("character", -markedRange.length);
                range.text = fixedRange;

                stateObj.start = inputText.indexOf(marker);
                stateObj.end = inputText.lastIndexOf(marker) - marker.length;

                var len = stateObj.text.length - util.fixEolChars(inputArea.value).length;

                if (len) {
                    range.moveStart("character", -fixedRange.length);
                    while (len--) {
                        fixedRange += "\n";
                        stateObj.end += 1;
                    }
                    range.text = fixedRange;
                }

                if (panels.ieCachedRange)
                    stateObj.scrollTop = panels.ieCachedScrollTop; // this is set alongside with ieCachedRange

                panels.ieCachedRange = null;

                this.setInputAreaSelection();
            }
        };

        // Restore this state into the input area.
        this.restore = function () {

            if (stateObj.text != undefined && stateObj.text != inputArea.value) {
                inputArea.value = stateObj.text;
            }
            this.setInputAreaSelection();
            inputArea.scrollTop = stateObj.scrollTop;
        };

        // Gets a collection of HTML chunks from the inptut textarea.
        this.getChunks = function () {

            var chunk = new Chunks();
            chunk.before = util.fixEolChars(stateObj.text.substring(0, stateObj.start));
            chunk.startTag = "";
            chunk.selection = util.fixEolChars(stateObj.text.substring(stateObj.start, stateObj.end));
            chunk.endTag = "";
            chunk.after = util.fixEolChars(stateObj.text.substring(stateObj.end));
            chunk.scrollTop = stateObj.scrollTop;

            return chunk;
        };

        // Sets the TextareaState properties given a chunk of markdown.
        this.setChunks = function (chunk) {

            chunk.before = chunk.before + chunk.startTag;
            chunk.after = chunk.endTag + chunk.after;

            this.start = chunk.before.length;
            this.end = chunk.before.length + chunk.selection.length;
            this.text = chunk.before + chunk.selection + chunk.after;
            this.scrollTop = chunk.scrollTop;
        };
        this.init();
    };

    function PreviewManager(converter, panels, previewRefreshCallback) {

        var managerObj = this;
        var timeout;
        var elapsedTime;
        var oldInputText;
        var maxDelay = 3000;
        var startType = "delayed"; // The other legal value is "manual"

        var paneContentHeight = function(pane) {
          var $pane = $(pane);
          var paneVerticalPadding = parseInt($pane.css("padding-top")) + parseInt($pane.css("padding-bottom"));

          return pane.scrollHeight - paneVerticalPadding;
        };

        var syncScroll = function(isEdit) {
          var $preview = $(panels.preview);
          var $input = $(panels.input);

          if($input.scrollTop() === 0){
            $preview.scrollTop(0);
            return;
          }

          if(($input.height() + $input.scrollTop() + 100) > panels.input.scrollHeight){
            // cheat, special case for bottom
            $preview.scrollTop(panels.preview.scrollHeight);
            return;
          }

          var scrollPosition = $(panels.input).scrollTop();
          var factor = panels.preview.scrollHeight / panels.input.scrollHeight;

          var desired = scrollPosition * factor;
          $preview.scrollTop(desired + 50);
        };

        var setupScrollSync = function() {
          var sync = _.throttle(syncScroll, 20);
          $(panels.input).scroll(function() {
            sync();
          });
        };

        // Adds event listeners to elements
        var setupEvents = function (inputElem, listener) {
            util.addEvent(inputElem, "input", listener);
            inputElem.onpaste = listener;
            inputElem.ondrop = listener;

            util.addEvent(inputElem, "keypress", listener);
            util.addEvent(inputElem, "keydown", listener);
        };

        var getDocScrollTop = function () {

            var result = 0;

            if (window.innerHeight) {
                result = window.pageYOffset;
            }
            else
                if (doc.documentElement && doc.documentElement.scrollTop) {
                    result = doc.documentElement.scrollTop;
                }
                else
                    if (doc.body) {
                        result = doc.body.scrollTop;
                    }

            return result;
        };

        var makePreviewHtml = function () {

            // If there is no registered preview panel
            // there is nothing to do.
            if (!panels.preview)
                return;


            var text = panels.input.value;
            if (text && text == oldInputText) {
                return; // Input text hasn't changed.
            }
            else {
                oldInputText = text;
            }

            var prevTime = new Date().getTime();

            var previewText;
            previewText = converter.makeHtml(text);

            // Calculate the processing time of the HTML creation.
            // It's used as the delay time in the event listener.
            var currTime = new Date().getTime();
            elapsedTime = currTime - prevTime;

            Ember.run(function() {
              pushPreviewHtml(previewText);
              syncScroll(true);
            });
        };

        // makePreviewHtml = window.probes.measure(makePreviewHtml, {
        //   before: function(){ window.probes.clear(); },
        //   name: "makePreview",
        //   after: function(p) { window.probes.clear(); console.log("Total time to preview: " + p.time); }
        // });


        // TODO allow us to inject this in (its our debouncer)
        var debounce = function(func,wait,trickle) {
          var timeout = null;
          return function(){
            var context = this;
            var args = arguments;

            later = function(){
              timeout = null;
              func.apply(context, args);
            };

            if (timeout!=null && trickle) {
              return;
            }

            var currentWait;
            if (typeof wait == "function") {
              currentWait = wait();
            } else {
              currentWait = wait;
            }

            if (timeout) { clearTimeout(timeout); }
            timeout = setTimeout(later, currentWait);
          }
        }

        makePreviewHtml = debounce(makePreviewHtml, function(){
          return Math.min(Math.max((elapsedTime || 1) * 10, 80),1000);
        }, true);


        // setTimeout is already used.  Used as an event listener.
        var applyTimeout = function () {

            if (timeout) {
                clearTimeout(timeout);
                timeout = undefined;
            }

            if (startType !== "manual") {

                var delay = 0;

                if (startType === "delayed") {
                    delay = elapsedTime;
                }

                if (delay > maxDelay) {
                    delay = maxDelay;
                }
                timeout = setTimeout(makePreviewHtml, delay);
            }
        };

        var getScaleFactor = function (panel) {
            if (panel.scrollHeight <= panel.clientHeight) {
                return 1;
            }
            return panel.scrollTop / (panel.scrollHeight - panel.clientHeight);
        };

        this.refresh = function (requiresRefresh) {
            if (requiresRefresh) {
                oldInputText = "";
                makePreviewHtml();
            }
            else {
                applyTimeout();
            }
        };

        this.processingTime = function () {
            return elapsedTime;
        };

        var isFirstTimeFilled = true;

        // IE doesn't let you use innerHTML if the element is contained somewhere in a table
        // (which is the case for inline editing) -- in that case, detach the element, set the
        // value, and reattach. Yes, that *is* ridiculous.
        var ieSafePreviewSet = function (previewText) {
            var ieSafeSet = function(panel, text) {
              var parent = panel.parentNode;
              var sibling = panel.nextSibling;
              parent.removeChild(panel);
              panel.innerHTML = text;
              if (!sibling)
                parent.appendChild(panel);
              else
                parent.insertBefore(panel, sibling);
            };

            ieSafeSet(panels.preview, previewText);
        }

        var nonSuckyBrowserPreviewSet = function (previewText) {
            panels.preview.innerHTML = previewText;
        }

        var previewSetter;

        var previewSet = function (previewText) {

            if (previewSetter)
                return previewSetter(previewText);

            try {
                nonSuckyBrowserPreviewSet(previewText);
                previewSetter = nonSuckyBrowserPreviewSet;
            } catch (e) {
                previewSetter = ieSafePreviewSet;
                previewSetter(previewText);
            }
        };

        var pushPreviewHtml = function (previewText) {

            var emptyTop = position.getTop(panels.input) - getDocScrollTop();

            if (panels.preview) {
                previewSet(previewText);
                previewRefreshCallback();
            }

            if (isFirstTimeFilled) {
                isFirstTimeFilled = false;
                return;
            }

            var fullTop = position.getTop(panels.input) - getDocScrollTop();

            if (uaSniffed.isIE) {
                setTimeout(function () {
                    window.scrollBy(0, fullTop - emptyTop);
                }, 0);
            }
            else {
                window.scrollBy(0, fullTop - emptyTop);
            }
        };

        var init = function () {

            // TODO: make option to disable. We don't need this in discourse
            // setupEvents(panels.input, applyTimeout);

            setupScrollSync();
            makePreviewHtml();
        };

        init();
    };

    // Creates the background behind the hyperlink text entry box.
    // And download dialog
    // Most of this has been moved to CSS but the div creation and
    // browser-specific hacks remain here.
    ui.createBackground = function () {

        var background = doc.createElement("div"),
            style = background.style;

        background.className = "wmd-prompt-background";

        style.position = "absolute";
        style.top = "0";

        style.zIndex = "2000";

        if (uaSniffed.isIE) {
            style.filter = "alpha(opacity=50)";
        }
        else {
            style.opacity = "0.5";
        }

        var pageSize = position.getPageSize();
        style.height = pageSize[1] + "px";

        if (uaSniffed.isIE) {
            style.left = doc.documentElement.scrollLeft;
            style.width = doc.documentElement.clientWidth;
        }
        else {
            style.left = "0";
            style.width = "100%";
        }

        doc.body.appendChild(background);
        return background;
    };

    // This simulates a modal dialog box and asks for the URL when you
    // click the hyperlink or image buttons.
    //
    // text: The html for the input box.
    // defaultInputText: The default value that appears in the input box.
    // callback: The function which is executed when the prompt is dismissed, either via OK or Cancel.
    //      It receives a single argument; either the entered text (if OK was chosen) or null (if Cancel
    //      was chosen).
    ui.prompt = function (text, defaultInputText, callback) {

        // These variables need to be declared at this level since they are used
        // in multiple functions.
        var dialog;         // The dialog box.
        var input;         // The text box where you enter the hyperlink.


        if (defaultInputText === undefined) {
            defaultInputText = "";
        }

        // Used as a keydown event handler. Esc dismisses the prompt.
        // Key code 27 is ESC.
        var checkEscape = function (key) {
            var code = (key.charCode || key.keyCode);
            if (code === 27) {
                close(true);
            }
        };

        // Dismisses the hyperlink input box.
        // isCancel is true if we don't care about the input text.
        // isCancel is false if we are going to keep the text.
        var close = function (isCancel) {
            util.removeEvent(doc.body, "keydown", checkEscape);
            var text = input.value;

            if (isCancel) {
                text = null;
            }
            else {
                // Fixes common pasting errors.
                text = text.replace(/^http:\/\/(https?|ftp):\/\//, '$1://');
                if (!/^(?:https?|ftp):\/\//.test(text))
                    text = 'http://' + text;
            }

            dialog.parentNode.removeChild(dialog);

            callback(text);
            return false;
        };



        // Create the text input box form/window.
        var createDialog = function () {

            // The main dialog box.
            dialog = doc.createElement("div");
            dialog.className = "wmd-prompt-dialog";
            dialog.style.padding = "10px;";
            dialog.style.position = "fixed";
            dialog.style.width = "400px";
            dialog.style.zIndex = "2001";

            // The dialog text.
            var question = doc.createElement("div");
            question.innerHTML = text;
            question.style.padding = "5px";
            dialog.appendChild(question);

            // The web form container for the text box and buttons.
            var form = doc.createElement("form"),
                style = form.style;
            form.onsubmit = function () { return close(false); };
            style.padding = "0";
            style.margin = "0";
            style.cssFloat = "left";
            style.width = "100%";
            style.textAlign = "center";
            style.position = "relative";
            dialog.appendChild(form);

            // The input text box
            input = doc.createElement("input");
            input.type = "text";
            input.value = defaultInputText;
            style = input.style;
            style.display = "block";
            style.width = "80%";
            style.marginLeft = style.marginRight = "auto";
            form.appendChild(input);

            // The ok button
            var okButton = doc.createElement("input");
            okButton.type = "button";
            okButton.onclick = function () { return close(false); };
            okButton.value = "OK";
            style = okButton.style;
            style.margin = "10px";
            style.display = "inline";
            style.width = "7em";


            // The cancel button
            var cancelButton = doc.createElement("input");
            cancelButton.type = "button";
            cancelButton.onclick = function () { return close(true); };
            cancelButton.value = "Cancel";
            style = cancelButton.style;
            style.margin = "10px";
            style.display = "inline";
            style.width = "7em";

            form.appendChild(okButton);
            form.appendChild(cancelButton);

            util.addEvent(doc.body, "keydown", checkEscape);
            dialog.style.top = "50%";
            dialog.style.left = "50%";
            dialog.style.display = "block";
            if (uaSniffed.isIE_5or6) {
                dialog.style.position = "absolute";
                dialog.style.top = doc.documentElement.scrollTop + 200 + "px";
                dialog.style.left = "50%";
            }
            doc.body.appendChild(dialog);

            // This has to be done AFTER adding the dialog to the form if you
            // want it to be centered.
            dialog.style.marginTop = -(position.getHeight(dialog) / 2) + "px";
            dialog.style.marginLeft = -(position.getWidth(dialog) / 2) + "px";

        };

        // Why is this in a zero-length timeout?
        // Is it working around a browser bug?
        setTimeout(function () {

            createDialog();

            var defTextLen = defaultInputText.length;
            if (input.selectionStart !== undefined) {
                input.selectionStart = 0;
                input.selectionEnd = defTextLen;
            }
            else if (input.createTextRange) {
                var range = input.createTextRange();
                range.collapse(false);
                range.moveStart("character", -defTextLen);
                range.moveEnd("character", defTextLen);
                range.select();
            }

            input.focus();
        }, 0);
    };

    function UIManager(postfix, panels, undoManager, previewManager, commandManager, helpOptions, getString) {

        var inputBox = panels.input,
            buttons = {}; // buttons.undo, buttons.link, etc. The actual DOM elements.

        makeSpritedButtonRow();

        var keyEvent = "keydown";
        if (uaSniffed.isOpera) {
            keyEvent = "keypress";
        }

        util.addEvent(inputBox, keyEvent, function (key) {

            // Check to see if we have a button key and, if so execute the callback.
            if ((key.ctrlKey || key.metaKey) && !key.altKey && !key.shiftKey) {

                var keyCode = key.charCode || key.keyCode;
                var keyCodeStr = String.fromCharCode(keyCode).toLowerCase();

                switch (keyCodeStr) {
                    case "b":
                        doClick(buttons.bold);
                        break;
                    case "i":
                        doClick(buttons.italic);
                        break;
                    case "l":
                        doClick(buttons.link);
                        break;
                    case "q":
                        doClick(buttons.quote);
                        break;
                    case "k":
                        doClick(buttons.code);
                        break;
                    case "g":
                        doClick(buttons.image);
                        break;
                    case "o":
                        doClick(buttons.olist);
                        break;
                    case "u":
                        doClick(buttons.ulist);
                        break;
                    case "h":
                        doClick(buttons.heading);
                        break;
                    default:
                        return;
                }


                if (key.preventDefault) {
                    key.preventDefault();
                }

                if (window.event) {
                    window.event.returnValue = false;
                }
            }
        });

        // Auto-indent on shift-enter
        util.addEvent(inputBox, "keyup", function (key) {
            if (key.shiftKey && !key.ctrlKey && !key.metaKey) {
                var keyCode = key.charCode || key.keyCode;
                // Character 13 is Enter
                if (keyCode === 13) {
                    var fakeButton = {};
                    fakeButton.textOp = bindCommand("doAutoindent");
                    doClick(fakeButton);
                }
            }
        });

        // special handler because IE clears the context of the textbox on ESC
        if (uaSniffed.isIE) {
            util.addEvent(inputBox, "keydown", function (key) {
                var code = key.keyCode;
                if (code === 27) {
                    return false;
                }
            });
        }


        // Perform the button's action.
        function doClick(button) {

            inputBox.focus();

            if (button && button.textOp) {

                if (undoManager) {
                    undoManager.setCommandMode();
                }

                var state = new TextareaState(panels);

                if (!state) {
                    return;
                }

                var chunks = state.getChunks();

                // Some commands launch a "modal" prompt dialog.  Javascript
                // can't really make a modal dialog box and the WMD code
                // will continue to execute while the dialog is displayed.
                // This prevents the dialog pattern I'm used to and means
                // I can't do something like this:
                //
                // var link = CreateLinkDialog();
                // makeMarkdownLink(link);
                //
                // Instead of this straightforward method of handling a
                // dialog I have to pass any code which would execute
                // after the dialog is dismissed (e.g. link creation)
                // in a function parameter.
                //
                // Yes this is awkward and I think it sucks, but there's
                // no real workaround.  Only the image and link code
                // create dialogs and require the function pointers.
                var fixupInputArea = function () {

                    inputBox.focus();

                    if (chunks) {
                        state.setChunks(chunks);
                    }

                    state.restore();
                    previewManager.refresh();
                };

                var noCleanup = button.textOp(chunks, fixupInputArea);

                if (!noCleanup) {
                    fixupInputArea();
                }

            }

            if (button.execute) {
                button.execute(undoManager);
            }
        };

        function setupButton(button, isEnabled) {

            if (isEnabled) {
                button.disabled = false

                // IE tries to select the background image "button" text (it's
                // implemented in a list item) so we have to cache the selection
                // on mousedown.
                if (uaSniffed.isIE) {
                    button.onmousedown = function () {
                        if (doc.activeElement && doc.activeElement !== panels.input) { // we're not even in the input box, so there's no selection
                            return;
                        }
                        panels.ieCachedRange = document.selection.createRange();
                        panels.ieCachedScrollTop = panels.input.scrollTop;
                    };
                }

                if (!button.isHelp) {
                    button.onclick = function () {
                        if (this.onmouseout) {
                            this.onmouseout();
                        }
                        doClick(this);
                        return false;
                    }
                }
            }
            else {
                button.disabled = true
                button.onmouseover = button.onmouseout = button.onclick = function () { };
            }
        }

        function bindCommand(method) {
            if (typeof PagedownCustom != "undefined" && PagedownCustom.customActions) {
                var custom = PagedownCustom.customActions[method];
                if (custom) {
                    return function() {
                        var args = Array.prototype.slice.call(arguments);
                        args.push(commandManager[method]);
                        return custom.apply(commandManager, args);
                    };
                }
            }

            if (typeof method === "string")
                method = commandManager[method];
            return function () { method.apply(commandManager, arguments); }
        }

        function makeSpritedButtonRow() {

            var buttonBar = panels.buttonBar;
            var buttonRow = document.createElement("div");
            buttonRow.id = "wmd-button-row" + postfix;
            buttonRow.className = 'wmd-button-row';
            buttonRow = buttonBar.appendChild(buttonRow);
            var xPosition = 0;
            var makeButton = function (id, title, textOp) {
                var button = document.createElement("button");
                button.className = "wmd-button";
                xPosition += 25;
                button.id = id + postfix;
                button.title = title;
                if (textOp)
                    button.textOp = textOp;
                setupButton(button, true);
                buttonRow.appendChild(button);
                return button;
            };

            var makeSpacer = function (num) {
                var spacer = document.createElement("div");
                spacer.className = "wmd-spacer";
                spacer.id = "wmd-spacer" + num + postfix;
                buttonRow.appendChild(spacer);
                xPosition += 25;
            }

            // If we have any buttons to insert, do it!
            if (typeof PagedownCustom != "undefined") {
                insertButtons = PagedownCustom.insertButtons
                if (insertButtons && (insertButtons.length > 0)) {
                    for (var i=0; i<insertButtons.length; i++) {
                        var b = insertButtons[i];
                        makeButton(b.id, b.description, b.execute)
                    }
                }
            }

            buttons.bold = makeButton("wmd-bold-button", getString("bold"), bindCommand("doBold"));
            buttons.italic = makeButton("wmd-italic-button", getString("italic"), bindCommand("doItalic"));
            makeSpacer(1);
            buttons.link = makeButton("wmd-link-button", getString("link"), bindCommand(function (chunk, postProcessing) {
                return this.doLinkOrImage(chunk, postProcessing, false);
            }));
            buttons.quote = makeButton("wmd-quote-button", getString("quote"), bindCommand("doBlockquote"));
            buttons.code = makeButton("wmd-code-button", getString("code"), bindCommand("doCode"));
            buttons.image = makeButton("wmd-image-button", getString("image"), bindCommand(function (chunk, postProcessing) {
                return this.doLinkOrImage(chunk, postProcessing, true);
            }));
            makeSpacer(2);
            buttons.olist = makeButton("wmd-olist-button", getString("olist"), bindCommand(function (chunk, postProcessing) {
                this.doList(chunk, postProcessing, true);
            }));
            buttons.ulist = makeButton("wmd-ulist-button", getString("ulist"), bindCommand(function (chunk, postProcessing) {
                this.doList(chunk, postProcessing, false);
            }));
            buttons.heading = makeButton("wmd-heading-button", getString("heading"), bindCommand("doHeading"));
            buttons.hr = makeButton("wmd-hr-button", getString("hr"), bindCommand("doHorizontalRule"));
            //makeSpacer(3);
            //buttons.undo = makeButton("wmd-undo-button", getString("undo"), null);
            //buttons.undo.execute = function (manager) { if (manager) manager.undo(); };

            // var redoTitle = /win/.test(nav.platform.toLowerCase()) ?
            //     getString("redo") :
            //     getString("redomac"); // mac and other non-Windows platforms

            //buttons.redo = makeButton("wmd-redo-button", redoTitle, null);
            //buttons.redo.execute = function (manager) { if (manager) manager.redo(); };

            if (helpOptions) {
                var helpButton = document.createElement("li");
                var helpButtonImage = document.createElement("span");
                helpButton.appendChild(helpButtonImage);
                helpButton.className = "wmd-button wmd-help-button";
                helpButton.id = "wmd-help-button" + postfix;
                helpButton.isHelp = true;
                helpButton.style.right = "0px";
                helpButton.title = getString("help");
                helpButton.onclick = helpOptions.handler;

                setupButton(helpButton, true);
                buttonRow.appendChild(helpButton);
                buttons.help = helpButton;
            }

            setUndoRedoButtonStates();
        }

        function setUndoRedoButtonStates() {
            if (undoManager) {
                setupButton(buttons.undo, undoManager.canUndo());
                setupButton(buttons.redo, undoManager.canRedo());
            }
        };

        this.setUndoRedoButtonStates = setUndoRedoButtonStates;

    }

    function CommandManager(pluginHooks, getString) {
        this.hooks = pluginHooks;
        this.getString = getString;
    }

    var commandProto = CommandManager.prototype;

    // The markdown symbols - 4 spaces = code, > = blockquote, etc.
    commandProto.prefixes = "(?:\\s{4,}|\\s*>|\\s*-\\s+|\\s*\\d+\\.|=|\\+|-|_|\\*|#|\\s*\\[[^\n]]+\\]:)";

    // Remove markdown symbols from the chunk selection.
    commandProto.unwrap = function (chunk) {
        var txt = new re("([^\\n])\\n(?!(\\n|" + this.prefixes + "))", "g");
        chunk.selection = chunk.selection.replace(txt, "$1 $2");
    };

    commandProto.wrap = function (chunk, len) {
        this.unwrap(chunk);
        var regex = new re("(.{1," + len + "})( +|$\\n?)", "gm"),
            that = this;

        chunk.selection = chunk.selection.replace(regex, function (line, marked) {
            if (new re("^" + that.prefixes, "").test(line)) {
                return line;
            }
            return marked + "\n";
        });

        chunk.selection = chunk.selection.replace(/\s+$/, "");
    };

    commandProto.doBold = function (chunk, postProcessing) {
        return this.doBorI(chunk, postProcessing, 2, this.getString("boldexample"));
    };

    commandProto.doItalic = function (chunk, postProcessing) {
        return this.doBorI(chunk, postProcessing, 1, this.getString("italicexample"));
    };

    // chunk: The selected region that will be enclosed with */**
    // nStars: 1 for italics, 2 for bold
    // insertText: If you just click the button without highlighting text, this gets inserted
    commandProto.doBorI = function (chunk, postProcessing, nStars, insertText) {

        // Get rid of whitespace and fixup newlines.
        chunk.trimWhitespace();
        chunk.selection = chunk.selection.replace(/\n{2,}/g, "\n");

        // Look for stars before and after.  Is the chunk already marked up?
        // note that these regex matches cannot fail
        var starsBefore = /(\**$)/.exec(chunk.before)[0];
        var starsAfter = /(^\**)/.exec(chunk.after)[0];

        var prevStars = Math.min(starsBefore.length, starsAfter.length);

        // Remove stars if we have to since the button acts as a toggle.
        if ((prevStars >= nStars) && (prevStars != 2 || nStars != 1)) {
            chunk.before = chunk.before.replace(re("[*]{" + nStars + "}$", ""), "");
            chunk.after = chunk.after.replace(re("^[*]{" + nStars + "}", ""), "");
        }
        else if (!chunk.selection && starsAfter) {
            // It's not really clear why this code is necessary.  It just moves
            // some arbitrary stuff around.
            chunk.after = chunk.after.replace(/^([*_]*)/, "");
            chunk.before = chunk.before.replace(/(\s?)$/, "");
            var whitespace = re.$1;
            chunk.before = chunk.before + starsAfter + whitespace;
        }
        else {

            // In most cases, if you don't have any selected text and click the button
            // you'll get a selected, marked up region with the default text inserted.
            if (!chunk.selection && !starsAfter) {
                chunk.selection = insertText;
            }

            // Add the true markup.
            var markup = nStars <= 1 ? "*" : "**"; // shouldn't the test be = ?
            chunk.before = chunk.before + markup;
            chunk.after = markup + chunk.after;
        }

        return;
    };

    commandProto.stripLinkDefs = function (text, defsToAdd) {

        text = text.replace(/^[ ]{0,3}\[(\d+)\]:[ \t]*\n?[ \t]*<?(\S+?)>?[ \t]*\n?[ \t]*(?:(\n*)["(](.+?)[")][ \t]*)?(?:\n+|$)/gm,
            function (totalMatch, id, link, newlines, title) {
                defsToAdd[id] = totalMatch.replace(/\s*$/, "");
                if (newlines) {
                    // Strip the title and return that separately.
                    defsToAdd[id] = totalMatch.replace(/["(](.+?)[")]$/, "");
                    return newlines + title;
                }
                return "";
            });

        return text;
    };

    commandProto.addLinkDef = function (chunk, linkDef) {

        var refNumber = 0; // The current reference number
        var defsToAdd = {}; //
        // Start with a clean slate by removing all previous link definitions.
        chunk.before = this.stripLinkDefs(chunk.before, defsToAdd);
        chunk.selection = this.stripLinkDefs(chunk.selection, defsToAdd);
        chunk.after = this.stripLinkDefs(chunk.after, defsToAdd);

        var defs = "";
        var regex = /(\[)((?:\[[^\]]*\]|[^\[\]])*)(\][ ]?(?:\n[ ]*)?\[)(\d+)(\])/g;

        var addDefNumber = function (def) {
            refNumber++;
            def = def.replace(/^[ ]{0,3}\[(\d+)\]:/, "  [" + refNumber + "]:");
            defs += "\n" + def;
        };

        // note that
        // a) the recursive call to getLink cannot go infinite, because by definition
        //    of regex, inner is always a proper substring of wholeMatch, and
        // b) more than one level of nesting is neither supported by the regex
        //    nor making a lot of sense (the only use case for nesting is a linked image)
        var getLink = function (wholeMatch, before, inner, afterInner, id, end) {
            inner = inner.replace(regex, getLink);
            if (defsToAdd[id]) {
                addDefNumber(defsToAdd[id]);
                return before + inner + afterInner + refNumber + end;
            }
            return wholeMatch;
        };

        chunk.before = chunk.before.replace(regex, getLink);

        if (linkDef) {
            addDefNumber(linkDef);
        }
        else {
            chunk.selection = chunk.selection.replace(regex, getLink);
        }

        var refOut = refNumber;

        chunk.after = chunk.after.replace(regex, getLink);

        if (chunk.after) {
            chunk.after = chunk.after.replace(/\n*$/, "");
        }
        if (!chunk.after) {
            chunk.selection = chunk.selection.replace(/\n*$/, "");
        }

        chunk.after += "\n\n" + defs;

        return refOut;
    };

    // takes the line as entered into the add link/as image dialog and makes
    // sure the URL and the optinal title are "nice".
    function properlyEncoded(linkdef) {
        return linkdef.replace(/^\s*(.*?)(?:\s+"(.+)")?\s*$/, function (wholematch, link, title) {
            link = link.replace(/\?.*$/, function (querypart) {
                return querypart.replace(/\+/g, " "); // in the query string, a plus and a space are identical
            });
            link = decodeURIComponent(link); // unencode first, to prevent double encoding
            link = encodeURI(link).replace(/'/g, '%27').replace(/\(/g, '%28').replace(/\)/g, '%29');
            link = link.replace(/\?.*$/, function (querypart) {
                return querypart.replace(/\+/g, "%2b"); // since we replaced plus with spaces in the query part, all pluses that now appear where originally encoded
            });
            if (title) {
                title = title.trim ? title.trim() : title.replace(/^\s*/, "").replace(/\s*$/, "");
                title = title.replace(/"/g, "quot;").replace(/\(/g, "&#40;").replace(/\)/g, "&#41;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
            }
            return title ? link + ' "' + title + '"' : link;
        });
    }

    commandProto.doLinkOrImage = function (chunk, postProcessing, isImage) {

        chunk.trimWhitespace();
        chunk.findTags(/\s*!?\[/, /\][ ]?(?:\n[ ]*)?(\[.*?\])?/);
        var background;

        if (chunk.endTag.length > 1 && chunk.startTag.length > 0) {

            chunk.startTag = chunk.startTag.replace(/!?\[/, "");
            chunk.endTag = "";
            this.addLinkDef(chunk, null);

        }
        else {

            // We're moving start and end tag back into the selection, since (as we're in the else block) we're not
            // *removing* a link, but *adding* one, so whatever findTags() found is now back to being part of the
            // link text. linkEnteredCallback takes care of escaping any brackets.
            chunk.selection = chunk.startTag + chunk.selection + chunk.endTag;
            chunk.startTag = chunk.endTag = "";

            if (/\n\n/.test(chunk.selection)) {
                this.addLinkDef(chunk, null);
                return;
            }
            var that = this;
            // The function to be executed when you enter a link and press OK or Cancel.
            // Marks up the link and adds the ref.
            var linkEnteredCallback = function (link) {

                background.parentNode.removeChild(background);

                if (link !== null) {
                    // (                          $1
                    //     [^\\]                  anything that's not a backslash
                    //     (?:\\\\)*              an even number (this includes zero) of backslashes
                    // )
                    // (?=                        followed by
                    //     [[\]]                  an opening or closing bracket
                    // )
                    //
                    // In other words, a non-escaped bracket. These have to be escaped now to make sure they
                    // don't count as the end of the link or similar.
                    // Note that the actual bracket has to be a lookahead, because (in case of to subsequent brackets),
                    // the bracket in one match may be the "not a backslash" character in the next match, so it
                    // should not be consumed by the first match.
                    // The "prepend a space and finally remove it" steps makes sure there is a "not a backslash" at the
                    // start of the string, so this also works if the selection begins with a bracket. We cannot solve
                    // this by anchoring with ^, because in the case that the selection starts with two brackets, this
                    // would mean a zero-width match at the start. Since zero-width matches advance the string position,
                    // the first bracket could then not act as the "not a backslash" for the second.
                    chunk.selection = (" " + chunk.selection).replace(/([^\\](?:\\\\)*)(?=[[\]])/g, "$1\\").substr(1);

                    var linkDef = " [999]: " + properlyEncoded(link);

                    var num = that.addLinkDef(chunk, linkDef);
                    chunk.startTag = isImage ? "![" : "[";
                    chunk.endTag = "][" + num + "]";

                    if (!chunk.selection) {
                        if (isImage) {
                            chunk.selection = that.getString("imagedescription");
                        }
                        else {
                            chunk.selection = that.getString("linkdescription");
                        }
                    }
                }
                postProcessing();
            };

            background = ui.createBackground();

            if (isImage) {
                if (!this.hooks.insertImageDialog(linkEnteredCallback))
                    ui.prompt(this.getString("imagedialog"), imageDefaultText, linkEnteredCallback);
            }
            else {
                ui.prompt(this.getString("linkdialog"), linkDefaultText, linkEnteredCallback);
            }
            return true;
        }
    };

    // When making a list, hitting shift-enter will put your cursor on the next line
    // at the current indent level.
    commandProto.doAutoindent = function (chunk, postProcessing) {

        var commandMgr = this,
            fakeSelection = false;

        chunk.before = chunk.before.replace(/(\n|^)[ ]{0,3}([*+-]|\d+[.])[ \t]*\n$/, "\n\n");
        chunk.before = chunk.before.replace(/(\n|^)[ ]{0,3}>[ \t]*\n$/, "\n\n");
        chunk.before = chunk.before.replace(/(\n|^)[ \t]+\n$/, "\n\n");

        // There's no selection, end the cursor wasn't at the end of the line:
        // The user wants to split the current list item / code line / blockquote line
        // (for the latter it doesn't really matter) in two. Temporarily select the
        // (rest of the) line to achieve this.
        if (!chunk.selection && !/^[ \t]*(?:\n|$)/.test(chunk.after)) {
            chunk.after = chunk.after.replace(/^[^\n]*/, function (wholeMatch) {
                chunk.selection = wholeMatch;
                return "";
            });
            fakeSelection = true;
        }

        if (/(\n|^)[ ]{0,3}([*+-]|\d+[.])[ \t]+.*\n$/.test(chunk.before)) {
            if (commandMgr.doList) {
                commandMgr.doList(chunk);
            }
        }
        if (/(\n|^)[ ]{0,3}>[ \t]+.*\n$/.test(chunk.before)) {
            if (commandMgr.doBlockquote) {
                commandMgr.doBlockquote(chunk);
            }
        }
        if (/(\n|^)(\t|[ ]{4,}).*\n$/.test(chunk.before)) {
            if (commandMgr.doCode) {
                commandMgr.doCode(chunk);
            }
        }

        if (fakeSelection) {
            chunk.after = chunk.selection + chunk.after;
            chunk.selection = "";
        }
    };

    commandProto.doBlockquote = function (chunk, postProcessing) {

        chunk.selection = chunk.selection.replace(/^(\n*)([^\r]+?)(\n*)$/,
            function (totalMatch, newlinesBefore, text, newlinesAfter) {
                chunk.before += newlinesBefore;
                chunk.after = newlinesAfter + chunk.after;
                return text;
            });

        chunk.before = chunk.before.replace(/(>[ \t]*)$/,
            function (totalMatch, blankLine) {
                chunk.selection = blankLine + chunk.selection;
                return "";
            });

        chunk.selection = chunk.selection.replace(/^(\s|>)+$/, "");
        chunk.selection = chunk.selection || this.getString("quoteexample");

        // The original code uses a regular expression to find out how much of the
        // text *directly before* the selection already was a blockquote:

        /*
        if (chunk.before) {
        chunk.before = chunk.before.replace(/\n?$/, "\n");
        }
        chunk.before = chunk.before.replace(/(((\n|^)(\n[ \t]*)*>(.+\n)*.*)+(\n[ \t]*)*$)/,
        function (totalMatch) {
        chunk.startTag = totalMatch;
        return "";
        });
        */

        // This comes down to:
        // Go backwards as many lines a possible, such that each line
        //  a) starts with ">", or
        //  b) is almost empty, except for whitespace, or
        //  c) is preceeded by an unbroken chain of non-empty lines
        //     leading up to a line that starts with ">" and at least one more character
        // and in addition
        //  d) at least one line fulfills a)
        //
        // Since this is essentially a backwards-moving regex, it's susceptible to
        // catstrophic backtracking and can cause the browser to hang;
        // see e.g. http://meta.stackoverflow.com/questions/9807.
        //
        // Hence we replaced this by a simple state machine that just goes through the
        // lines and checks for a), b), and c).

        var match = "",
            leftOver = "",
            line;
        if (chunk.before) {
            var lines = chunk.before.replace(/\n$/, "").split("\n");
            var inChain = false;
            for (var i = 0; i < lines.length; i++) {
                var good = false;
                line = lines[i];
                inChain = inChain && line.length > 0; // c) any non-empty line continues the chain
                if (/^>/.test(line)) {                // a)
                    good = true;
                    if (!inChain && line.length > 1)  // c) any line that starts with ">" and has at least one more character starts the chain
                        inChain = true;
                } else if (/^[ \t]*$/.test(line)) {   // b)
                    good = true;
                } else {
                    good = inChain;                   // c) the line is not empty and does not start with ">", so it matches if and only if we're in the chain
                }
                if (good) {
                    match += line + "\n";
                } else {
                    leftOver += match + line;
                    match = "\n";
                }
            }
            if (!/(^|\n)>/.test(match)) {             // d)
                leftOver += match;
                match = "";
            }
        }

        chunk.startTag = match;
        chunk.before = leftOver;

        // end of change

        if (chunk.after) {
            chunk.after = chunk.after.replace(/^\n?/, "\n");
        }

        chunk.after = chunk.after.replace(/^(((\n|^)(\n[ \t]*)*>(.+\n)*.*)+(\n[ \t]*)*)/,
            function (totalMatch) {
                chunk.endTag = totalMatch;
                return "";
            }
        );

        var replaceBlanksInTags = function (useBracket) {

            var replacement = useBracket ? "> " : "";

            if (chunk.startTag) {
                chunk.startTag = chunk.startTag.replace(/\n((>|\s)*)\n$/,
                    function (totalMatch, markdown) {
                        return "\n" + markdown.replace(/^[ ]{0,3}>?[ \t]*$/gm, replacement) + "\n";
                    });
            }
            if (chunk.endTag) {
                chunk.endTag = chunk.endTag.replace(/^\n((>|\s)*)\n/,
                    function (totalMatch, markdown) {
                        return "\n" + markdown.replace(/^[ ]{0,3}>?[ \t]*$/gm, replacement) + "\n";
                    });
            }
        };

        if (/^(?![ ]{0,3}>)/m.test(chunk.selection)) {
            this.wrap(chunk, SETTINGS.lineLength - 2);
            chunk.selection = chunk.selection.replace(/^/gm, "> ");
            replaceBlanksInTags(true);
            chunk.skipLines();
        } else {
            chunk.selection = chunk.selection.replace(/^[ ]{0,3}> ?/gm, "");
            this.unwrap(chunk);
            replaceBlanksInTags(false);

            if (!/^(\n|^)[ ]{0,3}>/.test(chunk.selection) && chunk.startTag) {
                chunk.startTag = chunk.startTag.replace(/\n{0,2}$/, "\n\n");
            }

            if (!/(\n|^)[ ]{0,3}>.*$/.test(chunk.selection) && chunk.endTag) {
                chunk.endTag = chunk.endTag.replace(/^\n{0,2}/, "\n\n");
            }
        }

        chunk.selection = this.hooks.postBlockquoteCreation(chunk.selection);

        if (!/\n/.test(chunk.selection)) {
            chunk.selection = chunk.selection.replace(/^(> *)/,
            function (wholeMatch, blanks) {
                chunk.startTag += blanks;
                return "";
            });
        }
    };

    commandProto.doCode = function (chunk, postProcessing) {

        var hasTextBefore = /\S[ ]*$/.test(chunk.before);
        var hasTextAfter = /^[ ]*\S/.test(chunk.after);

        // Use 'four space' markdown if the selection is on its own
        // line or is multiline.
        if ((!hasTextAfter && !hasTextBefore) || /\n/.test(chunk.selection)) {

            chunk.before = chunk.before.replace(/[ ]{4}$/,
                function (totalMatch) {
                    chunk.selection = totalMatch + chunk.selection;
                    return "";
                });

            var nLinesBack = 1;
            var nLinesForward = 1;

            if (/(\n|^)(\t|[ ]{4,}).*\n$/.test(chunk.before)) {
                nLinesBack = 0;
            }
            if (/^\n(\t|[ ]{4,})/.test(chunk.after)) {
                nLinesForward = 0;
            }

            chunk.skipLines(nLinesBack, nLinesForward);

            if (!chunk.selection) {
                chunk.startTag = "    ";
                chunk.selection = this.getString("codeexample");
            }
            else {
                if (/^[ ]{0,3}\S/m.test(chunk.selection)) {
                    if (/\n/.test(chunk.selection))
                        chunk.selection = chunk.selection.replace(/^/gm, "    ");
                    else // if it's not multiline, do not select the four added spaces; this is more consistent with the doList behavior
                        chunk.before += "    ";
                }
                else {
                    chunk.selection = chunk.selection.replace(/^(?:[ ]{4}|[ ]{0,3}\t)/gm, "");
                }
            }
        }
        else {
            // Use backticks (`) to delimit the code block.

            chunk.trimWhitespace();
            chunk.findTags(/`/, /`/);

            if (!chunk.startTag && !chunk.endTag) {
                chunk.startTag = chunk.endTag = "`";
                if (!chunk.selection) {
                    chunk.selection = this.getString("codeexample");
                }
            }
            else if (chunk.endTag && !chunk.startTag) {
                chunk.before += chunk.endTag;
                chunk.endTag = "";
            }
            else {
                chunk.startTag = chunk.endTag = "";
            }
        }
    };

    commandProto.doList = function (chunk, postProcessing, isNumberedList) {

        // These are identical except at the very beginning and end.
        // Should probably use the regex extension function to make this clearer.
        var previousItemsRegex = /(\n|^)(([ ]{0,3}([*+-]|\d+[.])[ \t]+.*)(\n.+|\n{2,}([*+-].*|\d+[.])[ \t]+.*|\n{2,}[ \t]+\S.*)*)\n*$/;
        var nextItemsRegex = /^\n*(([ ]{0,3}([*+-]|\d+[.])[ \t]+.*)(\n.+|\n{2,}([*+-].*|\d+[.])[ \t]+.*|\n{2,}[ \t]+\S.*)*)\n*/;

        // The default bullet is a dash but others are possible.
        // This has nothing to do with the particular HTML bullet,
        // it's just a markdown bullet.
        var bullet = "-";

        // The number in a numbered list.
        var num = 1;

        // Get the item prefix - e.g. " 1. " for a numbered list, " - " for a bulleted list.
        var getItemPrefix = function () {
            var prefix;
            if (isNumberedList) {
                prefix = " " + num + ". ";
                num++;
            }
            else {
                prefix = " " + bullet + " ";
            }
            return prefix;
        };

        // Fixes the prefixes of the other list items.
        var getPrefixedItem = function (itemText) {

            // The numbering flag is unset when called by autoindent.
            if (isNumberedList === undefined) {
                isNumberedList = /^\s*\d/.test(itemText);
            }

            // Renumber/bullet the list element.
            itemText = itemText.replace(/^[ ]{0,3}([*+-]|\d+[.])\s/gm,
                function (_) {
                    return getItemPrefix();
                });

            return itemText;
        };

        chunk.findTags(/(\n|^)*[ ]{0,3}([*+-]|\d+[.])\s+/, null);

        if (chunk.before && !/\n$/.test(chunk.before) && !/^\n/.test(chunk.startTag)) {
            chunk.before += chunk.startTag;
            chunk.startTag = "";
        }

        if (chunk.startTag) {

            var hasDigits = /\d+[.]/.test(chunk.startTag);
            chunk.startTag = "";
            chunk.selection = chunk.selection.replace(/\n[ ]{4}/g, "\n");
            this.unwrap(chunk);
            chunk.skipLines();

            if (hasDigits) {
                // Have to renumber the bullet points if this is a numbered list.
                chunk.after = chunk.after.replace(nextItemsRegex, getPrefixedItem);
            }
            if (isNumberedList == hasDigits) {
                return;
            }
        }

        var nLinesUp = 1;

        chunk.before = chunk.before.replace(previousItemsRegex,
            function (itemText) {
                if (/^\s*([*+-])/.test(itemText)) {
                    bullet = re.$1;
                }
                nLinesUp = /[^\n]\n\n[^\n]/.test(itemText) ? 1 : 0;
                return getPrefixedItem(itemText);
            });

        if (!chunk.selection) {
            chunk.selection = this.getString("litem");
        }

        var prefix = getItemPrefix();

        var nLinesDown = 1;

        chunk.after = chunk.after.replace(nextItemsRegex,
            function (itemText) {
                nLinesDown = /[^\n]\n\n[^\n]/.test(itemText) ? 1 : 0;
                return getPrefixedItem(itemText);
            });

        chunk.trimWhitespace(true);
        chunk.skipLines(nLinesUp, nLinesDown, true);
        chunk.startTag = prefix;
        var spaces = prefix.replace(/./g, " ");
        this.wrap(chunk, SETTINGS.lineLength - spaces.length);
        chunk.selection = chunk.selection.replace(/\n/g, "\n" + spaces);

    };

    commandProto.doHeading = function (chunk, postProcessing) {

        // Remove leading/trailing whitespace and reduce internal spaces to single spaces.
        chunk.selection = chunk.selection.replace(/\s+/g, " ");
        chunk.selection = chunk.selection.replace(/(^\s+|\s+$)/g, "");

        // If we clicked the button with no selected text, we just
        // make a level 2 hash header around some default text.
        if (!chunk.selection) {
            chunk.startTag = "## ";
            chunk.selection = this.getString("headingexample");
            chunk.endTag = " ##";
            return;
        }

        var headerLevel = 0;     // The existing header level of the selected text.

        // Remove any existing hash heading markdown and save the header level.
        chunk.findTags(/#+[ ]*/, /[ ]*#+/);
        if (/#+/.test(chunk.startTag)) {
            headerLevel = re.lastMatch.length;
        }
        chunk.startTag = chunk.endTag = "";

        // Try to get the current header level by looking for - and = in the line
        // below the selection.
        chunk.findTags(null, /\s?(-+|=+)/);
        if (/=+/.test(chunk.endTag)) {
            headerLevel = 1;
        }
        if (/-+/.test(chunk.endTag)) {
            headerLevel = 2;
        }

        // Skip to the next line so we can create the header markdown.
        chunk.startTag = chunk.endTag = "";
        chunk.skipLines(1, 1);

        // We make a level 2 header if there is no current header.
        // If there is a header level, we substract one from the header level.
        // If it's already a level 1 header, it's removed.
        var headerLevelToCreate = headerLevel == 0 ? 2 : headerLevel - 1;

        if (headerLevelToCreate > 0) {

            // The button only creates level 1 and 2 underline headers.
            // Why not have it iterate over hash header levels?  Wouldn't that be easier and cleaner?
            var headerChar = headerLevelToCreate >= 2 ? "-" : "=";
            var len = chunk.selection.length;
            if (len > SETTINGS.lineLength) {
                len = SETTINGS.lineLength;
            }
            chunk.endTag = "\n";
            while (len--) {
                chunk.endTag += headerChar;
            }
        }
    };

    commandProto.doHorizontalRule = function (chunk, postProcessing) {
        chunk.startTag = "----------\n";
        chunk.selection = "";
        chunk.skipLines(2, 1, true);
    }


})();


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/Markdown.Editor.js'] = "// needs Markdown.Converter.js at the moment\n\n\n// To insert extra buttons:\n//\n//  Before this file is required, define a PagedownCustom object. Give it an attribtue of insertButtons, which is an array\n//  of the buttons you want to insert. For example:\n//\n//      window.PagedownCustom = {\n//        insertButtons: [\n//          {\n//            id: 'wmd-bark',\n//            description: 'Bark',\n//            execute: function() {\n//              return alert('woof!');\n//            }\n//          }\n//        ]\n//      };\n//\n// To extend actions:\n//\n//      window.PagedownCustom = {\n//          customActions: {\n//             \"doBlockquote\": function(chunk, postProcessing, oldDoBlockquote) {\n//               console.log('custom blockquote called!');\n//               return oldDoBlockquote.call(this, chunk, postProcessing);\n//             }\n//          }\n//      };\n\n\n(function () {\n\n    var util = {},\n        position = {},\n        ui = {},\n        doc = window.document,\n        re = window.RegExp,\n        nav = window.navigator,\n        SETTINGS = { lineLength: 72 },\n\n    // Used to work around some browser bugs where we can't use feature testing.\n        uaSniffed = {\n            isIE: /msie/.test(nav.userAgent.toLowerCase()),\n            isIE_5or6: /msie 6/.test(nav.userAgent.toLowerCase()) || /msie 5/.test(nav.userAgent.toLowerCase()),\n            isOpera: /opera/.test(nav.userAgent.toLowerCase())\n        };\n\n    var defaultsStrings = {\n        bold: \"Strong \u003cstrong\u003e Ctrl+B\",\n        boldexample: \"strong text\",\n\n        italic: \"Emphasis \u003cem\u003e Ctrl+I\",\n        italicexample: \"emphasized text\",\n\n        link: \"Hyperlink \u003ca\u003e Ctrl+L\",\n        linkdescription: \"enter link description here\",\n        linkdialog: \"\u003cp\u003e\u003cb\u003eInsert Hyperlink\u003c/b\u003e\u003c/p\u003e\u003cp\u003ehttp://example.com/ \\\"optional title\\\"\u003c/p\u003e\",\n\n        quote: \"Blockquote \u003cblockquote\u003e Ctrl+Q\",\n        quoteexample: \"Blockquote\",\n\n        code: \"Code Sample \u003cpre\u003e\u003ccode\u003e Ctrl+K\",\n        codeexample: \"enter code here\",\n\n        image: \"Image \u003cimg\u003e Ctrl+G\",\n        imagedescription: \"enter image description here\",\n        imagedialog: \"\u003cp\u003e\u003cb\u003eInsert Image\u003c/b\u003e\u003c/p\u003e\u003cp\u003ehttp://example.com/images/diagram.jpg \\\"optional title\\\"\u003cbr\u003e\u003cbr\u003eNeed \u003ca href='http://www.google.com/search?q=free+image+hosting' target='_blank'\u003efree image hosting?\u003c/a\u003e\u003c/p\u003e\",\n\n        olist: \"Numbered List \u003col\u003e Ctrl+O\",\n        ulist: \"Bulleted List \u003cul\u003e Ctrl+U\",\n        litem: \"List item\",\n\n        heading: \"Heading \u003ch1\u003e/\u003ch2\u003e Ctrl+H\",\n        headingexample: \"Heading\",\n\n        hr: \"Horizontal Rule \u003chr\u003e Ctrl+R\",\n\n        undo: \"Undo - Ctrl+Z\",\n        redo: \"Redo - Ctrl+Y\",\n        redomac: \"Redo - Ctrl+Shift+Z\",\n\n        help: \"Markdown Editing Help\"\n    };\n\n\n    // -------------------------------------------------------------------\n    //  YOUR CHANGES GO HERE\n    //\n    // I've tried to localize the things you are likely to change to\n    // this area.\n    // -------------------------------------------------------------------\n\n    // The default text that appears in the dialog input box when entering\n    // links.\n    var imageDefaultText = \"http://\";\n    var linkDefaultText = \"http://\";\n\n    // -------------------------------------------------------------------\n    //  END OF YOUR CHANGES\n    // -------------------------------------------------------------------\n\n    // options, if given, can have the following properties:\n    //   options.helpButton = { handler: yourEventHandler }\n    //   options.strings = { italicexample: \"slanted text\" }\n    // `yourEventHandler` is the click handler for the help button.\n    // If `options.helpButton` isn't given, not help button is created.\n    // `options.strings` can have any or all of the same properties as\n    // `defaultStrings` above, so you can just override some string displayed\n    // to the user on a case-by-case basis, or translate all strings to\n    // a different language.\n    //\n    // For backwards compatibility reasons, the `options` argument can also\n    // be just the `helpButton` object, and `strings.help` can also be set via\n    // `helpButton.title`. This should be considered legacy.\n    //\n    // The constructed editor object has the methods:\n    // - getConverter() returns the markdown converter object that was passed to the constructor\n    // - run() actually starts the editor; should be called after all necessary plugins are registered. Calling this more than once is a no-op.\n    // - refreshPreview() forces the preview to be updated. This method is only available after run() was called.\n    Markdown.Editor = function (markdownConverter, idPostfix, options) {\n\n        options = options || {};\n\n        if (typeof options.handler === \"function\") { //backwards compatible behavior\n            options = { helpButton: options };\n        }\n        options.strings = options.strings || {};\n        if (options.helpButton) {\n            options.strings.help = options.strings.help || options.helpButton.title;\n        }\n        var getString = function (identifier) { return options.strings[identifier] || defaultsStrings[identifier]; }\n\n        idPostfix = idPostfix || \"\";\n\n        var hooks = this.hooks = new Markdown.HookCollection();\n        hooks.addNoop(\"onPreviewRefresh\");       // called with no arguments after the preview has been refreshed\n        hooks.addNoop(\"postBlockquoteCreation\"); // called with the user's selection *after* the blockquote was created; should return the actual to-be-inserted text\n        hooks.addFalse(\"insertImageDialog\");     /* called with one parameter: a callback to be called with the URL of the image. If the application creates\n                                                  * its own image insertion dialog, this hook should return true, and the callback should be called with the chosen\n                                                  * image url (or null if the user cancelled). If this hook returns false, the default dialog will be used.\n                                                  */\n\n        this.getConverter = function () { return markdownConverter; }\n\n        var that = this,\n            panels;\n\n        this.run = function () {\n            if (panels)\n                return; // already initialized\n\n            panels = new PanelCollection(idPostfix);\n            var commandManager = new CommandManager(hooks, getString);\n            var previewManager = new PreviewManager(markdownConverter, panels, function () { hooks.onPreviewRefresh(); });\n            var undoManager, uiManager;\n\n            if (false \u0026\u0026 !/\\?noundo/.test(doc.location.href)) {\n                undoManager = new UndoManager(function () {\n                    previewManager.refresh();\n                    if (uiManager) // not available on the first call\n                        uiManager.setUndoRedoButtonStates();\n                }, panels);\n                this.textOperation = function (f) {\n                    undoManager.setCommandMode();\n                    f();\n                    that.refreshPreview();\n                }\n            }\n\n            uiManager = new UIManager(idPostfix, panels, undoManager, previewManager, commandManager, options.helpButton, getString);\n            uiManager.setUndoRedoButtonStates();\n\n            var forceRefresh = that.refreshPreview = function () { previewManager.refresh(true); };\n\n            forceRefresh();\n        };\n\n    }\n\n    // before: contains all the text in the input box BEFORE the selection.\n    // after: contains all the text in the input box AFTER the selection.\n    function Chunks() { }\n\n    // startRegex: a regular expression to find the start tag\n    // endRegex: a regular expresssion to find the end tag\n    Chunks.prototype.findTags = function (startRegex, endRegex) {\n\n        var chunkObj = this;\n        var regex;\n\n        if (startRegex) {\n\n            regex = util.extendRegExp(startRegex, \"\", \"$\");\n\n            this.before = this.before.replace(regex,\n                function (match) {\n                    chunkObj.startTag = chunkObj.startTag + match;\n                    return \"\";\n                });\n\n            regex = util.extendRegExp(startRegex, \"^\", \"\");\n\n            this.selection = this.selection.replace(regex,\n                function (match) {\n                    chunkObj.startTag = chunkObj.startTag + match;\n                    return \"\";\n                });\n        }\n\n        if (endRegex) {\n\n            regex = util.extendRegExp(endRegex, \"\", \"$\");\n\n            this.selection = this.selection.replace(regex,\n                function (match) {\n                    chunkObj.endTag = match + chunkObj.endTag;\n                    return \"\";\n                });\n\n            regex = util.extendRegExp(endRegex, \"^\", \"\");\n\n            this.after = this.after.replace(regex,\n                function (match) {\n                    chunkObj.endTag = match + chunkObj.endTag;\n                    return \"\";\n                });\n        }\n    };\n\n    // If remove is false, the whitespace is transferred\n    // to the before/after regions.\n    //\n    // If remove is true, the whitespace disappears.\n    Chunks.prototype.trimWhitespace = function (remove) {\n        var beforeReplacer, afterReplacer, that = this;\n        if (remove) {\n            beforeReplacer = afterReplacer = \"\";\n        } else {\n            beforeReplacer = function (s) { that.before += s; return \"\"; }\n            afterReplacer = function (s) { that.after = s + that.after; return \"\"; }\n        }\n\n        this.selection = this.selection.replace(/^(\\s*)/, beforeReplacer).replace(/(\\s*)$/, afterReplacer);\n    };\n\n\n    Chunks.prototype.skipLines = function (nLinesBefore, nLinesAfter, findExtraNewlines) {\n\n        if (nLinesBefore === undefined) {\n            nLinesBefore = 1;\n        }\n\n        if (nLinesAfter === undefined) {\n            nLinesAfter = 1;\n        }\n\n        nLinesBefore++;\n        nLinesAfter++;\n\n        var regexText;\n        var replacementText;\n\n        // chrome bug ... documented at: http://meta.stackoverflow.com/questions/63307/blockquote-glitch-in-editor-in-chrome-6-and-7/65985#65985\n        if (navigator.userAgent.match(/Chrome/)) {\n            \"X\".match(/()./);\n        }\n\n        this.selection = this.selection.replace(/(^\\n*)/, \"\");\n\n        this.startTag = this.startTag + re.$1;\n\n        this.selection = this.selection.replace(/(\\n*$)/, \"\");\n        this.endTag = this.endTag + re.$1;\n        this.startTag = this.startTag.replace(/(^\\n*)/, \"\");\n        this.before = this.before + re.$1;\n        this.endTag = this.endTag.replace(/(\\n*$)/, \"\");\n        this.after = this.after + re.$1;\n\n        if (this.before) {\n\n            regexText = replacementText = \"\";\n\n            while (nLinesBefore--) {\n                regexText += \"\\\\n?\";\n                replacementText += \"\\n\";\n            }\n\n            if (findExtraNewlines) {\n                regexText = \"\\\\n*\";\n            }\n            this.before = this.before.replace(new re(regexText + \"$\", \"\"), replacementText);\n        }\n\n        if (this.after) {\n\n            regexText = replacementText = \"\";\n\n            while (nLinesAfter--) {\n                regexText += \"\\\\n?\";\n                replacementText += \"\\n\";\n            }\n            if (findExtraNewlines) {\n                regexText = \"\\\\n*\";\n            }\n\n            this.after = this.after.replace(new re(regexText, \"\"), replacementText);\n        }\n    };\n\n    // end of Chunks\n\n    // A collection of the important regions on the page.\n    // Cached so we don't have to keep traversing the DOM.\n    // Also holds ieCachedRange and ieCachedScrollTop, where necessary; working around\n    // this issue:\n    // Internet explorer has problems with CSS sprite buttons that use HTML\n    // lists.  When you click on the background image \"button\", IE will\n    // select the non-existent link text and discard the selection in the\n    // textarea.  The solution to this is to cache the textarea selection\n    // on the button's mousedown event and set a flag.  In the part of the\n    // code where we need to grab the selection, we check for the flag\n    // and, if it's set, use the cached area instead of querying the\n    // textarea.\n    //\n    // This ONLY affects Internet Explorer (tested on versions 6, 7\n    // and 8) and ONLY on button clicks.  Keyboard shortcuts work\n    // normally since the focus never leaves the textarea.\n    function PanelCollection(postfix) {\n        this.buttonBar = doc.getElementById(\"wmd-button-bar\" + postfix);\n        this.preview = doc.getElementById(\"wmd-preview\" + postfix);\n        this.input = doc.getElementById(\"wmd-input\" + postfix);\n    };\n\n    // Returns true if the DOM element is visible, false if it's hidden.\n    // Checks if display is anything other than none.\n    util.isVisible = function (elem) {\n\n        if (window.getComputedStyle) {\n            // Most browsers\n            return window.getComputedStyle(elem, null).getPropertyValue(\"display\") !== \"none\";\n        }\n        else if (elem.currentStyle) {\n            // IE\n            return elem.currentStyle[\"display\"] !== \"none\";\n        }\n    };\n\n\n    // Adds a listener callback to a DOM element which is fired on a specified\n    // event.\n    util.addEvent = function (elem, event, listener) {\n        if (elem.attachEvent) {\n            // IE only.  The \"on\" is mandatory.\n            elem.attachEvent(\"on\" + event, listener);\n        }\n        else {\n            // Other browsers.\n            elem.addEventListener(event, listener, false);\n        }\n    };\n\n\n    // Removes a listener callback from a DOM element which is fired on a specified\n    // event.\n    util.removeEvent = function (elem, event, listener) {\n        if (elem.detachEvent) {\n            // IE only.  The \"on\" is mandatory.\n            elem.detachEvent(\"on\" + event, listener);\n        }\n        else {\n            // Other browsers.\n            elem.removeEventListener(event, listener, false);\n        }\n    };\n\n    // Converts \\r\\n and \\r to \\n.\n    util.fixEolChars = function (text) {\n        text = text.replace(/\\r\\n/g, \"\\n\");\n        text = text.replace(/\\r/g, \"\\n\");\n        return text;\n    };\n\n    // Extends a regular expression.  Returns a new RegExp\n    // using pre + regex + post as the expression.\n    // Used in a few functions where we have a base\n    // expression and we want to pre- or append some\n    // conditions to it (e.g. adding \"$\" to the end).\n    // The flags are unchanged.\n    //\n    // regex is a RegExp, pre and post are strings.\n    util.extendRegExp = function (regex, pre, post) {\n\n        if (pre === null || pre === undefined) {\n            pre = \"\";\n        }\n        if (post === null || post === undefined) {\n            post = \"\";\n        }\n\n        var pattern = regex.toString();\n        var flags;\n\n        // Replace the flags with empty space and store them.\n        pattern = pattern.replace(/\\/([gim]*)$/, function (wholeMatch, flagsPart) {\n            flags = flagsPart;\n            return \"\";\n        });\n\n        // Remove the slash delimiters on the regular expression.\n        pattern = pattern.replace(/(^\\/|\\/$)/g, \"\");\n        pattern = pre + pattern + post;\n\n        return new re(pattern, flags);\n    }\n\n    // UNFINISHED\n    // The assignment in the while loop makes jslint cranky.\n    // I'll change it to a better loop later.\n    position.getTop = function (elem, isInner) {\n        var result = elem.offsetTop;\n        if (!isInner) {\n            while (elem = elem.offsetParent) {\n                result += elem.offsetTop;\n            }\n        }\n        return result;\n    };\n\n    position.getHeight = function (elem) {\n        return elem.offsetHeight || elem.scrollHeight;\n    };\n\n    position.getWidth = function (elem) {\n        return elem.offsetWidth || elem.scrollWidth;\n    };\n\n    position.getPageSize = function () {\n\n        var scrollWidth, scrollHeight;\n        var innerWidth, innerHeight;\n\n        // It's not very clear which blocks work with which browsers.\n        if (self.innerHeight \u0026\u0026 self.scrollMaxY) {\n            scrollWidth = doc.body.scrollWidth;\n            scrollHeight = self.innerHeight + self.scrollMaxY;\n        }\n        else if (doc.body.scrollHeight \u003e doc.body.offsetHeight) {\n            scrollWidth = doc.body.scrollWidth;\n            scrollHeight = doc.body.scrollHeight;\n        }\n        else {\n            scrollWidth = doc.body.offsetWidth;\n            scrollHeight = doc.body.offsetHeight;\n        }\n\n        if (self.innerHeight) {\n            // Non-IE browser\n            innerWidth = self.innerWidth;\n            innerHeight = self.innerHeight;\n        }\n        else if (doc.documentElement \u0026\u0026 doc.documentElement.clientHeight) {\n            // Some versions of IE (IE 6 w/ a DOCTYPE declaration)\n            innerWidth = doc.documentElement.clientWidth;\n            innerHeight = doc.documentElement.clientHeight;\n        }\n        else if (doc.body) {\n            // Other versions of IE\n            innerWidth = doc.body.clientWidth;\n            innerHeight = doc.body.clientHeight;\n        }\n\n        var maxWidth = Math.max(scrollWidth, innerWidth);\n        var maxHeight = Math.max(scrollHeight, innerHeight);\n        return [maxWidth, maxHeight, innerWidth, innerHeight];\n    };\n\n    // Handles pushing and popping TextareaStates for undo/redo commands.\n    // I should rename the stack variables to list.\n    function UndoManager(callback, panels) {\n\n        var undoObj = this;\n        var undoStack = []; // A stack of undo states\n        var stackPtr = 0; // The index of the current state\n        var mode = \"none\";\n        var lastState; // The last state\n        var timer; // The setTimeout handle for cancelling the timer\n        var inputStateObj;\n\n        // Set the mode for later logic steps.\n        var setMode = function (newMode, noSave) {\n            if (mode != newMode) {\n                mode = newMode;\n                if (!noSave) {\n                    saveState();\n                }\n            }\n\n            if (!uaSniffed.isIE || mode != \"moving\") {\n                timer = setTimeout(refreshState, 1);\n            }\n            else {\n                inputStateObj = null;\n            }\n        };\n\n        var refreshState = function (isInitialState) {\n            inputStateObj = new TextareaState(panels, isInitialState);\n            timer = undefined;\n        };\n\n        this.setCommandMode = function () {\n            mode = \"command\";\n            saveState();\n            timer = setTimeout(refreshState, 0);\n        };\n\n        this.canUndo = function () {\n            return stackPtr \u003e 1;\n        };\n\n        this.canRedo = function () {\n            if (undoStack[stackPtr + 1]) {\n                return true;\n            }\n            return false;\n        };\n\n        // Removes the last state and restores it.\n        this.undo = function () {\n\n            if (undoObj.canUndo()) {\n                if (lastState) {\n                    // What about setting state -1 to null or checking for undefined?\n                    lastState.restore();\n                    lastState = null;\n                }\n                else {\n                    undoStack[stackPtr] = new TextareaState(panels);\n                    undoStack[--stackPtr].restore();\n\n                    if (callback) {\n                        callback();\n                    }\n                }\n            }\n\n            mode = \"none\";\n            panels.input.focus();\n            refreshState();\n        };\n\n        // Redo an action.\n        this.redo = function () {\n\n            if (undoObj.canRedo()) {\n\n                undoStack[++stackPtr].restore();\n\n                if (callback) {\n                    callback();\n                }\n            }\n\n            mode = \"none\";\n            panels.input.focus();\n            refreshState();\n        };\n\n        // Push the input area state to the stack.\n        var saveState = function () {\n            var currState = inputStateObj || new TextareaState(panels);\n\n            if (!currState) {\n                return false;\n            }\n            if (mode == \"moving\") {\n                if (!lastState) {\n                    lastState = currState;\n                }\n                return;\n            }\n            if (lastState) {\n                if (undoStack[stackPtr - 1].text != lastState.text) {\n                    undoStack[stackPtr++] = lastState;\n                }\n                lastState = null;\n            }\n            undoStack[stackPtr++] = currState;\n            undoStack[stackPtr + 1] = null;\n            if (callback) {\n                callback();\n            }\n        };\n\n        var handleCtrlYZ = function (event) {\n\n            var handled = false;\n\n            if ((event.ctrlKey || event.metaKey) \u0026\u0026 !event.altKey) {\n\n                // IE and Opera do not support charCode.\n                var keyCode = event.charCode || event.keyCode;\n                var keyCodeChar = String.fromCharCode(keyCode);\n\n                switch (keyCodeChar.toLowerCase()) {\n\n                    case \"y\":\n                        if (!event.shiftKey) {\n                          undoObj.redo();\n                          handled = true;\n                        }\n                        break;\n\n                    case \"z\":\n                        if (!event.shiftKey) {\n                            undoObj.undo();\n                        }\n                        else {\n                            undoObj.redo();\n                        }\n                        handled = true;\n                        break;\n                }\n            }\n\n            if (handled) {\n                if (event.preventDefault) {\n                    event.preventDefault();\n                }\n                if (window.event) {\n                    window.event.returnValue = false;\n                }\n                return;\n            }\n        };\n\n        // Set the mode depending on what is going on in the input area.\n        var handleModeChange = function (event) {\n\n            if (!event.ctrlKey \u0026\u0026 !event.metaKey) {\n\n                var keyCode = event.keyCode;\n\n                if ((keyCode \u003e= 33 \u0026\u0026 keyCode \u003c= 40) || (keyCode \u003e= 63232 \u0026\u0026 keyCode \u003c= 63235)) {\n                    // 33 - 40: page up/dn and arrow keys\n                    // 63232 - 63235: page up/dn and arrow keys on safari\n                    setMode(\"moving\");\n                }\n                else if (keyCode == 8 || keyCode == 46 || keyCode == 127) {\n                    // 8: backspace\n                    // 46: delete\n                    // 127: delete\n                    setMode(\"deleting\");\n                }\n                else if (keyCode == 13) {\n                    // 13: Enter\n                    setMode(\"newlines\");\n                }\n                else if (keyCode == 27) {\n                    // 27: escape\n                    setMode(\"escape\");\n                }\n                else if ((keyCode \u003c 16 || keyCode \u003e 20) \u0026\u0026 keyCode != 91) {\n                    // 16-20 are shift, etc.\n                    // 91: left window key\n                    // I think this might be a little messed up since there are\n                    // a lot of nonprinting keys above 20.\n                    setMode(\"typing\");\n                }\n            }\n        };\n\n        var setEventHandlers = function () {\n            util.addEvent(panels.input, \"keypress\", function (event) {\n                // keyCode 89: y\n                // keyCode 90: z\n                if ((event.ctrlKey || event.metaKey) \u0026\u0026 !event.altKey \u0026\u0026 (event.keyCode == 89 || event.keyCode == 90)) {\n                    event.preventDefault();\n                }\n            });\n\n            var handlePaste = function () {\n                if (uaSniffed.isIE || (inputStateObj \u0026\u0026 inputStateObj.text != panels.input.value)) {\n                    if (timer == undefined) {\n                        mode = \"paste\";\n                        saveState();\n                        refreshState();\n                    }\n                }\n            };\n\n            util.addEvent(panels.input, \"keydown\", handleCtrlYZ);\n            util.addEvent(panels.input, \"keydown\", handleModeChange);\n            util.addEvent(panels.input, \"mousedown\", function () {\n                setMode(\"moving\");\n            });\n\n            panels.input.onpaste = handlePaste;\n            panels.input.ondrop = handlePaste;\n        };\n\n        var init = function () {\n            setEventHandlers();\n            refreshState(true);\n            saveState();\n        };\n\n        init();\n    }\n\n    // end of UndoManager\n\n    // The input textarea state/contents.\n    // This is used to implement undo/redo by the undo manager.\n    function TextareaState(panels, isInitialState) {\n\n        // Aliases\n        var stateObj = this;\n        var inputArea = panels.input;\n        this.init = function () {\n            if (!util.isVisible(inputArea)) {\n                return;\n            }\n            if (!isInitialState \u0026\u0026 doc.activeElement \u0026\u0026 doc.activeElement !== inputArea) { // this happens when tabbing out of the input box\n                return;\n            }\n\n            this.setInputAreaSelectionStartEnd();\n            this.scrollTop = inputArea.scrollTop;\n            if (!this.text \u0026\u0026 inputArea.selectionStart || inputArea.selectionStart === 0) {\n                this.text = inputArea.value;\n            }\n\n        }\n\n        // Sets the selected text in the input box after we've performed an\n        // operation.\n        this.setInputAreaSelection = function () {\n\n            if (!util.isVisible(inputArea)) {\n                return;\n            }\n\n            if (inputArea.selectionStart !== undefined \u0026\u0026 !uaSniffed.isOpera) {\n\n                inputArea.focus();\n                inputArea.selectionStart = stateObj.start;\n                inputArea.selectionEnd = stateObj.end;\n                inputArea.scrollTop = stateObj.scrollTop;\n            }\n            else if (doc.selection) {\n\n                if (doc.activeElement \u0026\u0026 doc.activeElement !== inputArea) {\n                    return;\n                }\n\n                inputArea.focus();\n                var range = inputArea.createTextRange();\n                range.moveStart(\"character\", -inputArea.value.length);\n                range.moveEnd(\"character\", -inputArea.value.length);\n                range.moveEnd(\"character\", stateObj.end);\n                range.moveStart(\"character\", stateObj.start);\n                range.select();\n            }\n        };\n\n        this.setInputAreaSelectionStartEnd = function () {\n\n            if (!panels.ieCachedRange \u0026\u0026 (inputArea.selectionStart || inputArea.selectionStart === 0)) {\n\n                stateObj.start = inputArea.selectionStart;\n                stateObj.end = inputArea.selectionEnd;\n            }\n            else if (doc.selection) {\n\n                stateObj.text = util.fixEolChars(inputArea.value);\n\n                // IE loses the selection in the textarea when buttons are\n                // clicked.  On IE we cache the selection. Here, if something is cached,\n                // we take it.\n                var range = panels.ieCachedRange || doc.selection.createRange();\n\n                var fixedRange = util.fixEolChars(range.text);\n                var marker = \"\\x07\";\n                var markedRange = marker + fixedRange + marker;\n                range.text = markedRange;\n                var inputText = util.fixEolChars(inputArea.value);\n\n                range.moveStart(\"character\", -markedRange.length);\n                range.text = fixedRange;\n\n                stateObj.start = inputText.indexOf(marker);\n                stateObj.end = inputText.lastIndexOf(marker) - marker.length;\n\n                var len = stateObj.text.length - util.fixEolChars(inputArea.value).length;\n\n                if (len) {\n                    range.moveStart(\"character\", -fixedRange.length);\n                    while (len--) {\n                        fixedRange += \"\\n\";\n                        stateObj.end += 1;\n                    }\n                    range.text = fixedRange;\n                }\n\n                if (panels.ieCachedRange)\n                    stateObj.scrollTop = panels.ieCachedScrollTop; // this is set alongside with ieCachedRange\n\n                panels.ieCachedRange = null;\n\n                this.setInputAreaSelection();\n            }\n        };\n\n        // Restore this state into the input area.\n        this.restore = function () {\n\n            if (stateObj.text != undefined \u0026\u0026 stateObj.text != inputArea.value) {\n                inputArea.value = stateObj.text;\n            }\n            this.setInputAreaSelection();\n            inputArea.scrollTop = stateObj.scrollTop;\n        };\n\n        // Gets a collection of HTML chunks from the inptut textarea.\n        this.getChunks = function () {\n\n            var chunk = new Chunks();\n            chunk.before = util.fixEolChars(stateObj.text.substring(0, stateObj.start));\n            chunk.startTag = \"\";\n            chunk.selection = util.fixEolChars(stateObj.text.substring(stateObj.start, stateObj.end));\n            chunk.endTag = \"\";\n            chunk.after = util.fixEolChars(stateObj.text.substring(stateObj.end));\n            chunk.scrollTop = stateObj.scrollTop;\n\n            return chunk;\n        };\n\n        // Sets the TextareaState properties given a chunk of markdown.\n        this.setChunks = function (chunk) {\n\n            chunk.before = chunk.before + chunk.startTag;\n            chunk.after = chunk.endTag + chunk.after;\n\n            this.start = chunk.before.length;\n            this.end = chunk.before.length + chunk.selection.length;\n            this.text = chunk.before + chunk.selection + chunk.after;\n            this.scrollTop = chunk.scrollTop;\n        };\n        this.init();\n    };\n\n    function PreviewManager(converter, panels, previewRefreshCallback) {\n\n        var managerObj = this;\n        var timeout;\n        var elapsedTime;\n        var oldInputText;\n        var maxDelay = 3000;\n        var startType = \"delayed\"; // The other legal value is \"manual\"\n\n        var paneContentHeight = function(pane) {\n          var $pane = $(pane);\n          var paneVerticalPadding = parseInt($pane.css(\"padding-top\")) + parseInt($pane.css(\"padding-bottom\"));\n\n          return pane.scrollHeight - paneVerticalPadding;\n        };\n\n        var syncScroll = function(isEdit) {\n          var $preview = $(panels.preview);\n          var $input = $(panels.input);\n\n          if($input.scrollTop() === 0){\n            $preview.scrollTop(0);\n            return;\n          }\n\n          if(($input.height() + $input.scrollTop() + 100) \u003e panels.input.scrollHeight){\n            // cheat, special case for bottom\n            $preview.scrollTop(panels.preview.scrollHeight);\n            return;\n          }\n\n          var scrollPosition = $(panels.input).scrollTop();\n          var factor = panels.preview.scrollHeight / panels.input.scrollHeight;\n\n          var desired = scrollPosition * factor;\n          $preview.scrollTop(desired + 50);\n        };\n\n        var setupScrollSync = function() {\n          var sync = _.throttle(syncScroll, 20);\n          $(panels.input).scroll(function() {\n            sync();\n          });\n        };\n\n        // Adds event listeners to elements\n        var setupEvents = function (inputElem, listener) {\n            util.addEvent(inputElem, \"input\", listener);\n            inputElem.onpaste = listener;\n            inputElem.ondrop = listener;\n\n            util.addEvent(inputElem, \"keypress\", listener);\n            util.addEvent(inputElem, \"keydown\", listener);\n        };\n\n        var getDocScrollTop = function () {\n\n            var result = 0;\n\n            if (window.innerHeight) {\n                result = window.pageYOffset;\n            }\n            else\n                if (doc.documentElement \u0026\u0026 doc.documentElement.scrollTop) {\n                    result = doc.documentElement.scrollTop;\n                }\n                else\n                    if (doc.body) {\n                        result = doc.body.scrollTop;\n                    }\n\n            return result;\n        };\n\n        var makePreviewHtml = function () {\n\n            // If there is no registered preview panel\n            // there is nothing to do.\n            if (!panels.preview)\n                return;\n\n\n            var text = panels.input.value;\n            if (text \u0026\u0026 text == oldInputText) {\n                return; // Input text hasn't changed.\n            }\n            else {\n                oldInputText = text;\n            }\n\n            var prevTime = new Date().getTime();\n\n            var previewText;\n            previewText = converter.makeHtml(text);\n\n            // Calculate the processing time of the HTML creation.\n            // It's used as the delay time in the event listener.\n            var currTime = new Date().getTime();\n            elapsedTime = currTime - prevTime;\n\n            Ember.run(function() {\n              pushPreviewHtml(previewText);\n              syncScroll(true);\n            });\n        };\n\n        // makePreviewHtml = window.probes.measure(makePreviewHtml, {\n        //   before: function(){ window.probes.clear(); },\n        //   name: \"makePreview\",\n        //   after: function(p) { window.probes.clear(); console.log(\"Total time to preview: \" + p.time); }\n        // });\n\n\n        // TODO allow us to inject this in (its our debouncer)\n        var debounce = function(func,wait,trickle) {\n          var timeout = null;\n          return function(){\n            var context = this;\n            var args = arguments;\n\n            later = function(){\n              timeout = null;\n              func.apply(context, args);\n            };\n\n            if (timeout!=null \u0026\u0026 trickle) {\n              return;\n            }\n\n            var currentWait;\n            if (typeof wait == \"function\") {\n              currentWait = wait();\n            } else {\n              currentWait = wait;\n            }\n\n            if (timeout) { clearTimeout(timeout); }\n            timeout = setTimeout(later, currentWait);\n          }\n        }\n\n        makePreviewHtml = debounce(makePreviewHtml, function(){\n          return Math.min(Math.max((elapsedTime || 1) * 10, 80),1000);\n        }, true);\n\n\n        // setTimeout is already used.  Used as an event listener.\n        var applyTimeout = function () {\n\n            if (timeout) {\n                clearTimeout(timeout);\n                timeout = undefined;\n            }\n\n            if (startType !== \"manual\") {\n\n                var delay = 0;\n\n                if (startType === \"delayed\") {\n                    delay = elapsedTime;\n                }\n\n                if (delay \u003e maxDelay) {\n                    delay = maxDelay;\n                }\n                timeout = setTimeout(makePreviewHtml, delay);\n            }\n        };\n\n        var getScaleFactor = function (panel) {\n            if (panel.scrollHeight \u003c= panel.clientHeight) {\n                return 1;\n            }\n            return panel.scrollTop / (panel.scrollHeight - panel.clientHeight);\n        };\n\n        this.refresh = function (requiresRefresh) {\n            if (requiresRefresh) {\n                oldInputText = \"\";\n                makePreviewHtml();\n            }\n            else {\n                applyTimeout();\n            }\n        };\n\n        this.processingTime = function () {\n            return elapsedTime;\n        };\n\n        var isFirstTimeFilled = true;\n\n        // IE doesn't let you use innerHTML if the element is contained somewhere in a table\n        // (which is the case for inline editing) -- in that case, detach the element, set the\n        // value, and reattach. Yes, that *is* ridiculous.\n        var ieSafePreviewSet = function (previewText) {\n            var ieSafeSet = function(panel, text) {\n              var parent = panel.parentNode;\n              var sibling = panel.nextSibling;\n              parent.removeChild(panel);\n              panel.innerHTML = text;\n              if (!sibling)\n                parent.appendChild(panel);\n              else\n                parent.insertBefore(panel, sibling);\n            };\n\n            ieSafeSet(panels.preview, previewText);\n        }\n\n        var nonSuckyBrowserPreviewSet = function (previewText) {\n            panels.preview.innerHTML = previewText;\n        }\n\n        var previewSetter;\n\n        var previewSet = function (previewText) {\n\n            if (previewSetter)\n                return previewSetter(previewText);\n\n            try {\n                nonSuckyBrowserPreviewSet(previewText);\n                previewSetter = nonSuckyBrowserPreviewSet;\n            } catch (e) {\n                previewSetter = ieSafePreviewSet;\n                previewSetter(previewText);\n            }\n        };\n\n        var pushPreviewHtml = function (previewText) {\n\n            var emptyTop = position.getTop(panels.input) - getDocScrollTop();\n\n            if (panels.preview) {\n                previewSet(previewText);\n                previewRefreshCallback();\n            }\n\n            if (isFirstTimeFilled) {\n                isFirstTimeFilled = false;\n                return;\n            }\n\n            var fullTop = position.getTop(panels.input) - getDocScrollTop();\n\n            if (uaSniffed.isIE) {\n                setTimeout(function () {\n                    window.scrollBy(0, fullTop - emptyTop);\n                }, 0);\n            }\n            else {\n                window.scrollBy(0, fullTop - emptyTop);\n            }\n        };\n\n        var init = function () {\n\n            // TODO: make option to disable. We don't need this in discourse\n            // setupEvents(panels.input, applyTimeout);\n\n            setupScrollSync();\n            makePreviewHtml();\n        };\n\n        init();\n    };\n\n    // Creates the background behind the hyperlink text entry box.\n    // And download dialog\n    // Most of this has been moved to CSS but the div creation and\n    // browser-specific hacks remain here.\n    ui.createBackground = function () {\n\n        var background = doc.createElement(\"div\"),\n            style = background.style;\n\n        background.className = \"wmd-prompt-background\";\n\n        style.position = \"absolute\";\n        style.top = \"0\";\n\n        style.zIndex = \"2000\";\n\n        if (uaSniffed.isIE) {\n            style.filter = \"alpha(opacity=50)\";\n        }\n        else {\n            style.opacity = \"0.5\";\n        }\n\n        var pageSize = position.getPageSize();\n        style.height = pageSize[1] + \"px\";\n\n        if (uaSniffed.isIE) {\n            style.left = doc.documentElement.scrollLeft;\n            style.width = doc.documentElement.clientWidth;\n        }\n        else {\n            style.left = \"0\";\n            style.width = \"100%\";\n        }\n\n        doc.body.appendChild(background);\n        return background;\n    };\n\n    // This simulates a modal dialog box and asks for the URL when you\n    // click the hyperlink or image buttons.\n    //\n    // text: The html for the input box.\n    // defaultInputText: The default value that appears in the input box.\n    // callback: The function which is executed when the prompt is dismissed, either via OK or Cancel.\n    //      It receives a single argument; either the entered text (if OK was chosen) or null (if Cancel\n    //      was chosen).\n    ui.prompt = function (text, defaultInputText, callback) {\n\n        // These variables need to be declared at this level since they are used\n        // in multiple functions.\n        var dialog;         // The dialog box.\n        var input;         // The text box where you enter the hyperlink.\n\n\n        if (defaultInputText === undefined) {\n            defaultInputText = \"\";\n        }\n\n        // Used as a keydown event handler. Esc dismisses the prompt.\n        // Key code 27 is ESC.\n        var checkEscape = function (key) {\n            var code = (key.charCode || key.keyCode);\n            if (code === 27) {\n                close(true);\n            }\n        };\n\n        // Dismisses the hyperlink input box.\n        // isCancel is true if we don't care about the input text.\n        // isCancel is false if we are going to keep the text.\n        var close = function (isCancel) {\n            util.removeEvent(doc.body, \"keydown\", checkEscape);\n            var text = input.value;\n\n            if (isCancel) {\n                text = null;\n            }\n            else {\n                // Fixes common pasting errors.\n                text = text.replace(/^http:\\/\\/(https?|ftp):\\/\\//, '$1://');\n                if (!/^(?:https?|ftp):\\/\\//.test(text))\n                    text = 'http://' + text;\n            }\n\n            dialog.parentNode.removeChild(dialog);\n\n            callback(text);\n            return false;\n        };\n\n\n\n        // Create the text input box form/window.\n        var createDialog = function () {\n\n            // The main dialog box.\n            dialog = doc.createElement(\"div\");\n            dialog.className = \"wmd-prompt-dialog\";\n            dialog.style.padding = \"10px;\";\n            dialog.style.position = \"fixed\";\n            dialog.style.width = \"400px\";\n            dialog.style.zIndex = \"2001\";\n\n            // The dialog text.\n            var question = doc.createElement(\"div\");\n            question.innerHTML = text;\n            question.style.padding = \"5px\";\n            dialog.appendChild(question);\n\n            // The web form container for the text box and buttons.\n            var form = doc.createElement(\"form\"),\n                style = form.style;\n            form.onsubmit = function () { return close(false); };\n            style.padding = \"0\";\n            style.margin = \"0\";\n            style.cssFloat = \"left\";\n            style.width = \"100%\";\n            style.textAlign = \"center\";\n            style.position = \"relative\";\n            dialog.appendChild(form);\n\n            // The input text box\n            input = doc.createElement(\"input\");\n            input.type = \"text\";\n            input.value = defaultInputText;\n            style = input.style;\n            style.display = \"block\";\n            style.width = \"80%\";\n            style.marginLeft = style.marginRight = \"auto\";\n            form.appendChild(input);\n\n            // The ok button\n            var okButton = doc.createElement(\"input\");\n            okButton.type = \"button\";\n            okButton.onclick = function () { return close(false); };\n            okButton.value = \"OK\";\n            style = okButton.style;\n            style.margin = \"10px\";\n            style.display = \"inline\";\n            style.width = \"7em\";\n\n\n            // The cancel button\n            var cancelButton = doc.createElement(\"input\");\n            cancelButton.type = \"button\";\n            cancelButton.onclick = function () { return close(true); };\n            cancelButton.value = \"Cancel\";\n            style = cancelButton.style;\n            style.margin = \"10px\";\n            style.display = \"inline\";\n            style.width = \"7em\";\n\n            form.appendChild(okButton);\n            form.appendChild(cancelButton);\n\n            util.addEvent(doc.body, \"keydown\", checkEscape);\n            dialog.style.top = \"50%\";\n            dialog.style.left = \"50%\";\n            dialog.style.display = \"block\";\n            if (uaSniffed.isIE_5or6) {\n                dialog.style.position = \"absolute\";\n                dialog.style.top = doc.documentElement.scrollTop + 200 + \"px\";\n                dialog.style.left = \"50%\";\n            }\n            doc.body.appendChild(dialog);\n\n            // This has to be done AFTER adding the dialog to the form if you\n            // want it to be centered.\n            dialog.style.marginTop = -(position.getHeight(dialog) / 2) + \"px\";\n            dialog.style.marginLeft = -(position.getWidth(dialog) / 2) + \"px\";\n\n        };\n\n        // Why is this in a zero-length timeout?\n        // Is it working around a browser bug?\n        setTimeout(function () {\n\n            createDialog();\n\n            var defTextLen = defaultInputText.length;\n            if (input.selectionStart !== undefined) {\n                input.selectionStart = 0;\n                input.selectionEnd = defTextLen;\n            }\n            else if (input.createTextRange) {\n                var range = input.createTextRange();\n                range.collapse(false);\n                range.moveStart(\"character\", -defTextLen);\n                range.moveEnd(\"character\", defTextLen);\n                range.select();\n            }\n\n            input.focus();\n        }, 0);\n    };\n\n    function UIManager(postfix, panels, undoManager, previewManager, commandManager, helpOptions, getString) {\n\n        var inputBox = panels.input,\n            buttons = {}; // buttons.undo, buttons.link, etc. The actual DOM elements.\n\n        makeSpritedButtonRow();\n\n        var keyEvent = \"keydown\";\n        if (uaSniffed.isOpera) {\n            keyEvent = \"keypress\";\n        }\n\n        util.addEvent(inputBox, keyEvent, function (key) {\n\n            // Check to see if we have a button key and, if so execute the callback.\n            if ((key.ctrlKey || key.metaKey) \u0026\u0026 !key.altKey \u0026\u0026 !key.shiftKey) {\n\n                var keyCode = key.charCode || key.keyCode;\n                var keyCodeStr = String.fromCharCode(keyCode).toLowerCase();\n\n                switch (keyCodeStr) {\n                    case \"b\":\n                        doClick(buttons.bold);\n                        break;\n                    case \"i\":\n                        doClick(buttons.italic);\n                        break;\n                    case \"l\":\n                        doClick(buttons.link);\n                        break;\n                    case \"q\":\n                        doClick(buttons.quote);\n                        break;\n                    case \"k\":\n                        doClick(buttons.code);\n                        break;\n                    case \"g\":\n                        doClick(buttons.image);\n                        break;\n                    case \"o\":\n                        doClick(buttons.olist);\n                        break;\n                    case \"u\":\n                        doClick(buttons.ulist);\n                        break;\n                    case \"h\":\n                        doClick(buttons.heading);\n                        break;\n                    default:\n                        return;\n                }\n\n\n                if (key.preventDefault) {\n                    key.preventDefault();\n                }\n\n                if (window.event) {\n                    window.event.returnValue = false;\n                }\n            }\n        });\n\n        // Auto-indent on shift-enter\n        util.addEvent(inputBox, \"keyup\", function (key) {\n            if (key.shiftKey \u0026\u0026 !key.ctrlKey \u0026\u0026 !key.metaKey) {\n                var keyCode = key.charCode || key.keyCode;\n                // Character 13 is Enter\n                if (keyCode === 13) {\n                    var fakeButton = {};\n                    fakeButton.textOp = bindCommand(\"doAutoindent\");\n                    doClick(fakeButton);\n                }\n            }\n        });\n\n        // special handler because IE clears the context of the textbox on ESC\n        if (uaSniffed.isIE) {\n            util.addEvent(inputBox, \"keydown\", function (key) {\n                var code = key.keyCode;\n                if (code === 27) {\n                    return false;\n                }\n            });\n        }\n\n\n        // Perform the button's action.\n        function doClick(button) {\n\n            inputBox.focus();\n\n            if (button \u0026\u0026 button.textOp) {\n\n                if (undoManager) {\n                    undoManager.setCommandMode();\n                }\n\n                var state = new TextareaState(panels);\n\n                if (!state) {\n                    return;\n                }\n\n                var chunks = state.getChunks();\n\n                // Some commands launch a \"modal\" prompt dialog.  Javascript\n                // can't really make a modal dialog box and the WMD code\n                // will continue to execute while the dialog is displayed.\n                // This prevents the dialog pattern I'm used to and means\n                // I can't do something like this:\n                //\n                // var link = CreateLinkDialog();\n                // makeMarkdownLink(link);\n                //\n                // Instead of this straightforward method of handling a\n                // dialog I have to pass any code which would execute\n                // after the dialog is dismissed (e.g. link creation)\n                // in a function parameter.\n                //\n                // Yes this is awkward and I think it sucks, but there's\n                // no real workaround.  Only the image and link code\n                // create dialogs and require the function pointers.\n                var fixupInputArea = function () {\n\n                    inputBox.focus();\n\n                    if (chunks) {\n                        state.setChunks(chunks);\n                    }\n\n                    state.restore();\n                    previewManager.refresh();\n                };\n\n                var noCleanup = button.textOp(chunks, fixupInputArea);\n\n                if (!noCleanup) {\n                    fixupInputArea();\n                }\n\n            }\n\n            if (button.execute) {\n                button.execute(undoManager);\n            }\n        };\n\n        function setupButton(button, isEnabled) {\n\n            if (isEnabled) {\n                button.disabled = false\n\n                // IE tries to select the background image \"button\" text (it's\n                // implemented in a list item) so we have to cache the selection\n                // on mousedown.\n                if (uaSniffed.isIE) {\n                    button.onmousedown = function () {\n                        if (doc.activeElement \u0026\u0026 doc.activeElement !== panels.input) { // we're not even in the input box, so there's no selection\n                            return;\n                        }\n                        panels.ieCachedRange = document.selection.createRange();\n                        panels.ieCachedScrollTop = panels.input.scrollTop;\n                    };\n                }\n\n                if (!button.isHelp) {\n                    button.onclick = function () {\n                        if (this.onmouseout) {\n                            this.onmouseout();\n                        }\n                        doClick(this);\n                        return false;\n                    }\n                }\n            }\n            else {\n                button.disabled = true\n                button.onmouseover = button.onmouseout = button.onclick = function () { };\n            }\n        }\n\n        function bindCommand(method) {\n            if (typeof PagedownCustom != \"undefined\" \u0026\u0026 PagedownCustom.customActions) {\n                var custom = PagedownCustom.customActions[method];\n                if (custom) {\n                    return function() {\n                        var args = Array.prototype.slice.call(arguments);\n                        args.push(commandManager[method]);\n                        return custom.apply(commandManager, args);\n                    };\n                }\n            }\n\n            if (typeof method === \"string\")\n                method = commandManager[method];\n            return function () { method.apply(commandManager, arguments); }\n        }\n\n        function makeSpritedButtonRow() {\n\n            var buttonBar = panels.buttonBar;\n            var buttonRow = document.createElement(\"div\");\n            buttonRow.id = \"wmd-button-row\" + postfix;\n            buttonRow.className = 'wmd-button-row';\n            buttonRow = buttonBar.appendChild(buttonRow);\n            var xPosition = 0;\n            var makeButton = function (id, title, textOp) {\n                var button = document.createElement(\"button\");\n                button.className = \"wmd-button\";\n                xPosition += 25;\n                button.id = id + postfix;\n                button.title = title;\n                if (textOp)\n                    button.textOp = textOp;\n                setupButton(button, true);\n                buttonRow.appendChild(button);\n                return button;\n            };\n\n            var makeSpacer = function (num) {\n                var spacer = document.createElement(\"div\");\n                spacer.className = \"wmd-spacer\";\n                spacer.id = \"wmd-spacer\" + num + postfix;\n                buttonRow.appendChild(spacer);\n                xPosition += 25;\n            }\n\n            // If we have any buttons to insert, do it!\n            if (typeof PagedownCustom != \"undefined\") {\n                insertButtons = PagedownCustom.insertButtons\n                if (insertButtons \u0026\u0026 (insertButtons.length \u003e 0)) {\n                    for (var i=0; i\u003cinsertButtons.length; i++) {\n                        var b = insertButtons[i];\n                        makeButton(b.id, b.description, b.execute)\n                    }\n                }\n            }\n\n            buttons.bold = makeButton(\"wmd-bold-button\", getString(\"bold\"), bindCommand(\"doBold\"));\n            buttons.italic = makeButton(\"wmd-italic-button\", getString(\"italic\"), bindCommand(\"doItalic\"));\n            makeSpacer(1);\n            buttons.link = makeButton(\"wmd-link-button\", getString(\"link\"), bindCommand(function (chunk, postProcessing) {\n                return this.doLinkOrImage(chunk, postProcessing, false);\n            }));\n            buttons.quote = makeButton(\"wmd-quote-button\", getString(\"quote\"), bindCommand(\"doBlockquote\"));\n            buttons.code = makeButton(\"wmd-code-button\", getString(\"code\"), bindCommand(\"doCode\"));\n            buttons.image = makeButton(\"wmd-image-button\", getString(\"image\"), bindCommand(function (chunk, postProcessing) {\n                return this.doLinkOrImage(chunk, postProcessing, true);\n            }));\n            makeSpacer(2);\n            buttons.olist = makeButton(\"wmd-olist-button\", getString(\"olist\"), bindCommand(function (chunk, postProcessing) {\n                this.doList(chunk, postProcessing, true);\n            }));\n            buttons.ulist = makeButton(\"wmd-ulist-button\", getString(\"ulist\"), bindCommand(function (chunk, postProcessing) {\n                this.doList(chunk, postProcessing, false);\n            }));\n            buttons.heading = makeButton(\"wmd-heading-button\", getString(\"heading\"), bindCommand(\"doHeading\"));\n            buttons.hr = makeButton(\"wmd-hr-button\", getString(\"hr\"), bindCommand(\"doHorizontalRule\"));\n            //makeSpacer(3);\n            //buttons.undo = makeButton(\"wmd-undo-button\", getString(\"undo\"), null);\n            //buttons.undo.execute = function (manager) { if (manager) manager.undo(); };\n\n            // var redoTitle = /win/.test(nav.platform.toLowerCase()) ?\n            //     getString(\"redo\") :\n            //     getString(\"redomac\"); // mac and other non-Windows platforms\n\n            //buttons.redo = makeButton(\"wmd-redo-button\", redoTitle, null);\n            //buttons.redo.execute = function (manager) { if (manager) manager.redo(); };\n\n            if (helpOptions) {\n                var helpButton = document.createElement(\"li\");\n                var helpButtonImage = document.createElement(\"span\");\n                helpButton.appendChild(helpButtonImage);\n                helpButton.className = \"wmd-button wmd-help-button\";\n                helpButton.id = \"wmd-help-button\" + postfix;\n                helpButton.isHelp = true;\n                helpButton.style.right = \"0px\";\n                helpButton.title = getString(\"help\");\n                helpButton.onclick = helpOptions.handler;\n\n                setupButton(helpButton, true);\n                buttonRow.appendChild(helpButton);\n                buttons.help = helpButton;\n            }\n\n            setUndoRedoButtonStates();\n        }\n\n        function setUndoRedoButtonStates() {\n            if (undoManager) {\n                setupButton(buttons.undo, undoManager.canUndo());\n                setupButton(buttons.redo, undoManager.canRedo());\n            }\n        };\n\n        this.setUndoRedoButtonStates = setUndoRedoButtonStates;\n\n    }\n\n    function CommandManager(pluginHooks, getString) {\n        this.hooks = pluginHooks;\n        this.getString = getString;\n    }\n\n    var commandProto = CommandManager.prototype;\n\n    // The markdown symbols - 4 spaces = code, \u003e = blockquote, etc.\n    commandProto.prefixes = \"(?:\\\\s{4,}|\\\\s*\u003e|\\\\s*-\\\\s+|\\\\s*\\\\d+\\\\.|=|\\\\+|-|_|\\\\*|#|\\\\s*\\\\[[^\\n]]+\\\\]:)\";\n\n    // Remove markdown symbols from the chunk selection.\n    commandProto.unwrap = function (chunk) {\n        var txt = new re(\"([^\\\\n])\\\\n(?!(\\\\n|\" + this.prefixes + \"))\", \"g\");\n        chunk.selection = chunk.selection.replace(txt, \"$1 $2\");\n    };\n\n    commandProto.wrap = function (chunk, len) {\n        this.unwrap(chunk);\n        var regex = new re(\"(.{1,\" + len + \"})( +|$\\\\n?)\", \"gm\"),\n            that = this;\n\n        chunk.selection = chunk.selection.replace(regex, function (line, marked) {\n            if (new re(\"^\" + that.prefixes, \"\").test(line)) {\n                return line;\n            }\n            return marked + \"\\n\";\n        });\n\n        chunk.selection = chunk.selection.replace(/\\s+$/, \"\");\n    };\n\n    commandProto.doBold = function (chunk, postProcessing) {\n        return this.doBorI(chunk, postProcessing, 2, this.getString(\"boldexample\"));\n    };\n\n    commandProto.doItalic = function (chunk, postProcessing) {\n        return this.doBorI(chunk, postProcessing, 1, this.getString(\"italicexample\"));\n    };\n\n    // chunk: The selected region that will be enclosed with */**\n    // nStars: 1 for italics, 2 for bold\n    // insertText: If you just click the button without highlighting text, this gets inserted\n    commandProto.doBorI = function (chunk, postProcessing, nStars, insertText) {\n\n        // Get rid of whitespace and fixup newlines.\n        chunk.trimWhitespace();\n        chunk.selection = chunk.selection.replace(/\\n{2,}/g, \"\\n\");\n\n        // Look for stars before and after.  Is the chunk already marked up?\n        // note that these regex matches cannot fail\n        var starsBefore = /(\\**$)/.exec(chunk.before)[0];\n        var starsAfter = /(^\\**)/.exec(chunk.after)[0];\n\n        var prevStars = Math.min(starsBefore.length, starsAfter.length);\n\n        // Remove stars if we have to since the button acts as a toggle.\n        if ((prevStars \u003e= nStars) \u0026\u0026 (prevStars != 2 || nStars != 1)) {\n            chunk.before = chunk.before.replace(re(\"[*]{\" + nStars + \"}$\", \"\"), \"\");\n            chunk.after = chunk.after.replace(re(\"^[*]{\" + nStars + \"}\", \"\"), \"\");\n        }\n        else if (!chunk.selection \u0026\u0026 starsAfter) {\n            // It's not really clear why this code is necessary.  It just moves\n            // some arbitrary stuff around.\n            chunk.after = chunk.after.replace(/^([*_]*)/, \"\");\n            chunk.before = chunk.before.replace(/(\\s?)$/, \"\");\n            var whitespace = re.$1;\n            chunk.before = chunk.before + starsAfter + whitespace;\n        }\n        else {\n\n            // In most cases, if you don't have any selected text and click the button\n            // you'll get a selected, marked up region with the default text inserted.\n            if (!chunk.selection \u0026\u0026 !starsAfter) {\n                chunk.selection = insertText;\n            }\n\n            // Add the true markup.\n            var markup = nStars \u003c= 1 ? \"*\" : \"**\"; // shouldn't the test be = ?\n            chunk.before = chunk.before + markup;\n            chunk.after = markup + chunk.after;\n        }\n\n        return;\n    };\n\n    commandProto.stripLinkDefs = function (text, defsToAdd) {\n\n        text = text.replace(/^[ ]{0,3}\\[(\\d+)\\]:[ \\t]*\\n?[ \\t]*\u003c?(\\S+?)\u003e?[ \\t]*\\n?[ \\t]*(?:(\\n*)[\"(](.+?)[\")][ \\t]*)?(?:\\n+|$)/gm,\n            function (totalMatch, id, link, newlines, title) {\n                defsToAdd[id] = totalMatch.replace(/\\s*$/, \"\");\n                if (newlines) {\n                    // Strip the title and return that separately.\n                    defsToAdd[id] = totalMatch.replace(/[\"(](.+?)[\")]$/, \"\");\n                    return newlines + title;\n                }\n                return \"\";\n            });\n\n        return text;\n    };\n\n    commandProto.addLinkDef = function (chunk, linkDef) {\n\n        var refNumber = 0; // The current reference number\n        var defsToAdd = {}; //\n        // Start with a clean slate by removing all previous link definitions.\n        chunk.before = this.stripLinkDefs(chunk.before, defsToAdd);\n        chunk.selection = this.stripLinkDefs(chunk.selection, defsToAdd);\n        chunk.after = this.stripLinkDefs(chunk.after, defsToAdd);\n\n        var defs = \"\";\n        var regex = /(\\[)((?:\\[[^\\]]*\\]|[^\\[\\]])*)(\\][ ]?(?:\\n[ ]*)?\\[)(\\d+)(\\])/g;\n\n        var addDefNumber = function (def) {\n            refNumber++;\n            def = def.replace(/^[ ]{0,3}\\[(\\d+)\\]:/, \"  [\" + refNumber + \"]:\");\n            defs += \"\\n\" + def;\n        };\n\n        // note that\n        // a) the recursive call to getLink cannot go infinite, because by definition\n        //    of regex, inner is always a proper substring of wholeMatch, and\n        // b) more than one level of nesting is neither supported by the regex\n        //    nor making a lot of sense (the only use case for nesting is a linked image)\n        var getLink = function (wholeMatch, before, inner, afterInner, id, end) {\n            inner = inner.replace(regex, getLink);\n            if (defsToAdd[id]) {\n                addDefNumber(defsToAdd[id]);\n                return before + inner + afterInner + refNumber + end;\n            }\n            return wholeMatch;\n        };\n\n        chunk.before = chunk.before.replace(regex, getLink);\n\n        if (linkDef) {\n            addDefNumber(linkDef);\n        }\n        else {\n            chunk.selection = chunk.selection.replace(regex, getLink);\n        }\n\n        var refOut = refNumber;\n\n        chunk.after = chunk.after.replace(regex, getLink);\n\n        if (chunk.after) {\n            chunk.after = chunk.after.replace(/\\n*$/, \"\");\n        }\n        if (!chunk.after) {\n            chunk.selection = chunk.selection.replace(/\\n*$/, \"\");\n        }\n\n        chunk.after += \"\\n\\n\" + defs;\n\n        return refOut;\n    };\n\n    // takes the line as entered into the add link/as image dialog and makes\n    // sure the URL and the optinal title are \"nice\".\n    function properlyEncoded(linkdef) {\n        return linkdef.replace(/^\\s*(.*?)(?:\\s+\"(.+)\")?\\s*$/, function (wholematch, link, title) {\n            link = link.replace(/\\?.*$/, function (querypart) {\n                return querypart.replace(/\\+/g, \" \"); // in the query string, a plus and a space are identical\n            });\n            link = decodeURIComponent(link); // unencode first, to prevent double encoding\n            link = encodeURI(link).replace(/'/g, '%27').replace(/\\(/g, '%28').replace(/\\)/g, '%29');\n            link = link.replace(/\\?.*$/, function (querypart) {\n                return querypart.replace(/\\+/g, \"%2b\"); // since we replaced plus with spaces in the query part, all pluses that now appear where originally encoded\n            });\n            if (title) {\n                title = title.trim ? title.trim() : title.replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                title = title.replace(/\"/g, \"quot;\").replace(/\\(/g, \"\u0026#40;\").replace(/\\)/g, \"\u0026#41;\").replace(/\u003c/g, \"\u0026lt;\").replace(/\u003e/g, \"\u0026gt;\");\n            }\n            return title ? link + ' \"' + title + '\"' : link;\n        });\n    }\n\n    commandProto.doLinkOrImage = function (chunk, postProcessing, isImage) {\n\n        chunk.trimWhitespace();\n        chunk.findTags(/\\s*!?\\[/, /\\][ ]?(?:\\n[ ]*)?(\\[.*?\\])?/);\n        var background;\n\n        if (chunk.endTag.length \u003e 1 \u0026\u0026 chunk.startTag.length \u003e 0) {\n\n            chunk.startTag = chunk.startTag.replace(/!?\\[/, \"\");\n            chunk.endTag = \"\";\n            this.addLinkDef(chunk, null);\n\n        }\n        else {\n\n            // We're moving start and end tag back into the selection, since (as we're in the else block) we're not\n            // *removing* a link, but *adding* one, so whatever findTags() found is now back to being part of the\n            // link text. linkEnteredCallback takes care of escaping any brackets.\n            chunk.selection = chunk.startTag + chunk.selection + chunk.endTag;\n            chunk.startTag = chunk.endTag = \"\";\n\n            if (/\\n\\n/.test(chunk.selection)) {\n                this.addLinkDef(chunk, null);\n                return;\n            }\n            var that = this;\n            // The function to be executed when you enter a link and press OK or Cancel.\n            // Marks up the link and adds the ref.\n            var linkEnteredCallback = function (link) {\n\n                background.parentNode.removeChild(background);\n\n                if (link !== null) {\n                    // (                          $1\n                    //     [^\\\\]                  anything that's not a backslash\n                    //     (?:\\\\\\\\)*              an even number (this includes zero) of backslashes\n                    // )\n                    // (?=                        followed by\n                    //     [[\\]]                  an opening or closing bracket\n                    // )\n                    //\n                    // In other words, a non-escaped bracket. These have to be escaped now to make sure they\n                    // don't count as the end of the link or similar.\n                    // Note that the actual bracket has to be a lookahead, because (in case of to subsequent brackets),\n                    // the bracket in one match may be the \"not a backslash\" character in the next match, so it\n                    // should not be consumed by the first match.\n                    // The \"prepend a space and finally remove it\" steps makes sure there is a \"not a backslash\" at the\n                    // start of the string, so this also works if the selection begins with a bracket. We cannot solve\n                    // this by anchoring with ^, because in the case that the selection starts with two brackets, this\n                    // would mean a zero-width match at the start. Since zero-width matches advance the string position,\n                    // the first bracket could then not act as the \"not a backslash\" for the second.\n                    chunk.selection = (\" \" + chunk.selection).replace(/([^\\\\](?:\\\\\\\\)*)(?=[[\\]])/g, \"$1\\\\\").substr(1);\n\n                    var linkDef = \" [999]: \" + properlyEncoded(link);\n\n                    var num = that.addLinkDef(chunk, linkDef);\n                    chunk.startTag = isImage ? \"![\" : \"[\";\n                    chunk.endTag = \"][\" + num + \"]\";\n\n                    if (!chunk.selection) {\n                        if (isImage) {\n                            chunk.selection = that.getString(\"imagedescription\");\n                        }\n                        else {\n                            chunk.selection = that.getString(\"linkdescription\");\n                        }\n                    }\n                }\n                postProcessing();\n            };\n\n            background = ui.createBackground();\n\n            if (isImage) {\n                if (!this.hooks.insertImageDialog(linkEnteredCallback))\n                    ui.prompt(this.getString(\"imagedialog\"), imageDefaultText, linkEnteredCallback);\n            }\n            else {\n                ui.prompt(this.getString(\"linkdialog\"), linkDefaultText, linkEnteredCallback);\n            }\n            return true;\n        }\n    };\n\n    // When making a list, hitting shift-enter will put your cursor on the next line\n    // at the current indent level.\n    commandProto.doAutoindent = function (chunk, postProcessing) {\n\n        var commandMgr = this,\n            fakeSelection = false;\n\n        chunk.before = chunk.before.replace(/(\\n|^)[ ]{0,3}([*+-]|\\d+[.])[ \\t]*\\n$/, \"\\n\\n\");\n        chunk.before = chunk.before.replace(/(\\n|^)[ ]{0,3}\u003e[ \\t]*\\n$/, \"\\n\\n\");\n        chunk.before = chunk.before.replace(/(\\n|^)[ \\t]+\\n$/, \"\\n\\n\");\n\n        // There's no selection, end the cursor wasn't at the end of the line:\n        // The user wants to split the current list item / code line / blockquote line\n        // (for the latter it doesn't really matter) in two. Temporarily select the\n        // (rest of the) line to achieve this.\n        if (!chunk.selection \u0026\u0026 !/^[ \\t]*(?:\\n|$)/.test(chunk.after)) {\n            chunk.after = chunk.after.replace(/^[^\\n]*/, function (wholeMatch) {\n                chunk.selection = wholeMatch;\n                return \"\";\n            });\n            fakeSelection = true;\n        }\n\n        if (/(\\n|^)[ ]{0,3}([*+-]|\\d+[.])[ \\t]+.*\\n$/.test(chunk.before)) {\n            if (commandMgr.doList) {\n                commandMgr.doList(chunk);\n            }\n        }\n        if (/(\\n|^)[ ]{0,3}\u003e[ \\t]+.*\\n$/.test(chunk.before)) {\n            if (commandMgr.doBlockquote) {\n                commandMgr.doBlockquote(chunk);\n            }\n        }\n        if (/(\\n|^)(\\t|[ ]{4,}).*\\n$/.test(chunk.before)) {\n            if (commandMgr.doCode) {\n                commandMgr.doCode(chunk);\n            }\n        }\n\n        if (fakeSelection) {\n            chunk.after = chunk.selection + chunk.after;\n            chunk.selection = \"\";\n        }\n    };\n\n    commandProto.doBlockquote = function (chunk, postProcessing) {\n\n        chunk.selection = chunk.selection.replace(/^(\\n*)([^\\r]+?)(\\n*)$/,\n            function (totalMatch, newlinesBefore, text, newlinesAfter) {\n                chunk.before += newlinesBefore;\n                chunk.after = newlinesAfter + chunk.after;\n                return text;\n            });\n\n        chunk.before = chunk.before.replace(/(\u003e[ \\t]*)$/,\n            function (totalMatch, blankLine) {\n                chunk.selection = blankLine + chunk.selection;\n                return \"\";\n            });\n\n        chunk.selection = chunk.selection.replace(/^(\\s|\u003e)+$/, \"\");\n        chunk.selection = chunk.selection || this.getString(\"quoteexample\");\n\n        // The original code uses a regular expression to find out how much of the\n        // text *directly before* the selection already was a blockquote:\n\n        /*\n        if (chunk.before) {\n        chunk.before = chunk.before.replace(/\\n?$/, \"\\n\");\n        }\n        chunk.before = chunk.before.replace(/(((\\n|^)(\\n[ \\t]*)*\u003e(.+\\n)*.*)+(\\n[ \\t]*)*$)/,\n        function (totalMatch) {\n        chunk.startTag = totalMatch;\n        return \"\";\n        });\n        */\n\n        // This comes down to:\n        // Go backwards as many lines a possible, such that each line\n        //  a) starts with \"\u003e\", or\n        //  b) is almost empty, except for whitespace, or\n        //  c) is preceeded by an unbroken chain of non-empty lines\n        //     leading up to a line that starts with \"\u003e\" and at least one more character\n        // and in addition\n        //  d) at least one line fulfills a)\n        //\n        // Since this is essentially a backwards-moving regex, it's susceptible to\n        // catstrophic backtracking and can cause the browser to hang;\n        // see e.g. http://meta.stackoverflow.com/questions/9807.\n        //\n        // Hence we replaced this by a simple state machine that just goes through the\n        // lines and checks for a), b), and c).\n\n        var match = \"\",\n            leftOver = \"\",\n            line;\n        if (chunk.before) {\n            var lines = chunk.before.replace(/\\n$/, \"\").split(\"\\n\");\n            var inChain = false;\n            for (var i = 0; i \u003c lines.length; i++) {\n                var good = false;\n                line = lines[i];\n                inChain = inChain \u0026\u0026 line.length \u003e 0; // c) any non-empty line continues the chain\n                if (/^\u003e/.test(line)) {                // a)\n                    good = true;\n                    if (!inChain \u0026\u0026 line.length \u003e 1)  // c) any line that starts with \"\u003e\" and has at least one more character starts the chain\n                        inChain = true;\n                } else if (/^[ \\t]*$/.test(line)) {   // b)\n                    good = true;\n                } else {\n                    good = inChain;                   // c) the line is not empty and does not start with \"\u003e\", so it matches if and only if we're in the chain\n                }\n                if (good) {\n                    match += line + \"\\n\";\n                } else {\n                    leftOver += match + line;\n                    match = \"\\n\";\n                }\n            }\n            if (!/(^|\\n)\u003e/.test(match)) {             // d)\n                leftOver += match;\n                match = \"\";\n            }\n        }\n\n        chunk.startTag = match;\n        chunk.before = leftOver;\n\n        // end of change\n\n        if (chunk.after) {\n            chunk.after = chunk.after.replace(/^\\n?/, \"\\n\");\n        }\n\n        chunk.after = chunk.after.replace(/^(((\\n|^)(\\n[ \\t]*)*\u003e(.+\\n)*.*)+(\\n[ \\t]*)*)/,\n            function (totalMatch) {\n                chunk.endTag = totalMatch;\n                return \"\";\n            }\n        );\n\n        var replaceBlanksInTags = function (useBracket) {\n\n            var replacement = useBracket ? \"\u003e \" : \"\";\n\n            if (chunk.startTag) {\n                chunk.startTag = chunk.startTag.replace(/\\n((\u003e|\\s)*)\\n$/,\n                    function (totalMatch, markdown) {\n                        return \"\\n\" + markdown.replace(/^[ ]{0,3}\u003e?[ \\t]*$/gm, replacement) + \"\\n\";\n                    });\n            }\n            if (chunk.endTag) {\n                chunk.endTag = chunk.endTag.replace(/^\\n((\u003e|\\s)*)\\n/,\n                    function (totalMatch, markdown) {\n                        return \"\\n\" + markdown.replace(/^[ ]{0,3}\u003e?[ \\t]*$/gm, replacement) + \"\\n\";\n                    });\n            }\n        };\n\n        if (/^(?![ ]{0,3}\u003e)/m.test(chunk.selection)) {\n            this.wrap(chunk, SETTINGS.lineLength - 2);\n            chunk.selection = chunk.selection.replace(/^/gm, \"\u003e \");\n            replaceBlanksInTags(true);\n            chunk.skipLines();\n        } else {\n            chunk.selection = chunk.selection.replace(/^[ ]{0,3}\u003e ?/gm, \"\");\n            this.unwrap(chunk);\n            replaceBlanksInTags(false);\n\n            if (!/^(\\n|^)[ ]{0,3}\u003e/.test(chunk.selection) \u0026\u0026 chunk.startTag) {\n                chunk.startTag = chunk.startTag.replace(/\\n{0,2}$/, \"\\n\\n\");\n            }\n\n            if (!/(\\n|^)[ ]{0,3}\u003e.*$/.test(chunk.selection) \u0026\u0026 chunk.endTag) {\n                chunk.endTag = chunk.endTag.replace(/^\\n{0,2}/, \"\\n\\n\");\n            }\n        }\n\n        chunk.selection = this.hooks.postBlockquoteCreation(chunk.selection);\n\n        if (!/\\n/.test(chunk.selection)) {\n            chunk.selection = chunk.selection.replace(/^(\u003e *)/,\n            function (wholeMatch, blanks) {\n                chunk.startTag += blanks;\n                return \"\";\n            });\n        }\n    };\n\n    commandProto.doCode = function (chunk, postProcessing) {\n\n        var hasTextBefore = /\\S[ ]*$/.test(chunk.before);\n        var hasTextAfter = /^[ ]*\\S/.test(chunk.after);\n\n        // Use 'four space' markdown if the selection is on its own\n        // line or is multiline.\n        if ((!hasTextAfter \u0026\u0026 !hasTextBefore) || /\\n/.test(chunk.selection)) {\n\n            chunk.before = chunk.before.replace(/[ ]{4}$/,\n                function (totalMatch) {\n                    chunk.selection = totalMatch + chunk.selection;\n                    return \"\";\n                });\n\n            var nLinesBack = 1;\n            var nLinesForward = 1;\n\n            if (/(\\n|^)(\\t|[ ]{4,}).*\\n$/.test(chunk.before)) {\n                nLinesBack = 0;\n            }\n            if (/^\\n(\\t|[ ]{4,})/.test(chunk.after)) {\n                nLinesForward = 0;\n            }\n\n            chunk.skipLines(nLinesBack, nLinesForward);\n\n            if (!chunk.selection) {\n                chunk.startTag = \"    \";\n                chunk.selection = this.getString(\"codeexample\");\n            }\n            else {\n                if (/^[ ]{0,3}\\S/m.test(chunk.selection)) {\n                    if (/\\n/.test(chunk.selection))\n                        chunk.selection = chunk.selection.replace(/^/gm, \"    \");\n                    else // if it's not multiline, do not select the four added spaces; this is more consistent with the doList behavior\n                        chunk.before += \"    \";\n                }\n                else {\n                    chunk.selection = chunk.selection.replace(/^(?:[ ]{4}|[ ]{0,3}\\t)/gm, \"\");\n                }\n            }\n        }\n        else {\n            // Use backticks (`) to delimit the code block.\n\n            chunk.trimWhitespace();\n            chunk.findTags(/`/, /`/);\n\n            if (!chunk.startTag \u0026\u0026 !chunk.endTag) {\n                chunk.startTag = chunk.endTag = \"`\";\n                if (!chunk.selection) {\n                    chunk.selection = this.getString(\"codeexample\");\n                }\n            }\n            else if (chunk.endTag \u0026\u0026 !chunk.startTag) {\n                chunk.before += chunk.endTag;\n                chunk.endTag = \"\";\n            }\n            else {\n                chunk.startTag = chunk.endTag = \"\";\n            }\n        }\n    };\n\n    commandProto.doList = function (chunk, postProcessing, isNumberedList) {\n\n        // These are identical except at the very beginning and end.\n        // Should probably use the regex extension function to make this clearer.\n        var previousItemsRegex = /(\\n|^)(([ ]{0,3}([*+-]|\\d+[.])[ \\t]+.*)(\\n.+|\\n{2,}([*+-].*|\\d+[.])[ \\t]+.*|\\n{2,}[ \\t]+\\S.*)*)\\n*$/;\n        var nextItemsRegex = /^\\n*(([ ]{0,3}([*+-]|\\d+[.])[ \\t]+.*)(\\n.+|\\n{2,}([*+-].*|\\d+[.])[ \\t]+.*|\\n{2,}[ \\t]+\\S.*)*)\\n*/;\n\n        // The default bullet is a dash but others are possible.\n        // This has nothing to do with the particular HTML bullet,\n        // it's just a markdown bullet.\n        var bullet = \"-\";\n\n        // The number in a numbered list.\n        var num = 1;\n\n        // Get the item prefix - e.g. \" 1. \" for a numbered list, \" - \" for a bulleted list.\n        var getItemPrefix = function () {\n            var prefix;\n            if (isNumberedList) {\n                prefix = \" \" + num + \". \";\n                num++;\n            }\n            else {\n                prefix = \" \" + bullet + \" \";\n            }\n            return prefix;\n        };\n\n        // Fixes the prefixes of the other list items.\n        var getPrefixedItem = function (itemText) {\n\n            // The numbering flag is unset when called by autoindent.\n            if (isNumberedList === undefined) {\n                isNumberedList = /^\\s*\\d/.test(itemText);\n            }\n\n            // Renumber/bullet the list element.\n            itemText = itemText.replace(/^[ ]{0,3}([*+-]|\\d+[.])\\s/gm,\n                function (_) {\n                    return getItemPrefix();\n                });\n\n            return itemText;\n        };\n\n        chunk.findTags(/(\\n|^)*[ ]{0,3}([*+-]|\\d+[.])\\s+/, null);\n\n        if (chunk.before \u0026\u0026 !/\\n$/.test(chunk.before) \u0026\u0026 !/^\\n/.test(chunk.startTag)) {\n            chunk.before += chunk.startTag;\n            chunk.startTag = \"\";\n        }\n\n        if (chunk.startTag) {\n\n            var hasDigits = /\\d+[.]/.test(chunk.startTag);\n            chunk.startTag = \"\";\n            chunk.selection = chunk.selection.replace(/\\n[ ]{4}/g, \"\\n\");\n            this.unwrap(chunk);\n            chunk.skipLines();\n\n            if (hasDigits) {\n                // Have to renumber the bullet points if this is a numbered list.\n                chunk.after = chunk.after.replace(nextItemsRegex, getPrefixedItem);\n            }\n            if (isNumberedList == hasDigits) {\n                return;\n            }\n        }\n\n        var nLinesUp = 1;\n\n        chunk.before = chunk.before.replace(previousItemsRegex,\n            function (itemText) {\n                if (/^\\s*([*+-])/.test(itemText)) {\n                    bullet = re.$1;\n                }\n                nLinesUp = /[^\\n]\\n\\n[^\\n]/.test(itemText) ? 1 : 0;\n                return getPrefixedItem(itemText);\n            });\n\n        if (!chunk.selection) {\n            chunk.selection = this.getString(\"litem\");\n        }\n\n        var prefix = getItemPrefix();\n\n        var nLinesDown = 1;\n\n        chunk.after = chunk.after.replace(nextItemsRegex,\n            function (itemText) {\n                nLinesDown = /[^\\n]\\n\\n[^\\n]/.test(itemText) ? 1 : 0;\n                return getPrefixedItem(itemText);\n            });\n\n        chunk.trimWhitespace(true);\n        chunk.skipLines(nLinesUp, nLinesDown, true);\n        chunk.startTag = prefix;\n        var spaces = prefix.replace(/./g, \" \");\n        this.wrap(chunk, SETTINGS.lineLength - spaces.length);\n        chunk.selection = chunk.selection.replace(/\\n/g, \"\\n\" + spaces);\n\n    };\n\n    commandProto.doHeading = function (chunk, postProcessing) {\n\n        // Remove leading/trailing whitespace and reduce internal spaces to single spaces.\n        chunk.selection = chunk.selection.replace(/\\s+/g, \" \");\n        chunk.selection = chunk.selection.replace(/(^\\s+|\\s+$)/g, \"\");\n\n        // If we clicked the button with no selected text, we just\n        // make a level 2 hash header around some default text.\n        if (!chunk.selection) {\n            chunk.startTag = \"## \";\n            chunk.selection = this.getString(\"headingexample\");\n            chunk.endTag = \" ##\";\n            return;\n        }\n\n        var headerLevel = 0;     // The existing header level of the selected text.\n\n        // Remove any existing hash heading markdown and save the header level.\n        chunk.findTags(/#+[ ]*/, /[ ]*#+/);\n        if (/#+/.test(chunk.startTag)) {\n            headerLevel = re.lastMatch.length;\n        }\n        chunk.startTag = chunk.endTag = \"\";\n\n        // Try to get the current header level by looking for - and = in the line\n        // below the selection.\n        chunk.findTags(null, /\\s?(-+|=+)/);\n        if (/=+/.test(chunk.endTag)) {\n            headerLevel = 1;\n        }\n        if (/-+/.test(chunk.endTag)) {\n            headerLevel = 2;\n        }\n\n        // Skip to the next line so we can create the header markdown.\n        chunk.startTag = chunk.endTag = \"\";\n        chunk.skipLines(1, 1);\n\n        // We make a level 2 header if there is no current header.\n        // If there is a header level, we substract one from the header level.\n        // If it's already a level 1 header, it's removed.\n        var headerLevelToCreate = headerLevel == 0 ? 2 : headerLevel - 1;\n\n        if (headerLevelToCreate \u003e 0) {\n\n            // The button only creates level 1 and 2 underline headers.\n            // Why not have it iterate over hash header levels?  Wouldn't that be easier and cleaner?\n            var headerChar = headerLevelToCreate \u003e= 2 ? \"-\" : \"=\";\n            var len = chunk.selection.length;\n            if (len \u003e SETTINGS.lineLength) {\n                len = SETTINGS.lineLength;\n            }\n            chunk.endTag = \"\\n\";\n            while (len--) {\n                chunk.endTag += headerChar;\n            }\n        }\n    };\n\n    commandProto.doHorizontalRule = function (chunk, postProcessing) {\n        chunk.startTag = \"----------\\n\";\n        chunk.selection = \"\";\n        chunk.skipLines(2, 1, true);\n    }\n\n\n})();\n";
define("discourse/lib/after-transition", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      CSS transitions are a PITA, often we need to queue some js after a transition, this helper ensures
      it happens after the transition.

      SO: http://stackoverflow.com/questions/9943435/css3-animation-end-techniques
    **/

    var dummy = document.createElement("div"),
        eventNameHash = {
          webkit: "webkitTransitionEnd",
          Moz: "transitionend",
          O: "oTransitionEnd",
          ms: "MSTransitionEnd"
        };

    var transitionEnd = function() {
      var retValue;
      retValue = "transitionend";
      Object.keys(eventNameHash).some(function(vendor) {
        if (vendor + "TransitionProperty" in dummy.style) {
          retValue = eventNameHash[vendor];
          return true;
        }
      });
      return retValue;
    }();

    __exports__["default"] = function (element, callback) {
      return $(element).on(transitionEnd, callback);
    }
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/after-transition.js'] = "define(\"discourse/lib/after-transition\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      CSS transitions are a PITA, often we need to queue some js after a transition, this helper ensures\n      it happens after the transition.\n\n      SO: http://stackoverflow.com/questions/9943435/css3-animation-end-techniques\n    **/\n\n    var dummy = document.createElement(\"div\"),\n        eventNameHash = {\n          webkit: \"webkitTransitionEnd\",\n          Moz: \"transitionend\",\n          O: \"oTransitionEnd\",\n          ms: \"MSTransitionEnd\"\n        };\n\n    var transitionEnd = function() {\n      var retValue;\n      retValue = \"transitionend\";\n      Object.keys(eventNameHash).some(function(vendor) {\n        if (vendor + \"TransitionProperty\" in dummy.style) {\n          retValue = eventNameHash[vendor];\n          return true;\n        }\n      });\n      return retValue;\n    }();\n\n    __exports__[\"default\"] = function (element, callback) {\n      return $(element).on(transitionEnd, callback);\n    }\n  });";
define("discourse/lib/autocomplete", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      This is a jQuery plugin to support autocompleting values in our text fields.

      @module $.fn.autocomplete
    **/


    var CANCELLED_STATUS = "__CANCELLED";
    __exports__.CANCELLED_STATUS = CANCELLED_STATUS;
    var shiftMap = [];
    shiftMap[192] = "~";
    shiftMap[49] = "!";
    shiftMap[50] = "@";
    shiftMap[51] = "#";
    shiftMap[52] = "$";
    shiftMap[53] = "%";
    shiftMap[54] = "^";
    shiftMap[55] = "&";
    shiftMap[56] = "*";
    shiftMap[57] = "(";
    shiftMap[48] = ")";
    shiftMap[109] = "_";
    shiftMap[107] = "+";
    shiftMap[219] = "{";
    shiftMap[221] = "}";
    shiftMap[220] = "|";
    shiftMap[59] = ":";
    shiftMap[222] = "\"";
    shiftMap[188] = "<";
    shiftMap[190] = ">";
    shiftMap[191] = "?";
    shiftMap[32] = " ";

    function mapKeyPressToActualCharacter(isShiftKey, characterCode) {
      if ( characterCode === 27 || characterCode === 8 || characterCode === 9 || characterCode === 20 || characterCode === 16 || characterCode === 17 || characterCode === 91 || characterCode === 13 || characterCode === 92 || characterCode === 18 ) { return false; }

      // Lookup non-letter keypress while holding shift
      if (isShiftKey && ( characterCode < 65 || characterCode > 90 )) {
        return shiftMap[characterCode];
      }

      var stringValue = String.fromCharCode(characterCode);
      if ( !isShiftKey ) {
        stringValue = stringValue.toLowerCase();
      }
      return stringValue;
    }

    __exports__["default"] = function(options) {
      var autocompletePlugin = this;

      if (this.length === 0) return;

      if (options && options.cancel && this.data("closeAutocomplete")) {
        this.data("closeAutocomplete")();
        return this;
      }

      if (this.length !== 1) {
        alert("only supporting one matcher at the moment");
      }

      var disabled = options && options.disabled;
      var wrap = null;
      var autocompleteOptions = null;
      var selectedOption = null;
      var completeStart = null;
      var completeEnd = null;
      var me = this;
      var div = null;

      // input is handled differently
      var isInput = this[0].tagName === "INPUT";
      var inputSelectedItems = [];

      var closeAutocomplete = function() {
        if (div) {
          div.hide().remove();
        }
        div = null;
        completeStart = null;
        autocompleteOptions = null;
      };

      var addInputSelectedItem = function(item) {
        var transformed,
            transformedItem = item;

        if (options.transformComplete) { transformedItem = options.transformComplete(transformedItem); }
        // dump what we have in single mode, just in case
        if (options.single) { inputSelectedItems = []; }
        transformed = _.isArray(transformedItem) ? transformedItem : [transformedItem || item];

        var divs = transformed.map(function(itm) {
          var d = $("<div class='item'><span>" + itm + "<a class='remove' href='#'><i class='fa fa-times'></i></a></span></div>");
          var prev = me.parent().find('.item:last');
          if (prev.length === 0) {
            me.parent().prepend(d);
          } else {
            prev.after(d);
          }
          inputSelectedItems.push(itm);
          return d[0];
        });

        if (options.onChangeItems) { options.onChangeItems(inputSelectedItems); }

        $(divs).find('a').click(function() {
          closeAutocomplete();
          inputSelectedItems.splice($.inArray(transformedItem, inputSelectedItems), 1);
          $(this).parent().parent().remove();
          if (options.single) {
            me.show();
          }
          if (options.onChangeItems) {
            options.onChangeItems(inputSelectedItems);
          }
          return false;
        });
      };

      var completeTerm = function(term) {
        if (term) {
          if (isInput) {
            me.val("");
            if(options.single){
              me.hide();
            }
            addInputSelectedItem(term);
          } else {
            if (options.transformComplete) {
              term = options.transformComplete(term);
            }
            var text = me.val();
            text = text.substring(0, completeStart) + (options.key || "") + term + ' ' + text.substring(completeEnd + 1, text.length);
            me.val(text);
            Discourse.Utilities.setCaretPosition(me[0], completeStart + 1 + term.length);
          }
        }
        closeAutocomplete();
      };

      if (isInput) {
        var width = this.width();
        wrap = this.wrap("<div class='ac-wrap clearfix" + (disabled ? " disabled": "") +  "'/>").parent();
        wrap.width(width);
        if(options.single) {
          this.css("width","100%");
        } else {
          this.width(150);
        }
        this.attr('name', this.attr('name') + "-renamed");
        var vals = this.val().split(",");
        _.each(vals,function(x) {
          if (x !== "") {
            if (options.reverseTransform) {
              x = options.reverseTransform(x);
            }
            addInputSelectedItem(x);
          }
        });
        if(options.items) {
          _.each(options.items, function(item){
            addInputSelectedItem(item);
          });
        }
        this.val("");
        completeStart = 0;
        wrap.click(function() {
          autocompletePlugin.focus();
          return true;
        });
      }

      var markSelected = function() {
        var links = div.find('li a');
        links.removeClass('selected');
        return $(links[selectedOption]).addClass('selected');
      };

      var renderAutocomplete = function() {
        if (div) {
          div.hide().remove();
        }
        if (autocompleteOptions.length === 0) return;

        div = $(options.template({ options: autocompleteOptions }));

        var ul = div.find('ul');
        selectedOption = 0;
        markSelected();
        ul.find('li').click(function() {
          selectedOption = ul.find('li').index(this);
          completeTerm(autocompleteOptions[selectedOption]);
          return false;
        });
        var pos = null;
        var vOffset = 0;
        var hOffset = 0;
        if (isInput) {
          pos = {
            left: 0,
            top: 0
          };
          vOffset = -32;
          hOffset = 0;
        } else {
          pos = me.caretPosition({
            pos: completeStart,
            key: options.key
          });
          hOffset = 27;
        }
        div.css({
          left: "-1000px"
        });

        me.parent().append(div);

        if(!isInput){
          vOffset = div.height();
        }

        var mePos = me.position();
        var borderTop = parseInt(me.css('border-top-width'), 10) || 0;
        div.css({
          position: 'absolute',
          top: (mePos.top + pos.top - vOffset + borderTop) + 'px',
          left: (mePos.left + pos.left + hOffset) + 'px'
        });
      };

      var updateAutoComplete = function(r) {

        if (completeStart === null) return;

        if (r && r.then && typeof(r.then) === "function") {
          if (div) {
            div.hide().remove();
          }
          r.then(updateAutoComplete);
          return;
        }

        // Allow an update method to cancel. This allows us to debounce
        // promises without leaking
        if (r === CANCELLED_STATUS) {
          return;
        }

        autocompleteOptions = r;
        if (!r || r.length === 0) {
          closeAutocomplete();
        } else {
          renderAutocomplete();
        }
      };

      // chain to allow multiples
      var oldClose = me.data("closeAutocomplete");
      me.data("closeAutocomplete", function() {
        if (oldClose) {
          oldClose();
        }
        closeAutocomplete();
      });


      $(this).keypress(function(e) {

        if (!options.key) return;

        // keep hunting backwards till you hit a
        if (e.which === options.key.charCodeAt(0)) {
          var caretPosition = Discourse.Utilities.caretPosition(me[0]);
          var prevChar = me.val().charAt(caretPosition - 1);
          if (!prevChar || /\s/.test(prevChar)) {
            completeStart = completeEnd = caretPosition;
            updateAutoComplete(options.dataSource(""));
          }
        }
      });

      $(this).keydown(function(e) {
        var c, caretPosition, i, initial, next, prev, prevIsGood, stopFound, term, total, userToComplete;

        if(options.allowAny){
          // saves us wiring up a change event as well, keypress is while its pressed
          _.delay(function(){
            if(inputSelectedItems.length === 0) {
              inputSelectedItems.push("");
            }

            if(_.isString(inputSelectedItems[0]) && me.val().length > 0) {
              inputSelectedItems.pop();
              inputSelectedItems.push(me.val());
              if (options.onChangeItems) {
                options.onChangeItems(inputSelectedItems);
              }
            }

          },50);
        }

        if (!options.key) {
          completeStart = 0;
        }
        if (e.which === 16) return;
        if ((completeStart === null) && e.which === 8 && options.key) {
          c = Discourse.Utilities.caretPosition(me[0]);
          next = me[0].value[c];
          c -= 1;
          initial = c;
          prevIsGood = true;
          while (prevIsGood && c >= 0) {
            c -= 1;
            prev = me[0].value[c];
            stopFound = prev === options.key;
            if (stopFound) {
              prev = me[0].value[c - 1];
              if (!prev || /\s/.test(prev)) {
                completeStart = c;
                caretPosition = completeEnd = initial;
                term = me[0].value.substring(c + 1, initial);
                updateAutoComplete(options.dataSource(term));
                return true;
              }
            }
            prevIsGood = /[a-zA-Z\.]/.test(prev);
          }
        }

        // ESC
        if (e.which === 27) {
          if (completeStart !== null) {
            closeAutocomplete();
            return false;
          }
          return true;
        }

        if (completeStart !== null) {
          caretPosition = Discourse.Utilities.caretPosition(me[0]);

          // If we've backspaced past the beginning, cancel unless no key
          if (caretPosition <= completeStart && options.key) {
            closeAutocomplete();
            return false;
          }

          // Keyboard codes! So 80's.
          switch (e.which) {
            case 13:
            case 39:
            case 9:
              if (!autocompleteOptions) return true;
              if (selectedOption >= 0 && (userToComplete = autocompleteOptions[selectedOption])) {
                completeTerm(userToComplete);
              } else {
                // We're cancelling it, really.
                return true;
              }
              e.stopImmediatePropagation();
              return false;
            case 38:
              selectedOption = selectedOption - 1;
              if (selectedOption < 0) {
                selectedOption = 0;
              }
              markSelected();
              return false;
            case 40:
              total = autocompleteOptions.length;
              selectedOption = selectedOption + 1;
              if (selectedOption >= total) {
                selectedOption = total - 1;
              }
              if (selectedOption < 0) {
                selectedOption = 0;
              }
              markSelected();
              return false;
            default:
              // otherwise they're typing - let's search for it!
              completeEnd = caretPosition;
              if (e.which === 8) {
                caretPosition--;
              }
              if (caretPosition < 0) {
                closeAutocomplete();
                if (isInput) {
                  i = wrap.find('a:last');
                  if (i) {
                    i.click();
                  }
                }
                return false;
              }
              term = me.val().substring(completeStart + (options.key ? 1 : 0), caretPosition);
              if (e.which >= 48 && e.which <= 90) {
                term += mapKeyPressToActualCharacter(e.shiftKey, e.which);
              } else if (e.which === 187) {
                term += "+";
              } else if (e.which === 189) {
                term += (e.shiftKey) ? "_" : "-";
              } else if (e.which === 220) {
                term += (e.shiftKey) ? "|" : "]";
              } else if (e.which === 222) {
                term += (e.shiftKey) ? "\"" : "'";
              } else if (e.which !== 8) {
                term += ",";
              }

              updateAutoComplete(options.dataSource(term));
              return true;
          }
        }
      });

      return this;
    }
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/autocomplete.js'] = "define(\"discourse/lib/autocomplete\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      This is a jQuery plugin to support autocompleting values in our text fields.\n\n      @module $.fn.autocomplete\n    **/\n\n\n    var CANCELLED_STATUS = \"__CANCELLED\";\n    __exports__.CANCELLED_STATUS = CANCELLED_STATUS;\n    var shiftMap = [];\n    shiftMap[192] = \"~\";\n    shiftMap[49] = \"!\";\n    shiftMap[50] = \"@\";\n    shiftMap[51] = \"#\";\n    shiftMap[52] = \"$\";\n    shiftMap[53] = \"%\";\n    shiftMap[54] = \"^\";\n    shiftMap[55] = \"\u0026\";\n    shiftMap[56] = \"*\";\n    shiftMap[57] = \"(\";\n    shiftMap[48] = \")\";\n    shiftMap[109] = \"_\";\n    shiftMap[107] = \"+\";\n    shiftMap[219] = \"{\";\n    shiftMap[221] = \"}\";\n    shiftMap[220] = \"|\";\n    shiftMap[59] = \":\";\n    shiftMap[222] = \"\\\"\";\n    shiftMap[188] = \"\u003c\";\n    shiftMap[190] = \"\u003e\";\n    shiftMap[191] = \"?\";\n    shiftMap[32] = \" \";\n\n    function mapKeyPressToActualCharacter(isShiftKey, characterCode) {\n      if ( characterCode === 27 || characterCode === 8 || characterCode === 9 || characterCode === 20 || characterCode === 16 || characterCode === 17 || characterCode === 91 || characterCode === 13 || characterCode === 92 || characterCode === 18 ) { return false; }\n\n      // Lookup non-letter keypress while holding shift\n      if (isShiftKey \u0026\u0026 ( characterCode \u003c 65 || characterCode \u003e 90 )) {\n        return shiftMap[characterCode];\n      }\n\n      var stringValue = String.fromCharCode(characterCode);\n      if ( !isShiftKey ) {\n        stringValue = stringValue.toLowerCase();\n      }\n      return stringValue;\n    }\n\n    __exports__[\"default\"] = function(options) {\n      var autocompletePlugin = this;\n\n      if (this.length === 0) return;\n\n      if (options \u0026\u0026 options.cancel \u0026\u0026 this.data(\"closeAutocomplete\")) {\n        this.data(\"closeAutocomplete\")();\n        return this;\n      }\n\n      if (this.length !== 1) {\n        alert(\"only supporting one matcher at the moment\");\n      }\n\n      var disabled = options \u0026\u0026 options.disabled;\n      var wrap = null;\n      var autocompleteOptions = null;\n      var selectedOption = null;\n      var completeStart = null;\n      var completeEnd = null;\n      var me = this;\n      var div = null;\n\n      // input is handled differently\n      var isInput = this[0].tagName === \"INPUT\";\n      var inputSelectedItems = [];\n\n      var closeAutocomplete = function() {\n        if (div) {\n          div.hide().remove();\n        }\n        div = null;\n        completeStart = null;\n        autocompleteOptions = null;\n      };\n\n      var addInputSelectedItem = function(item) {\n        var transformed,\n            transformedItem = item;\n\n        if (options.transformComplete) { transformedItem = options.transformComplete(transformedItem); }\n        // dump what we have in single mode, just in case\n        if (options.single) { inputSelectedItems = []; }\n        transformed = _.isArray(transformedItem) ? transformedItem : [transformedItem || item];\n\n        var divs = transformed.map(function(itm) {\n          var d = $(\"\u003cdiv class='item'\u003e\u003cspan\u003e\" + itm + \"\u003ca class='remove' href='#'\u003e\u003ci class='fa fa-times'\u003e\u003c/i\u003e\u003c/a\u003e\u003c/span\u003e\u003c/div\u003e\");\n          var prev = me.parent().find('.item:last');\n          if (prev.length === 0) {\n            me.parent().prepend(d);\n          } else {\n            prev.after(d);\n          }\n          inputSelectedItems.push(itm);\n          return d[0];\n        });\n\n        if (options.onChangeItems) { options.onChangeItems(inputSelectedItems); }\n\n        $(divs).find('a').click(function() {\n          closeAutocomplete();\n          inputSelectedItems.splice($.inArray(transformedItem, inputSelectedItems), 1);\n          $(this).parent().parent().remove();\n          if (options.single) {\n            me.show();\n          }\n          if (options.onChangeItems) {\n            options.onChangeItems(inputSelectedItems);\n          }\n          return false;\n        });\n      };\n\n      var completeTerm = function(term) {\n        if (term) {\n          if (isInput) {\n            me.val(\"\");\n            if(options.single){\n              me.hide();\n            }\n            addInputSelectedItem(term);\n          } else {\n            if (options.transformComplete) {\n              term = options.transformComplete(term);\n            }\n            var text = me.val();\n            text = text.substring(0, completeStart) + (options.key || \"\") + term + ' ' + text.substring(completeEnd + 1, text.length);\n            me.val(text);\n            Discourse.Utilities.setCaretPosition(me[0], completeStart + 1 + term.length);\n          }\n        }\n        closeAutocomplete();\n      };\n\n      if (isInput) {\n        var width = this.width();\n        wrap = this.wrap(\"\u003cdiv class='ac-wrap clearfix\" + (disabled ? \" disabled\": \"\") +  \"'/\u003e\").parent();\n        wrap.width(width);\n        if(options.single) {\n          this.css(\"width\",\"100%\");\n        } else {\n          this.width(150);\n        }\n        this.attr('name', this.attr('name') + \"-renamed\");\n        var vals = this.val().split(\",\");\n        _.each(vals,function(x) {\n          if (x !== \"\") {\n            if (options.reverseTransform) {\n              x = options.reverseTransform(x);\n            }\n            addInputSelectedItem(x);\n          }\n        });\n        if(options.items) {\n          _.each(options.items, function(item){\n            addInputSelectedItem(item);\n          });\n        }\n        this.val(\"\");\n        completeStart = 0;\n        wrap.click(function() {\n          autocompletePlugin.focus();\n          return true;\n        });\n      }\n\n      var markSelected = function() {\n        var links = div.find('li a');\n        links.removeClass('selected');\n        return $(links[selectedOption]).addClass('selected');\n      };\n\n      var renderAutocomplete = function() {\n        if (div) {\n          div.hide().remove();\n        }\n        if (autocompleteOptions.length === 0) return;\n\n        div = $(options.template({ options: autocompleteOptions }));\n\n        var ul = div.find('ul');\n        selectedOption = 0;\n        markSelected();\n        ul.find('li').click(function() {\n          selectedOption = ul.find('li').index(this);\n          completeTerm(autocompleteOptions[selectedOption]);\n          return false;\n        });\n        var pos = null;\n        var vOffset = 0;\n        var hOffset = 0;\n        if (isInput) {\n          pos = {\n            left: 0,\n            top: 0\n          };\n          vOffset = -32;\n          hOffset = 0;\n        } else {\n          pos = me.caretPosition({\n            pos: completeStart,\n            key: options.key\n          });\n          hOffset = 27;\n        }\n        div.css({\n          left: \"-1000px\"\n        });\n\n        me.parent().append(div);\n\n        if(!isInput){\n          vOffset = div.height();\n        }\n\n        var mePos = me.position();\n        var borderTop = parseInt(me.css('border-top-width'), 10) || 0;\n        div.css({\n          position: 'absolute',\n          top: (mePos.top + pos.top - vOffset + borderTop) + 'px',\n          left: (mePos.left + pos.left + hOffset) + 'px'\n        });\n      };\n\n      var updateAutoComplete = function(r) {\n\n        if (completeStart === null) return;\n\n        if (r \u0026\u0026 r.then \u0026\u0026 typeof(r.then) === \"function\") {\n          if (div) {\n            div.hide().remove();\n          }\n          r.then(updateAutoComplete);\n          return;\n        }\n\n        // Allow an update method to cancel. This allows us to debounce\n        // promises without leaking\n        if (r === CANCELLED_STATUS) {\n          return;\n        }\n\n        autocompleteOptions = r;\n        if (!r || r.length === 0) {\n          closeAutocomplete();\n        } else {\n          renderAutocomplete();\n        }\n      };\n\n      // chain to allow multiples\n      var oldClose = me.data(\"closeAutocomplete\");\n      me.data(\"closeAutocomplete\", function() {\n        if (oldClose) {\n          oldClose();\n        }\n        closeAutocomplete();\n      });\n\n\n      $(this).keypress(function(e) {\n\n        if (!options.key) return;\n\n        // keep hunting backwards till you hit a\n        if (e.which === options.key.charCodeAt(0)) {\n          var caretPosition = Discourse.Utilities.caretPosition(me[0]);\n          var prevChar = me.val().charAt(caretPosition - 1);\n          if (!prevChar || /\\s/.test(prevChar)) {\n            completeStart = completeEnd = caretPosition;\n            updateAutoComplete(options.dataSource(\"\"));\n          }\n        }\n      });\n\n      $(this).keydown(function(e) {\n        var c, caretPosition, i, initial, next, prev, prevIsGood, stopFound, term, total, userToComplete;\n\n        if(options.allowAny){\n          // saves us wiring up a change event as well, keypress is while its pressed\n          _.delay(function(){\n            if(inputSelectedItems.length === 0) {\n              inputSelectedItems.push(\"\");\n            }\n\n            if(_.isString(inputSelectedItems[0]) \u0026\u0026 me.val().length \u003e 0) {\n              inputSelectedItems.pop();\n              inputSelectedItems.push(me.val());\n              if (options.onChangeItems) {\n                options.onChangeItems(inputSelectedItems);\n              }\n            }\n\n          },50);\n        }\n\n        if (!options.key) {\n          completeStart = 0;\n        }\n        if (e.which === 16) return;\n        if ((completeStart === null) \u0026\u0026 e.which === 8 \u0026\u0026 options.key) {\n          c = Discourse.Utilities.caretPosition(me[0]);\n          next = me[0].value[c];\n          c -= 1;\n          initial = c;\n          prevIsGood = true;\n          while (prevIsGood \u0026\u0026 c \u003e= 0) {\n            c -= 1;\n            prev = me[0].value[c];\n            stopFound = prev === options.key;\n            if (stopFound) {\n              prev = me[0].value[c - 1];\n              if (!prev || /\\s/.test(prev)) {\n                completeStart = c;\n                caretPosition = completeEnd = initial;\n                term = me[0].value.substring(c + 1, initial);\n                updateAutoComplete(options.dataSource(term));\n                return true;\n              }\n            }\n            prevIsGood = /[a-zA-Z\\.]/.test(prev);\n          }\n        }\n\n        // ESC\n        if (e.which === 27) {\n          if (completeStart !== null) {\n            closeAutocomplete();\n            return false;\n          }\n          return true;\n        }\n\n        if (completeStart !== null) {\n          caretPosition = Discourse.Utilities.caretPosition(me[0]);\n\n          // If we've backspaced past the beginning, cancel unless no key\n          if (caretPosition \u003c= completeStart \u0026\u0026 options.key) {\n            closeAutocomplete();\n            return false;\n          }\n\n          // Keyboard codes! So 80's.\n          switch (e.which) {\n            case 13:\n            case 39:\n            case 9:\n              if (!autocompleteOptions) return true;\n              if (selectedOption \u003e= 0 \u0026\u0026 (userToComplete = autocompleteOptions[selectedOption])) {\n                completeTerm(userToComplete);\n              } else {\n                // We're cancelling it, really.\n                return true;\n              }\n              e.stopImmediatePropagation();\n              return false;\n            case 38:\n              selectedOption = selectedOption - 1;\n              if (selectedOption \u003c 0) {\n                selectedOption = 0;\n              }\n              markSelected();\n              return false;\n            case 40:\n              total = autocompleteOptions.length;\n              selectedOption = selectedOption + 1;\n              if (selectedOption \u003e= total) {\n                selectedOption = total - 1;\n              }\n              if (selectedOption \u003c 0) {\n                selectedOption = 0;\n              }\n              markSelected();\n              return false;\n            default:\n              // otherwise they're typing - let's search for it!\n              completeEnd = caretPosition;\n              if (e.which === 8) {\n                caretPosition--;\n              }\n              if (caretPosition \u003c 0) {\n                closeAutocomplete();\n                if (isInput) {\n                  i = wrap.find('a:last');\n                  if (i) {\n                    i.click();\n                  }\n                }\n                return false;\n              }\n              term = me.val().substring(completeStart + (options.key ? 1 : 0), caretPosition);\n              if (e.which \u003e= 48 \u0026\u0026 e.which \u003c= 90) {\n                term += mapKeyPressToActualCharacter(e.shiftKey, e.which);\n              } else if (e.which === 187) {\n                term += \"+\";\n              } else if (e.which === 189) {\n                term += (e.shiftKey) ? \"_\" : \"-\";\n              } else if (e.which === 220) {\n                term += (e.shiftKey) ? \"|\" : \"]\";\n              } else if (e.which === 222) {\n                term += (e.shiftKey) ? \"\\\"\" : \"'\";\n              } else if (e.which !== 8) {\n                term += \",\";\n              }\n\n              updateAutoComplete(options.dataSource(term));\n              return true;\n          }\n        }\n      });\n\n      return this;\n    }\n  });";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

// http://stackoverflow.com/questions/263743/how-to-get-caret-position-in-textarea
var clone, getCaret;
getCaret = function(el) {
  var r, rc, re;
  if (el.selectionStart) {
    return el.selectionStart;
  } else if (document.selection) {
    el.focus();
    r = document.selection.createRange();
    if (!r) return 0;
    re = el.createTextRange();
    rc = re.duplicate();
    re.moveToBookmark(r.getBookmark());
    rc.setEndPoint("EndToStart", re);
    return rc.text.length;
  }
  return 0;
};

clone = null;

$.fn.caret = function(){
  return getCaret(this[0]);
};

/**
  This is a jQuery plugin to retrieve the caret position in a textarea

  @module $.fn.caretPosition
**/
$.fn.caretPosition = function(options) {
  var after, before, getStyles, guard, html, important, insertSpaceAfterBefore, letter, makeCursor, p, pPos, pos, span, styles, textarea, val;
  if (clone) {
    clone.remove();
  }
  span = $("#pos span");
  textarea = $(this);

  getStyles = function(el) {
    if (el.currentStyle) {
      return el.currentStyle;
    } else {
      return document.defaultView.getComputedStyle(el, "");
    }
  };

  styles = getStyles(textarea[0]);
  clone = $("<div><p></p></div>").appendTo("body");
  p = clone.find("p");
  clone.width(textarea.width());
  clone.height(textarea.height());

  important = function(prop) {
    return styles.getPropertyValue(prop);
  };

  clone.css({
    border: "1px solid black",
    padding: important("padding"),
    resize: important("resize"),
    "max-height": textarea.height() + "px",
    "overflow-y": "auto",
    "word-wrap": "break-word",
    position: "absolute",
    left: "-7000px"
  });

  p.css({
    margin: 0,
    padding: 0,
    "word-wrap": "break-word",
    "letter-spacing": important("letter-spacing"),
    "font-family": important("font-family"),
    "font-size": important("font-size"),
    "line-height": important("line-height")
  });

  pos = options && (options.pos || options.pos === 0) ? options.pos : getCaret(textarea[0]);
  val = textarea.val().replace("\r", "");
  if (options && options.key) {
    val = val.substring(0, pos) + options.key + val.substring(pos);
  }
  before = pos - 1;
  after = pos;
  insertSpaceAfterBefore = false;

  // if before and after are \n insert a space
  if (val[before] === "\n" && val[after] === "\n") {
    insertSpaceAfterBefore = true;
  }

  guard = function(v) {
    var buf;
    buf = v.replace(/</g, "&lt;");
    buf = buf.replace(/>/g, "&gt;");
    buf = buf.replace(/[ ]/g, "&#x200b;&nbsp;&#x200b;");
    return buf.replace(/\n/g, "<br />");
  };

  makeCursor = function(pos, klass, color) {
    var l;
    l = val.substring(pos, pos + 1);
    if (l === "\n") return "<br>";
    return "<span class='" + klass + "' style='background-color:" + color + "; margin:0; padding: 0'>" + guard(l) + "</span>";
  };

  html = "";
  if (before >= 0) {
    html += guard(val.substring(0, pos - 1)) + makeCursor(before, "before", "#d0ffff");
    if (insertSpaceAfterBefore) {
      html += makeCursor(0, "post-before", "#d0ffff");
    }
  }

  if (after >= 0) {
    html += makeCursor(after, "after", "#ffd0ff");
    if (after - 1 < val.length) {
      html += guard(val.substring(after + 1));
    }
  }

  p.html(html);
  clone.scrollTop(textarea.scrollTop());
  letter = p.find("span:first");
  pos = letter.offset();
  if (letter.hasClass("before")) {
    pos.left = pos.left + letter.width();
  }

  pPos = p.offset();
  return {
    left: pos.left - pPos.left,
    top: (pos.top - pPos.top) - clone.scrollTop()
  };

};


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/caret_position.js'] = "// http://stackoverflow.com/questions/263743/how-to-get-caret-position-in-textarea\nvar clone, getCaret;\ngetCaret = function(el) {\n  var r, rc, re;\n  if (el.selectionStart) {\n    return el.selectionStart;\n  } else if (document.selection) {\n    el.focus();\n    r = document.selection.createRange();\n    if (!r) return 0;\n    re = el.createTextRange();\n    rc = re.duplicate();\n    re.moveToBookmark(r.getBookmark());\n    rc.setEndPoint(\"EndToStart\", re);\n    return rc.text.length;\n  }\n  return 0;\n};\n\nclone = null;\n\n$.fn.caret = function(){\n  return getCaret(this[0]);\n};\n\n/**\n  This is a jQuery plugin to retrieve the caret position in a textarea\n\n  @module $.fn.caretPosition\n**/\n$.fn.caretPosition = function(options) {\n  var after, before, getStyles, guard, html, important, insertSpaceAfterBefore, letter, makeCursor, p, pPos, pos, span, styles, textarea, val;\n  if (clone) {\n    clone.remove();\n  }\n  span = $(\"#pos span\");\n  textarea = $(this);\n\n  getStyles = function(el) {\n    if (el.currentStyle) {\n      return el.currentStyle;\n    } else {\n      return document.defaultView.getComputedStyle(el, \"\");\n    }\n  };\n\n  styles = getStyles(textarea[0]);\n  clone = $(\"\u003cdiv\u003e\u003cp\u003e\u003c/p\u003e\u003c/div\u003e\").appendTo(\"body\");\n  p = clone.find(\"p\");\n  clone.width(textarea.width());\n  clone.height(textarea.height());\n\n  important = function(prop) {\n    return styles.getPropertyValue(prop);\n  };\n\n  clone.css({\n    border: \"1px solid black\",\n    padding: important(\"padding\"),\n    resize: important(\"resize\"),\n    \"max-height\": textarea.height() + \"px\",\n    \"overflow-y\": \"auto\",\n    \"word-wrap\": \"break-word\",\n    position: \"absolute\",\n    left: \"-7000px\"\n  });\n\n  p.css({\n    margin: 0,\n    padding: 0,\n    \"word-wrap\": \"break-word\",\n    \"letter-spacing\": important(\"letter-spacing\"),\n    \"font-family\": important(\"font-family\"),\n    \"font-size\": important(\"font-size\"),\n    \"line-height\": important(\"line-height\")\n  });\n\n  pos = options \u0026\u0026 (options.pos || options.pos === 0) ? options.pos : getCaret(textarea[0]);\n  val = textarea.val().replace(\"\\r\", \"\");\n  if (options \u0026\u0026 options.key) {\n    val = val.substring(0, pos) + options.key + val.substring(pos);\n  }\n  before = pos - 1;\n  after = pos;\n  insertSpaceAfterBefore = false;\n\n  // if before and after are \\n insert a space\n  if (val[before] === \"\\n\" \u0026\u0026 val[after] === \"\\n\") {\n    insertSpaceAfterBefore = true;\n  }\n\n  guard = function(v) {\n    var buf;\n    buf = v.replace(/\u003c/g, \"\u0026lt;\");\n    buf = buf.replace(/\u003e/g, \"\u0026gt;\");\n    buf = buf.replace(/[ ]/g, \"\u0026#x200b;\u0026nbsp;\u0026#x200b;\");\n    return buf.replace(/\\n/g, \"\u003cbr /\u003e\");\n  };\n\n  makeCursor = function(pos, klass, color) {\n    var l;\n    l = val.substring(pos, pos + 1);\n    if (l === \"\\n\") return \"\u003cbr\u003e\";\n    return \"\u003cspan class='\" + klass + \"' style='background-color:\" + color + \"; margin:0; padding: 0'\u003e\" + guard(l) + \"\u003c/span\u003e\";\n  };\n\n  html = \"\";\n  if (before \u003e= 0) {\n    html += guard(val.substring(0, pos - 1)) + makeCursor(before, \"before\", \"#d0ffff\");\n    if (insertSpaceAfterBefore) {\n      html += makeCursor(0, \"post-before\", \"#d0ffff\");\n    }\n  }\n\n  if (after \u003e= 0) {\n    html += makeCursor(after, \"after\", \"#ffd0ff\");\n    if (after - 1 \u003c val.length) {\n      html += guard(val.substring(after + 1));\n    }\n  }\n\n  p.html(html);\n  clone.scrollTop(textarea.scrollTop());\n  letter = p.find(\"span:first\");\n  pos = letter.offset();\n  if (letter.hasClass(\"before\")) {\n    pos.left = pos.left + letter.width();\n  }\n\n  pPos = p.offset();\n  return {\n    left: pos.left - pPos.left,\n    top: (pos.top - pPos.top) - clone.scrollTop()\n  };\n\n};\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  Used for tracking when the user clicks on a link

  @class ClickTrack
  @namespace Discourse
  @module Discourse
**/

Discourse.ClickTrack = {

  /**
    Track a click on a link

    @method trackClick
    @param {jQuery.Event} e The click event that occurred
  **/
  trackClick: function(e) {
    var $link = $(e.currentTarget);
    if ($link.hasClass('lightbox')) return true;

    var href = $link.attr('href') || $link.data('href'),
        $article = $link.closest('article'),
        postId = $article.data('post-id'),
        topicId = $('#topic').data('topic-id'),
        userId = $link.data('user-id');

    if (!href || href.trim().length === 0){
      return;
    }

    if (!userId) userId = $article.data('user-id');

    var ownLink = userId && (userId === Discourse.User.currentProp('id')),
        trackingUrl = Discourse.getURL("/clicks/track?url=" + encodeURIComponent(href));
    if (postId && (!$link.data('ignore-post-id'))) {
      trackingUrl += "&post_id=" + encodeURI(postId);
    }
    if (topicId) {
      trackingUrl += "&topic_id=" + encodeURI(topicId);
    }

    // Update badge clicks unless it's our own
    if (!ownLink) {
      var $badge = $('span.badge', $link);
      if ($badge.length === 1) {
        // don't update counts in category badge
        if ($link.closest('.badge-category').length === 0) {
          // nor in oneboxes (except when we force it)
          if (($link.closest(".onebox-result").length === 0 && $link.closest('.onebox-body').length === 0) || $link.hasClass("track-link")) {
            var html = $badge.html();
            if (/^\d+$/.test(html)) {
              $badge.html(parseInt(html, 10) + 1);
            }
          }
        }
      }
    }

    // If they right clicked, change the destination href
    if (e.which === 3) {
      var destination = Discourse.SiteSettings.track_external_right_clicks ? trackingUrl : href;
      $link.attr('href', destination);
      return true;
    }

    // if they want to open in a new tab, do an AJAX request
    if (e.shiftKey || e.metaKey || e.ctrlKey || e.which === 2) {
      Discourse.ajax("/clicks/track", {
        data: {
          url: href,
          post_id: postId,
          topic_id: topicId,
          redirect: false
        },
        dataType: 'html'
      });
      return true;
    }

    e.preventDefault();

    // We don't track clicks on quote back buttons
    if ($link.hasClass('back') || $link.hasClass('quote-other-topic')) return true;

    // Remove the href, put it as a data attribute
    if (!$link.data('href')) {
      $link.addClass('no-href');
      $link.data('href', $link.attr('href'));
      $link.attr('href', null);
      // Don't route to this URL
      $link.data('auto-route', true);
    }

    // If we're on the same site, use the router and track via AJAX
    if (Discourse.URL.isInternal(href) && !$link.hasClass('attachment')) {
      Discourse.ajax("/clicks/track", {
        data: {
          url: href,
          post_id: postId,
          topic_id: topicId,
          redirect: false
        },
        dataType: 'html'
      });
      Discourse.URL.routeTo(href);
      return false;
    }

    // Otherwise, use a custom URL with a redirect
    if (Discourse.User.currentProp('external_links_in_new_tab')) {
      var win = window.open(trackingUrl, '_blank');
      win.focus();
    } else {
      Discourse.URL.redirectTo(trackingUrl);
    }

    return false;
  }
};


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/click_track.js'] = "/**\n  Used for tracking when the user clicks on a link\n\n  @class ClickTrack\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.ClickTrack = {\n\n  /**\n    Track a click on a link\n\n    @method trackClick\n    @param {jQuery.Event} e The click event that occurred\n  **/\n  trackClick: function(e) {\n    var $link = $(e.currentTarget);\n    if ($link.hasClass('lightbox')) return true;\n\n    var href = $link.attr('href') || $link.data('href'),\n        $article = $link.closest('article'),\n        postId = $article.data('post-id'),\n        topicId = $('#topic').data('topic-id'),\n        userId = $link.data('user-id');\n\n    if (!href || href.trim().length === 0){\n      return;\n    }\n\n    if (!userId) userId = $article.data('user-id');\n\n    var ownLink = userId \u0026\u0026 (userId === Discourse.User.currentProp('id')),\n        trackingUrl = Discourse.getURL(\"/clicks/track?url=\" + encodeURIComponent(href));\n    if (postId \u0026\u0026 (!$link.data('ignore-post-id'))) {\n      trackingUrl += \"\u0026post_id=\" + encodeURI(postId);\n    }\n    if (topicId) {\n      trackingUrl += \"\u0026topic_id=\" + encodeURI(topicId);\n    }\n\n    // Update badge clicks unless it's our own\n    if (!ownLink) {\n      var $badge = $('span.badge', $link);\n      if ($badge.length === 1) {\n        // don't update counts in category badge\n        if ($link.closest('.badge-category').length === 0) {\n          // nor in oneboxes (except when we force it)\n          if (($link.closest(\".onebox-result\").length === 0 \u0026\u0026 $link.closest('.onebox-body').length === 0) || $link.hasClass(\"track-link\")) {\n            var html = $badge.html();\n            if (/^\\d+$/.test(html)) {\n              $badge.html(parseInt(html, 10) + 1);\n            }\n          }\n        }\n      }\n    }\n\n    // If they right clicked, change the destination href\n    if (e.which === 3) {\n      var destination = Discourse.SiteSettings.track_external_right_clicks ? trackingUrl : href;\n      $link.attr('href', destination);\n      return true;\n    }\n\n    // if they want to open in a new tab, do an AJAX request\n    if (e.shiftKey || e.metaKey || e.ctrlKey || e.which === 2) {\n      Discourse.ajax(\"/clicks/track\", {\n        data: {\n          url: href,\n          post_id: postId,\n          topic_id: topicId,\n          redirect: false\n        },\n        dataType: 'html'\n      });\n      return true;\n    }\n\n    e.preventDefault();\n\n    // We don't track clicks on quote back buttons\n    if ($link.hasClass('back') || $link.hasClass('quote-other-topic')) return true;\n\n    // Remove the href, put it as a data attribute\n    if (!$link.data('href')) {\n      $link.addClass('no-href');\n      $link.data('href', $link.attr('href'));\n      $link.attr('href', null);\n      // Don't route to this URL\n      $link.data('auto-route', true);\n    }\n\n    // If we're on the same site, use the router and track via AJAX\n    if (Discourse.URL.isInternal(href) \u0026\u0026 !$link.hasClass('attachment')) {\n      Discourse.ajax(\"/clicks/track\", {\n        data: {\n          url: href,\n          post_id: postId,\n          topic_id: topicId,\n          redirect: false\n        },\n        dataType: 'html'\n      });\n      Discourse.URL.routeTo(href);\n      return false;\n    }\n\n    // Otherwise, use a custom URL with a redirect\n    if (Discourse.User.currentProp('external_links_in_new_tab')) {\n      var win = window.open(trackingUrl, '_blank');\n      win.focus();\n    } else {\n      Discourse.URL.redirectTo(trackingUrl);\n    }\n\n    return false;\n  }\n};\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  This is a jQuery plugin to support resizing text areas.

  Originally based off text area resizer by Ryan O'Dell : http://plugins.jquery.com/misc/textarea.js

  @module $.fn.DivResizer
**/


var div, endDrag, grip, lastMousePos, min, mousePosition, originalDivHeight, originalPos, performDrag, startDrag, wrappedEndDrag, wrappedPerformDrag;
div = void 0;
originalPos = void 0;
originalDivHeight = void 0;
lastMousePos = 0;
min = 230;
grip = void 0;
wrappedEndDrag = void 0;
wrappedPerformDrag = void 0;

startDrag = function(e, opts) {
  div = $(e.data.el);
  div.addClass('clear-transitions');
  div.blur();
  lastMousePos = mousePosition(e).y;
  originalPos = lastMousePos;
  originalDivHeight = div.height();
  wrappedPerformDrag = (function() {
    return function(e) {
      return performDrag(e, opts);
    };
  })();
  wrappedEndDrag = (function() {
    return function(e) {
      return endDrag(e, opts);
    };
  })();
  $(document).mousemove(wrappedPerformDrag).mouseup(wrappedEndDrag);
  return false;
};

performDrag = function(e, opts) {
  var size, sizePx, thisMousePos;
  thisMousePos = mousePosition(e).y;
  size = originalDivHeight + (originalPos - thisMousePos);
  lastMousePos = thisMousePos;
  size = Math.min(size, $(window).height());
  size = Math.max(min, size);
  sizePx = size + "px";
  if (typeof opts.onDrag === "function") {
    opts.onDrag(sizePx);
  }
  div.height(sizePx);
  if (size < min) {
    endDrag(e, opts);
  }
  return false;
};

endDrag = function(e, opts) {
  $(document).unbind("mousemove", wrappedPerformDrag).unbind("mouseup", wrappedEndDrag);
  div.removeClass('clear-transitions');
  div.focus();
  if (typeof opts.resize === "function") {
    opts.resize();
  }
  div = null;
};

mousePosition = function(e) {
  return {
    x: e.clientX + document.documentElement.scrollLeft,
    y: e.clientY + document.documentElement.scrollTop
  };
};

$.fn.DivResizer = function(opts) {
  return this.each(function() {
    var grippie, start, staticOffset;
    div = $(this);
    if (div.hasClass("processed")) return;
    div.addClass("processed");
    staticOffset = null;
    start = function() {
      return function(e) {
        return startDrag(e, opts);
      };
    };
    grippie = div.prepend("<div class='grippie'></div>").find('.grippie').bind("mousedown", {
      el: this
    }, start());
  });
};


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/div_resizer.js'] = "/**\n  This is a jQuery plugin to support resizing text areas.\n\n  Originally based off text area resizer by Ryan O'Dell : http://plugins.jquery.com/misc/textarea.js\n\n  @module $.fn.DivResizer\n**/\n\n\nvar div, endDrag, grip, lastMousePos, min, mousePosition, originalDivHeight, originalPos, performDrag, startDrag, wrappedEndDrag, wrappedPerformDrag;\ndiv = void 0;\noriginalPos = void 0;\noriginalDivHeight = void 0;\nlastMousePos = 0;\nmin = 230;\ngrip = void 0;\nwrappedEndDrag = void 0;\nwrappedPerformDrag = void 0;\n\nstartDrag = function(e, opts) {\n  div = $(e.data.el);\n  div.addClass('clear-transitions');\n  div.blur();\n  lastMousePos = mousePosition(e).y;\n  originalPos = lastMousePos;\n  originalDivHeight = div.height();\n  wrappedPerformDrag = (function() {\n    return function(e) {\n      return performDrag(e, opts);\n    };\n  })();\n  wrappedEndDrag = (function() {\n    return function(e) {\n      return endDrag(e, opts);\n    };\n  })();\n  $(document).mousemove(wrappedPerformDrag).mouseup(wrappedEndDrag);\n  return false;\n};\n\nperformDrag = function(e, opts) {\n  var size, sizePx, thisMousePos;\n  thisMousePos = mousePosition(e).y;\n  size = originalDivHeight + (originalPos - thisMousePos);\n  lastMousePos = thisMousePos;\n  size = Math.min(size, $(window).height());\n  size = Math.max(min, size);\n  sizePx = size + \"px\";\n  if (typeof opts.onDrag === \"function\") {\n    opts.onDrag(sizePx);\n  }\n  div.height(sizePx);\n  if (size \u003c min) {\n    endDrag(e, opts);\n  }\n  return false;\n};\n\nendDrag = function(e, opts) {\n  $(document).unbind(\"mousemove\", wrappedPerformDrag).unbind(\"mouseup\", wrappedEndDrag);\n  div.removeClass('clear-transitions');\n  div.focus();\n  if (typeof opts.resize === \"function\") {\n    opts.resize();\n  }\n  div = null;\n};\n\nmousePosition = function(e) {\n  return {\n    x: e.clientX + document.documentElement.scrollLeft,\n    y: e.clientY + document.documentElement.scrollTop\n  };\n};\n\n$.fn.DivResizer = function(opts) {\n  return this.each(function() {\n    var grippie, start, staticOffset;\n    div = $(this);\n    if (div.hasClass(\"processed\")) return;\n    div.addClass(\"processed\");\n    staticOffset = null;\n    start = function() {\n      return function(e) {\n        return startDrag(e, opts);\n      };\n    };\n    grippie = div.prepend(\"\u003cdiv class='grippie'\u003e\u003c/div\u003e\").find('.grippie').bind(\"mousedown\", {\n      el: this\n    }, start());\n  });\n};\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  Track visible elemnts on the screen.

  @class Eyeline
  @namespace Discourse
  @module Discourse
  @uses RSVP.EventTarget
**/

Discourse.Eyeline = function Eyeline(selector) {
  this.selector = selector;
};

/**
  Call this whenever you want to consider what is being seen by the browser

  @method update
**/
Discourse.Eyeline.prototype.update = function() {
  var docViewTop = $(window).scrollTop(),
      windowHeight = $(window).height(),
      docViewBottom = docViewTop + windowHeight,
      $elements = $(this.selector),
      atBottom = false,
      bottomOffset = $elements.last().offset(),
      self = this;

  if (bottomOffset) {
    atBottom = (bottomOffset.top <= docViewBottom) && (bottomOffset.top >= docViewTop);
  }

  return $elements.each(function(i, elem) {
    var $elem = $(elem),
        elemTop = $elem.offset().top,
        elemBottom = elemTop + $elem.height(),
        markSeen = false;

    // Make sure the element is visible
    if (!$elem.is(':visible')) return true;

    // It's seen if...
    // ...the element is vertically within the top and botom
    if ((elemTop <= docViewBottom) && (elemTop >= docViewTop)) markSeen = true;

    // ...the element top is above the top and the bottom is below the bottom (large elements)
    if ((elemTop <= docViewTop) && (elemBottom >= docViewBottom)) markSeen = true;

    // ...we're at the bottom and the bottom of the element is visible (large bottom elements)
    if (atBottom && (elemBottom >= docViewTop)) markSeen = true;

    if (!markSeen) return true;

    // If you hit the bottom we mark all the elements as seen. Otherwise, just the first one
    if (!atBottom) {
      self.trigger('saw', { detail: $elem });
      if (i === 0) {
        self.trigger('sawTop', { detail: $elem });
      }
      return false;
    }
    if (i === 0) {
      self.trigger('sawTop', { detail: $elem });
    }
    if (i === ($elements.length - 1)) {
      return self.trigger('sawBottom', { detail: $elem });
    }
  });
};


/**
  Call this when we know aren't loading any more elements. Mark the rest as seen

  @method flushRest
**/
Discourse.Eyeline.prototype.flushRest = function() {
  var self = this;
  $(this.selector).each(function(i, elem) {
    return self.trigger('saw', { detail: $(elem) });
  });
};

RSVP.EventTarget.mixin(Discourse.Eyeline.prototype);




// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/eyeline.js'] = "/**\n  Track visible elemnts on the screen.\n\n  @class Eyeline\n  @namespace Discourse\n  @module Discourse\n  @uses RSVP.EventTarget\n**/\n\nDiscourse.Eyeline = function Eyeline(selector) {\n  this.selector = selector;\n};\n\n/**\n  Call this whenever you want to consider what is being seen by the browser\n\n  @method update\n**/\nDiscourse.Eyeline.prototype.update = function() {\n  var docViewTop = $(window).scrollTop(),\n      windowHeight = $(window).height(),\n      docViewBottom = docViewTop + windowHeight,\n      $elements = $(this.selector),\n      atBottom = false,\n      bottomOffset = $elements.last().offset(),\n      self = this;\n\n  if (bottomOffset) {\n    atBottom = (bottomOffset.top \u003c= docViewBottom) \u0026\u0026 (bottomOffset.top \u003e= docViewTop);\n  }\n\n  return $elements.each(function(i, elem) {\n    var $elem = $(elem),\n        elemTop = $elem.offset().top,\n        elemBottom = elemTop + $elem.height(),\n        markSeen = false;\n\n    // Make sure the element is visible\n    if (!$elem.is(':visible')) return true;\n\n    // It's seen if...\n    // ...the element is vertically within the top and botom\n    if ((elemTop \u003c= docViewBottom) \u0026\u0026 (elemTop \u003e= docViewTop)) markSeen = true;\n\n    // ...the element top is above the top and the bottom is below the bottom (large elements)\n    if ((elemTop \u003c= docViewTop) \u0026\u0026 (elemBottom \u003e= docViewBottom)) markSeen = true;\n\n    // ...we're at the bottom and the bottom of the element is visible (large bottom elements)\n    if (atBottom \u0026\u0026 (elemBottom \u003e= docViewTop)) markSeen = true;\n\n    if (!markSeen) return true;\n\n    // If you hit the bottom we mark all the elements as seen. Otherwise, just the first one\n    if (!atBottom) {\n      self.trigger('saw', { detail: $elem });\n      if (i === 0) {\n        self.trigger('sawTop', { detail: $elem });\n      }\n      return false;\n    }\n    if (i === 0) {\n      self.trigger('sawTop', { detail: $elem });\n    }\n    if (i === ($elements.length - 1)) {\n      return self.trigger('sawBottom', { detail: $elem });\n    }\n  });\n};\n\n\n/**\n  Call this when we know aren't loading any more elements. Mark the rest as seen\n\n  @method flushRest\n**/\nDiscourse.Eyeline.prototype.flushRest = function() {\n  var self = this;\n  $(this.selector).each(function(i, elem) {\n    return self.trigger('saw', { detail: $(elem) });\n  });\n};\n\nRSVP.EventTarget.mixin(Discourse.Eyeline.prototype);\n\n\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/* global BreakString:true */


var updateRelativeAge, autoUpdatingRelativeAge, relativeAge, relativeAgeTiny,
    relativeAgeMedium, relativeAgeMediumSpan, longDate, longDateNoYear, toTitleCase,
    shortDate, shortDateNoYear, tinyDateYear, relativeAgeTinyShowsYear;

/*
* memoize.js
* by @philogb and @addyosmani
* with further optimizations by @mathias
* and @DmitryBaranovsk
* perf tests: http://bit.ly/q3zpG3
* Released under an MIT license.
*
* modified with cap by Sam
*/
var cappedMemoize = function ( fn, max ) {
    fn.maxMemoize = max;
    fn.memoizeLength = 0;

    return function () {
        var args = Array.prototype.slice.call(arguments),
            hash = "",
            i = args.length;
        var currentArg = null;
        while (i--) {
            currentArg = args[i];
            hash += (currentArg === new Object(currentArg)) ?
            JSON.stringify(currentArg) : currentArg;
            if(!fn.memoize) {
              fn.memoize = {};
            }
        }
        if (hash in fn.memoize) {
          return fn.memoize[hash];
        } else {
          fn.memoizeLength++;
          if(fn.memoizeLength > max) {
            fn.memoizeLength = 0;
            fn.memoize = {};
          }
          var result = fn.apply(this, args);
          fn.memoize[hash] = result;
          return result;
        }
    };
};

var breakUp = cappedMemoize(function(str, hint){
  return new BreakString(str).break(hint);
}, 100);

shortDate = function(date){
  return moment(date).format(I18n.t("dates.medium.date_year"));
};

shortDateNoYear = function(date) {
  return moment(date).format(I18n.t("dates.tiny.date_month"));
};

tinyDateYear = function(date) {
  return moment(date).format(I18n.t("dates.tiny.date_year"));
};

// http://stackoverflow.com/questions/196972/convert-string-to-title-case-with-javascript
// TODO: locale support ?
toTitleCase = function toTitleCase(str) {
  return str.replace(/\w\S*/g, function(txt){
    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
  });
};

longDate = function(dt) {
  if (!dt) return;
  return moment(dt).longDate();
};

// suppress year, if current year
longDateNoYear = function(dt) {
  if (!dt) return;

  if ((new Date()).getFullYear() !== dt.getFullYear()) {
    return moment(dt).format(I18n.t("dates.long_date_with_year"));
  } else {
    return moment(dt).format(I18n.t("dates.long_date_without_year"));
  }
};

updateRelativeAge = function(elems) {
  // jQuery .each
  elems.each(function(){
    var $this = $(this);
    $this.html(relativeAge(new Date($this.data('time')), {format: $this.data('format'), wrapInSpan: false}));
  });
};

autoUpdatingRelativeAge = function(date,options) {

  if (!date) return "";

  options = options || {};
  var format = options.format || "tiny";

  var append = "";

  if(format === 'medium') {
    append = " date";
    if(options.leaveAgo) {
      format = 'medium-with-ago';
    }
    options.wrapInSpan = false;
  }

  var relAge = relativeAge(date, options);

  if (format === 'tiny' && relativeAgeTinyShowsYear(relAge)) {
    append += " with-year";
  }

  if (options.title) {
    append += "' title='" + longDate(date);
  }

  return "<span class='relative-date" + append + "' data-time='" + date.getTime() + "' data-format='" + format +  "'>" + relAge  + "</span>";
};


relativeAgeTiny = function(date){
  var format = "tiny";
  var distance = Math.round((new Date() - date) / 1000);
  var distanceInMinutes = Math.round(distance / 60.0);

  var formatted;
  var t = function(key,opts){
    return I18n.t("dates." + format + "." + key, opts);
  };

  switch(true){

  case(distanceInMinutes < 1):
    formatted = t("less_than_x_minutes", {count: 1});
    break;
  case(distanceInMinutes >= 1 && distanceInMinutes <= 44):
    formatted = t("x_minutes", {count: distanceInMinutes});
    break;
  case(distanceInMinutes >= 45 && distanceInMinutes <= 89):
    formatted = t("about_x_hours", {count: 1});
    break;
  case(distanceInMinutes >= 90 && distanceInMinutes <= 1439):
    formatted = t("about_x_hours", {count: Math.round(distanceInMinutes / 60.0)});
    break;
  case(Discourse.SiteSettings.relative_date_duration === 0 && distanceInMinutes <= 525599):
    formatted = shortDateNoYear(date);
    break;
  case(distanceInMinutes >= 1440 && distanceInMinutes <= 2519):
    formatted = t("x_days", {count: 1});
    break;
  case(distanceInMinutes >= 2520 && distanceInMinutes <= ((Discourse.SiteSettings.relative_date_duration||14) * 1440)):
    formatted = t("x_days", {count: Math.round(distanceInMinutes / 1440.0)});
    break;
  default:
    if(date.getFullYear() === new Date().getFullYear()) {
      formatted = shortDateNoYear(date);
    } else {
      formatted = tinyDateYear(date);
    }
    break;
  }

  return formatted;
};

/*
 * Returns true if the given tiny date string includes the year.
 * Useful for checking if the string isn't so tiny.
 */
relativeAgeTinyShowsYear = function(relativeAgeString) {
  return relativeAgeString.match(/'[\d]{2}$/);
};

relativeAgeMediumSpan = function(distance, leaveAgo) {
  var formatted, distanceInMinutes;

  distanceInMinutes = Math.round(distance / 60.0);

  var t = function(key, opts){
    return I18n.t("dates.medium" + (leaveAgo?"_with_ago":"") + "." + key, opts);
  };

  switch(true){
  case(distanceInMinutes >= 1 && distanceInMinutes <= 56):
    formatted = t("x_minutes", {count: distanceInMinutes});
    break;
  case(distanceInMinutes >= 56 && distanceInMinutes <= 89):
    formatted = t("x_hours", {count: 1});
    break;
  case(distanceInMinutes >= 90 && distanceInMinutes <= 1379):
    formatted = t("x_hours", {count: Math.round(distanceInMinutes / 60.0)});
    break;
  case(distanceInMinutes >= 1380 && distanceInMinutes <= 2159):
    formatted = t("x_days", {count: 1});
    break;
  case(distanceInMinutes >= 2160):
    formatted = t("x_days", {count: Math.round((distanceInMinutes - 720.0) / 1440.0)});
    break;
  }
  return formatted || '&mdash';
};

relativeAgeMedium = function(date, options){
  var displayDate, fiveDaysAgo, oneMinuteAgo, fullReadable, leaveAgo;
  var wrapInSpan = options.wrapInSpan !== false;

  leaveAgo = options.leaveAgo;
  var distance = Math.round((new Date() - date) / 1000);

  if (!date) {
    return "&mdash;";
  }

  fullReadable = longDate(date);
  displayDate = "";
  fiveDaysAgo = 432000;
  oneMinuteAgo = 60;

  if (distance < oneMinuteAgo) {
    displayDate = I18n.t("now");
  } else if (distance > fiveDaysAgo) {
    if ((new Date()).getFullYear() !== date.getFullYear()) {
      displayDate = shortDate(date);
    } else {
      displayDate = shortDateNoYear(date);
    }
  } else {
    displayDate = relativeAgeMediumSpan(distance, leaveAgo);
  }
  if(wrapInSpan) {
    return "<span class='date' title='" + fullReadable + "'>" + displayDate + "</span>";
  } else {
    return displayDate;
  }
};

// mostly lifted from rails with a few amendments
relativeAge = function(date, options) {
  options = options || {};
  var format = options.format || "tiny";

  if(format === "tiny") {
    return relativeAgeTiny(date, options);
  } else if (format === "medium") {
    return relativeAgeMedium(date, options);
  } else if (format === 'medium-with-ago') {
    return relativeAgeMedium(date, _.extend(options, {format: 'medium', leaveAgo: true}));
  }

  return "UNKNOWN FORMAT";
};

var number = function(val) {
  val = parseInt(val, 10);
  if (isNaN(val)) val = 0;

  if (val > 999) {
    return (val / 1000).toFixed(1) + "K";
  }
  return val.toString();
};

Discourse.Formatter = {
  longDate: longDate,
  longDateNoYear: longDateNoYear,
  relativeAge: relativeAge,
  autoUpdatingRelativeAge: autoUpdatingRelativeAge,
  updateRelativeAge: updateRelativeAge,
  toTitleCase: toTitleCase,
  shortDate: shortDate,
  breakUp: breakUp,
  cappedMemoize: cappedMemoize,
  number: number
};


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/formatter.js'] = "/* global BreakString:true */\n\n\nvar updateRelativeAge, autoUpdatingRelativeAge, relativeAge, relativeAgeTiny,\n    relativeAgeMedium, relativeAgeMediumSpan, longDate, longDateNoYear, toTitleCase,\n    shortDate, shortDateNoYear, tinyDateYear, relativeAgeTinyShowsYear;\n\n/*\n* memoize.js\n* by @philogb and @addyosmani\n* with further optimizations by @mathias\n* and @DmitryBaranovsk\n* perf tests: http://bit.ly/q3zpG3\n* Released under an MIT license.\n*\n* modified with cap by Sam\n*/\nvar cappedMemoize = function ( fn, max ) {\n    fn.maxMemoize = max;\n    fn.memoizeLength = 0;\n\n    return function () {\n        var args = Array.prototype.slice.call(arguments),\n            hash = \"\",\n            i = args.length;\n        var currentArg = null;\n        while (i--) {\n            currentArg = args[i];\n            hash += (currentArg === new Object(currentArg)) ?\n            JSON.stringify(currentArg) : currentArg;\n            if(!fn.memoize) {\n              fn.memoize = {};\n            }\n        }\n        if (hash in fn.memoize) {\n          return fn.memoize[hash];\n        } else {\n          fn.memoizeLength++;\n          if(fn.memoizeLength \u003e max) {\n            fn.memoizeLength = 0;\n            fn.memoize = {};\n          }\n          var result = fn.apply(this, args);\n          fn.memoize[hash] = result;\n          return result;\n        }\n    };\n};\n\nvar breakUp = cappedMemoize(function(str, hint){\n  return new BreakString(str).break(hint);\n}, 100);\n\nshortDate = function(date){\n  return moment(date).format(I18n.t(\"dates.medium.date_year\"));\n};\n\nshortDateNoYear = function(date) {\n  return moment(date).format(I18n.t(\"dates.tiny.date_month\"));\n};\n\ntinyDateYear = function(date) {\n  return moment(date).format(I18n.t(\"dates.tiny.date_year\"));\n};\n\n// http://stackoverflow.com/questions/196972/convert-string-to-title-case-with-javascript\n// TODO: locale support ?\ntoTitleCase = function toTitleCase(str) {\n  return str.replace(/\\w\\S*/g, function(txt){\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\nlongDate = function(dt) {\n  if (!dt) return;\n  return moment(dt).longDate();\n};\n\n// suppress year, if current year\nlongDateNoYear = function(dt) {\n  if (!dt) return;\n\n  if ((new Date()).getFullYear() !== dt.getFullYear()) {\n    return moment(dt).format(I18n.t(\"dates.long_date_with_year\"));\n  } else {\n    return moment(dt).format(I18n.t(\"dates.long_date_without_year\"));\n  }\n};\n\nupdateRelativeAge = function(elems) {\n  // jQuery .each\n  elems.each(function(){\n    var $this = $(this);\n    $this.html(relativeAge(new Date($this.data('time')), {format: $this.data('format'), wrapInSpan: false}));\n  });\n};\n\nautoUpdatingRelativeAge = function(date,options) {\n\n  if (!date) return \"\";\n\n  options = options || {};\n  var format = options.format || \"tiny\";\n\n  var append = \"\";\n\n  if(format === 'medium') {\n    append = \" date\";\n    if(options.leaveAgo) {\n      format = 'medium-with-ago';\n    }\n    options.wrapInSpan = false;\n  }\n\n  var relAge = relativeAge(date, options);\n\n  if (format === 'tiny' \u0026\u0026 relativeAgeTinyShowsYear(relAge)) {\n    append += \" with-year\";\n  }\n\n  if (options.title) {\n    append += \"' title='\" + longDate(date);\n  }\n\n  return \"\u003cspan class='relative-date\" + append + \"' data-time='\" + date.getTime() + \"' data-format='\" + format +  \"'\u003e\" + relAge  + \"\u003c/span\u003e\";\n};\n\n\nrelativeAgeTiny = function(date){\n  var format = \"tiny\";\n  var distance = Math.round((new Date() - date) / 1000);\n  var distanceInMinutes = Math.round(distance / 60.0);\n\n  var formatted;\n  var t = function(key,opts){\n    return I18n.t(\"dates.\" + format + \".\" + key, opts);\n  };\n\n  switch(true){\n\n  case(distanceInMinutes \u003c 1):\n    formatted = t(\"less_than_x_minutes\", {count: 1});\n    break;\n  case(distanceInMinutes \u003e= 1 \u0026\u0026 distanceInMinutes \u003c= 44):\n    formatted = t(\"x_minutes\", {count: distanceInMinutes});\n    break;\n  case(distanceInMinutes \u003e= 45 \u0026\u0026 distanceInMinutes \u003c= 89):\n    formatted = t(\"about_x_hours\", {count: 1});\n    break;\n  case(distanceInMinutes \u003e= 90 \u0026\u0026 distanceInMinutes \u003c= 1439):\n    formatted = t(\"about_x_hours\", {count: Math.round(distanceInMinutes / 60.0)});\n    break;\n  case(Discourse.SiteSettings.relative_date_duration === 0 \u0026\u0026 distanceInMinutes \u003c= 525599):\n    formatted = shortDateNoYear(date);\n    break;\n  case(distanceInMinutes \u003e= 1440 \u0026\u0026 distanceInMinutes \u003c= 2519):\n    formatted = t(\"x_days\", {count: 1});\n    break;\n  case(distanceInMinutes \u003e= 2520 \u0026\u0026 distanceInMinutes \u003c= ((Discourse.SiteSettings.relative_date_duration||14) * 1440)):\n    formatted = t(\"x_days\", {count: Math.round(distanceInMinutes / 1440.0)});\n    break;\n  default:\n    if(date.getFullYear() === new Date().getFullYear()) {\n      formatted = shortDateNoYear(date);\n    } else {\n      formatted = tinyDateYear(date);\n    }\n    break;\n  }\n\n  return formatted;\n};\n\n/*\n * Returns true if the given tiny date string includes the year.\n * Useful for checking if the string isn't so tiny.\n */\nrelativeAgeTinyShowsYear = function(relativeAgeString) {\n  return relativeAgeString.match(/'[\\d]{2}$/);\n};\n\nrelativeAgeMediumSpan = function(distance, leaveAgo) {\n  var formatted, distanceInMinutes;\n\n  distanceInMinutes = Math.round(distance / 60.0);\n\n  var t = function(key, opts){\n    return I18n.t(\"dates.medium\" + (leaveAgo?\"_with_ago\":\"\") + \".\" + key, opts);\n  };\n\n  switch(true){\n  case(distanceInMinutes \u003e= 1 \u0026\u0026 distanceInMinutes \u003c= 56):\n    formatted = t(\"x_minutes\", {count: distanceInMinutes});\n    break;\n  case(distanceInMinutes \u003e= 56 \u0026\u0026 distanceInMinutes \u003c= 89):\n    formatted = t(\"x_hours\", {count: 1});\n    break;\n  case(distanceInMinutes \u003e= 90 \u0026\u0026 distanceInMinutes \u003c= 1379):\n    formatted = t(\"x_hours\", {count: Math.round(distanceInMinutes / 60.0)});\n    break;\n  case(distanceInMinutes \u003e= 1380 \u0026\u0026 distanceInMinutes \u003c= 2159):\n    formatted = t(\"x_days\", {count: 1});\n    break;\n  case(distanceInMinutes \u003e= 2160):\n    formatted = t(\"x_days\", {count: Math.round((distanceInMinutes - 720.0) / 1440.0)});\n    break;\n  }\n  return formatted || '\u0026mdash';\n};\n\nrelativeAgeMedium = function(date, options){\n  var displayDate, fiveDaysAgo, oneMinuteAgo, fullReadable, leaveAgo;\n  var wrapInSpan = options.wrapInSpan !== false;\n\n  leaveAgo = options.leaveAgo;\n  var distance = Math.round((new Date() - date) / 1000);\n\n  if (!date) {\n    return \"\u0026mdash;\";\n  }\n\n  fullReadable = longDate(date);\n  displayDate = \"\";\n  fiveDaysAgo = 432000;\n  oneMinuteAgo = 60;\n\n  if (distance \u003c oneMinuteAgo) {\n    displayDate = I18n.t(\"now\");\n  } else if (distance \u003e fiveDaysAgo) {\n    if ((new Date()).getFullYear() !== date.getFullYear()) {\n      displayDate = shortDate(date);\n    } else {\n      displayDate = shortDateNoYear(date);\n    }\n  } else {\n    displayDate = relativeAgeMediumSpan(distance, leaveAgo);\n  }\n  if(wrapInSpan) {\n    return \"\u003cspan class='date' title='\" + fullReadable + \"'\u003e\" + displayDate + \"\u003c/span\u003e\";\n  } else {\n    return displayDate;\n  }\n};\n\n// mostly lifted from rails with a few amendments\nrelativeAge = function(date, options) {\n  options = options || {};\n  var format = options.format || \"tiny\";\n\n  if(format === \"tiny\") {\n    return relativeAgeTiny(date, options);\n  } else if (format === \"medium\") {\n    return relativeAgeMedium(date, options);\n  } else if (format === 'medium-with-ago') {\n    return relativeAgeMedium(date, _.extend(options, {format: 'medium', leaveAgo: true}));\n  }\n\n  return \"UNKNOWN FORMAT\";\n};\n\nvar number = function(val) {\n  val = parseInt(val, 10);\n  if (isNaN(val)) val = 0;\n\n  if (val \u003e 999) {\n    return (val / 1000).toFixed(1) + \"K\";\n  }\n  return val.toString();\n};\n\nDiscourse.Formatter = {\n  longDate: longDate,\n  longDateNoYear: longDateNoYear,\n  relativeAge: relativeAge,\n  autoUpdatingRelativeAge: autoUpdatingRelativeAge,\n  updateRelativeAge: updateRelativeAge,\n  toTitleCase: toTitleCase,\n  shortDate: shortDate,\n  breakUp: breakUp,\n  cappedMemoize: cappedMemoize,\n  number: number\n};\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

// forked cause we may want to amend the logic a bit
/*
 * jQuery Highlight plugin
 *
 * Based on highlight v3 by Johann Burkard
 * http://johannburkard.de/blog/programming/javascript/highlight-javascript-text-higlighting-jquery-plugin.html
 *
 * Code a little bit refactored and cleaned (in my humble opinion).
 * Most important changes:
 *  - has an option to highlight only entire words (wordsOnly - false by default),
 *  - has an option to be case sensitive (caseSensitive - false by default)
 *  - highlight element tag and class names can be specified in options
 *
 * Usage:
 *   // wrap every occurrance of text 'lorem' in content
 *   // with <span class='highlight'> (default options)
 *   $('#content').highlight('lorem');
 *
 *   // search for and highlight more terms at once
 *   // so you can save some time on traversing DOM
 *   $('#content').highlight(['lorem', 'ipsum']);
 *   $('#content').highlight('lorem ipsum');
 *
 *   // search only for entire word 'lorem'
 *   $('#content').highlight('lorem', { wordsOnly: true });
 *
 *   // don't ignore case during search of term 'lorem'
 *   $('#content').highlight('lorem', { caseSensitive: true });
 *
 *   // wrap every occurrance of term 'ipsum' in content
 *   // with <em class='important'>
 *   $('#content').highlight('ipsum', { element: 'em', className: 'important' });
 *
 *   // remove default highlight
 *   $('#content').unhighlight();
 *
 *   // remove custom highlight
 *   $('#content').unhighlight({ element: 'em', className: 'important' });
 *
 *
 * Copyright (c) 2009 Bartek Szopka
 *
 * Licensed under MIT license.
 *
 */


jQuery.extend({
    highlight: function (node, re, nodeName, className) {
        if (node.nodeType === 3) {
            var match = node.data.match(re);
            if (match) {
                var highlight = document.createElement(nodeName || 'span');
                highlight.className = className || 'highlight';
                var wordNode = node.splitText(match.index);
                wordNode.splitText(match[0].length);
                var wordClone = wordNode.cloneNode(true);
                highlight.appendChild(wordClone);
                wordNode.parentNode.replaceChild(highlight, wordNode);
                return 1; //skip added node in parent
            }
        } else if ((node.nodeType === 1 && node.childNodes) && // only element nodes that have children
                !/(script|style)/i.test(node.tagName) && // ignore script and style nodes
                !(node.tagName === nodeName.toUpperCase() && node.className === className)) { // skip if already highlighted
            for (var i = 0; i < node.childNodes.length; i++) {
                i += jQuery.highlight(node.childNodes[i], re, nodeName, className);
            }
        }
        return 0;
    }
});

jQuery.fn.unhighlight = function (options) {
    var settings = { className: 'highlight-strong', element: 'span' };
    jQuery.extend(settings, options);

    return this.find(settings.element + "." + settings.className).each(function () {
        var parent = this.parentNode;
        parent.replaceChild(this.firstChild, this);
        parent.normalize();
    }).end();
};

jQuery.fn.highlight = function (words, options) {
    var settings = { className: 'highlight-strong', element: 'span', caseSensitive: false, wordsOnly: false };
    jQuery.extend(settings, options);

    if (words.constructor === String) {
        words = [words];
    }
    words = jQuery.grep(words, function(word){
      return word !== '';
    });
    words = jQuery.map(words, function(word) {
      return word.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    });
    if (words.length === 0) { return this; }

    var flag = settings.caseSensitive ? "" : "i";
    var pattern = "(" + words.join("|") + ")";
    if (settings.wordsOnly) {
        pattern = "\\b" + pattern + "\\b";
    }
    var re = new RegExp(pattern, flag);

    return this.each(function () {
        jQuery.highlight(this, re, settings.element, settings.className);
    });
};



// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/highlight.js'] = "// forked cause we may want to amend the logic a bit\n/*\n * jQuery Highlight plugin\n *\n * Based on highlight v3 by Johann Burkard\n * http://johannburkard.de/blog/programming/javascript/highlight-javascript-text-higlighting-jquery-plugin.html\n *\n * Code a little bit refactored and cleaned (in my humble opinion).\n * Most important changes:\n *  - has an option to highlight only entire words (wordsOnly - false by default),\n *  - has an option to be case sensitive (caseSensitive - false by default)\n *  - highlight element tag and class names can be specified in options\n *\n * Usage:\n *   // wrap every occurrance of text 'lorem' in content\n *   // with \u003cspan class='highlight'\u003e (default options)\n *   $('#content').highlight('lorem');\n *\n *   // search for and highlight more terms at once\n *   // so you can save some time on traversing DOM\n *   $('#content').highlight(['lorem', 'ipsum']);\n *   $('#content').highlight('lorem ipsum');\n *\n *   // search only for entire word 'lorem'\n *   $('#content').highlight('lorem', { wordsOnly: true });\n *\n *   // don't ignore case during search of term 'lorem'\n *   $('#content').highlight('lorem', { caseSensitive: true });\n *\n *   // wrap every occurrance of term 'ipsum' in content\n *   // with \u003cem class='important'\u003e\n *   $('#content').highlight('ipsum', { element: 'em', className: 'important' });\n *\n *   // remove default highlight\n *   $('#content').unhighlight();\n *\n *   // remove custom highlight\n *   $('#content').unhighlight({ element: 'em', className: 'important' });\n *\n *\n * Copyright (c) 2009 Bartek Szopka\n *\n * Licensed under MIT license.\n *\n */\n\n\njQuery.extend({\n    highlight: function (node, re, nodeName, className) {\n        if (node.nodeType === 3) {\n            var match = node.data.match(re);\n            if (match) {\n                var highlight = document.createElement(nodeName || 'span');\n                highlight.className = className || 'highlight';\n                var wordNode = node.splitText(match.index);\n                wordNode.splitText(match[0].length);\n                var wordClone = wordNode.cloneNode(true);\n                highlight.appendChild(wordClone);\n                wordNode.parentNode.replaceChild(highlight, wordNode);\n                return 1; //skip added node in parent\n            }\n        } else if ((node.nodeType === 1 \u0026\u0026 node.childNodes) \u0026\u0026 // only element nodes that have children\n                !/(script|style)/i.test(node.tagName) \u0026\u0026 // ignore script and style nodes\n                !(node.tagName === nodeName.toUpperCase() \u0026\u0026 node.className === className)) { // skip if already highlighted\n            for (var i = 0; i \u003c node.childNodes.length; i++) {\n                i += jQuery.highlight(node.childNodes[i], re, nodeName, className);\n            }\n        }\n        return 0;\n    }\n});\n\njQuery.fn.unhighlight = function (options) {\n    var settings = { className: 'highlight-strong', element: 'span' };\n    jQuery.extend(settings, options);\n\n    return this.find(settings.element + \".\" + settings.className).each(function () {\n        var parent = this.parentNode;\n        parent.replaceChild(this.firstChild, this);\n        parent.normalize();\n    }).end();\n};\n\njQuery.fn.highlight = function (words, options) {\n    var settings = { className: 'highlight-strong', element: 'span', caseSensitive: false, wordsOnly: false };\n    jQuery.extend(settings, options);\n\n    if (words.constructor === String) {\n        words = [words];\n    }\n    words = jQuery.grep(words, function(word){\n      return word !== '';\n    });\n    words = jQuery.map(words, function(word) {\n      return word.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$\u0026\");\n    });\n    if (words.length === 0) { return this; }\n\n    var flag = settings.caseSensitive ? \"\" : \"i\";\n    var pattern = \"(\" + words.join(\"|\") + \")\";\n    if (settings.wordsOnly) {\n        pattern = \"\\\\b\" + pattern + \"\\\\b\";\n    }\n    var re = new RegExp(pattern, flag);\n\n    return this.each(function () {\n        jQuery.highlight(this, re, settings.element, settings.className);\n    });\n};\n\n";
define("discourse/lib/html-builder", 
  ["exports"],
  function(__exports__) {
    "use strict";
    function categoryLinkHTML(category, options) {
      var categoryOptions = {};
      if (options.hash) {
        if (options.hash.allowUncategorized) { categoryOptions.allowUncategorized = true; }
        if (options.hash.showParent) { categoryOptions.showParent = true; }
        if (options.hash.onlyStripe) { categoryOptions.onlyStripe = true; }
        if (options.hash.link !== undefined) { categoryOptions.link = options.hash.link; }
        if (options.hash.extraClasses) { categoryOptions.extraClasses = options.hash.extraClasses; }
        if (options.hash.categories) {
          categoryOptions.categories = Em.Handlebars.get(this, options.hash.categories, options);
        }
      }
      return new Handlebars.SafeString(Discourse.HTML.categoryBadge(category, categoryOptions));
    }

    __exports__.categoryLinkHTML = categoryLinkHTML;
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/html-builder.js'] = "define(\"discourse/lib/html-builder\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    function categoryLinkHTML(category, options) {\n      var categoryOptions = {};\n      if (options.hash) {\n        if (options.hash.allowUncategorized) { categoryOptions.allowUncategorized = true; }\n        if (options.hash.showParent) { categoryOptions.showParent = true; }\n        if (options.hash.onlyStripe) { categoryOptions.onlyStripe = true; }\n        if (options.hash.link !== undefined) { categoryOptions.link = options.hash.link; }\n        if (options.hash.extraClasses) { categoryOptions.extraClasses = options.hash.extraClasses; }\n        if (options.hash.categories) {\n          categoryOptions.categories = Em.Handlebars.get(this, options.hash.categories, options);\n        }\n      }\n      return new Handlebars.SafeString(Discourse.HTML.categoryBadge(category, categoryOptions));\n    }\n\n    __exports__.categoryLinkHTML = categoryLinkHTML;\n  });";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  Helpers to build HTML strings as well as custom fragments.

  @class HTML
  @namespace Discourse
  @module Discourse
**/


var customizations = {};

Discourse.HTML = {

  /**
    Return a custom fragment of HTML by key. It can be registered via a plugin
    using `setCustomHTML(key, html)`. This is used by a handlebars helper to find
    the HTML content it wants. It will also check the `PreloadStore` for any server
    side preloaded HTML.

    @method getCustomHTML
    @param {String} key to lookup
  **/
  getCustomHTML: function(key) {
    var c = customizations[key];
    if (c) {
      return new Handlebars.SafeString(c);
    }

    var html = PreloadStore.get("customHTML");
    if (html && html[key] && html[key].length) {
      return new Handlebars.SafeString(html[key]);
    }
  },

  /**
    Set a fragment of HTML by key. It can then be looked up with `getCustomHTML(key)`.

    @method setCustomHTML
    @param {String} key to store the html
    @param {String} html fragment to store
  **/
  setCustomHTML: function(key, html) {
    customizations[key] = html;
  },

  /**
    Returns the CSS styles for a category

    @method categoryStyle
    @param {Discourse.Category} category the category whose link we want
  **/
  categoryStyle: function(category) {
    var color = Em.get(category, 'color'),
        textColor = Em.get(category, 'text_color');

    if (!color && !textColor) { return; }

    // Add the custom style if we need to
    var style = "";
    if (color) { style += "background-color: #" + color + "; "; }
    if (textColor) { style += "color: #" + textColor + "; "; }
    return style;
  },

  /**
    Create a category badge

    @method categoryBadge
    @param {Discourse.Category} category the category whose link we want
    @param {Object} opts The options for the category link
      @param {Boolean} opts.allowUncategorized Whether we allow rendering of the uncategorized category (default false)
      @param {Boolean} opts.showParent Whether to visually show whether category is a sub-category (default false)
      @param {Boolean} opts.link Whether this category badge should link to the category (default true)
      @param {String}  opts.extraClasses add this string to the class attribute of the badge
    @returns {String} the html category badge
  **/
  categoryBadge: function(category, opts) {
    opts = opts || {};

    if ((!category) ||
          (!opts.allowUncategorized &&
           Em.get(category, 'id') === Discourse.Site.currentProp("uncategorized_category_id") &&
           Discourse.SiteSettings.suppress_uncategorized_badge
          )
       ) return "";

    var name = Em.get(category, 'name'),
        description = Em.get(category, 'description'),
        restricted = Em.get(category, 'read_restricted'),
        url = Discourse.getURL("/category/") + Discourse.Category.slugFor(category),
        elem = (opts.link === false ? 'span' : 'a'),
        extraClasses = (opts.extraClasses ? (' ' + opts.extraClasses) : ''),
        html = "<" + elem + " href=\"" + (opts.link === false ? '' : url) + "\" ",
        categoryStyle;

    html += "data-drop-close=\"true\" class=\"badge-category" + (restricted ? ' restricted' : '' ) +
            (opts.onlyStripe ? ' clear-badge' : '') +
            extraClasses + "\" ";
    name = Handlebars.Utils.escapeExpression(name);

    // Add description if we have it, without tags. Server has sanitized the description value.
    if (description) html += "title=\"" + $("<div/>").html(description).text() + "\" ";

    if (!opts.onlyStripe) {
      categoryStyle = Discourse.HTML.categoryStyle(category);
      if (categoryStyle) {
        html += "style=\"" + categoryStyle + "\" ";
      }
    }

    if (restricted) {
      html += "><div><i class='fa fa-group'></i> " + name + "</div></" + elem + ">";
    } else {
      html += ">" + name + "</" + elem + ">";
    }

    if (opts.showParent && category.get('parent_category_id')) {
      var parent = Discourse.Category.findById(category.get('parent_category_id'));
      categoryStyle = Discourse.HTML.categoryStyle(opts.onlyStripe ? category : parent) || '';
      html = "<span class='badge-wrapper'><" + elem + " class='badge-category-parent" + extraClasses + "' style=\"" + categoryStyle + 
             "\" href=\"" + (opts.link === false ? '' : url) + "\"><span class='category-name'>" +
             (Em.get(parent, 'read_restricted') ? "<i class='fa fa-group'></i> " : "") +
             Em.get(parent, 'name') + "</span></" + elem + ">" +
             html + "</span>";
    }

    return html;
  }

};


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/html.js'] = "/**\n  Helpers to build HTML strings as well as custom fragments.\n\n  @class HTML\n  @namespace Discourse\n  @module Discourse\n**/\n\n\nvar customizations = {};\n\nDiscourse.HTML = {\n\n  /**\n    Return a custom fragment of HTML by key. It can be registered via a plugin\n    using `setCustomHTML(key, html)`. This is used by a handlebars helper to find\n    the HTML content it wants. It will also check the `PreloadStore` for any server\n    side preloaded HTML.\n\n    @method getCustomHTML\n    @param {String} key to lookup\n  **/\n  getCustomHTML: function(key) {\n    var c = customizations[key];\n    if (c) {\n      return new Handlebars.SafeString(c);\n    }\n\n    var html = PreloadStore.get(\"customHTML\");\n    if (html \u0026\u0026 html[key] \u0026\u0026 html[key].length) {\n      return new Handlebars.SafeString(html[key]);\n    }\n  },\n\n  /**\n    Set a fragment of HTML by key. It can then be looked up with `getCustomHTML(key)`.\n\n    @method setCustomHTML\n    @param {String} key to store the html\n    @param {String} html fragment to store\n  **/\n  setCustomHTML: function(key, html) {\n    customizations[key] = html;\n  },\n\n  /**\n    Returns the CSS styles for a category\n\n    @method categoryStyle\n    @param {Discourse.Category} category the category whose link we want\n  **/\n  categoryStyle: function(category) {\n    var color = Em.get(category, 'color'),\n        textColor = Em.get(category, 'text_color');\n\n    if (!color \u0026\u0026 !textColor) { return; }\n\n    // Add the custom style if we need to\n    var style = \"\";\n    if (color) { style += \"background-color: #\" + color + \"; \"; }\n    if (textColor) { style += \"color: #\" + textColor + \"; \"; }\n    return style;\n  },\n\n  /**\n    Create a category badge\n\n    @method categoryBadge\n    @param {Discourse.Category} category the category whose link we want\n    @param {Object} opts The options for the category link\n      @param {Boolean} opts.allowUncategorized Whether we allow rendering of the uncategorized category (default false)\n      @param {Boolean} opts.showParent Whether to visually show whether category is a sub-category (default false)\n      @param {Boolean} opts.link Whether this category badge should link to the category (default true)\n      @param {String}  opts.extraClasses add this string to the class attribute of the badge\n    @returns {String} the html category badge\n  **/\n  categoryBadge: function(category, opts) {\n    opts = opts || {};\n\n    if ((!category) ||\n          (!opts.allowUncategorized \u0026\u0026\n           Em.get(category, 'id') === Discourse.Site.currentProp(\"uncategorized_category_id\") \u0026\u0026\n           Discourse.SiteSettings.suppress_uncategorized_badge\n          )\n       ) return \"\";\n\n    var name = Em.get(category, 'name'),\n        description = Em.get(category, 'description'),\n        restricted = Em.get(category, 'read_restricted'),\n        url = Discourse.getURL(\"/category/\") + Discourse.Category.slugFor(category),\n        elem = (opts.link === false ? 'span' : 'a'),\n        extraClasses = (opts.extraClasses ? (' ' + opts.extraClasses) : ''),\n        html = \"\u003c\" + elem + \" href=\\\"\" + (opts.link === false ? '' : url) + \"\\\" \",\n        categoryStyle;\n\n    html += \"data-drop-close=\\\"true\\\" class=\\\"badge-category\" + (restricted ? ' restricted' : '' ) +\n            (opts.onlyStripe ? ' clear-badge' : '') +\n            extraClasses + \"\\\" \";\n    name = Handlebars.Utils.escapeExpression(name);\n\n    // Add description if we have it, without tags. Server has sanitized the description value.\n    if (description) html += \"title=\\\"\" + $(\"\u003cdiv/\u003e\").html(description).text() + \"\\\" \";\n\n    if (!opts.onlyStripe) {\n      categoryStyle = Discourse.HTML.categoryStyle(category);\n      if (categoryStyle) {\n        html += \"style=\\\"\" + categoryStyle + \"\\\" \";\n      }\n    }\n\n    if (restricted) {\n      html += \"\u003e\u003cdiv\u003e\u003ci class='fa fa-group'\u003e\u003c/i\u003e \" + name + \"\u003c/div\u003e\u003c/\" + elem + \"\u003e\";\n    } else {\n      html += \"\u003e\" + name + \"\u003c/\" + elem + \"\u003e\";\n    }\n\n    if (opts.showParent \u0026\u0026 category.get('parent_category_id')) {\n      var parent = Discourse.Category.findById(category.get('parent_category_id'));\n      categoryStyle = Discourse.HTML.categoryStyle(opts.onlyStripe ? category : parent) || '';\n      html = \"\u003cspan class='badge-wrapper'\u003e\u003c\" + elem + \" class='badge-category-parent\" + extraClasses + \"' style=\\\"\" + categoryStyle + \n             \"\\\" href=\\\"\" + (opts.link === false ? '' : url) + \"\\\"\u003e\u003cspan class='category-name'\u003e\" +\n             (Em.get(parent, 'read_restricted') ? \"\u003ci class='fa fa-group'\u003e\u003c/i\u003e \" : \"\") +\n             Em.get(parent, 'name') + \"\u003c/span\u003e\u003c/\" + elem + \"\u003e\" +\n             html + \"\u003c/span\u003e\";\n    }\n\n    return html;\n  }\n\n};\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A simple key value store that uses LocalStorage

  @class KeyValueStore
  @namespace Discourse
  @module Discourse
**/



var safeLocalStorage;

try {
 safeLocalStorage = localStorage;
} catch(e){
 // cookies disabled, we don't care
}

Discourse.KeyValueStore = {
  initialized: false,
  context: "",

  init: function(ctx) {
    this.initialized = true;
    this.context = ctx;
  },

  abandonLocal: function() {
    var i, k;
    if (!(safeLocalStorage && this.initialized)) {
      return;
    }
    i = safeLocalStorage.length - 1;
    while (i >= 0) {
      k = safeLocalStorage.key(i);
      if (k.substring(0, this.context.length) === this.context) {
        safeLocalStorage.removeItem(k);
      }
      i--;
    }
    return true;
  },

  remove: function(key) {
    return safeLocalStorage.removeItem(this.context + key);
  },

  set: function(opts) {
    if (!safeLocalStorage && this.initialized) {
      return false;
    }
    safeLocalStorage[this.context + opts.key] = opts.value;
  },

  get: function(key) {
    if (!safeLocalStorage) {
      return null;
    }
    return safeLocalStorage[this.context + key];
  }
};



// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/key_value_store.js'] = "/**\n  A simple key value store that uses LocalStorage\n\n  @class KeyValueStore\n  @namespace Discourse\n  @module Discourse\n**/\n\n\n\nvar safeLocalStorage;\n\ntry {\n safeLocalStorage = localStorage;\n} catch(e){\n // cookies disabled, we don't care\n}\n\nDiscourse.KeyValueStore = {\n  initialized: false,\n  context: \"\",\n\n  init: function(ctx) {\n    this.initialized = true;\n    this.context = ctx;\n  },\n\n  abandonLocal: function() {\n    var i, k;\n    if (!(safeLocalStorage \u0026\u0026 this.initialized)) {\n      return;\n    }\n    i = safeLocalStorage.length - 1;\n    while (i \u003e= 0) {\n      k = safeLocalStorage.key(i);\n      if (k.substring(0, this.context.length) === this.context) {\n        safeLocalStorage.removeItem(k);\n      }\n      i--;\n    }\n    return true;\n  },\n\n  remove: function(key) {\n    return safeLocalStorage.removeItem(this.context + key);\n  },\n\n  set: function(opts) {\n    if (!safeLocalStorage \u0026\u0026 this.initialized) {\n      return false;\n    }\n    safeLocalStorage[this.context + opts.key] = opts.value;\n  },\n\n  get: function(key) {\n    if (!safeLocalStorage) {\n      return null;\n    }\n    return safeLocalStorage[this.context + key];\n  }\n};\n\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  Keyboard Shortcut related functions.

  @class KeyboardShortcuts
  @namespace Discourse
  @module Discourse
**/

Discourse.KeyboardShortcuts = Ember.Object.createWithMixins({
  PATH_BINDINGS: {
    'g h': '/',
    'g l': '/latest',
    'g n': '/new',
    'g u': '/unread',
    'g f': '/starred',
    'g c': '/categories',
    'g t': '/top'
  },

  SELECTED_POST_BINDINGS: {
    'b': 'toggleBookmark',
    'd': 'deletePost',
    'e': 'editPost',
    'l': 'toggleLike',
    'r': 'replyToPost',
    '!': 'showFlags',
    't': 'replyAsNewTopic'
  },

  CLICK_BINDINGS: {
    'c': '#create-topic',                                         // create new topic

    // star topic
    'f': '#topic-footer-buttons button.star, .topic-list tr.topic-list-item.selected a.star',

    'm m': 'div.notification-options li[data-id="0"] a',                      // mark topic as muted
    'm r': 'div.notification-options li[data-id="1"] a',                      // mark topic as regular
    'm t': 'div.notification-options li[data-id="2"] a',                      // mark topic as tracking
    'm w': 'div.notification-options li[data-id="3"] a',                      // mark topic as watching
    'x r': '#dismiss-new,#dismiss-new-top,#dismiss-posts,#dismiss-posts-top', // dismiss new/posts
    'x t': '#dismiss-topics,#dismiss-topics-top',                             //dismiss topics
    '.': '.alert.alert-info.clickable',                                       // show incoming/updated topics
    'n': '#user-notifications',                                               // open notifications menu
    'o,enter': '.topic-list tr.selected a.title',                             // open selected topic
    'shift+r': '#topic-footer-buttons button.create',                         // reply to topic
    'shift+s': '#topic-footer-buttons button.share',                          // share topic
    's': '.topic-post.selected a.post-date'                                   // share post
  },

  FUNCTION_BINDINGS: {
    'home': 'goToFirstPost',
    '#': 'toggleProgress',
    'end': 'goToLastPost',
    'shift+j': 'nextSection',
    'j': 'selectDown',
    'shift+k': 'prevSection',
    'k': 'selectUp',
    'u': 'goBack',
    '/': 'showSearch',
    '=': 'showSiteMap',                                             // open site map menu
    'p': 'showCurrentUser',                                         // open current user menu
    'ctrl+f': 'showBuiltinSearch',
    'command+f': 'showBuiltinSearch',
    '?': 'showHelpModal',                                          // open keyboard shortcut help
    'q': 'quoteReply'
  },

  bindEvents: function(keyTrapper, container) {
    this.keyTrapper = keyTrapper;
    this.container = container;
    _.each(this.PATH_BINDINGS, this._bindToPath, this);
    _.each(this.CLICK_BINDINGS, this._bindToClick, this);
    _.each(this.SELECTED_POST_BINDINGS, this._bindToSelectedPost, this);
    _.each(this.FUNCTION_BINDINGS, this._bindToFunction, this);
  },

  quoteReply: function(){
    $('.topic-post.selected button.create').click();
    // lazy but should work for now
    setTimeout(function(){
      $('#wmd-quote-post').click();
    }, 500);
  },

  goToFirstPost: function() {
    this._jumpTo('jumpTop');
  },

  goToLastPost: function() {
    this._jumpTo('jumpBottom');
  },

  _jumpTo: function(direction) {
    if ($('.container.posts').length) {
      this.container.lookup('controller:topic-progress').send(direction);
    }
  },

  selectDown: function() {
    this._moveSelection(1);
  },

  selectUp: function() {
    this._moveSelection(-1);
  },

  goBack: function() {
    history.back();
  },

  nextSection: function() {
    this._changeSection(1);
  },

  prevSection: function() {
    this._changeSection(-1);
  },

  showBuiltinSearch: function() {
    var routeName = _.map(Discourse.Router.router.currentHandlerInfos, "name").join("_");
    var blacklist = [
      /^application_discovery_discovery.categories/
    ];

    var whitelist = [
      /^application_topic_/
    ];

    var check = function(regex){return routeName.match(regex);};

    var whitelisted = _.any(whitelist, check);
    var blacklisted = _.any(blacklist, check);

    if(whitelisted && !blacklisted){
      return this.showSearch(true);
    } else {
      return true;
    }
  },

  toggleProgress: function() {
    Discourse.__container__.lookup('controller:topic-progress').send('toggleExpansion', {highlight: true});
  },

  showSearch: function(selectContext) {
    $('#search-button').click();
    if(selectContext) {
      Discourse.__container__.lookup('controller:search').set('searchContextEnabled', true);
    }
    return false;
  },

  showSiteMap: function() {
    $('#site-map').click();
    $('#site-map-dropdown a:first').focus();
  },

  showCurrentUser: function() {
    $('#current-user').click();
    $('#user-dropdown a:first').focus();
  },

  showHelpModal: function() {
    Discourse.__container__.lookup('controller:application').send('showKeyboardShortcutsHelp');
  },

  _bindToSelectedPost: function(action, binding) {
    var container = this.container;

    this.keyTrapper.bind(binding, function() {
      // TODO: We should keep track of the post without a CSS class
      var selectedPostId = parseInt($('.topic-post.selected article.boxed').data('post-id'), 10);
      if (selectedPostId) {
        var topicController = container.lookup('controller:topic'),
            post = topicController.get('postStream.posts').findBy('id', selectedPostId);
        if (post) {
          topicController.send(action, post);
        }
      }
    });
  },

  _bindToPath: function(path, binding) {
    this.keyTrapper.bind(binding, function() {
      Discourse.URL.routeTo(path);
    });
  },

  _bindToClick: function(selector, binding) {
    binding = binding.split(',');
    this.keyTrapper.bind(binding, function() {
      $(selector).click();
    });
  },

  _bindToFunction: function(func, binding) {
    if (typeof this[func] === 'function') {
      this.keyTrapper.bind(binding, _.bind(this[func], this));
    }
  },

  _moveSelection: function(direction) {
    var $articles = this._findArticles();

    if (typeof $articles === 'undefined') {
      return;
    }

    var $selected = $articles.filter('.selected'),
        index = $articles.index($selected);

    // loop is not allowed
    if (direction === -1 && index === 0) { return; }

    // if nothing is selected go to the first post on screen
    if ($selected.length === 0) {
      var scrollTop = $(document).scrollTop();

      index = 0;
      $articles.each(function(){
        var top = $(this).position().top;
        if(top > scrollTop) {
          return false;
        }
        index += 1;
      });

      if(index >= $articles.length){
        index = $articles.length - 1;
      }

      direction = 0;
    }

    var $article = $articles.eq(index + direction);

    if ($article.size() > 0) {
      $articles.removeClass('selected');
      Em.run.next(function(){
        $article.addClass('selected');
      });

      var rgx = new RegExp("post-cloak-(\\d+)").exec($article.parent()[0].id);
      if (rgx === null || typeof rgx[1] === 'undefined') {
          this._scrollList($article, direction);
      } else {
          Discourse.URL.jumpToPost(rgx[1]);
      }
    }
  },

  _scrollList: function($article, direction) {
    var $body = $('body'),
        distToElement = $article.position().top + $article.height() - $(window).height() - $body.scrollTop();

    // cut some bottom slack
    distToElement += 40;

    // don't scroll backwards, its silly
    if((direction > 0 && distToElement < 0) || (direction < 0 && distToElement > 0)) {
      return;
    }

    $('html, body').scrollTop($body.scrollTop() + distToElement);
  },

  _findArticles: function() {
    var $topicList = $('.topic-list'),
        $topicArea = $('.posts-wrapper');

    if ($topicArea.size() > 0) {
      return $('.posts-wrapper .topic-post, .topic-list tbody tr');
    }
    else if ($topicList.size() > 0) {
      return $topicList.find('.topic-list-item');
    }
  },

  _changeSection: function(direction) {
    var $sections = $('#navigation-bar li'),
        active = $('#navigation-bar li.active'),
        index = $sections.index(active) + direction;

    if(index >= 0 && index < $sections.length){
      $sections.eq(index).find('a').click();
    }
  }
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/keyboard_shortcuts.js'] = "/**\n  Keyboard Shortcut related functions.\n\n  @class KeyboardShortcuts\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.KeyboardShortcuts = Ember.Object.createWithMixins({\n  PATH_BINDINGS: {\n    'g h': '/',\n    'g l': '/latest',\n    'g n': '/new',\n    'g u': '/unread',\n    'g f': '/starred',\n    'g c': '/categories',\n    'g t': '/top'\n  },\n\n  SELECTED_POST_BINDINGS: {\n    'b': 'toggleBookmark',\n    'd': 'deletePost',\n    'e': 'editPost',\n    'l': 'toggleLike',\n    'r': 'replyToPost',\n    '!': 'showFlags',\n    't': 'replyAsNewTopic'\n  },\n\n  CLICK_BINDINGS: {\n    'c': '#create-topic',                                         // create new topic\n\n    // star topic\n    'f': '#topic-footer-buttons button.star, .topic-list tr.topic-list-item.selected a.star',\n\n    'm m': 'div.notification-options li[data-id=\"0\"] a',                      // mark topic as muted\n    'm r': 'div.notification-options li[data-id=\"1\"] a',                      // mark topic as regular\n    'm t': 'div.notification-options li[data-id=\"2\"] a',                      // mark topic as tracking\n    'm w': 'div.notification-options li[data-id=\"3\"] a',                      // mark topic as watching\n    'x r': '#dismiss-new,#dismiss-new-top,#dismiss-posts,#dismiss-posts-top', // dismiss new/posts\n    'x t': '#dismiss-topics,#dismiss-topics-top',                             //dismiss topics\n    '.': '.alert.alert-info.clickable',                                       // show incoming/updated topics\n    'n': '#user-notifications',                                               // open notifications menu\n    'o,enter': '.topic-list tr.selected a.title',                             // open selected topic\n    'shift+r': '#topic-footer-buttons button.create',                         // reply to topic\n    'shift+s': '#topic-footer-buttons button.share',                          // share topic\n    's': '.topic-post.selected a.post-date'                                   // share post\n  },\n\n  FUNCTION_BINDINGS: {\n    'home': 'goToFirstPost',\n    '#': 'toggleProgress',\n    'end': 'goToLastPost',\n    'shift+j': 'nextSection',\n    'j': 'selectDown',\n    'shift+k': 'prevSection',\n    'k': 'selectUp',\n    'u': 'goBack',\n    '/': 'showSearch',\n    '=': 'showSiteMap',                                             // open site map menu\n    'p': 'showCurrentUser',                                         // open current user menu\n    'ctrl+f': 'showBuiltinSearch',\n    'command+f': 'showBuiltinSearch',\n    '?': 'showHelpModal',                                          // open keyboard shortcut help\n    'q': 'quoteReply'\n  },\n\n  bindEvents: function(keyTrapper, container) {\n    this.keyTrapper = keyTrapper;\n    this.container = container;\n    _.each(this.PATH_BINDINGS, this._bindToPath, this);\n    _.each(this.CLICK_BINDINGS, this._bindToClick, this);\n    _.each(this.SELECTED_POST_BINDINGS, this._bindToSelectedPost, this);\n    _.each(this.FUNCTION_BINDINGS, this._bindToFunction, this);\n  },\n\n  quoteReply: function(){\n    $('.topic-post.selected button.create').click();\n    // lazy but should work for now\n    setTimeout(function(){\n      $('#wmd-quote-post').click();\n    }, 500);\n  },\n\n  goToFirstPost: function() {\n    this._jumpTo('jumpTop');\n  },\n\n  goToLastPost: function() {\n    this._jumpTo('jumpBottom');\n  },\n\n  _jumpTo: function(direction) {\n    if ($('.container.posts').length) {\n      this.container.lookup('controller:topic-progress').send(direction);\n    }\n  },\n\n  selectDown: function() {\n    this._moveSelection(1);\n  },\n\n  selectUp: function() {\n    this._moveSelection(-1);\n  },\n\n  goBack: function() {\n    history.back();\n  },\n\n  nextSection: function() {\n    this._changeSection(1);\n  },\n\n  prevSection: function() {\n    this._changeSection(-1);\n  },\n\n  showBuiltinSearch: function() {\n    var routeName = _.map(Discourse.Router.router.currentHandlerInfos, \"name\").join(\"_\");\n    var blacklist = [\n      /^application_discovery_discovery.categories/\n    ];\n\n    var whitelist = [\n      /^application_topic_/\n    ];\n\n    var check = function(regex){return routeName.match(regex);};\n\n    var whitelisted = _.any(whitelist, check);\n    var blacklisted = _.any(blacklist, check);\n\n    if(whitelisted \u0026\u0026 !blacklisted){\n      return this.showSearch(true);\n    } else {\n      return true;\n    }\n  },\n\n  toggleProgress: function() {\n    Discourse.__container__.lookup('controller:topic-progress').send('toggleExpansion', {highlight: true});\n  },\n\n  showSearch: function(selectContext) {\n    $('#search-button').click();\n    if(selectContext) {\n      Discourse.__container__.lookup('controller:search').set('searchContextEnabled', true);\n    }\n    return false;\n  },\n\n  showSiteMap: function() {\n    $('#site-map').click();\n    $('#site-map-dropdown a:first').focus();\n  },\n\n  showCurrentUser: function() {\n    $('#current-user').click();\n    $('#user-dropdown a:first').focus();\n  },\n\n  showHelpModal: function() {\n    Discourse.__container__.lookup('controller:application').send('showKeyboardShortcutsHelp');\n  },\n\n  _bindToSelectedPost: function(action, binding) {\n    var container = this.container;\n\n    this.keyTrapper.bind(binding, function() {\n      // TODO: We should keep track of the post without a CSS class\n      var selectedPostId = parseInt($('.topic-post.selected article.boxed').data('post-id'), 10);\n      if (selectedPostId) {\n        var topicController = container.lookup('controller:topic'),\n            post = topicController.get('postStream.posts').findBy('id', selectedPostId);\n        if (post) {\n          topicController.send(action, post);\n        }\n      }\n    });\n  },\n\n  _bindToPath: function(path, binding) {\n    this.keyTrapper.bind(binding, function() {\n      Discourse.URL.routeTo(path);\n    });\n  },\n\n  _bindToClick: function(selector, binding) {\n    binding = binding.split(',');\n    this.keyTrapper.bind(binding, function() {\n      $(selector).click();\n    });\n  },\n\n  _bindToFunction: function(func, binding) {\n    if (typeof this[func] === 'function') {\n      this.keyTrapper.bind(binding, _.bind(this[func], this));\n    }\n  },\n\n  _moveSelection: function(direction) {\n    var $articles = this._findArticles();\n\n    if (typeof $articles === 'undefined') {\n      return;\n    }\n\n    var $selected = $articles.filter('.selected'),\n        index = $articles.index($selected);\n\n    // loop is not allowed\n    if (direction === -1 \u0026\u0026 index === 0) { return; }\n\n    // if nothing is selected go to the first post on screen\n    if ($selected.length === 0) {\n      var scrollTop = $(document).scrollTop();\n\n      index = 0;\n      $articles.each(function(){\n        var top = $(this).position().top;\n        if(top \u003e scrollTop) {\n          return false;\n        }\n        index += 1;\n      });\n\n      if(index \u003e= $articles.length){\n        index = $articles.length - 1;\n      }\n\n      direction = 0;\n    }\n\n    var $article = $articles.eq(index + direction);\n\n    if ($article.size() \u003e 0) {\n      $articles.removeClass('selected');\n      Em.run.next(function(){\n        $article.addClass('selected');\n      });\n\n      var rgx = new RegExp(\"post-cloak-(\\\\d+)\").exec($article.parent()[0].id);\n      if (rgx === null || typeof rgx[1] === 'undefined') {\n          this._scrollList($article, direction);\n      } else {\n          Discourse.URL.jumpToPost(rgx[1]);\n      }\n    }\n  },\n\n  _scrollList: function($article, direction) {\n    var $body = $('body'),\n        distToElement = $article.position().top + $article.height() - $(window).height() - $body.scrollTop();\n\n    // cut some bottom slack\n    distToElement += 40;\n\n    // don't scroll backwards, its silly\n    if((direction \u003e 0 \u0026\u0026 distToElement \u003c 0) || (direction \u003c 0 \u0026\u0026 distToElement \u003e 0)) {\n      return;\n    }\n\n    $('html, body').scrollTop($body.scrollTop() + distToElement);\n  },\n\n  _findArticles: function() {\n    var $topicList = $('.topic-list'),\n        $topicArea = $('.posts-wrapper');\n\n    if ($topicArea.size() \u003e 0) {\n      return $('.posts-wrapper .topic-post, .topic-list tbody tr');\n    }\n    else if ($topicList.size() \u003e 0) {\n      return $topicList.find('.topic-list-item');\n    }\n  },\n\n  _changeSection: function(direction) {\n    var $sections = $('#navigation-bar li'),\n        active = $('#navigation-bar li.active'),\n        index = $sections.index(active) + direction;\n\n    if(index \u003e= 0 \u0026\u0026 index \u003c $sections.length){\n      $sections.eq(index).find('a').click();\n    }\n  }\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  Helper object for lightboxes.

  @class Lightbox
  @namespace Discourse
  @module Discourse
**/

Discourse.Lightbox = {
  apply: function($elem) {
    $LAB.script("/javascripts/jquery.magnific-popup-min.js").wait(function() {
      $("a.lightbox", $elem).each(function(i, e) {
        var $e = $(e);
        // do not lightbox spoiled images
        if ($e.parents(".spoiler").length > 0 || $e.parents(".spoiled").length > 0) { return; }

        $e.magnificPopup({
          type: "image",
          closeOnContentClick: false,

          callbacks: {
            open: function() {
              var wrap = this.wrap,
                  img = this.currItem.img,
                  maxHeight = img.css("max-height");

              wrap.on("click.pinhandler", "img", function() {
                wrap.toggleClass("mfp-force-scrollbars");
                img.css("max-height", wrap.hasClass("mfp-force-scrollbars") ? "none" : maxHeight);
              });
            },
            beforeClose: function() {
              this.wrap.off("click.pinhandler");
              this.wrap.removeClass("mfp-force-scrollbars");
            }
          },

          image: {
            titleSrc: function(item) {
              return [
                item.el.attr("title"),
                $("span.informations", item.el).text().replace('x', '&times;'),
                '<a class="image-source-link" href="' + item.src + '" target="_blank">' + I18n.t("lightbox.download") + '</a>'
              ].join(' &middot; ');
            }
          }

        });
      });
    });
  }
};


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/lightbox.js'] = "/**\n  Helper object for lightboxes.\n\n  @class Lightbox\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.Lightbox = {\n  apply: function($elem) {\n    $LAB.script(\"/javascripts/jquery.magnific-popup-min.js\").wait(function() {\n      $(\"a.lightbox\", $elem).each(function(i, e) {\n        var $e = $(e);\n        // do not lightbox spoiled images\n        if ($e.parents(\".spoiler\").length \u003e 0 || $e.parents(\".spoiled\").length \u003e 0) { return; }\n\n        $e.magnificPopup({\n          type: \"image\",\n          closeOnContentClick: false,\n\n          callbacks: {\n            open: function() {\n              var wrap = this.wrap,\n                  img = this.currItem.img,\n                  maxHeight = img.css(\"max-height\");\n\n              wrap.on(\"click.pinhandler\", \"img\", function() {\n                wrap.toggleClass(\"mfp-force-scrollbars\");\n                img.css(\"max-height\", wrap.hasClass(\"mfp-force-scrollbars\") ? \"none\" : maxHeight);\n              });\n            },\n            beforeClose: function() {\n              this.wrap.off(\"click.pinhandler\");\n              this.wrap.removeClass(\"mfp-force-scrollbars\");\n            }\n          },\n\n          image: {\n            titleSrc: function(item) {\n              return [\n                item.el.attr(\"title\"),\n                $(\"span.informations\", item.el).text().replace('x', '\u0026times;'),\n                '\u003ca class=\"image-source-link\" href=\"' + item.src + '\" target=\"_blank\"\u003e' + I18n.t(\"lightbox.download\") + '\u003c/a\u003e'\n              ].join(' \u0026middot; ');\n            }\n          }\n\n        });\n      });\n    });\n  }\n};\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:


// A local cache lookup
var localCache = [];


/**
  Lookup a username and return whether it is exists or not.

  @function lookup
  @param {String} username to look up
  @return {Promise} promise that results to whether the name was found or not
**/
function lookup(username) {
  return new Em.RSVP.Promise(function (resolve) {
    var cached = localCache[username];

    // If we have a cached answer, return it
    if (typeof cached !== "undefined") {
      resolve(cached);
    } else {
      Discourse.ajax("/users/is_local_username", { data: { username: username } }).then(function(r) {
        localCache[username] = r.valid;
        resolve(r.valid);
      });
    }
  });
}

/**
  Help us link directly to a mentioned user's profile if the username exists.

  @class Mention
  @namespace Discourse
  @module Discourse
**/
Discourse.Mention = {

  /**
    Paints an element in the DOM with the appropriate classes and markup if the username
    it is mentioning exists.

    @method paint
    @param {Element} the element in the DOM to decorate
  **/
  paint: function(e) {
    var $elem = $(e);
    if ($elem.data('mention-tested')) return;
    var username = $elem.text().substr(1);

    $elem.addClass('mention-loading');
    lookup(username).then(function(found) {
      if (found) {
        $elem.replaceWith("<a href='" + Discourse.getURL("/users/") + username.toLowerCase() + "' class='mention'>@" + username + "</a>");
      } else {
        $elem.removeClass('mention-loading').addClass('mention-tested');
      }
    });
  }
};


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/mention.js'] = "\n// A local cache lookup\nvar localCache = [];\n\n\n/**\n  Lookup a username and return whether it is exists or not.\n\n  @function lookup\n  @param {String} username to look up\n  @return {Promise} promise that results to whether the name was found or not\n**/\nfunction lookup(username) {\n  return new Em.RSVP.Promise(function (resolve) {\n    var cached = localCache[username];\n\n    // If we have a cached answer, return it\n    if (typeof cached !== \"undefined\") {\n      resolve(cached);\n    } else {\n      Discourse.ajax(\"/users/is_local_username\", { data: { username: username } }).then(function(r) {\n        localCache[username] = r.valid;\n        resolve(r.valid);\n      });\n    }\n  });\n}\n\n/**\n  Help us link directly to a mentioned user's profile if the username exists.\n\n  @class Mention\n  @namespace Discourse\n  @module Discourse\n**/\nDiscourse.Mention = {\n\n  /**\n    Paints an element in the DOM with the appropriate classes and markup if the username\n    it is mentioning exists.\n\n    @method paint\n    @param {Element} the element in the DOM to decorate\n  **/\n  paint: function(e) {\n    var $elem = $(e);\n    if ($elem.data('mention-tested')) return;\n    var username = $elem.text().substr(1);\n\n    $elem.addClass('mention-loading');\n    lookup(username).then(function(found) {\n      if (found) {\n        $elem.replaceWith(\"\u003ca href='\" + Discourse.getURL(\"/users/\") + username.toLowerCase() + \"' class='mention'\u003e@\" + username + \"\u003c/a\u003e\");\n      } else {\n        $elem.removeClass('mention-loading').addClass('mention-tested');\n      }\n    });\n  }\n};\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

Discourse.MessageBus = window.MessageBus;


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/message_bus.js'] = "Discourse.MessageBus = window.MessageBus;\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  An object that is responsible for logic related to mobile devices.

  @namespace Discourse
  @module Mobile
**/

Discourse.Mobile = {
  isMobileDevice: false,
  mobileView: false,

  init: function() {
    var $html = $('html');
    this.isMobileDevice = $html.hasClass('mobile-device');
    this.mobileView = $html.hasClass('mobile-view');

    try{
      if (window.location.search.test(/mobile_view=1/)){
        localStorage.mobileView = true;
      }
      if (window.location.search.test(/mobile_view=0/)){
        localStorage.mobileView = false;
      }
      if (localStorage.mobileView) {
        var savedValue = (localStorage.mobileView === 'true');
        if (savedValue !== this.mobileView) {
          this.reloadPage(savedValue);
        }
      }
    } catch(err) {
      // localStorage may be disabled, just skip this
      // you get security errors if it is disabled
    }
  },

  toggleMobileView: function() {
    try{
      if (localStorage) {
        localStorage.mobileView = !this.mobileView;
      }
    } catch(err) {
      // localStorage may be disabled, skip
    }
    this.reloadPage(!this.mobileView);
  },

  reloadPage: function(mobile) {
    window.location.assign(window.location.pathname + '?mobile_view=' + (mobile ? '1' : '0'));
  }
};


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/mobile.js'] = "/**\n  An object that is responsible for logic related to mobile devices.\n\n  @namespace Discourse\n  @module Mobile\n**/\n\nDiscourse.Mobile = {\n  isMobileDevice: false,\n  mobileView: false,\n\n  init: function() {\n    var $html = $('html');\n    this.isMobileDevice = $html.hasClass('mobile-device');\n    this.mobileView = $html.hasClass('mobile-view');\n\n    try{\n      if (window.location.search.test(/mobile_view=1/)){\n        localStorage.mobileView = true;\n      }\n      if (window.location.search.test(/mobile_view=0/)){\n        localStorage.mobileView = false;\n      }\n      if (localStorage.mobileView) {\n        var savedValue = (localStorage.mobileView === 'true');\n        if (savedValue !== this.mobileView) {\n          this.reloadPage(savedValue);\n        }\n      }\n    } catch(err) {\n      // localStorage may be disabled, just skip this\n      // you get security errors if it is disabled\n    }\n  },\n\n  toggleMobileView: function() {\n    try{\n      if (localStorage) {\n        localStorage.mobileView = !this.mobileView;\n      }\n    } catch(err) {\n      // localStorage may be disabled, skip\n    }\n    this.reloadPage(!this.mobileView);\n  },\n\n  reloadPage: function(mobile) {\n    window.location.assign(window.location.pathname + '?mobile_view=' + (mobile ? '1' : '0'));\n  }\n};\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A helper for looking up oneboxes and displaying them

  For now it only stores in a local Javascript Object, in future we can change it so it uses localStorage
  or some other mechanism.

  @class Onebox
  @namespace Discourse
  @module Discourse
**/

Discourse.Onebox = {

  // The cache is just a JS Object
  localCache: {},

  // A cache of failed URLs
  failedCache: {},

  /**
    Perform a lookup of a onebox based an anchor element. It will insert a loading
    indicator and remove it when the loading is complete or fails.

    @method load
    @param {HTMLElement} e the anchor element whose onebox we want to look up
    @param {Boolean} refresh true if we want to force a refresh of the onebox
  **/
  load: function(e, refresh) {

    var $elem = $(e);

    // If the onebox has loaded, return
    if ($elem.data('onebox-loaded')) return;
    if ($elem.hasClass('loading-onebox')) return;

    var url = e.href;

    // Unless we're forcing a refresh...
    if (!refresh) {
      // If we have it in our cache, return it.
      var cached = this.localCache[url];
      if (cached) return cached;

      // If the request failed, don't do anything
      var failed = this.failedCache[url];
      if (failed) return;
    }

    // Add the loading CSS class
    $elem.addClass('loading-onebox');

    // Retrieve the onebox
    var promise = Discourse.ajax("/onebox", {
      dataType: 'html',
      data: { url: url, refresh: refresh }
    });

    // We can call this when loading is complete
    var loadingFinished = function() {
      $elem.removeClass('loading-onebox');
      $elem.data('onebox-loaded');
    };

    var onebox = this;
    promise.then(function(html) {

      // loaded onebox
      loadingFinished();

      onebox.localCache[url] = html;
      $elem.replaceWith(html);

    }, function() {
      // If the request failed log it as such
      onebox.failedCache[url] = true;
      loadingFinished();
    });

  },

  /**
    Return the cached contents of a Onebox

    @method lookupCache
    @param {String} url the url of the onebox
    @return {String} the cached contents of the onebox or null if not found
  **/
  lookupCache: function(url) {
    return this.localCache[url];
  },

  /**
    Store the contents of a Onebox in our local cache.

    @method cache
    @private
    @param {String} url the url of the onebox we crawled
    @param {String} contents the contents we want to cache
  **/
  cache: function(url, contents) {
    this.localCache[url] = contents;
  }

};




// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/onebox.js'] = "/**\n  A helper for looking up oneboxes and displaying them\n\n  For now it only stores in a local Javascript Object, in future we can change it so it uses localStorage\n  or some other mechanism.\n\n  @class Onebox\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.Onebox = {\n\n  // The cache is just a JS Object\n  localCache: {},\n\n  // A cache of failed URLs\n  failedCache: {},\n\n  /**\n    Perform a lookup of a onebox based an anchor element. It will insert a loading\n    indicator and remove it when the loading is complete or fails.\n\n    @method load\n    @param {HTMLElement} e the anchor element whose onebox we want to look up\n    @param {Boolean} refresh true if we want to force a refresh of the onebox\n  **/\n  load: function(e, refresh) {\n\n    var $elem = $(e);\n\n    // If the onebox has loaded, return\n    if ($elem.data('onebox-loaded')) return;\n    if ($elem.hasClass('loading-onebox')) return;\n\n    var url = e.href;\n\n    // Unless we're forcing a refresh...\n    if (!refresh) {\n      // If we have it in our cache, return it.\n      var cached = this.localCache[url];\n      if (cached) return cached;\n\n      // If the request failed, don't do anything\n      var failed = this.failedCache[url];\n      if (failed) return;\n    }\n\n    // Add the loading CSS class\n    $elem.addClass('loading-onebox');\n\n    // Retrieve the onebox\n    var promise = Discourse.ajax(\"/onebox\", {\n      dataType: 'html',\n      data: { url: url, refresh: refresh }\n    });\n\n    // We can call this when loading is complete\n    var loadingFinished = function() {\n      $elem.removeClass('loading-onebox');\n      $elem.data('onebox-loaded');\n    };\n\n    var onebox = this;\n    promise.then(function(html) {\n\n      // loaded onebox\n      loadingFinished();\n\n      onebox.localCache[url] = html;\n      $elem.replaceWith(html);\n\n    }, function() {\n      // If the request failed log it as such\n      onebox.failedCache[url] = true;\n      loadingFinished();\n    });\n\n  },\n\n  /**\n    Return the cached contents of a Onebox\n\n    @method lookupCache\n    @param {String} url the url of the onebox\n    @return {String} the cached contents of the onebox or null if not found\n  **/\n  lookupCache: function(url) {\n    return this.localCache[url];\n  },\n\n  /**\n    Store the contents of a Onebox in our local cache.\n\n    @method cache\n    @private\n    @param {String} url the url of the onebox we crawled\n    @param {String} contents the contents we want to cache\n  **/\n  cache: function(url, contents) {\n    this.localCache[url] = contents;\n  }\n\n};\n\n\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  Called whenever the "page" changes. This allows us to set up analytics 
  and other tracking.

  To get notified when the page changes, you can install a hook like so:

  ```javascript
    Discourse.PageTracker.current().on('change', function(url) {
      console.log('the page changed to: ' + url);
    });
  ```

  @class PageTracker
  @namespace Discourse
  @module Discourse
**/

Discourse.PageTracker = Ember.Object.extend(Ember.Evented, {
  start: function() {
    if (this.get('started')) { return; }

    var router = Discourse.__container__.lookup('router:main'),
        self = this;

    router.on('didTransition', function() {
      var router = this;
      self.trigger('change', router.get('url'));
    });
    this.set('started', true);
  }
});
Discourse.PageTracker.reopenClass(Discourse.Singleton);


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/page_tracker.js'] = "/**\n  Called whenever the \"page\" changes. This allows us to set up analytics \n  and other tracking.\n\n  To get notified when the page changes, you can install a hook like so:\n\n  ```javascript\n    Discourse.PageTracker.current().on('change', function(url) {\n      console.log('the page changed to: ' + url);\n    });\n  ```\n\n  @class PageTracker\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.PageTracker = Ember.Object.extend(Ember.Evented, {\n  start: function() {\n    if (this.get('started')) { return; }\n\n    var router = Discourse.__container__.lookup('router:main'),\n        self = this;\n\n    router.on('didTransition', function() {\n      var router = this;\n      self.trigger('change', router.get('url'));\n    });\n    this.set('started', true);\n  }\n});\nDiscourse.PageTracker.reopenClass(Discourse.Singleton);\n";
define("discourse/lib/plugin-api", 
  ["exports"],
  function(__exports__) {
    "use strict";
    function decorate(klass, evt, cb) {
      var mixin = {};
      mixin["_decorate_" + new Date().getTime().toString()] = function($elem) { cb($elem); }.on(evt);
      klass.reopen(mixin);
    }

    function decorateCooked(container, cb) {
      decorate(Discourse.PostView, 'postViewInserted', cb);
      decorate(container.lookupFactory('view:composer'), 'previewRefreshed', cb);
      decorate(container.lookupFactory('view:embedded-post'), 'previewRefreshed', cb);
      decorate(container.lookupFactory('view:user-stream'), 'didInsertElement', cb);
    }

    __exports__.decorateCooked = decorateCooked;
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/plugin-api.js'] = "define(\"discourse/lib/plugin-api\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    function decorate(klass, evt, cb) {\n      var mixin = {};\n      mixin[\"_decorate_\" + new Date().getTime().toString()] = function($elem) { cb($elem); }.on(evt);\n      klass.reopen(mixin);\n    }\n\n    function decorateCooked(container, cb) {\n      decorate(Discourse.PostView, 'postViewInserted', cb);\n      decorate(container.lookupFactory('view:composer'), 'previewRefreshed', cb);\n      decorate(container.lookupFactory('view:embedded-post'), 'previewRefreshed', cb);\n      decorate(container.lookupFactory('view:user-stream'), 'didInsertElement', cb);\n    }\n\n    __exports__.decorateCooked = decorateCooked;\n  });";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/*
 * JavaScript probing framework by Sam Saffron
 * MIT license
 *
 *
 * Examples:
 *
 *  someFunction = window.probes.measure(someFunction, {
 *    name: "somename" // or function(args) { return "name"; },
 *    before: function(data, owner, args) {
 *      // if owner is true, we are not in a recursive function call.
 *      //
 *      // data contains the bucker of data already measuer
 *      // data.count >= 0
 *      // data.time is the total time measured till now
 *      //
 *      // arguments contains the original arguments sent to the function
 *    },
 *    after: function(data, owner, args) {
 *      // same format as before
 *    }
 *  });
 *
 *
 *  // minimal
 *  someFunction = window.probes.measure(someFunction, "someFunction");
 *
 * */

(function(){
  var measure, clear;

  clear = function() {
    window.probes = {
      clear: clear,
      measure: measure,
      displayProbes: displayProbes
    };
  };

  measure = function(fn,options) {
    // start is outside so we measure time around recursive calls properly
    var start = null, nameParam, before, after;
    if (!options) {
      options = {};
    }

    if (typeof options === "string") {
      nameParam = options;
    }
    else
    {
      nameParam = options.name;

      if (nameParam === "measure" || nameParam === "clear") {
        throw new Error("can not be called measure or clear");
      }

      if (!nameParam)
      {
        throw new Error("you must specify the name option measure(fn, {name: 'some name'})");
      }

      before = options.before;
      after = options.after;
    }

    var now = (function(){
      var perf = window.performance || {};
      var time = perf.now || perf.mozNow || perf.webkitNow || perf.msNow || perf.oNow;
      return time ? time.bind(perf) : function() { return new Date().getTime(); };
    })();

    return function() {
      var name = nameParam;
      if (typeof name === "function"){
        name = nameParam(arguments);
      }
      var p = window.probes[name];
      var owner = (!start);

      if (before) {
        // would like to avoid try catch so its optimised properly by chrome
        before(p, owner, arguments);
      }

      if (p === undefined) {
        window.probes[name] = {count: 0, time: 0, currentTime: 0};
        p = window.probes[name];
      }

      var callStart;
      if (owner) {
        start = now();
        callStart = start;
      }
      else if(after) {
        callStart = now();
      }

      var r = fn.apply(this, arguments);
      if (owner && start) {
        p.time += now() - start;
        start = null;
      }
      p.count += 1;

      if (after) {
        p.currentTime = now() - callStart;
        // would like to avoid try catch so its optimised properly by chrome
        after(p, owner, arguments);
      }

      return r;
    };
  };

  var displayProbes = function(){
     var pre;
     var text = "";
     var body = document.getElementsByTagName("body")[0];

     for(var prop in window.probes){
       var probe = window.probes[prop];
       if(probe && probe.count){
          text += prop + ": " + probe.time + " ( " + probe.count + " )\n";
       }
     }

     pre = document.getElementById("__probes");

     if(!body){
       return;
     }

     if(pre){
       pre.textContent = text;
       pre.innerText = text;
       return;
     }

     pre = document.createElement("pre");

     pre.textContent = text;
     pre.innerText = text;
     pre.setAttribute("style", "position: fixed; bottom: 25px; left: 50px; z-index: 99999; border: 1px solid #777; padding: 10px; background-color: rgba(255,255,255, 0.8);");
     pre.id = "__probes";
     body.appendChild(pre);
  };


  // setInterval(displayProbes, 1000);
  clear();

})();


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/probes.js'] = "/*\n * JavaScript probing framework by Sam Saffron\n * MIT license\n *\n *\n * Examples:\n *\n *  someFunction = window.probes.measure(someFunction, {\n *    name: \"somename\" // or function(args) { return \"name\"; },\n *    before: function(data, owner, args) {\n *      // if owner is true, we are not in a recursive function call.\n *      //\n *      // data contains the bucker of data already measuer\n *      // data.count \u003e= 0\n *      // data.time is the total time measured till now\n *      //\n *      // arguments contains the original arguments sent to the function\n *    },\n *    after: function(data, owner, args) {\n *      // same format as before\n *    }\n *  });\n *\n *\n *  // minimal\n *  someFunction = window.probes.measure(someFunction, \"someFunction\");\n *\n * */\n\n(function(){\n  var measure, clear;\n\n  clear = function() {\n    window.probes = {\n      clear: clear,\n      measure: measure,\n      displayProbes: displayProbes\n    };\n  };\n\n  measure = function(fn,options) {\n    // start is outside so we measure time around recursive calls properly\n    var start = null, nameParam, before, after;\n    if (!options) {\n      options = {};\n    }\n\n    if (typeof options === \"string\") {\n      nameParam = options;\n    }\n    else\n    {\n      nameParam = options.name;\n\n      if (nameParam === \"measure\" || nameParam === \"clear\") {\n        throw new Error(\"can not be called measure or clear\");\n      }\n\n      if (!nameParam)\n      {\n        throw new Error(\"you must specify the name option measure(fn, {name: 'some name'})\");\n      }\n\n      before = options.before;\n      after = options.after;\n    }\n\n    var now = (function(){\n      var perf = window.performance || {};\n      var time = perf.now || perf.mozNow || perf.webkitNow || perf.msNow || perf.oNow;\n      return time ? time.bind(perf) : function() { return new Date().getTime(); };\n    })();\n\n    return function() {\n      var name = nameParam;\n      if (typeof name === \"function\"){\n        name = nameParam(arguments);\n      }\n      var p = window.probes[name];\n      var owner = (!start);\n\n      if (before) {\n        // would like to avoid try catch so its optimised properly by chrome\n        before(p, owner, arguments);\n      }\n\n      if (p === undefined) {\n        window.probes[name] = {count: 0, time: 0, currentTime: 0};\n        p = window.probes[name];\n      }\n\n      var callStart;\n      if (owner) {\n        start = now();\n        callStart = start;\n      }\n      else if(after) {\n        callStart = now();\n      }\n\n      var r = fn.apply(this, arguments);\n      if (owner \u0026\u0026 start) {\n        p.time += now() - start;\n        start = null;\n      }\n      p.count += 1;\n\n      if (after) {\n        p.currentTime = now() - callStart;\n        // would like to avoid try catch so its optimised properly by chrome\n        after(p, owner, arguments);\n      }\n\n      return r;\n    };\n  };\n\n  var displayProbes = function(){\n     var pre;\n     var text = \"\";\n     var body = document.getElementsByTagName(\"body\")[0];\n\n     for(var prop in window.probes){\n       var probe = window.probes[prop];\n       if(probe \u0026\u0026 probe.count){\n          text += prop + \": \" + probe.time + \" ( \" + probe.count + \" )\\n\";\n       }\n     }\n\n     pre = document.getElementById(\"__probes\");\n\n     if(!body){\n       return;\n     }\n\n     if(pre){\n       pre.textContent = text;\n       pre.innerText = text;\n       return;\n     }\n\n     pre = document.createElement(\"pre\");\n\n     pre.textContent = text;\n     pre.innerText = text;\n     pre.setAttribute(\"style\", \"position: fixed; bottom: 25px; left: 50px; z-index: 99999; border: 1px solid #777; padding: 10px; background-color: rgba(255,255,255, 0.8);\");\n     pre.id = \"__probes\";\n     body.appendChild(pre);\n  };\n\n\n  // setInterval(displayProbes, 1000);\n  clear();\n\n})();\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  Build the BBCode for a Quote

  @class BBCode
  @namespace Discourse
  @module Discourse
**/

Discourse.Quote = {

  REGEXP: /\[quote=([^\]]*)\]((?:[\s\S](?!\[quote=[^\]]*\]))*?)\[\/quote\]/im,

  /**
    Build the BBCode quote around the selected text

    @method buildQuote
    @param {Discourse.Post} post The post we are quoting
    @param {String} contents The text selected
  **/
  build: function(post, contents) {
    var contents_hashed, result, sansQuotes, stripped, stripped_hashed, tmp;
    if (!contents) contents = "";

    sansQuotes = contents.replace(this.REGEXP, '').trim();
    if (sansQuotes.length === 0) return "";

    // Escape the content of the quote
    sansQuotes = sansQuotes.replace(/</g, "&lt;")
                           .replace(/>/g, "&gt;");

    result = "[quote=\"" + post.get('username') + ", post:" + post.get('post_number') + ", topic:" + post.get('topic_id');

    /* Strip the HTML from cooked */
    tmp = document.createElement('div');
    tmp.innerHTML = post.get('cooked');
    stripped = tmp.textContent || tmp.innerText;

    /*
      Let's remove any non alphanumeric characters as a kind of hash. Yes it's
      not accurate but it should work almost every time we need it to. It would be unlikely
      that the user would quote another post that matches in exactly this way.
    */
    stripped_hashed = stripped.replace(/[^a-zA-Z0-9]/g, '');
    contents_hashed = contents.replace(/[^a-zA-Z0-9]/g, '');

    /* If the quote is the full message, attribute it as such */
    if (stripped_hashed === contents_hashed) result += ", full:true";
    result += "\"]\n" + sansQuotes + "\n[/quote]\n\n";

    return result;
  }

};


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/quote.js'] = "/**\n  Build the BBCode for a Quote\n\n  @class BBCode\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.Quote = {\n\n  REGEXP: /\\[quote=([^\\]]*)\\]((?:[\\s\\S](?!\\[quote=[^\\]]*\\]))*?)\\[\\/quote\\]/im,\n\n  /**\n    Build the BBCode quote around the selected text\n\n    @method buildQuote\n    @param {Discourse.Post} post The post we are quoting\n    @param {String} contents The text selected\n  **/\n  build: function(post, contents) {\n    var contents_hashed, result, sansQuotes, stripped, stripped_hashed, tmp;\n    if (!contents) contents = \"\";\n\n    sansQuotes = contents.replace(this.REGEXP, '').trim();\n    if (sansQuotes.length === 0) return \"\";\n\n    // Escape the content of the quote\n    sansQuotes = sansQuotes.replace(/\u003c/g, \"\u0026lt;\")\n                           .replace(/\u003e/g, \"\u0026gt;\");\n\n    result = \"[quote=\\\"\" + post.get('username') + \", post:\" + post.get('post_number') + \", topic:\" + post.get('topic_id');\n\n    /* Strip the HTML from cooked */\n    tmp = document.createElement('div');\n    tmp.innerHTML = post.get('cooked');\n    stripped = tmp.textContent || tmp.innerText;\n\n    /*\n      Let's remove any non alphanumeric characters as a kind of hash. Yes it's\n      not accurate but it should work almost every time we need it to. It would be unlikely\n      that the user would quote another post that matches in exactly this way.\n    */\n    stripped_hashed = stripped.replace(/[^a-zA-Z0-9]/g, '');\n    contents_hashed = contents.replace(/[^a-zA-Z0-9]/g, '');\n\n    /* If the quote is the full message, attribute it as such */\n    if (stripped_hashed === contents_hashed) result += \", full:true\";\n    result += \"\\\"]\\n\" + sansQuotes + \"\\n[/quote]\\n\\n\";\n\n    return result;\n  }\n\n};\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  We use this class to track how long posts in a topic are on the screen.

  @class ScreenTrack
  @extends Ember.Object
  @namespace Discourse
  @module Discourse
**/


var PAUSE_UNLESS_SCROLLED = 1000 * 60 * 3,
    MAX_TRACKING_TIME = 1000 * 60 * 6;

Discourse.ScreenTrack = Ember.Object.extend({

  init: function() {
    this.reset();
  },

  start: function(topicId, topicController) {
    var currentTopicId = this.get('topicId');
    if (currentTopicId && (currentTopicId !== topicId)) {
      this.tick();
      this.flush();
    }

    this.reset();

    // Create an interval timer if we don't have one.
    if (!this.get('interval')) {
      var self = this;
      this.set('interval', setInterval(function () {
        self.tick();
      }, 1000));

      $(window).on('scroll.screentrack', function(){self.scrolled()});
    }

    this.set('topicId', topicId);
    this.set('topicController', topicController);
  },

  stop: function() {
    if(!this.get('topicId')) {
      // already stopped no need to "extra stop"
      return;
    }
    $(window).off('scroll.screentrack');
    this.tick();
    this.flush();
    this.reset();
    this.set('topicId', null);
    this.set('topicController', null);
    if (this.get('interval')) {
      clearInterval(this.get('interval'));
      this.set('interval', null);
    }
  },

  track: function(elementId, postNumber) {
    this.get('timings')["#" + elementId] = {
      time: 0,
      postNumber: postNumber
    };
  },

  stopTracking: function(elementId) {
    delete this.get('timings')['#' + elementId];
  },

  // Reset our timers
  reset: function() {
    this.setProperties({
      lastTick: new Date().getTime(),
      lastScrolled: new Date().getTime(),
      lastFlush: 0,
      cancelled: false,
      timings: {},
      totalTimings: {},
      topicTime: 0
    });
  },

  scrolled: function() {
    this.set('lastScrolled', new Date().getTime());
  },

  flush: function() {
    if (this.get('cancelled')) { return; }

    // We don't log anything unless we're logged in
    if (!Discourse.User.current()) return;

    var newTimings = {},
        totalTimings = this.get('totalTimings'),
        self = this;

    _.each(this.get('timings'), function(timing) {
      if (!totalTimings[timing.postNumber])
        totalTimings[timing.postNumber] = 0;

      if (timing.time > 0 && totalTimings[timing.postNumber] < MAX_TRACKING_TIME) {
        totalTimings[timing.postNumber] += timing.time;
        newTimings[timing.postNumber] = timing.time;
      }
      timing.time = 0;
    });

    var topicId = parseInt(this.get('topicId'), 10),
        highestSeen = 0;

    _.each(newTimings, function(time,postNumber) {
      highestSeen = Math.max(highestSeen, parseInt(postNumber, 10));
    });

    var highestSeenByTopic = Discourse.Session.currentProp('highestSeenByTopic');
    if ((highestSeenByTopic[topicId] || 0) < highestSeen) {
      highestSeenByTopic[topicId] = highestSeen;
    }

    Discourse.TopicTrackingState.current().updateSeen(topicId, highestSeen);

    if (!$.isEmptyObject(newTimings)) {
      Discourse.ajax('/topics/timings', {
        data: {
          timings: newTimings,
          topic_time: this.get('topicTime'),
          topic_id: topicId
        },
        cache: false,
        type: 'POST',
        headers: {
          'X-SILENCE-LOGGER': 'true'
        }
      }).then(function(){
        var controller = self.get('topicController');
        if(controller){
          var postNumbers = Object.keys(newTimings).map(function(v){
            return parseInt(v,10);
          });
          controller.readPosts(topicId, postNumbers);
        }
      });

      this.set('topicTime', 0);
    }
    this.set('lastFlush', 0);
  },

  tick: function() {

    // If the user hasn't scrolled the browser in a long time, stop tracking time read
    var sinceScrolled = new Date().getTime() - this.get('lastScrolled');
    if (sinceScrolled > PAUSE_UNLESS_SCROLLED) {
      return;
    }

    var diff = new Date().getTime() - this.get('lastTick');
    this.set('lastFlush', this.get('lastFlush') + diff);
    this.set('lastTick', new Date().getTime());

    var totalTimings = this.get('totalTimings'), timings = this.get('timings');
    var nextFlush = Discourse.SiteSettings.flush_timings_secs * 1000;

    // rush new post numbers
    var rush = _.any(_.filter(timings, function(t){return t.time>0;}), function(t){
      return !totalTimings[t.postNumber];
    });

    if (this.get('lastFlush') > nextFlush || rush) {
      this.flush();
    }

    // Don't track timings if we're not in focus
    if (!Discourse.get("hasFocus")) return;

    this.set('topicTime', this.get('topicTime') + diff);
    var docViewTop = $(window).scrollTop() + $('header').height(),
        docViewBottom = docViewTop + $(window).height();

    // TODO: Eyeline has a smarter more accurate function here. It's bad to do jQuery
    // in a model like component, so we should refactor this out later.
    _.each(this.get('timings'),function(timing,id) {
      var $element = $(id);
      if ($element.length === 1) {
        var elemTop = $element.offset().top,
            elemBottom = elemTop + $element.height();

        // If part of the element is on the screen, increase the counter
        if (((docViewTop <= elemTop && elemTop <= docViewBottom)) || ((docViewTop <= elemBottom && elemBottom <= docViewBottom))) {
          timing.time = timing.time + diff;
        }
      }
    });
  }
});


Discourse.ScreenTrack.reopenClass(Discourse.Singleton);



// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/screen_track.js'] = "/**\n  We use this class to track how long posts in a topic are on the screen.\n\n  @class ScreenTrack\n  @extends Ember.Object\n  @namespace Discourse\n  @module Discourse\n**/\n\n\nvar PAUSE_UNLESS_SCROLLED = 1000 * 60 * 3,\n    MAX_TRACKING_TIME = 1000 * 60 * 6;\n\nDiscourse.ScreenTrack = Ember.Object.extend({\n\n  init: function() {\n    this.reset();\n  },\n\n  start: function(topicId, topicController) {\n    var currentTopicId = this.get('topicId');\n    if (currentTopicId \u0026\u0026 (currentTopicId !== topicId)) {\n      this.tick();\n      this.flush();\n    }\n\n    this.reset();\n\n    // Create an interval timer if we don't have one.\n    if (!this.get('interval')) {\n      var self = this;\n      this.set('interval', setInterval(function () {\n        self.tick();\n      }, 1000));\n\n      $(window).on('scroll.screentrack', function(){self.scrolled()});\n    }\n\n    this.set('topicId', topicId);\n    this.set('topicController', topicController);\n  },\n\n  stop: function() {\n    if(!this.get('topicId')) {\n      // already stopped no need to \"extra stop\"\n      return;\n    }\n    $(window).off('scroll.screentrack');\n    this.tick();\n    this.flush();\n    this.reset();\n    this.set('topicId', null);\n    this.set('topicController', null);\n    if (this.get('interval')) {\n      clearInterval(this.get('interval'));\n      this.set('interval', null);\n    }\n  },\n\n  track: function(elementId, postNumber) {\n    this.get('timings')[\"#\" + elementId] = {\n      time: 0,\n      postNumber: postNumber\n    };\n  },\n\n  stopTracking: function(elementId) {\n    delete this.get('timings')['#' + elementId];\n  },\n\n  // Reset our timers\n  reset: function() {\n    this.setProperties({\n      lastTick: new Date().getTime(),\n      lastScrolled: new Date().getTime(),\n      lastFlush: 0,\n      cancelled: false,\n      timings: {},\n      totalTimings: {},\n      topicTime: 0\n    });\n  },\n\n  scrolled: function() {\n    this.set('lastScrolled', new Date().getTime());\n  },\n\n  flush: function() {\n    if (this.get('cancelled')) { return; }\n\n    // We don't log anything unless we're logged in\n    if (!Discourse.User.current()) return;\n\n    var newTimings = {},\n        totalTimings = this.get('totalTimings'),\n        self = this;\n\n    _.each(this.get('timings'), function(timing) {\n      if (!totalTimings[timing.postNumber])\n        totalTimings[timing.postNumber] = 0;\n\n      if (timing.time \u003e 0 \u0026\u0026 totalTimings[timing.postNumber] \u003c MAX_TRACKING_TIME) {\n        totalTimings[timing.postNumber] += timing.time;\n        newTimings[timing.postNumber] = timing.time;\n      }\n      timing.time = 0;\n    });\n\n    var topicId = parseInt(this.get('topicId'), 10),\n        highestSeen = 0;\n\n    _.each(newTimings, function(time,postNumber) {\n      highestSeen = Math.max(highestSeen, parseInt(postNumber, 10));\n    });\n\n    var highestSeenByTopic = Discourse.Session.currentProp('highestSeenByTopic');\n    if ((highestSeenByTopic[topicId] || 0) \u003c highestSeen) {\n      highestSeenByTopic[topicId] = highestSeen;\n    }\n\n    Discourse.TopicTrackingState.current().updateSeen(topicId, highestSeen);\n\n    if (!$.isEmptyObject(newTimings)) {\n      Discourse.ajax('/topics/timings', {\n        data: {\n          timings: newTimings,\n          topic_time: this.get('topicTime'),\n          topic_id: topicId\n        },\n        cache: false,\n        type: 'POST',\n        headers: {\n          'X-SILENCE-LOGGER': 'true'\n        }\n      }).then(function(){\n        var controller = self.get('topicController');\n        if(controller){\n          var postNumbers = Object.keys(newTimings).map(function(v){\n            return parseInt(v,10);\n          });\n          controller.readPosts(topicId, postNumbers);\n        }\n      });\n\n      this.set('topicTime', 0);\n    }\n    this.set('lastFlush', 0);\n  },\n\n  tick: function() {\n\n    // If the user hasn't scrolled the browser in a long time, stop tracking time read\n    var sinceScrolled = new Date().getTime() - this.get('lastScrolled');\n    if (sinceScrolled \u003e PAUSE_UNLESS_SCROLLED) {\n      return;\n    }\n\n    var diff = new Date().getTime() - this.get('lastTick');\n    this.set('lastFlush', this.get('lastFlush') + diff);\n    this.set('lastTick', new Date().getTime());\n\n    var totalTimings = this.get('totalTimings'), timings = this.get('timings');\n    var nextFlush = Discourse.SiteSettings.flush_timings_secs * 1000;\n\n    // rush new post numbers\n    var rush = _.any(_.filter(timings, function(t){return t.time\u003e0;}), function(t){\n      return !totalTimings[t.postNumber];\n    });\n\n    if (this.get('lastFlush') \u003e nextFlush || rush) {\n      this.flush();\n    }\n\n    // Don't track timings if we're not in focus\n    if (!Discourse.get(\"hasFocus\")) return;\n\n    this.set('topicTime', this.get('topicTime') + diff);\n    var docViewTop = $(window).scrollTop() + $('header').height(),\n        docViewBottom = docViewTop + $(window).height();\n\n    // TODO: Eyeline has a smarter more accurate function here. It's bad to do jQuery\n    // in a model like component, so we should refactor this out later.\n    _.each(this.get('timings'),function(timing,id) {\n      var $element = $(id);\n      if ($element.length === 1) {\n        var elemTop = $element.offset().top,\n            elemBottom = elemTop + $element.height();\n\n        // If part of the element is on the screen, increase the counter\n        if (((docViewTop \u003c= elemTop \u0026\u0026 elemTop \u003c= docViewBottom)) || ((docViewTop \u003c= elemBottom \u0026\u0026 elemBottom \u003c= docViewBottom))) {\n          timing.time = timing.time + diff;\n        }\n      }\n    });\n  }\n});\n\n\nDiscourse.ScreenTrack.reopenClass(Discourse.Singleton);\n\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  This component helps with Searching

  @class Search
  @namespace Discourse
  @module Discourse
**/

Discourse.Search = {

  /**
    Search for a term, with an optional filter.

    @method forTerm
    @param {String} term The term to search for
    @param {Object} opts Options for searching
      @param {String} opts.typeFilter Filter our results to one type only
      @param {Ember.Object} opts.searchContext data to help searching within a context (say, a category or user)
    @return {Promise} a promise that resolves the search results
  **/
  forTerm: function(term, opts) {
    if (!opts) opts = {};

    // Only include the data we have
    var data = { term: term, include_blurbs: 'true' };
    if (opts.typeFilter) data.type_filter = opts.typeFilter;
    if (opts.searchForId) data.search_for_id = true;

    if (opts.searchContext) {
      data.search_context = {
        type: opts.searchContext.type,
        id: opts.searchContext.id
      };
    }

    var promise = Discourse.ajax('/search', { data: data });

    promise.then(function(results){
      // Topics might not be included
      if (!results.topics) { results.topics = []; }

      var topicMap = {};
      results.topics = results.topics.map(function(topic){
        topic = Discourse.Topic.create(topic);
        topicMap[topic.id] = topic;
        return topic;
      });

      results.posts = results.posts.map(function(post){
        post = Discourse.Post.create(post);
        post.set('topic', topicMap[post.topic_id]);
        return post;
      });

      results.users = results.users.map(function(user){
        user = Discourse.User.create(user);
        return user;
      });

      results.categories = results.categories.map(function(category){
        category = Discourse.Category.create(category);
        return category;
      });

      var r = results.grouped_search_result;
      results.resultTypes = [];

      // TODO: consider refactoring front end to take a better structure
      [['topic','posts'],['user','users'],['category','categories']].forEach(function(pair){
        var type = pair[0], name = pair[1];
        if(results[name].length > 0) {
          results.resultTypes.push({
            results: results[name],
            displayType: (opts.searchContext && opts.searchContext.type === 'topic' && type === 'topic') ? 'post' : type,
            type: type,
            more: r['more_' + name]
          });
        }
      });

      var noResults = !!((results.topics.length === 0) && (results.posts.length === 0) && (results.categories.length === 0));

      return noResults ? null : Em.Object.create(results);
    });

    return promise;
  }

};



// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/search.js'] = "/**\n  This component helps with Searching\n\n  @class Search\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.Search = {\n\n  /**\n    Search for a term, with an optional filter.\n\n    @method forTerm\n    @param {String} term The term to search for\n    @param {Object} opts Options for searching\n      @param {String} opts.typeFilter Filter our results to one type only\n      @param {Ember.Object} opts.searchContext data to help searching within a context (say, a category or user)\n    @return {Promise} a promise that resolves the search results\n  **/\n  forTerm: function(term, opts) {\n    if (!opts) opts = {};\n\n    // Only include the data we have\n    var data = { term: term, include_blurbs: 'true' };\n    if (opts.typeFilter) data.type_filter = opts.typeFilter;\n    if (opts.searchForId) data.search_for_id = true;\n\n    if (opts.searchContext) {\n      data.search_context = {\n        type: opts.searchContext.type,\n        id: opts.searchContext.id\n      };\n    }\n\n    var promise = Discourse.ajax('/search', { data: data });\n\n    promise.then(function(results){\n      // Topics might not be included\n      if (!results.topics) { results.topics = []; }\n\n      var topicMap = {};\n      results.topics = results.topics.map(function(topic){\n        topic = Discourse.Topic.create(topic);\n        topicMap[topic.id] = topic;\n        return topic;\n      });\n\n      results.posts = results.posts.map(function(post){\n        post = Discourse.Post.create(post);\n        post.set('topic', topicMap[post.topic_id]);\n        return post;\n      });\n\n      results.users = results.users.map(function(user){\n        user = Discourse.User.create(user);\n        return user;\n      });\n\n      results.categories = results.categories.map(function(category){\n        category = Discourse.Category.create(category);\n        return category;\n      });\n\n      var r = results.grouped_search_result;\n      results.resultTypes = [];\n\n      // TODO: consider refactoring front end to take a better structure\n      [['topic','posts'],['user','users'],['category','categories']].forEach(function(pair){\n        var type = pair[0], name = pair[1];\n        if(results[name].length \u003e 0) {\n          results.resultTypes.push({\n            results: results[name],\n            displayType: (opts.searchContext \u0026\u0026 opts.searchContext.type === 'topic' \u0026\u0026 type === 'topic') ? 'post' : type,\n            type: type,\n            more: r['more_' + name]\n          });\n        }\n      });\n\n      var noResults = !!((results.topics.length === 0) \u0026\u0026 (results.posts.length === 0) \u0026\u0026 (results.categories.length === 0));\n\n      return noResults ? null : Em.Object.create(results);\n    });\n\n    return promise;\n  }\n\n};\n\n";
define("discourse/lib/static-route-builder", 
  ["exports"],
  function(__exports__) {
    "use strict";
    var configs = {
      'faq': 'faq_url',
      'tos': 'tos_url',
      'privacy': 'privacy_policy_url'
    };

    __exports__["default"] = function(page) {
      return Discourse.Route.extend({
        renderTemplate: function() {
          this.render('static');
        },

        beforeModel: function(transition) {
          var configKey = configs[page];
          if (configKey && Discourse.SiteSettings[configKey].length > 0) {
            transition.abort();
            Discourse.URL.redirectTo(Discourse.SiteSettings[configKey]);
          }
        },

        activate: function() {
          this._super();

          // Scroll to an element if exists
          Discourse.URL.scrollToId(document.location.hash);
        },

        model: function() {
          return Discourse.StaticPage.find(page);
        },

        setupController: function(controller, model) {
          this.controllerFor('static').set('model', model);
        }
      });
    }
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/static-route-builder.js'] = "define(\"discourse/lib/static-route-builder\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var configs = {\n      'faq': 'faq_url',\n      'tos': 'tos_url',\n      'privacy': 'privacy_policy_url'\n    };\n\n    __exports__[\"default\"] = function(page) {\n      return Discourse.Route.extend({\n        renderTemplate: function() {\n          this.render('static');\n        },\n\n        beforeModel: function(transition) {\n          var configKey = configs[page];\n          if (configKey \u0026\u0026 Discourse.SiteSettings[configKey].length \u003e 0) {\n            transition.abort();\n            Discourse.URL.redirectTo(Discourse.SiteSettings[configKey]);\n          }\n        },\n\n        activate: function() {\n          this._super();\n\n          // Scroll to an element if exists\n          Discourse.URL.scrollToId(document.location.hash);\n        },\n\n        model: function() {\n          return Discourse.StaticPage.find(page);\n        },\n\n        setupController: function(controller, model) {\n          this.controllerFor('static').set('model', model);\n        }\n      });\n    }\n  });";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/*global hljs:true */

/**
  Helper object for syntax highlighting. Uses highlight.js which is loaded on demand.

  @class SyntaxHighlighting
  @namespace Discourse
  @module Discourse
**/

Discourse.SyntaxHighlighting = {

  /**
    Apply syntax highlighting to a jQuery element

    @method apply
    @param {jQuery.selector} $elem The element we want to apply our highlighting to
  **/
  apply: function($elem) {
    var selector = Discourse.SiteSettings.autohighlight_all_code ? 'pre code' : 'pre code[class]';
    $(selector, $elem).each(function(i, e) {
      return $LAB.script("/javascripts/highlight.pack.js").wait(function() {
        return hljs.highlightBlock(e);
      });
    });
  }
};


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/syntax_highlighting.js'] = "/*global hljs:true */\n\n/**\n  Helper object for syntax highlighting. Uses highlight.js which is loaded on demand.\n\n  @class SyntaxHighlighting\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.SyntaxHighlighting = {\n\n  /**\n    Apply syntax highlighting to a jQuery element\n\n    @method apply\n    @param {jQuery.selector} $elem The element we want to apply our highlighting to\n  **/\n  apply: function($elem) {\n    var selector = Discourse.SiteSettings.autohighlight_all_code ? 'pre code' : 'pre code[class]';\n    $(selector, $elem).each(function(i, e) {\n      return $LAB.script(\"/javascripts/highlight.pack.js\").wait(function() {\n        return hljs.highlightBlock(e);\n      });\n    });\n  }\n};\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/*global LockOn:true*/
/**
  URL related functions.

  @class URL
  @namespace Discourse
  @module Discourse
**/


var jumpScheduled = false;

Discourse.URL = Em.Object.createWithMixins({

  // Used for matching a topic
  TOPIC_REGEXP: /\/t\/([^\/]+)\/(\d+)\/?(\d+)?/,

  isJumpScheduled: function() {
    return jumpScheduled;
  },

  /**
    Jumps to a particular post in the stream
  **/
  jumpToPost: function(postNumber) {
    var holderId = '#post-cloak-' + postNumber;

    Em.run.schedule('afterRender', function() {
      if (postNumber === 1) {
        $(window).scrollTop(0);
        return;
      }

      new LockOn(holderId, {offsetCalculator: function() {
        var $header = $('header'),
            $title = $('#topic-title'),
            windowHeight = $(window).height() - $title.height(),
            expectedOffset = $title.height() - $header.find('.contents').height() + (windowHeight / 5);

        return $header.outerHeight(true) + ((expectedOffset < 0) ? 0 : expectedOffset);
      }}).lock();
    });
  },

  /**
    Browser aware replaceState. Will only be invoked if the browser supports it.

    @method replaceState
    @param {String} path The path we are replacing our history state with.
  **/
  replaceState: function(path) {
    if (window.history &&
        window.history.pushState &&
        window.history.replaceState &&
        !navigator.userAgent.match(/((iPod|iPhone|iPad).+\bOS\s+[1-4]|WebApps\/.+CFNetwork)/) &&
        (window.location.pathname !== path)) {

        // Always use replaceState in the next runloop to prevent weird routes changing
        // while URLs are loading. For example, while a topic loads it sets `currentPost`
        // which triggers a replaceState even though the topic hasn't fully loaded yet!
        Em.run.next(function() {
          var location = Discourse.URL.get('router.location');
          if (location && location.replaceURL) {

            if (Ember.FEATURES.isEnabled("query-params-new")) {
              var search = Discourse.__container__.lookup('router:main').get('location.location.search') || '';
              path += search;
            }
            location.replaceURL(path);
          }
        });
    }
  },

  // Scroll to the same page, different anchor
  scrollToId: function(id) {
    if (Em.isEmpty(id)) { return; }

    jumpScheduled = true;
    Em.run.schedule('afterRender', function() {
      var $elem = $(id);
      if ($elem.length === 0) {
        $elem = $("[name=" + id.replace('#', ''));
      }
      if ($elem.length > 0) {
        $('html,body').scrollTop($elem.offset().top - $('header').height() - 15);
        jumpScheduled = false;
      }
    });
  },

  /**
    Our custom routeTo method is used to intelligently overwrite default routing
    behavior.

    It contains the logic necessary to route within a topic using replaceState to
    keep the history intact.

    @method routeTo
    @param {String} path The path we are routing to.
  **/
  routeTo: function(path) {

    if (Em.isEmpty(path)) { return; }

    if(Discourse.get("requiresRefresh")){
      document.location.href = path;
      return;
    }

    // Protocol relative URLs
    if (path.indexOf('//') === 0) {
      document.location = path;
      return;
    }

    // Scroll to the same page, different anchor
    if (path.indexOf('#') === 0) {
      this.scrollToId(path);
      return;
    }

    var oldPath = window.location.pathname;
    path = path.replace(/(https?\:)?\/\/[^\/]+/, '');

    // handle prefixes
    if (path.match(/^\//)) {
      var rootURL = (Discourse.BaseUri === undefined ? "/" : Discourse.BaseUri);
      rootURL = rootURL.replace(/\/$/, '');
      path = path.replace(rootURL, '');
    }


    // Rewrite /my/* urls
    if (path.indexOf('/my/') === 0) {
      var currentUser = Discourse.User.current();
      if (currentUser) {
        path = path.replace('/my/', '/users/' + currentUser.get('username_lower') + "/");
      } else {
        document.location.href = "/404";
        return;
      }
    }

    if (this.navigatedToPost(oldPath, path)) { return; }
    // Schedule a DOM cleanup event
    Em.run.scheduleOnce('afterRender', Discourse.Route, 'cleanDOM');

    // TODO: Extract into rules we can inject into the URL handler
    if (this.navigatedToHome(oldPath, path)) { return; }

    if (oldPath === path) {
      // If navigating to the same path send an app event. Views can watch it
      // and tell their controllers to refresh
      this.appEvents.trigger('url:refresh');
    }

    return this.handleURL(path);
  },

  /**
    Redirect to a URL.
    This has been extracted so it can be tested.

    @method redirectTo
  **/
  redirectTo: function(url) {
    window.location = Discourse.getURL(url);
  },

  /**
   * Determines whether a URL is internal or not
   *
   * @method isInternal
   * @param {String} url
  **/
  isInternal: function(url) {
    if (url && url.length) {
      if (url.indexOf('#') === 0) { return true; }
      if (url.indexOf('/') === 0) { return true; }
      if (url.indexOf(this.origin()) === 0) { return true; }
      if (url.replace(/^http/, 'https').indexOf(this.origin()) === 0) { return true; }
      if (url.replace(/^https/, 'http').indexOf(this.origin()) === 0) { return true; }
    }
    return false;
  },

  /**
    @private

    If the URL is in the topic form, /t/something/:topic_id/:post_number
    then we want to apply some special logic. If the post_number changes within the
    same topic, use replaceState and instruct our controller to load more posts.

    @method navigatedToPost
    @param {String} oldPath the previous path we were on
    @param {String} path the path we're navigating to
  **/
  navigatedToPost: function(oldPath, path) {
    var newMatches = this.TOPIC_REGEXP.exec(path),
        newTopicId = newMatches ? newMatches[2] : null;

    if (newTopicId) {
      var oldMatches = this.TOPIC_REGEXP.exec(oldPath),
          oldTopicId = oldMatches ? oldMatches[2] : null;

      // If the topic_id is the same
      if (oldTopicId === newTopicId) {
        Discourse.URL.replaceState(path);

        var container = Discourse.__container__,
            topicController = container.lookup('controller:topic'),
            topicProgressController = container.lookup('controller:topic-progress'),
            opts = {},
            postStream = topicController.get('postStream');

        if (newMatches[3]) opts.nearPost = newMatches[3];
        if (path.match(/last$/)) { opts.nearPost = topicController.get('highest_post_number'); }
        var closest = opts.nearPost || 1;

        postStream.refresh(opts).then(function() {
          topicController.setProperties({
            currentPost: closest,
            highlightOnInsert: closest,
            enteredAt: new Date().getTime().toString()
          });
          var closestPost = postStream.closestPostForPostNumber(closest),
              progress = postStream.progressIndexOfPost(closestPost);
          topicProgressController.set('progressPosition', progress);
          Discourse.PostView.considerHighlighting(topicController, closest);
        }).then(function() {
          Discourse.URL.jumpToPost(closest);
        });

        // Abort routing, we have replaced our state.
        return true;
      }
    }

    return false;
  },

  /**
    @private

    Handle the custom case of routing to the root path from itself.

    @param {String} oldPath the previous path we were on
    @param {String} path the path we're navigating to
  **/
  navigatedToHome: function(oldPath, path) {
    var homepage = Discourse.Utilities.defaultHomepage();

    if (window.history && window.history.pushState && path === "/" && (oldPath === "/" || oldPath === "/" + homepage)) {
      this.appEvents.trigger('url:refresh');
      return true;
    }

    return false;
  },

  /**
    @private

    Get the origin of the current location.
    This has been extracted so it can be tested.

    @method origin
  **/
  origin: function() {
    return window.location.origin;
  },

  /**
    @private

    Get a handle on the application's router. Note that currently it uses `__container__` which is not
    advised but there is no other way to access the router.

    @property router
  **/
  router: function() {
    return Discourse.__container__.lookup('router:main');
  }.property(),

  /**
    @private

    Get a controller. Note that currently it uses `__container__` which is not
    advised but there is no other way to access the router.

    @method controllerFor
    @param {String} name the name of the controller
  **/
  controllerFor: function(name) {
    return Discourse.__container__.lookup('controller:' + name);
  },

  /**
    @private

    Be wary of looking up the router. In this case, we have links in our
    HTML, say form compiled markdown posts, that need to be routed.

    @method handleURL
    @param {String} path the url to handle
  **/
  handleURL: function(path) {
    var router = this.get('router');
    router.router.updateURL(path);

    var split = path.split('#'),
        elementId;

    if (split.length === 2) {
      path = split[0];
      elementId = split[1];
    }

    var transition = router.handleURL(path);
    transition.promise.then(function() {
      if (elementId) {

        jumpScheduled = true;
        Em.run.next('afterRender', function() {
          var offset = $('#' + elementId).offset();
          if (offset && offset.top) {
            $('html, body').scrollTop(offset.top - $('header').height() - 10);
            jumpScheduled = false;
          }
        });
      }
    });
  }

});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/url.js'] = "/*global LockOn:true*/\n/**\n  URL related functions.\n\n  @class URL\n  @namespace Discourse\n  @module Discourse\n**/\n\n\nvar jumpScheduled = false;\n\nDiscourse.URL = Em.Object.createWithMixins({\n\n  // Used for matching a topic\n  TOPIC_REGEXP: /\\/t\\/([^\\/]+)\\/(\\d+)\\/?(\\d+)?/,\n\n  isJumpScheduled: function() {\n    return jumpScheduled;\n  },\n\n  /**\n    Jumps to a particular post in the stream\n  **/\n  jumpToPost: function(postNumber) {\n    var holderId = '#post-cloak-' + postNumber;\n\n    Em.run.schedule('afterRender', function() {\n      if (postNumber === 1) {\n        $(window).scrollTop(0);\n        return;\n      }\n\n      new LockOn(holderId, {offsetCalculator: function() {\n        var $header = $('header'),\n            $title = $('#topic-title'),\n            windowHeight = $(window).height() - $title.height(),\n            expectedOffset = $title.height() - $header.find('.contents').height() + (windowHeight / 5);\n\n        return $header.outerHeight(true) + ((expectedOffset \u003c 0) ? 0 : expectedOffset);\n      }}).lock();\n    });\n  },\n\n  /**\n    Browser aware replaceState. Will only be invoked if the browser supports it.\n\n    @method replaceState\n    @param {String} path The path we are replacing our history state with.\n  **/\n  replaceState: function(path) {\n    if (window.history \u0026\u0026\n        window.history.pushState \u0026\u0026\n        window.history.replaceState \u0026\u0026\n        !navigator.userAgent.match(/((iPod|iPhone|iPad).+\\bOS\\s+[1-4]|WebApps\\/.+CFNetwork)/) \u0026\u0026\n        (window.location.pathname !== path)) {\n\n        // Always use replaceState in the next runloop to prevent weird routes changing\n        // while URLs are loading. For example, while a topic loads it sets `currentPost`\n        // which triggers a replaceState even though the topic hasn't fully loaded yet!\n        Em.run.next(function() {\n          var location = Discourse.URL.get('router.location');\n          if (location \u0026\u0026 location.replaceURL) {\n\n            if (Ember.FEATURES.isEnabled(\"query-params-new\")) {\n              var search = Discourse.__container__.lookup('router:main').get('location.location.search') || '';\n              path += search;\n            }\n            location.replaceURL(path);\n          }\n        });\n    }\n  },\n\n  // Scroll to the same page, different anchor\n  scrollToId: function(id) {\n    if (Em.isEmpty(id)) { return; }\n\n    jumpScheduled = true;\n    Em.run.schedule('afterRender', function() {\n      var $elem = $(id);\n      if ($elem.length === 0) {\n        $elem = $(\"[name=\" + id.replace('#', ''));\n      }\n      if ($elem.length \u003e 0) {\n        $('html,body').scrollTop($elem.offset().top - $('header').height() - 15);\n        jumpScheduled = false;\n      }\n    });\n  },\n\n  /**\n    Our custom routeTo method is used to intelligently overwrite default routing\n    behavior.\n\n    It contains the logic necessary to route within a topic using replaceState to\n    keep the history intact.\n\n    @method routeTo\n    @param {String} path The path we are routing to.\n  **/\n  routeTo: function(path) {\n\n    if (Em.isEmpty(path)) { return; }\n\n    if(Discourse.get(\"requiresRefresh\")){\n      document.location.href = path;\n      return;\n    }\n\n    // Protocol relative URLs\n    if (path.indexOf('//') === 0) {\n      document.location = path;\n      return;\n    }\n\n    // Scroll to the same page, different anchor\n    if (path.indexOf('#') === 0) {\n      this.scrollToId(path);\n      return;\n    }\n\n    var oldPath = window.location.pathname;\n    path = path.replace(/(https?\\:)?\\/\\/[^\\/]+/, '');\n\n    // handle prefixes\n    if (path.match(/^\\//)) {\n      var rootURL = (Discourse.BaseUri === undefined ? \"/\" : Discourse.BaseUri);\n      rootURL = rootURL.replace(/\\/$/, '');\n      path = path.replace(rootURL, '');\n    }\n\n\n    // Rewrite /my/* urls\n    if (path.indexOf('/my/') === 0) {\n      var currentUser = Discourse.User.current();\n      if (currentUser) {\n        path = path.replace('/my/', '/users/' + currentUser.get('username_lower') + \"/\");\n      } else {\n        document.location.href = \"/404\";\n        return;\n      }\n    }\n\n    if (this.navigatedToPost(oldPath, path)) { return; }\n    // Schedule a DOM cleanup event\n    Em.run.scheduleOnce('afterRender', Discourse.Route, 'cleanDOM');\n\n    // TODO: Extract into rules we can inject into the URL handler\n    if (this.navigatedToHome(oldPath, path)) { return; }\n\n    if (oldPath === path) {\n      // If navigating to the same path send an app event. Views can watch it\n      // and tell their controllers to refresh\n      this.appEvents.trigger('url:refresh');\n    }\n\n    return this.handleURL(path);\n  },\n\n  /**\n    Redirect to a URL.\n    This has been extracted so it can be tested.\n\n    @method redirectTo\n  **/\n  redirectTo: function(url) {\n    window.location = Discourse.getURL(url);\n  },\n\n  /**\n   * Determines whether a URL is internal or not\n   *\n   * @method isInternal\n   * @param {String} url\n  **/\n  isInternal: function(url) {\n    if (url \u0026\u0026 url.length) {\n      if (url.indexOf('#') === 0) { return true; }\n      if (url.indexOf('/') === 0) { return true; }\n      if (url.indexOf(this.origin()) === 0) { return true; }\n      if (url.replace(/^http/, 'https').indexOf(this.origin()) === 0) { return true; }\n      if (url.replace(/^https/, 'http').indexOf(this.origin()) === 0) { return true; }\n    }\n    return false;\n  },\n\n  /**\n    @private\n\n    If the URL is in the topic form, /t/something/:topic_id/:post_number\n    then we want to apply some special logic. If the post_number changes within the\n    same topic, use replaceState and instruct our controller to load more posts.\n\n    @method navigatedToPost\n    @param {String} oldPath the previous path we were on\n    @param {String} path the path we're navigating to\n  **/\n  navigatedToPost: function(oldPath, path) {\n    var newMatches = this.TOPIC_REGEXP.exec(path),\n        newTopicId = newMatches ? newMatches[2] : null;\n\n    if (newTopicId) {\n      var oldMatches = this.TOPIC_REGEXP.exec(oldPath),\n          oldTopicId = oldMatches ? oldMatches[2] : null;\n\n      // If the topic_id is the same\n      if (oldTopicId === newTopicId) {\n        Discourse.URL.replaceState(path);\n\n        var container = Discourse.__container__,\n            topicController = container.lookup('controller:topic'),\n            topicProgressController = container.lookup('controller:topic-progress'),\n            opts = {},\n            postStream = topicController.get('postStream');\n\n        if (newMatches[3]) opts.nearPost = newMatches[3];\n        if (path.match(/last$/)) { opts.nearPost = topicController.get('highest_post_number'); }\n        var closest = opts.nearPost || 1;\n\n        postStream.refresh(opts).then(function() {\n          topicController.setProperties({\n            currentPost: closest,\n            highlightOnInsert: closest,\n            enteredAt: new Date().getTime().toString()\n          });\n          var closestPost = postStream.closestPostForPostNumber(closest),\n              progress = postStream.progressIndexOfPost(closestPost);\n          topicProgressController.set('progressPosition', progress);\n          Discourse.PostView.considerHighlighting(topicController, closest);\n        }).then(function() {\n          Discourse.URL.jumpToPost(closest);\n        });\n\n        // Abort routing, we have replaced our state.\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n    @private\n\n    Handle the custom case of routing to the root path from itself.\n\n    @param {String} oldPath the previous path we were on\n    @param {String} path the path we're navigating to\n  **/\n  navigatedToHome: function(oldPath, path) {\n    var homepage = Discourse.Utilities.defaultHomepage();\n\n    if (window.history \u0026\u0026 window.history.pushState \u0026\u0026 path === \"/\" \u0026\u0026 (oldPath === \"/\" || oldPath === \"/\" + homepage)) {\n      this.appEvents.trigger('url:refresh');\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n    @private\n\n    Get the origin of the current location.\n    This has been extracted so it can be tested.\n\n    @method origin\n  **/\n  origin: function() {\n    return window.location.origin;\n  },\n\n  /**\n    @private\n\n    Get a handle on the application's router. Note that currently it uses `__container__` which is not\n    advised but there is no other way to access the router.\n\n    @property router\n  **/\n  router: function() {\n    return Discourse.__container__.lookup('router:main');\n  }.property(),\n\n  /**\n    @private\n\n    Get a controller. Note that currently it uses `__container__` which is not\n    advised but there is no other way to access the router.\n\n    @method controllerFor\n    @param {String} name the name of the controller\n  **/\n  controllerFor: function(name) {\n    return Discourse.__container__.lookup('controller:' + name);\n  },\n\n  /**\n    @private\n\n    Be wary of looking up the router. In this case, we have links in our\n    HTML, say form compiled markdown posts, that need to be routed.\n\n    @method handleURL\n    @param {String} path the url to handle\n  **/\n  handleURL: function(path) {\n    var router = this.get('router');\n    router.router.updateURL(path);\n\n    var split = path.split('#'),\n        elementId;\n\n    if (split.length === 2) {\n      path = split[0];\n      elementId = split[1];\n    }\n\n    var transition = router.handleURL(path);\n    transition.promise.then(function() {\n      if (elementId) {\n\n        jumpScheduled = true;\n        Em.run.next('afterRender', function() {\n          var offset = $('#' + elementId).offset();\n          if (offset \u0026\u0026 offset.top) {\n            $('html, body').scrollTop(offset.top - $('header').height() - 10);\n            jumpScheduled = false;\n          }\n        });\n      }\n    });\n  }\n\n});\n";
define("discourse/lib/user-search", 
  ["discourse/lib/autocomplete","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var CANCELLED_STATUS = __dependency1__.CANCELLED_STATUS;

    var cache = {},
        cacheTopicId,
        cacheTime,
        currentTerm,
        oldSearch;

    function performSearch(term, topicId, includeGroups, resultsFn) {
      var cached = cache[term];
      if (cached) {
        resultsFn(cached);
        return;
      }

      // need to be able to cancel this
      oldSearch = $.ajax(Discourse.getURL('/users/search/users'), {
        data: { term: term,
                topic_id: topicId,
                include_groups: includeGroups }
      });

      var returnVal = CANCELLED_STATUS;

      oldSearch.then(function (r) {
        cache[term] = r;
        cacheTime = new Date();
        // If there is a newer search term, return null
        if (term === currentTerm) { returnVal = r; }

      }).always(function(){
        oldSearch = null;
        resultsFn(returnVal);
      });
    }

    var debouncedSearch = _.debounce(performSearch, 300);

    function organizeResults(r, options) {
      if (r === CANCELLED_STATUS) { return r; }

      var exclude = options.exclude || [],
          limit = options.limit || 5,
          users = [],
          groups = [],
          results = [];

      if (r.users) {
        r.users.every(function(u) {
          if (exclude.indexOf(u.username) === -1) {
            users.push(u);
            results.push(u);
          }
          return results.length <= limit;
        });
      }

      if (r.groups) {
        r.groups.every(function(g) {
          if (results.length > limit) return false;
          if (exclude.indexOf(g.name) === -1) {
            groups.push(g);
            results.push(g);
          }
          return true;
        });
      }

      results.users = users;
      results.groups = groups;
      return results;
    }


    __exports__["default"] = function userSearch(options) {
      var term = options.term || "",
          includeGroups = !!options.include_groups,
          topicId = options.topicId;


      if (oldSearch) {
        oldSearch.abort();
        oldSearch = null;
      }

      currentTerm = term;

      return new Ember.RSVP.Promise(function(resolve) {
        // TODO site setting for allowed regex in username
        if (term.match(/[^a-zA-Z0-9_\.]/)) {
          resolve([]);
          return;
        }
        if (((new Date() - cacheTime) > 30000) || (cacheTopicId !== topicId)) {
          cache = {};
        }

        cacheTopicId = topicId;

        var clearPromise = setTimeout(function(){
          resolve(CANCELLED_STATUS);
        }, 5000);

        debouncedSearch(term, topicId, includeGroups, function(r) {
          clearTimeout(clearPromise);
          resolve(organizeResults(r, options));
        });

      });
    }
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/user-search.js'] = "define(\"discourse/lib/user-search\", \n  [\"discourse/lib/autocomplete\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var CANCELLED_STATUS = __dependency1__.CANCELLED_STATUS;\n\n    var cache = {},\n        cacheTopicId,\n        cacheTime,\n        currentTerm,\n        oldSearch;\n\n    function performSearch(term, topicId, includeGroups, resultsFn) {\n      var cached = cache[term];\n      if (cached) {\n        resultsFn(cached);\n        return;\n      }\n\n      // need to be able to cancel this\n      oldSearch = $.ajax(Discourse.getURL('/users/search/users'), {\n        data: { term: term,\n                topic_id: topicId,\n                include_groups: includeGroups }\n      });\n\n      var returnVal = CANCELLED_STATUS;\n\n      oldSearch.then(function (r) {\n        cache[term] = r;\n        cacheTime = new Date();\n        // If there is a newer search term, return null\n        if (term === currentTerm) { returnVal = r; }\n\n      }).always(function(){\n        oldSearch = null;\n        resultsFn(returnVal);\n      });\n    }\n\n    var debouncedSearch = _.debounce(performSearch, 300);\n\n    function organizeResults(r, options) {\n      if (r === CANCELLED_STATUS) { return r; }\n\n      var exclude = options.exclude || [],\n          limit = options.limit || 5,\n          users = [],\n          groups = [],\n          results = [];\n\n      if (r.users) {\n        r.users.every(function(u) {\n          if (exclude.indexOf(u.username) === -1) {\n            users.push(u);\n            results.push(u);\n          }\n          return results.length \u003c= limit;\n        });\n      }\n\n      if (r.groups) {\n        r.groups.every(function(g) {\n          if (results.length \u003e limit) return false;\n          if (exclude.indexOf(g.name) === -1) {\n            groups.push(g);\n            results.push(g);\n          }\n          return true;\n        });\n      }\n\n      results.users = users;\n      results.groups = groups;\n      return results;\n    }\n\n\n    __exports__[\"default\"] = function userSearch(options) {\n      var term = options.term || \"\",\n          includeGroups = !!options.include_groups,\n          topicId = options.topicId;\n\n\n      if (oldSearch) {\n        oldSearch.abort();\n        oldSearch = null;\n      }\n\n      currentTerm = term;\n\n      return new Ember.RSVP.Promise(function(resolve) {\n        // TODO site setting for allowed regex in username\n        if (term.match(/[^a-zA-Z0-9_\\.]/)) {\n          resolve([]);\n          return;\n        }\n        if (((new Date() - cacheTime) \u003e 30000) || (cacheTopicId !== topicId)) {\n          cache = {};\n        }\n\n        cacheTopicId = topicId;\n\n        var clearPromise = setTimeout(function(){\n          resolve(CANCELLED_STATUS);\n        }, 5000);\n\n        debouncedSearch(term, topicId, includeGroups, function(r) {\n          clearTimeout(clearPromise);\n          resolve(organizeResults(r, options));\n        });\n\n      });\n    }\n  });";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  General utility functions

  @class Utilities
  @namespace Discourse
  @module Discourse
**/

Discourse.Utilities = {

  translateSize: function(size) {
    switch (size) {
      case 'tiny': return 20;
      case 'small': return 25;
      case 'medium': return 32;
      case 'large': return 45;
      case 'extra_large': return 60;
      case 'huge': return 120;
    }
    return size;
  },

  /**
    Allows us to supply bindings without "binding" to a helper.
  **/
  normalizeHash: function(hash, hashTypes) {
    for (var prop in hash) {
      if (hashTypes[prop] === 'ID') {
        hash[prop + 'Binding'] = hash[prop];
        delete hash[prop];
      }
    }
  },

  avatarUrl: function(template, size) {
    if (!template) { return ""; }
    var rawSize = Discourse.Utilities.getRawSize(Discourse.Utilities.translateSize(size));
    return template.replace(/\{size\}/g, rawSize);
  },

  getRawSize: function(size) {
    var pixelRatio = window.devicePixelRatio || 1;
    return pixelRatio >= 1.5 ? size * 2 : size;
  },

  avatarImg: function(options) {
    var size = Discourse.Utilities.translateSize(options.size);
    var url = Discourse.Utilities.avatarUrl(options.avatarTemplate, size);

    // We won't render an invalid url
    if (!url || url.length === 0) { return ""; }

    var classes = "avatar" + (options.extraClasses ? " " + options.extraClasses : "");
    var title = (options.title) ? " title='" + Handlebars.Utils.escapeExpression(options.title || "") + "'" : "";
    return "<img width='" + size + "' height='" + size + "' src='" + url + "' class='" + classes + "'" + title + ">";
  },

  tinyAvatar: function(avatarTemplate, options) {
    return Discourse.Utilities.avatarImg(_.merge({avatarTemplate: avatarTemplate, size: 'tiny' }, options));
  },

  postUrl: function(slug, topicId, postNumber) {
    var url = Discourse.getURL("/t/");
    if (slug) {
      url += slug + "/";
    } else {
      url += 'topic/';
    }
    url += topicId;
    if (postNumber > 1) {
      url += "/" + postNumber;
    }
    return url;
  },

  userUrl: function(username) {
    return Discourse.getURL("/users/" + username.toLowerCase());
  },

  emailValid: function(email) {
    // see:  http://stackoverflow.com/questions/46155/validate-email-address-in-javascript
    var re = /^[a-zA-Z0-9!#$%&'*+\/=?\^_`{|}~\-]+(?:\.[a-zA-Z0-9!#$%&'\*+\/=?\^_`{|}~\-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\-]*[a-zA-Z0-9])?$/;
    return re.test(email);
  },

  selectedText: function() {
    var html = '';

    if (typeof window.getSelection !== "undefined") {
      var sel = window.getSelection();
      if (sel.rangeCount) {
        var container = document.createElement("div");
        for (var i = 0, len = sel.rangeCount; i < len; ++i) {
          container.appendChild(sel.getRangeAt(i).cloneContents());
        }
        html = container.innerHTML;
      }
    } else if (typeof document.selection !== "undefined") {
      if (document.selection.type === "Text") {
        html = document.selection.createRange().htmlText;
      }
    }

    // Strip out any .click elements from the HTML before converting it to text
    var div = document.createElement('div');
    div.innerHTML = html;
    $('.clicks', $(div)).remove();
    var text = div.textContent || div.innerText || "";

    return String(text).trim();
  },

  // Determine the position of the caret in an element
  caretPosition: function(el) {
    var r, rc, re;
    if (el.selectionStart) {
      return el.selectionStart;
    }
    if (document.selection) {
      el.focus();
      r = document.selection.createRange();
      if (!r) return 0;

      re = el.createTextRange();
      rc = re.duplicate();
      re.moveToBookmark(r.getBookmark());
      rc.setEndPoint('EndToStart', re);
      return rc.text.length;
    }
    return 0;
  },

  // Set the caret's position
  setCaretPosition: function(ctrl, pos) {
    var range;
    if (ctrl.setSelectionRange) {
      ctrl.focus();
      ctrl.setSelectionRange(pos, pos);
      return;
    }
    if (ctrl.createTextRange) {
      range = ctrl.createTextRange();
      range.collapse(true);
      range.moveEnd('character', pos);
      range.moveStart('character', pos);
      return range.select();
    }
  },

  /**
    Validate a list of files to be uploaded

    @method validateUploadedFiles
    @param {Array} files The list of files we want to upload
  **/
  validateUploadedFiles: function(files, bypassNewUserRestriction) {
    if (!files || files.length === 0) { return false; }

    // can only upload one file at a time
    if (files.length > 1) {
      bootbox.alert(I18n.t('post.errors.too_many_uploads'));
      return false;
    }

    var upload = files[0];
    var type = Discourse.Utilities.isAnImage(upload.name) ? 'image' : 'attachment';

    // CHROME ONLY: if the image was pasted, sets its name to a default one
    if (upload instanceof Blob && !(upload instanceof File) && upload.type === "image/png") { upload.name = "blob.png"; }

    return Discourse.Utilities.validateUploadedFile(upload, type, bypassNewUserRestriction);
  },

  /**
    Validate a file to be uploaded

    @method validateUploadedFile
    @param {File} file The file to be uploaded
    @param {string} type The type of the upload (image, attachment)
    @params {bool} bypassNewUserRestriction
    @returns true whenever the upload is valid
  **/
  validateUploadedFile: function(file, type, bypassNewUserRestriction) {
    // check that the uploaded file is authorized
    if (!Discourse.Utilities.authorizesAllExtensions() &&
        !Discourse.Utilities.isAuthorizedUpload(file)) {
      var extensions = Discourse.Utilities.authorizedExtensions();
      bootbox.alert(I18n.t('post.errors.upload_not_authorized', { authorized_extensions: extensions }));
      return false;
    }

    if (!bypassNewUserRestriction) {
      // ensures that new users can upload a file
      if (!Discourse.User.current().isAllowedToUploadAFile(type)) {
        bootbox.alert(I18n.t('post.errors.' + type + '_upload_not_allowed_for_new_user'));
        return false;
      }
    }

    // check file size
    var fileSizeKB = file.size / 1024;
    var maxSizeKB = Discourse.SiteSettings['max_' + type + '_size_kb'];
    if (fileSizeKB > maxSizeKB) {
      bootbox.alert(I18n.t('post.errors.' + type + '_too_large', { max_size_kb: maxSizeKB }));
      return false;
    }

    // everything went fine
    return true;
  },


  /**
    Determine whether all file extensions are authorized.

    @method authorizesAllExtensions
  **/
  authorizesAllExtensions: function() {
    return Discourse.SiteSettings.authorized_extensions.indexOf("*") >= 0;
  },

  /**
    Check the extension of the file against the list of authorized extensions

    @method isAuthorizedUpload
    @param {File} file The file we want to upload
  **/
  isAuthorizedUpload: function(file) {
    if (file && file.name) {
      var extensions = _.chain(Discourse.SiteSettings.authorized_extensions.split("|"))
                        .reject(function(extension) { return extension.indexOf("*") >= 0; })
                        .map(function(extension) { return (extension.indexOf(".") === 0 ? extension.substring(1) : extension).replace(".", "\\."); })
                        .value();
      return new RegExp("\\.(" + extensions.join("|") + ")$", "i").test(file.name);
    }
    return false;
  },

  /**
    List the authorized extension for display

    @method authorizedExtensions
  **/
  authorizedExtensions: function() {
    return _.chain(Discourse.SiteSettings.authorized_extensions.split("|"))
            .reject(function(extension) { return extension.indexOf("*") >= 0; })
            .map(function(extension) { return extension.toLowerCase(); })
            .value()
            .join(", ");
  },

  /**
    Get the markdown template for an upload (either an image or an attachment)

    @method getUploadMarkdown
    @param {Upload} upload The upload we want the markdown from
  **/
  getUploadMarkdown: function(upload) {
    if (Discourse.Utilities.isAnImage(upload.original_filename)) {
      return '<img src="' + upload.url + '" width="' + upload.width + '" height="' + upload.height + '">';
    } else {
      return '<a class="attachment" href="' + upload.url + '">' + upload.original_filename + '</a> (' + I18n.toHumanSize(upload.filesize) + ')';
    }
  },

  /**
    Check whether the path is refering to an image

    @method isAnImage
    @param {String} path The path
  **/
  isAnImage: function(path) {
    return (/\.(png|jpg|jpeg|gif|bmp|tif|tiff)$/i).test(path);
  },

  /**
    Determines whether we allow attachments or not

    @method allowsAttachments
  **/
  allowsAttachments: function() {
    return Discourse.Utilities.authorizesAllExtensions() ||
           !(/((png|jpg|jpeg|gif|bmp|tif|tiff)(,\s)?)+$/i).test(Discourse.Utilities.authorizedExtensions());
  },

  displayErrorForUpload: function(data) {
    // deal with meaningful errors first
    if (data.jqXHR) {
      switch (data.jqXHR.status) {
        // cancel from the user
        case 0: return;

        // entity too large, usually returned from the web server
        case 413:
          var maxSizeKB = Discourse.SiteSettings.max_image_size_kb;
          bootbox.alert(I18n.t('post.errors.image_too_large', { max_size_kb: maxSizeKB }));
          return;

        // the error message is provided by the server
        case 422:
          bootbox.alert(data.jqXHR.responseJSON.join("\n"));
          return;
      }
    }
    // otherwise, display a generic error message
    bootbox.alert(I18n.t('post.errors.upload'));
  },

  /**
    Crop an image to be used as avatar.
    Simulate the "centered square thumbnail" generation done server-side.
    Uses only the first frame of animated gifs when they are disabled.

    @method cropAvatar
    @param {String} url The url of the avatar
    @param {String} fileType The file type of the uploaded file
    @returns {Promise} a promise that will eventually be the cropped avatar.
  **/
  cropAvatar: function(url, fileType) {
    if (Discourse.SiteSettings.allow_animated_avatars && fileType === "image/gif") {
      // can't crop animated gifs... let the browser stretch the gif
      return Ember.RSVP.resolve(url);
    } else {
      return new Ember.RSVP.Promise(function(resolve) {
        var image = document.createElement("img");
        // this event will be fired as soon as the image is loaded
        image.onload = function(e) {
          var img = e.target;
          // computes the dimension & position (x, y) of the largest square we can fit in the image
          var width = img.width, height = img.height, dimension, center, x, y;
          if (width <= height) {
            dimension = width;
            center = height / 2;
            x = 0;
            y = center - (dimension / 2);
          } else {
            dimension = height;
            center = width / 2;
            x = center - (dimension / 2);
            y = 0;
          }
          // set the size of the canvas to the maximum available size for avatars (browser will take care of downsizing the image)
          var canvas = document.createElement("canvas");
          var size = Discourse.Utilities.getRawSize(Discourse.Utilities.translateSize("huge"));
          canvas.height = canvas.width = size;
          // draw the image into the canvas
          canvas.getContext("2d").drawImage(img, x, y, dimension, dimension, 0, 0, size, size);
          // retrieve the image from the canvas
          resolve(canvas.toDataURL(fileType));
        };
        // launch the onload event
        image.src = url;
      });
    }
  },

  timestampFromAutocloseString: function(arg) {
    if (!arg) return null;
    if (arg.match(/^[\d]{4}-[\d]{1,2}-[\d]{1,2} [\d]{1,2}:[\d]{2}/)) {
      return moment(arg).toJSON(); // moment will add the timezone
    } else {
      var matches = arg.match(/^([\d]{1,2}):([\d]{2})$/); // just the time HH:MM
      if (matches) {
        var now = moment(),
            t = moment(new Date(now.year(), now.month(), now.date(), matches[1], matches[2]));
        if (t.isAfter()) {
          return t.toJSON();
        } else {
          return t.add('days', 1).toJSON();
        }
      } else {
        return (arg === '' ? null : arg);
      }
    }
  },

  defaultHomepage: function() {
    // the homepage is the first item of the 'top_menu' site setting
    return Discourse.SiteSettings.top_menu.split("|")[0].split(",")[0];
  }

};


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/lib/utilities.js'] = "/**\n  General utility functions\n\n  @class Utilities\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.Utilities = {\n\n  translateSize: function(size) {\n    switch (size) {\n      case 'tiny': return 20;\n      case 'small': return 25;\n      case 'medium': return 32;\n      case 'large': return 45;\n      case 'extra_large': return 60;\n      case 'huge': return 120;\n    }\n    return size;\n  },\n\n  /**\n    Allows us to supply bindings without \"binding\" to a helper.\n  **/\n  normalizeHash: function(hash, hashTypes) {\n    for (var prop in hash) {\n      if (hashTypes[prop] === 'ID') {\n        hash[prop + 'Binding'] = hash[prop];\n        delete hash[prop];\n      }\n    }\n  },\n\n  avatarUrl: function(template, size) {\n    if (!template) { return \"\"; }\n    var rawSize = Discourse.Utilities.getRawSize(Discourse.Utilities.translateSize(size));\n    return template.replace(/\\{size\\}/g, rawSize);\n  },\n\n  getRawSize: function(size) {\n    var pixelRatio = window.devicePixelRatio || 1;\n    return pixelRatio \u003e= 1.5 ? size * 2 : size;\n  },\n\n  avatarImg: function(options) {\n    var size = Discourse.Utilities.translateSize(options.size);\n    var url = Discourse.Utilities.avatarUrl(options.avatarTemplate, size);\n\n    // We won't render an invalid url\n    if (!url || url.length === 0) { return \"\"; }\n\n    var classes = \"avatar\" + (options.extraClasses ? \" \" + options.extraClasses : \"\");\n    var title = (options.title) ? \" title='\" + Handlebars.Utils.escapeExpression(options.title || \"\") + \"'\" : \"\";\n    return \"\u003cimg width='\" + size + \"' height='\" + size + \"' src='\" + url + \"' class='\" + classes + \"'\" + title + \"\u003e\";\n  },\n\n  tinyAvatar: function(avatarTemplate, options) {\n    return Discourse.Utilities.avatarImg(_.merge({avatarTemplate: avatarTemplate, size: 'tiny' }, options));\n  },\n\n  postUrl: function(slug, topicId, postNumber) {\n    var url = Discourse.getURL(\"/t/\");\n    if (slug) {\n      url += slug + \"/\";\n    } else {\n      url += 'topic/';\n    }\n    url += topicId;\n    if (postNumber \u003e 1) {\n      url += \"/\" + postNumber;\n    }\n    return url;\n  },\n\n  userUrl: function(username) {\n    return Discourse.getURL(\"/users/\" + username.toLowerCase());\n  },\n\n  emailValid: function(email) {\n    // see:  http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n    var re = /^[a-zA-Z0-9!#$%\u0026'*+\\/=?\\^_`{|}~\\-]+(?:\\.[a-zA-Z0-9!#$%\u0026'\\*+\\/=?\\^_`{|}~\\-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\\-]*[a-zA-Z0-9])?$/;\n    return re.test(email);\n  },\n\n  selectedText: function() {\n    var html = '';\n\n    if (typeof window.getSelection !== \"undefined\") {\n      var sel = window.getSelection();\n      if (sel.rangeCount) {\n        var container = document.createElement(\"div\");\n        for (var i = 0, len = sel.rangeCount; i \u003c len; ++i) {\n          container.appendChild(sel.getRangeAt(i).cloneContents());\n        }\n        html = container.innerHTML;\n      }\n    } else if (typeof document.selection !== \"undefined\") {\n      if (document.selection.type === \"Text\") {\n        html = document.selection.createRange().htmlText;\n      }\n    }\n\n    // Strip out any .click elements from the HTML before converting it to text\n    var div = document.createElement('div');\n    div.innerHTML = html;\n    $('.clicks', $(div)).remove();\n    var text = div.textContent || div.innerText || \"\";\n\n    return String(text).trim();\n  },\n\n  // Determine the position of the caret in an element\n  caretPosition: function(el) {\n    var r, rc, re;\n    if (el.selectionStart) {\n      return el.selectionStart;\n    }\n    if (document.selection) {\n      el.focus();\n      r = document.selection.createRange();\n      if (!r) return 0;\n\n      re = el.createTextRange();\n      rc = re.duplicate();\n      re.moveToBookmark(r.getBookmark());\n      rc.setEndPoint('EndToStart', re);\n      return rc.text.length;\n    }\n    return 0;\n  },\n\n  // Set the caret's position\n  setCaretPosition: function(ctrl, pos) {\n    var range;\n    if (ctrl.setSelectionRange) {\n      ctrl.focus();\n      ctrl.setSelectionRange(pos, pos);\n      return;\n    }\n    if (ctrl.createTextRange) {\n      range = ctrl.createTextRange();\n      range.collapse(true);\n      range.moveEnd('character', pos);\n      range.moveStart('character', pos);\n      return range.select();\n    }\n  },\n\n  /**\n    Validate a list of files to be uploaded\n\n    @method validateUploadedFiles\n    @param {Array} files The list of files we want to upload\n  **/\n  validateUploadedFiles: function(files, bypassNewUserRestriction) {\n    if (!files || files.length === 0) { return false; }\n\n    // can only upload one file at a time\n    if (files.length \u003e 1) {\n      bootbox.alert(I18n.t('post.errors.too_many_uploads'));\n      return false;\n    }\n\n    var upload = files[0];\n    var type = Discourse.Utilities.isAnImage(upload.name) ? 'image' : 'attachment';\n\n    // CHROME ONLY: if the image was pasted, sets its name to a default one\n    if (upload instanceof Blob \u0026\u0026 !(upload instanceof File) \u0026\u0026 upload.type === \"image/png\") { upload.name = \"blob.png\"; }\n\n    return Discourse.Utilities.validateUploadedFile(upload, type, bypassNewUserRestriction);\n  },\n\n  /**\n    Validate a file to be uploaded\n\n    @method validateUploadedFile\n    @param {File} file The file to be uploaded\n    @param {string} type The type of the upload (image, attachment)\n    @params {bool} bypassNewUserRestriction\n    @returns true whenever the upload is valid\n  **/\n  validateUploadedFile: function(file, type, bypassNewUserRestriction) {\n    // check that the uploaded file is authorized\n    if (!Discourse.Utilities.authorizesAllExtensions() \u0026\u0026\n        !Discourse.Utilities.isAuthorizedUpload(file)) {\n      var extensions = Discourse.Utilities.authorizedExtensions();\n      bootbox.alert(I18n.t('post.errors.upload_not_authorized', { authorized_extensions: extensions }));\n      return false;\n    }\n\n    if (!bypassNewUserRestriction) {\n      // ensures that new users can upload a file\n      if (!Discourse.User.current().isAllowedToUploadAFile(type)) {\n        bootbox.alert(I18n.t('post.errors.' + type + '_upload_not_allowed_for_new_user'));\n        return false;\n      }\n    }\n\n    // check file size\n    var fileSizeKB = file.size / 1024;\n    var maxSizeKB = Discourse.SiteSettings['max_' + type + '_size_kb'];\n    if (fileSizeKB \u003e maxSizeKB) {\n      bootbox.alert(I18n.t('post.errors.' + type + '_too_large', { max_size_kb: maxSizeKB }));\n      return false;\n    }\n\n    // everything went fine\n    return true;\n  },\n\n\n  /**\n    Determine whether all file extensions are authorized.\n\n    @method authorizesAllExtensions\n  **/\n  authorizesAllExtensions: function() {\n    return Discourse.SiteSettings.authorized_extensions.indexOf(\"*\") \u003e= 0;\n  },\n\n  /**\n    Check the extension of the file against the list of authorized extensions\n\n    @method isAuthorizedUpload\n    @param {File} file The file we want to upload\n  **/\n  isAuthorizedUpload: function(file) {\n    if (file \u0026\u0026 file.name) {\n      var extensions = _.chain(Discourse.SiteSettings.authorized_extensions.split(\"|\"))\n                        .reject(function(extension) { return extension.indexOf(\"*\") \u003e= 0; })\n                        .map(function(extension) { return (extension.indexOf(\".\") === 0 ? extension.substring(1) : extension).replace(\".\", \"\\\\.\"); })\n                        .value();\n      return new RegExp(\"\\\\.(\" + extensions.join(\"|\") + \")$\", \"i\").test(file.name);\n    }\n    return false;\n  },\n\n  /**\n    List the authorized extension for display\n\n    @method authorizedExtensions\n  **/\n  authorizedExtensions: function() {\n    return _.chain(Discourse.SiteSettings.authorized_extensions.split(\"|\"))\n            .reject(function(extension) { return extension.indexOf(\"*\") \u003e= 0; })\n            .map(function(extension) { return extension.toLowerCase(); })\n            .value()\n            .join(\", \");\n  },\n\n  /**\n    Get the markdown template for an upload (either an image or an attachment)\n\n    @method getUploadMarkdown\n    @param {Upload} upload The upload we want the markdown from\n  **/\n  getUploadMarkdown: function(upload) {\n    if (Discourse.Utilities.isAnImage(upload.original_filename)) {\n      return '\u003cimg src=\"' + upload.url + '\" width=\"' + upload.width + '\" height=\"' + upload.height + '\"\u003e';\n    } else {\n      return '\u003ca class=\"attachment\" href=\"' + upload.url + '\"\u003e' + upload.original_filename + '\u003c/a\u003e (' + I18n.toHumanSize(upload.filesize) + ')';\n    }\n  },\n\n  /**\n    Check whether the path is refering to an image\n\n    @method isAnImage\n    @param {String} path The path\n  **/\n  isAnImage: function(path) {\n    return (/\\.(png|jpg|jpeg|gif|bmp|tif|tiff)$/i).test(path);\n  },\n\n  /**\n    Determines whether we allow attachments or not\n\n    @method allowsAttachments\n  **/\n  allowsAttachments: function() {\n    return Discourse.Utilities.authorizesAllExtensions() ||\n           !(/((png|jpg|jpeg|gif|bmp|tif|tiff)(,\\s)?)+$/i).test(Discourse.Utilities.authorizedExtensions());\n  },\n\n  displayErrorForUpload: function(data) {\n    // deal with meaningful errors first\n    if (data.jqXHR) {\n      switch (data.jqXHR.status) {\n        // cancel from the user\n        case 0: return;\n\n        // entity too large, usually returned from the web server\n        case 413:\n          var maxSizeKB = Discourse.SiteSettings.max_image_size_kb;\n          bootbox.alert(I18n.t('post.errors.image_too_large', { max_size_kb: maxSizeKB }));\n          return;\n\n        // the error message is provided by the server\n        case 422:\n          bootbox.alert(data.jqXHR.responseJSON.join(\"\\n\"));\n          return;\n      }\n    }\n    // otherwise, display a generic error message\n    bootbox.alert(I18n.t('post.errors.upload'));\n  },\n\n  /**\n    Crop an image to be used as avatar.\n    Simulate the \"centered square thumbnail\" generation done server-side.\n    Uses only the first frame of animated gifs when they are disabled.\n\n    @method cropAvatar\n    @param {String} url The url of the avatar\n    @param {String} fileType The file type of the uploaded file\n    @returns {Promise} a promise that will eventually be the cropped avatar.\n  **/\n  cropAvatar: function(url, fileType) {\n    if (Discourse.SiteSettings.allow_animated_avatars \u0026\u0026 fileType === \"image/gif\") {\n      // can't crop animated gifs... let the browser stretch the gif\n      return Ember.RSVP.resolve(url);\n    } else {\n      return new Ember.RSVP.Promise(function(resolve) {\n        var image = document.createElement(\"img\");\n        // this event will be fired as soon as the image is loaded\n        image.onload = function(e) {\n          var img = e.target;\n          // computes the dimension \u0026 position (x, y) of the largest square we can fit in the image\n          var width = img.width, height = img.height, dimension, center, x, y;\n          if (width \u003c= height) {\n            dimension = width;\n            center = height / 2;\n            x = 0;\n            y = center - (dimension / 2);\n          } else {\n            dimension = height;\n            center = width / 2;\n            x = center - (dimension / 2);\n            y = 0;\n          }\n          // set the size of the canvas to the maximum available size for avatars (browser will take care of downsizing the image)\n          var canvas = document.createElement(\"canvas\");\n          var size = Discourse.Utilities.getRawSize(Discourse.Utilities.translateSize(\"huge\"));\n          canvas.height = canvas.width = size;\n          // draw the image into the canvas\n          canvas.getContext(\"2d\").drawImage(img, x, y, dimension, dimension, 0, 0, size, size);\n          // retrieve the image from the canvas\n          resolve(canvas.toDataURL(fileType));\n        };\n        // launch the onload event\n        image.src = url;\n      });\n    }\n  },\n\n  timestampFromAutocloseString: function(arg) {\n    if (!arg) return null;\n    if (arg.match(/^[\\d]{4}-[\\d]{1,2}-[\\d]{1,2} [\\d]{1,2}:[\\d]{2}/)) {\n      return moment(arg).toJSON(); // moment will add the timezone\n    } else {\n      var matches = arg.match(/^([\\d]{1,2}):([\\d]{2})$/); // just the time HH:MM\n      if (matches) {\n        var now = moment(),\n            t = moment(new Date(now.year(), now.month(), now.date(), matches[1], matches[2]));\n        if (t.isAfter()) {\n          return t.toJSON();\n        } else {\n          return t.add('days', 1).toJSON();\n        }\n      } else {\n        return (arg === '' ? null : arg);\n      }\n    }\n  },\n\n  defaultHomepage: function() {\n    // the homepage is the first item of the 'top_menu' site setting\n    return Discourse.SiteSettings.top_menu.split(\"|\")[0].split(\",\")[0];\n  }\n\n};\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A data model representing a post in a topic

  @class Post
  @extends Discourse.Model
  @namespace Discourse
  @module Discourse
**/

Discourse.Post = Discourse.Model.extend({

  init: function() {
    this.set('replyHistory', []);
  },

  shareUrl: function() {
    var user = Discourse.User.current();
    var userSuffix = user ? '?u=' + user.get('username_lower') : '';

    if (this.get('firstPost')) {
      return this.get('topic.url') + userSuffix;
    } else {
      return this.get('url') + userSuffix ;
    }
  }.property('url'),

  new_user: Em.computed.equal('trust_level', 0),
  firstPost: Em.computed.equal('post_number', 1),

  // Posts can show up as deleted if the topic is deleted
  deletedViaTopic: Em.computed.and('firstPost', 'topic.deleted_at'),
  deleted: Em.computed.or('deleted_at', 'deletedViaTopic'),
  notDeleted: Em.computed.not('deleted'),
  userDeleted: Em.computed.empty('user_id'),

  showName: function() {
    var name = this.get('name');
    return name && (name !== this.get('username'))  && Discourse.SiteSettings.display_name_on_posts;
  }.property('name', 'username'),

  postDeletedBy: function() {
    if (this.get('firstPost')) { return this.get('topic.deleted_by'); }
    return this.get('deleted_by');
  }.property('firstPost', 'deleted_by', 'topic.deleted_by'),

  postDeletedAt: function() {
    if (this.get('firstPost')) { return this.get('topic.deleted_at'); }
    return this.get('deleted_at');
  }.property('firstPost', 'deleted_at', 'topic.deleted_at'),

  url: function() {
    return Discourse.Utilities.postUrl(this.get('topic.slug') || this.get('topic_slug'), this.get('topic_id'), this.get('post_number'));
  }.property('post_number', 'topic_id', 'topic.slug'),

  usernameUrl: Discourse.computed.url('username', '/users/%@'),

  showUserReplyTab: function() {
    return this.get('reply_to_user') && (
      !Discourse.SiteSettings.suppress_reply_directly_above ||
      this.get('reply_to_post_number') < (this.get('post_number') - 1)
    );
  }.property('reply_to_user', 'reply_to_post_number', 'post_number'),

  byTopicCreator: Discourse.computed.propertyEqual('topic.details.created_by.id', 'user_id'),
  hasHistory: Em.computed.gt('version', 1),
  postElementId: Discourse.computed.fmt('post_number', 'post_%@'),

  bookmarkedChanged: function() {
    Discourse.Post.bookmark(this.get('id'), this.get('bookmarked'))
             .then(null, function (error) {
               if (error && error.responseText) {
                 bootbox.alert($.parseJSON(error.responseText).errors[0]);
               } else {
                 bootbox.alert(I18n.t('generic_error'));
               }
             });
  }.observes('bookmarked'),

  wikiChanged: function() {
    var self = this;

    Discourse.ajax('/posts/' + this.get('id') + '/wiki', {
      type: 'PUT',
      data: {
        wiki: this.get('wiki') ? true : false
      }
    }).then(function() {
      self.incrementProperty('version');
    }, function(error) {
      if (error && error.responseText) {
        bootbox.alert($.parseJSON(error.responseText).errors[0]);
      } else {
        bootbox.alert(I18n.t('generic_error'));
      }
    });
  }.observes('wiki'),

  internalLinks: function() {
    if (this.blank('link_counts')) return null;
    return this.get('link_counts').filterProperty('internal').filterProperty('title');
  }.property('link_counts.@each.internal'),

  // Edits are the version - 1, so version 2 = 1 edit
  editCount: function() {
    return this.get('version') - 1;
  }.property('version'),

  flagsAvailable: function() {
    var post = this;
    return Discourse.Site.currentProp('flagTypes').filter(function(item) {
      return post.get("actionByName." + item.get('name_key') + ".can_act");
    });
  }.property('actions_summary.@each.can_act'),

  actionsHistory: function() {
    if (!this.present('actions_summary')) return null;

    return this.get('actions_summary').filter(function(i) {
      if (i.get('count') === 0) return false;
      if (i.get('users') && i.get('users').length > 0) return true;
      return !i.get('hidden');
    });
  }.property('actions_summary.@each.users', 'actions_summary.@each.count'),

  // Save a post and call the callback when done.
  save: function(complete, error) {
    var self = this;
    if (!this.get('newPost')) {
      // We're updating a post
      return Discourse.ajax("/posts/" + (this.get('id')), {
        type: 'PUT',
        dataType: 'json',
        data: {
          post: { raw: this.get('raw'), edit_reason: this.get('editReason') },
          image_sizes: this.get('imageSizes')
        }
      }).then(function(result) {
        // If we received a category update, update it
        self.set('version', result.post.version);
        if (result.category) Discourse.Site.current().updateCategory(result.category);
        if (complete) complete(Discourse.Post.create(result.post));
      }, function(result) {
        // Post failed to update
        if (error) error(result);
      });

    } else {

      // We're saving a post
      var data = {
        raw: this.get('raw'),
        topic_id: this.get('topic_id'),
        reply_to_post_number: this.get('reply_to_post_number'),
        category: this.get('category'),
        archetype: this.get('archetype'),
        title: this.get('title'),
        image_sizes: this.get('imageSizes'),
        target_usernames: this.get('target_usernames'),
        auto_close_time: Discourse.Utilities.timestampFromAutocloseString(this.get('auto_close_time'))
      };

      var metaData = this.get('metaData');
      // Put the metaData into the request
      if (metaData) {
        data.meta_data = {};
        Ember.keys(metaData).forEach(function(key) { data.meta_data[key] = metaData.get(key); });
      }

      return Discourse.ajax("/posts", {
        type: 'POST',
        data: data
      }).then(function(result) {
        // Post created
        if (complete) complete(Discourse.Post.create(result));
      }, function(result) {
        // Failed to create a post
        if (error) error(result);
      });
    }
  },

  /**
    Expands the first post's content, if embedded and shortened.

    @method expandFirstPost
  **/
  expand: function() {
    var self = this;
    return Discourse.ajax("/posts/" + this.get('id') + "/expand-embed").then(function(post) {
      self.set('cooked', "<section class='expanded-embed'>" + post.cooked + "</section>" );
    });
  },

  /**
    Recover a deleted post

    @method recover
  **/
  recover: function() {
    var post = this;
    post.setProperties({
      deleted_at: null,
      deleted_by: null,
      user_deleted: false,
      can_delete: false
    });

    return Discourse.ajax("/posts/" + (this.get('id')) + "/recover", { type: 'PUT', cache: false }).then(function(data){
      post.setProperties({
        cooked: data.cooked,
        raw: data.raw,
        user_deleted: false,
        can_delete: true,
        version: data.version
      });
    });
  },

  /**
    Changes the state of the post to be deleted. Does not call the server, that should be
    done elsewhere.

    @method setDeletedState
    @param {Discourse.User} deletedBy The user deleting the post
  **/
  setDeletedState: function(deletedBy) {
    this.set('oldCooked', this.get('cooked'));

    // Moderators can delete posts. Users can only trigger a deleted at message.
    if (deletedBy.get('staff')) {
      this.setProperties({
        deleted_at: new Date(),
        deleted_by: deletedBy,
        can_delete: false
      });
    } else {
      this.setProperties({
        cooked: Discourse.Markdown.cook(I18n.t("post.deleted_by_author", {count: Discourse.SiteSettings.delete_removed_posts_after})),
        can_delete: false,
        version: this.get('version') + 1,
        can_recover: true,
        can_edit: false,
        user_deleted: true
      });
    }
  },

  /**
    Changes the state of the post to NOT be deleted. Does not call the server.
    This can only be called after setDeletedState was called, but the delete
    failed on the server.

    @method undoDeletedState
  **/
  undoDeleteState: function() {
    if (this.get('oldCooked')) {
      this.setProperties({
        deleted_at: null,
        deleted_by: null,
        cooked: this.get('oldCooked'),
        version: this.get('version') - 1,
        can_recover: false,
        user_deleted: false
      });
    }
  },

  /**
    Deletes a post

    @method destroy
    @param {Discourse.User} deletedBy The user deleting the post
  **/
  destroy: function(deletedBy) {
    this.setDeletedState(deletedBy);
    return Discourse.ajax("/posts/" + (this.get('id')), { type: 'DELETE' });
  },

  /**
    Updates a post from another's attributes. This will normally happen when a post is loading but
    is already found in an identity map.

    @method updateFromPost
    @param {Discourse.Post} otherPost The post we're updating from
  **/
  updateFromPost: function(otherPost) {
    var self = this;
    Object.keys(otherPost).forEach(function (key) {
      var value = otherPost[key],
          oldValue = self[key];

      if (!value) { value = null; }
      if (!oldValue) { oldValue = null; }

      var skip = false;
      if (typeof value !== "function" && oldValue !== value) {
        // wishing for an identity map
        if (key === "reply_to_user" && value && oldValue) {
          skip = value.username === oldValue.username || Em.get(value, "username") === Em.get(oldValue, "username");
        }

        if (!skip) {
          self.set(key, value);
        }
      }
    });
  },

  /**
    Updates a post from a JSON packet. This is normally done after the post is saved to refresh any
    attributes.

    @method updateFromJson
    @param {Object} obj The Json data to update with
  **/
  updateFromJson: function(obj) {
    if (!obj) return;

    // Update all the properties
    var post = this;
    _.each(obj, function(val,key) {
      if (key !== 'actions_summary'){
        if (val) {
          post.set(key, val);
        }
      }
    });

    // Rebuild actions summary
    this.set('actions_summary', Em.A());
    if (obj.actions_summary) {
      var lookup = Em.Object.create();
      _.each(obj.actions_summary,function(a) {
        var actionSummary;
        a.post = post;
        a.actionType = Discourse.Site.current().postActionTypeById(a.id);
        actionSummary = Discourse.ActionSummary.create(a);
        post.get('actions_summary').pushObject(actionSummary);
        lookup.set(a.actionType.get('name_key'), actionSummary);
      });
      this.set('actionByName', lookup);
    }
  },

  // Load replies to this post
  loadReplies: function() {
    if(this.get('loadingReplies')){
      return;
    }

    this.set('loadingReplies', true);
    this.set('replies', []);

    var self = this;
    return Discourse.ajax("/posts/" + (this.get('id')) + "/replies")
      .then(function(loaded) {
        var replies = self.get('replies');
        _.each(loaded,function(reply) {
          var post = Discourse.Post.create(reply);
          post.set('topic', self.get('topic'));
          replies.pushObject(post);
        });
      })
      ['finally'](function(){
        self.set('loadingReplies', false);
    });
  },

  // Whether to show replies directly below
  showRepliesBelow: function() {
    var replyCount = this.get('reply_count');

    // We don't show replies if there aren't any
    if (replyCount === 0) return false;

    // Always show replies if the setting `suppress_reply_directly_below` is false.
    if (!Discourse.SiteSettings.suppress_reply_directly_below) return true;

    // Always show replies if there's more than one
    if (replyCount > 1) return true;

    // If we have *exactly* one reply, we have to consider if it's directly below us
    var topic = this.get('topic');
    return !topic.isReplyDirectlyBelow(this);

  }.property('reply_count'),

  expandHidden: function() {
    var self = this;
    return Discourse.ajax("/posts/" + this.get('id') + "/cooked.json").then(function (result) {
      self.setProperties({
        cooked: result.cooked,
        cooked_hidden: false
      });
    });
  }
});

Discourse.Post.reopenClass({

  createActionSummary: function(result) {
    if (result.actions_summary) {
      var lookup = Em.Object.create();
      // this area should be optimized, it is creating way too many objects per post
      result.actions_summary = result.actions_summary.map(function(a) {
        a.post = result;
        a.actionType = Discourse.Site.current().postActionTypeById(a.id);
        var actionSummary = Discourse.ActionSummary.create(a);
        lookup[a.actionType.name_key] = actionSummary;
        return actionSummary;
      });
      result.set('actionByName', lookup);
    }
  },

  create: function(obj) {
    var result = this._super.apply(this, arguments);
    this.createActionSummary(result);
    if (obj && obj.reply_to_user) {
      result.set('reply_to_user', Discourse.User.create(obj.reply_to_user));
    }
    return result;
  },

  deleteMany: function(selectedPosts, selectedReplies) {
    return Discourse.ajax("/posts/destroy_many", {
      type: 'DELETE',
      data: {
        post_ids: selectedPosts.map(function(p) { return p.get('id'); }),
        reply_post_ids: selectedReplies.map(function(p) { return p.get('id'); })
      }
    });
  },

  loadRevision: function(postId, version) {
    return Discourse.ajax("/posts/" + postId + "/revisions/" + version + ".json").then(function (result) {
      return Em.Object.create(result);
    });
  },

  loadQuote: function(postId) {
    return Discourse.ajax("/posts/" + postId + ".json").then(function (result) {
      var post = Discourse.Post.create(result);
      return Discourse.Quote.build(post, post.get('raw'));
    });
  },

  load: function(postId) {
    return Discourse.ajax("/posts/" + postId + ".json").then(function (result) {
      return Discourse.Post.create(result);
    });
  },

  bookmark: function(postId, bookmarked) {
    return Discourse.ajax("/posts/" + postId + "/bookmark", { type: 'PUT', data: { bookmarked: bookmarked } });
  }

});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/_post.js'] = "/**\n  A data model representing a post in a topic\n\n  @class Post\n  @extends Discourse.Model\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.Post = Discourse.Model.extend({\n\n  init: function() {\n    this.set('replyHistory', []);\n  },\n\n  shareUrl: function() {\n    var user = Discourse.User.current();\n    var userSuffix = user ? '?u=' + user.get('username_lower') : '';\n\n    if (this.get('firstPost')) {\n      return this.get('topic.url') + userSuffix;\n    } else {\n      return this.get('url') + userSuffix ;\n    }\n  }.property('url'),\n\n  new_user: Em.computed.equal('trust_level', 0),\n  firstPost: Em.computed.equal('post_number', 1),\n\n  // Posts can show up as deleted if the topic is deleted\n  deletedViaTopic: Em.computed.and('firstPost', 'topic.deleted_at'),\n  deleted: Em.computed.or('deleted_at', 'deletedViaTopic'),\n  notDeleted: Em.computed.not('deleted'),\n  userDeleted: Em.computed.empty('user_id'),\n\n  showName: function() {\n    var name = this.get('name');\n    return name \u0026\u0026 (name !== this.get('username'))  \u0026\u0026 Discourse.SiteSettings.display_name_on_posts;\n  }.property('name', 'username'),\n\n  postDeletedBy: function() {\n    if (this.get('firstPost')) { return this.get('topic.deleted_by'); }\n    return this.get('deleted_by');\n  }.property('firstPost', 'deleted_by', 'topic.deleted_by'),\n\n  postDeletedAt: function() {\n    if (this.get('firstPost')) { return this.get('topic.deleted_at'); }\n    return this.get('deleted_at');\n  }.property('firstPost', 'deleted_at', 'topic.deleted_at'),\n\n  url: function() {\n    return Discourse.Utilities.postUrl(this.get('topic.slug') || this.get('topic_slug'), this.get('topic_id'), this.get('post_number'));\n  }.property('post_number', 'topic_id', 'topic.slug'),\n\n  usernameUrl: Discourse.computed.url('username', '/users/%@'),\n\n  showUserReplyTab: function() {\n    return this.get('reply_to_user') \u0026\u0026 (\n      !Discourse.SiteSettings.suppress_reply_directly_above ||\n      this.get('reply_to_post_number') \u003c (this.get('post_number') - 1)\n    );\n  }.property('reply_to_user', 'reply_to_post_number', 'post_number'),\n\n  byTopicCreator: Discourse.computed.propertyEqual('topic.details.created_by.id', 'user_id'),\n  hasHistory: Em.computed.gt('version', 1),\n  postElementId: Discourse.computed.fmt('post_number', 'post_%@'),\n\n  bookmarkedChanged: function() {\n    Discourse.Post.bookmark(this.get('id'), this.get('bookmarked'))\n             .then(null, function (error) {\n               if (error \u0026\u0026 error.responseText) {\n                 bootbox.alert($.parseJSON(error.responseText).errors[0]);\n               } else {\n                 bootbox.alert(I18n.t('generic_error'));\n               }\n             });\n  }.observes('bookmarked'),\n\n  wikiChanged: function() {\n    var self = this;\n\n    Discourse.ajax('/posts/' + this.get('id') + '/wiki', {\n      type: 'PUT',\n      data: {\n        wiki: this.get('wiki') ? true : false\n      }\n    }).then(function() {\n      self.incrementProperty('version');\n    }, function(error) {\n      if (error \u0026\u0026 error.responseText) {\n        bootbox.alert($.parseJSON(error.responseText).errors[0]);\n      } else {\n        bootbox.alert(I18n.t('generic_error'));\n      }\n    });\n  }.observes('wiki'),\n\n  internalLinks: function() {\n    if (this.blank('link_counts')) return null;\n    return this.get('link_counts').filterProperty('internal').filterProperty('title');\n  }.property('link_counts.@each.internal'),\n\n  // Edits are the version - 1, so version 2 = 1 edit\n  editCount: function() {\n    return this.get('version') - 1;\n  }.property('version'),\n\n  flagsAvailable: function() {\n    var post = this;\n    return Discourse.Site.currentProp('flagTypes').filter(function(item) {\n      return post.get(\"actionByName.\" + item.get('name_key') + \".can_act\");\n    });\n  }.property('actions_summary.@each.can_act'),\n\n  actionsHistory: function() {\n    if (!this.present('actions_summary')) return null;\n\n    return this.get('actions_summary').filter(function(i) {\n      if (i.get('count') === 0) return false;\n      if (i.get('users') \u0026\u0026 i.get('users').length \u003e 0) return true;\n      return !i.get('hidden');\n    });\n  }.property('actions_summary.@each.users', 'actions_summary.@each.count'),\n\n  // Save a post and call the callback when done.\n  save: function(complete, error) {\n    var self = this;\n    if (!this.get('newPost')) {\n      // We're updating a post\n      return Discourse.ajax(\"/posts/\" + (this.get('id')), {\n        type: 'PUT',\n        dataType: 'json',\n        data: {\n          post: { raw: this.get('raw'), edit_reason: this.get('editReason') },\n          image_sizes: this.get('imageSizes')\n        }\n      }).then(function(result) {\n        // If we received a category update, update it\n        self.set('version', result.post.version);\n        if (result.category) Discourse.Site.current().updateCategory(result.category);\n        if (complete) complete(Discourse.Post.create(result.post));\n      }, function(result) {\n        // Post failed to update\n        if (error) error(result);\n      });\n\n    } else {\n\n      // We're saving a post\n      var data = {\n        raw: this.get('raw'),\n        topic_id: this.get('topic_id'),\n        reply_to_post_number: this.get('reply_to_post_number'),\n        category: this.get('category'),\n        archetype: this.get('archetype'),\n        title: this.get('title'),\n        image_sizes: this.get('imageSizes'),\n        target_usernames: this.get('target_usernames'),\n        auto_close_time: Discourse.Utilities.timestampFromAutocloseString(this.get('auto_close_time'))\n      };\n\n      var metaData = this.get('metaData');\n      // Put the metaData into the request\n      if (metaData) {\n        data.meta_data = {};\n        Ember.keys(metaData).forEach(function(key) { data.meta_data[key] = metaData.get(key); });\n      }\n\n      return Discourse.ajax(\"/posts\", {\n        type: 'POST',\n        data: data\n      }).then(function(result) {\n        // Post created\n        if (complete) complete(Discourse.Post.create(result));\n      }, function(result) {\n        // Failed to create a post\n        if (error) error(result);\n      });\n    }\n  },\n\n  /**\n    Expands the first post's content, if embedded and shortened.\n\n    @method expandFirstPost\n  **/\n  expand: function() {\n    var self = this;\n    return Discourse.ajax(\"/posts/\" + this.get('id') + \"/expand-embed\").then(function(post) {\n      self.set('cooked', \"\u003csection class='expanded-embed'\u003e\" + post.cooked + \"\u003c/section\u003e\" );\n    });\n  },\n\n  /**\n    Recover a deleted post\n\n    @method recover\n  **/\n  recover: function() {\n    var post = this;\n    post.setProperties({\n      deleted_at: null,\n      deleted_by: null,\n      user_deleted: false,\n      can_delete: false\n    });\n\n    return Discourse.ajax(\"/posts/\" + (this.get('id')) + \"/recover\", { type: 'PUT', cache: false }).then(function(data){\n      post.setProperties({\n        cooked: data.cooked,\n        raw: data.raw,\n        user_deleted: false,\n        can_delete: true,\n        version: data.version\n      });\n    });\n  },\n\n  /**\n    Changes the state of the post to be deleted. Does not call the server, that should be\n    done elsewhere.\n\n    @method setDeletedState\n    @param {Discourse.User} deletedBy The user deleting the post\n  **/\n  setDeletedState: function(deletedBy) {\n    this.set('oldCooked', this.get('cooked'));\n\n    // Moderators can delete posts. Users can only trigger a deleted at message.\n    if (deletedBy.get('staff')) {\n      this.setProperties({\n        deleted_at: new Date(),\n        deleted_by: deletedBy,\n        can_delete: false\n      });\n    } else {\n      this.setProperties({\n        cooked: Discourse.Markdown.cook(I18n.t(\"post.deleted_by_author\", {count: Discourse.SiteSettings.delete_removed_posts_after})),\n        can_delete: false,\n        version: this.get('version') + 1,\n        can_recover: true,\n        can_edit: false,\n        user_deleted: true\n      });\n    }\n  },\n\n  /**\n    Changes the state of the post to NOT be deleted. Does not call the server.\n    This can only be called after setDeletedState was called, but the delete\n    failed on the server.\n\n    @method undoDeletedState\n  **/\n  undoDeleteState: function() {\n    if (this.get('oldCooked')) {\n      this.setProperties({\n        deleted_at: null,\n        deleted_by: null,\n        cooked: this.get('oldCooked'),\n        version: this.get('version') - 1,\n        can_recover: false,\n        user_deleted: false\n      });\n    }\n  },\n\n  /**\n    Deletes a post\n\n    @method destroy\n    @param {Discourse.User} deletedBy The user deleting the post\n  **/\n  destroy: function(deletedBy) {\n    this.setDeletedState(deletedBy);\n    return Discourse.ajax(\"/posts/\" + (this.get('id')), { type: 'DELETE' });\n  },\n\n  /**\n    Updates a post from another's attributes. This will normally happen when a post is loading but\n    is already found in an identity map.\n\n    @method updateFromPost\n    @param {Discourse.Post} otherPost The post we're updating from\n  **/\n  updateFromPost: function(otherPost) {\n    var self = this;\n    Object.keys(otherPost).forEach(function (key) {\n      var value = otherPost[key],\n          oldValue = self[key];\n\n      if (!value) { value = null; }\n      if (!oldValue) { oldValue = null; }\n\n      var skip = false;\n      if (typeof value !== \"function\" \u0026\u0026 oldValue !== value) {\n        // wishing for an identity map\n        if (key === \"reply_to_user\" \u0026\u0026 value \u0026\u0026 oldValue) {\n          skip = value.username === oldValue.username || Em.get(value, \"username\") === Em.get(oldValue, \"username\");\n        }\n\n        if (!skip) {\n          self.set(key, value);\n        }\n      }\n    });\n  },\n\n  /**\n    Updates a post from a JSON packet. This is normally done after the post is saved to refresh any\n    attributes.\n\n    @method updateFromJson\n    @param {Object} obj The Json data to update with\n  **/\n  updateFromJson: function(obj) {\n    if (!obj) return;\n\n    // Update all the properties\n    var post = this;\n    _.each(obj, function(val,key) {\n      if (key !== 'actions_summary'){\n        if (val) {\n          post.set(key, val);\n        }\n      }\n    });\n\n    // Rebuild actions summary\n    this.set('actions_summary', Em.A());\n    if (obj.actions_summary) {\n      var lookup = Em.Object.create();\n      _.each(obj.actions_summary,function(a) {\n        var actionSummary;\n        a.post = post;\n        a.actionType = Discourse.Site.current().postActionTypeById(a.id);\n        actionSummary = Discourse.ActionSummary.create(a);\n        post.get('actions_summary').pushObject(actionSummary);\n        lookup.set(a.actionType.get('name_key'), actionSummary);\n      });\n      this.set('actionByName', lookup);\n    }\n  },\n\n  // Load replies to this post\n  loadReplies: function() {\n    if(this.get('loadingReplies')){\n      return;\n    }\n\n    this.set('loadingReplies', true);\n    this.set('replies', []);\n\n    var self = this;\n    return Discourse.ajax(\"/posts/\" + (this.get('id')) + \"/replies\")\n      .then(function(loaded) {\n        var replies = self.get('replies');\n        _.each(loaded,function(reply) {\n          var post = Discourse.Post.create(reply);\n          post.set('topic', self.get('topic'));\n          replies.pushObject(post);\n        });\n      })\n      ['finally'](function(){\n        self.set('loadingReplies', false);\n    });\n  },\n\n  // Whether to show replies directly below\n  showRepliesBelow: function() {\n    var replyCount = this.get('reply_count');\n\n    // We don't show replies if there aren't any\n    if (replyCount === 0) return false;\n\n    // Always show replies if the setting `suppress_reply_directly_below` is false.\n    if (!Discourse.SiteSettings.suppress_reply_directly_below) return true;\n\n    // Always show replies if there's more than one\n    if (replyCount \u003e 1) return true;\n\n    // If we have *exactly* one reply, we have to consider if it's directly below us\n    var topic = this.get('topic');\n    return !topic.isReplyDirectlyBelow(this);\n\n  }.property('reply_count'),\n\n  expandHidden: function() {\n    var self = this;\n    return Discourse.ajax(\"/posts/\" + this.get('id') + \"/cooked.json\").then(function (result) {\n      self.setProperties({\n        cooked: result.cooked,\n        cooked_hidden: false\n      });\n    });\n  }\n});\n\nDiscourse.Post.reopenClass({\n\n  createActionSummary: function(result) {\n    if (result.actions_summary) {\n      var lookup = Em.Object.create();\n      // this area should be optimized, it is creating way too many objects per post\n      result.actions_summary = result.actions_summary.map(function(a) {\n        a.post = result;\n        a.actionType = Discourse.Site.current().postActionTypeById(a.id);\n        var actionSummary = Discourse.ActionSummary.create(a);\n        lookup[a.actionType.name_key] = actionSummary;\n        return actionSummary;\n      });\n      result.set('actionByName', lookup);\n    }\n  },\n\n  create: function(obj) {\n    var result = this._super.apply(this, arguments);\n    this.createActionSummary(result);\n    if (obj \u0026\u0026 obj.reply_to_user) {\n      result.set('reply_to_user', Discourse.User.create(obj.reply_to_user));\n    }\n    return result;\n  },\n\n  deleteMany: function(selectedPosts, selectedReplies) {\n    return Discourse.ajax(\"/posts/destroy_many\", {\n      type: 'DELETE',\n      data: {\n        post_ids: selectedPosts.map(function(p) { return p.get('id'); }),\n        reply_post_ids: selectedReplies.map(function(p) { return p.get('id'); })\n      }\n    });\n  },\n\n  loadRevision: function(postId, version) {\n    return Discourse.ajax(\"/posts/\" + postId + \"/revisions/\" + version + \".json\").then(function (result) {\n      return Em.Object.create(result);\n    });\n  },\n\n  loadQuote: function(postId) {\n    return Discourse.ajax(\"/posts/\" + postId + \".json\").then(function (result) {\n      var post = Discourse.Post.create(result);\n      return Discourse.Quote.build(post, post.get('raw'));\n    });\n  },\n\n  load: function(postId) {\n    return Discourse.ajax(\"/posts/\" + postId + \".json\").then(function (result) {\n      return Discourse.Post.create(result);\n    });\n  },\n\n  bookmark: function(postId, bookmarked) {\n    return Discourse.ajax(\"/posts/\" + postId + \"/bookmark\", { type: 'PUT', data: { bookmarked: bookmarked } });\n  }\n\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A data model for summarizing actions a user has taken, for example liking a post.

  @class ActionSummary
  @extends Discourse.Model
  @namespace Discourse
  @module Discourse
**/

Discourse.ActionSummary = Discourse.Model.extend({

  // Description for the action
  description: function() {
    var action = this.get('actionType.name_key');
    if (this.get('acted')) {
      if (this.get('count') <= 1) {
        return I18n.t('post.actions.by_you.' + action);
      } else {
        return I18n.t('post.actions.by_you_and_others.' + action, { count: this.get('count') - 1 });
      }
    } else {
      return I18n.t('post.actions.by_others.' + action, { count: this.get('count') });
    }
  }.property('count', 'acted', 'actionType'),

  canAlsoAction: Em.computed.and('can_act', 'actionType.notCustomFlag'),
  usersCollapsed: Em.computed.not('usersExpanded'),
  usersExpanded: Em.computed.gt('users.length', 0),

  canToggle: function() {
    return this.get('can_undo') || this.get('can_act');
  }.property('can_undo', 'can_act'),

  // Remove it
  removeAction: function() {
    this.setProperties({
      acted: false,
      count: this.get('count') - 1,
      can_act: true,
      can_undo: false
    });

    if (this.get('usersExpanded')) {
      this.get('users').removeObject(Discourse.User.current());
    }
  },

  toggle: function() {
    if (!this.get('acted')) {
      this.act();
    } else {
      this.undo();
    }
  },

  // Perform this action
  act: function(opts) {
    if (!opts) opts = {};

    var action = this.get('actionType.name_key');

    // Mark it as acted
    this.setProperties({
      acted: true,
      count: this.get('count') + 1,
      can_act: false,
      can_undo: true
    });

    if(action === 'notify_moderators' || action === 'notify_user') {
      this.set('can_undo',false);
      this.set('can_defer_flags',false);
    }

    // Add ourselves to the users who liked it if present
    if (this.get('usersExpanded')) {
      this.get('users').addObject(Discourse.User.current());
    }

    // Create our post action
    var self = this;

    return Discourse.ajax("/post_actions", {
      type: 'POST',
      data: {
        id: this.get('flagTopic') ? this.get('flagTopic.id') : this.get('post.id'),
        post_action_type_id: this.get('id'),
        message: opts.message,
        take_action: opts.takeAction,
        flag_topic: this.get('flagTopic') ? true : false
      }
    }).then(function(result) {
      var post = self.get('post');
      if (post && result && result.id === post.get('id')) {
        post.updateFromJson(result);
      }
      return post;
    }).catch(function (error) {
      self.removeAction();
      var message = $.parseJSON(error.responseText).errors;
      bootbox.alert(message);
    });
  },

  // Undo this action
  undo: function() {
    this.removeAction();

    // Remove our post action
    var self = this;
    return Discourse.ajax("/post_actions/" + (this.get('post.id')), {
      type: 'DELETE',
      data: {
        post_action_type_id: this.get('id')
      }
    }).then(function(result) {
      var post = self.get('post');
      if (post && result && result.id === post.get('id')) {
        post.updateFromJson(result);
      }
      return post;
    });
  },

  deferFlags: function() {
    var self = this;
    return Discourse.ajax("/post_actions/defer_flags", {
      type: "POST",
      data: {
        post_action_type_id: this.get("id"),
        id: this.get("post.id")
      }
    }).then(function () {
      self.set("count", 0);
    });
  },

  loadUsers: function() {
    var self = this;
    Discourse.ajax("/post_actions/users", {
      data: {
        id: this.get('post.id'),
        post_action_type_id: this.get('id')
      }
    }).then(function (result) {
      var users = Em.A();
      self.set('users', users);
      _.each(result,function(user) {
        if (user.id === Discourse.User.currentProp('id')) {
          users.pushObject(Discourse.User.current());
        } else {
          users.pushObject(Discourse.User.create(user));
        }
      });
    });
  }
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/action_summary.js'] = "/**\n  A data model for summarizing actions a user has taken, for example liking a post.\n\n  @class ActionSummary\n  @extends Discourse.Model\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.ActionSummary = Discourse.Model.extend({\n\n  // Description for the action\n  description: function() {\n    var action = this.get('actionType.name_key');\n    if (this.get('acted')) {\n      if (this.get('count') \u003c= 1) {\n        return I18n.t('post.actions.by_you.' + action);\n      } else {\n        return I18n.t('post.actions.by_you_and_others.' + action, { count: this.get('count') - 1 });\n      }\n    } else {\n      return I18n.t('post.actions.by_others.' + action, { count: this.get('count') });\n    }\n  }.property('count', 'acted', 'actionType'),\n\n  canAlsoAction: Em.computed.and('can_act', 'actionType.notCustomFlag'),\n  usersCollapsed: Em.computed.not('usersExpanded'),\n  usersExpanded: Em.computed.gt('users.length', 0),\n\n  canToggle: function() {\n    return this.get('can_undo') || this.get('can_act');\n  }.property('can_undo', 'can_act'),\n\n  // Remove it\n  removeAction: function() {\n    this.setProperties({\n      acted: false,\n      count: this.get('count') - 1,\n      can_act: true,\n      can_undo: false\n    });\n\n    if (this.get('usersExpanded')) {\n      this.get('users').removeObject(Discourse.User.current());\n    }\n  },\n\n  toggle: function() {\n    if (!this.get('acted')) {\n      this.act();\n    } else {\n      this.undo();\n    }\n  },\n\n  // Perform this action\n  act: function(opts) {\n    if (!opts) opts = {};\n\n    var action = this.get('actionType.name_key');\n\n    // Mark it as acted\n    this.setProperties({\n      acted: true,\n      count: this.get('count') + 1,\n      can_act: false,\n      can_undo: true\n    });\n\n    if(action === 'notify_moderators' || action === 'notify_user') {\n      this.set('can_undo',false);\n      this.set('can_defer_flags',false);\n    }\n\n    // Add ourselves to the users who liked it if present\n    if (this.get('usersExpanded')) {\n      this.get('users').addObject(Discourse.User.current());\n    }\n\n    // Create our post action\n    var self = this;\n\n    return Discourse.ajax(\"/post_actions\", {\n      type: 'POST',\n      data: {\n        id: this.get('flagTopic') ? this.get('flagTopic.id') : this.get('post.id'),\n        post_action_type_id: this.get('id'),\n        message: opts.message,\n        take_action: opts.takeAction,\n        flag_topic: this.get('flagTopic') ? true : false\n      }\n    }).then(function(result) {\n      var post = self.get('post');\n      if (post \u0026\u0026 result \u0026\u0026 result.id === post.get('id')) {\n        post.updateFromJson(result);\n      }\n      return post;\n    }).catch(function (error) {\n      self.removeAction();\n      var message = $.parseJSON(error.responseText).errors;\n      bootbox.alert(message);\n    });\n  },\n\n  // Undo this action\n  undo: function() {\n    this.removeAction();\n\n    // Remove our post action\n    var self = this;\n    return Discourse.ajax(\"/post_actions/\" + (this.get('post.id')), {\n      type: 'DELETE',\n      data: {\n        post_action_type_id: this.get('id')\n      }\n    }).then(function(result) {\n      var post = self.get('post');\n      if (post \u0026\u0026 result \u0026\u0026 result.id === post.get('id')) {\n        post.updateFromJson(result);\n      }\n      return post;\n    });\n  },\n\n  deferFlags: function() {\n    var self = this;\n    return Discourse.ajax(\"/post_actions/defer_flags\", {\n      type: \"POST\",\n      data: {\n        post_action_type_id: this.get(\"id\"),\n        id: this.get(\"post.id\")\n      }\n    }).then(function () {\n      self.set(\"count\", 0);\n    });\n  },\n\n  loadUsers: function() {\n    var self = this;\n    Discourse.ajax(\"/post_actions/users\", {\n      data: {\n        id: this.get('post.id'),\n        post_action_type_id: this.get('id')\n      }\n    }).then(function (result) {\n      var users = Em.A();\n      self.set('users', users);\n      _.each(result,function(user) {\n        if (user.id === Discourse.User.currentProp('id')) {\n          users.pushObject(Discourse.User.current());\n        } else {\n          users.pushObject(Discourse.User.create(user));\n        }\n      });\n    });\n  }\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A data model for flagged/deleted posts.

  @class AdminPost
  @extends Discourse.Post
  @namespace Discourse
  @module Discourse
**/

Discourse.AdminPost = Discourse.Post.extend({

  _attachCategory: function () {
    var categoryId = this.get("category_id");
    if (categoryId) {
      this.set("category", Discourse.Category.findById(categoryId));
    }
  }.on("init"),

  presentName: Em.computed.any('name', 'username'),

  sameUser: function() {
    return this.get("username") === Discourse.User.currentProp("username");
  }.property("username"),

  descriptionKey: function () {
    if (this.get("reply_to_post_number")) {
      return this.get("sameUser") ? "you_replied_to_post" : "user_replied_to_post";
    } else {
      return this.get("sameUser") ? "you_replied_to_topic" : "user_replied_to_topic";
    }
  }.property("reply_to_post_number", "sameUser"),

  descriptionHtml: function () {
    var descriptionKey = this.get("descriptionKey");
    if (!descriptionKey) { return; }

    var description = I18n.t("user_action." + descriptionKey, {
      userUrl: this.get("usernameUrl"),
      user: Handlebars.Utils.escapeExpression(this.get("presentName")),
      postUrl: this.get("url"),
      post_number: "#" + this.get("reply_to_post_number"),
      topicUrl: this.get("url"),
    });

    return new Handlebars.SafeString(description);

  }.property("descriptionKey")

});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/admin_post.js'] = "/**\n  A data model for flagged/deleted posts.\n\n  @class AdminPost\n  @extends Discourse.Post\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.AdminPost = Discourse.Post.extend({\n\n  _attachCategory: function () {\n    var categoryId = this.get(\"category_id\");\n    if (categoryId) {\n      this.set(\"category\", Discourse.Category.findById(categoryId));\n    }\n  }.on(\"init\"),\n\n  presentName: Em.computed.any('name', 'username'),\n\n  sameUser: function() {\n    return this.get(\"username\") === Discourse.User.currentProp(\"username\");\n  }.property(\"username\"),\n\n  descriptionKey: function () {\n    if (this.get(\"reply_to_post_number\")) {\n      return this.get(\"sameUser\") ? \"you_replied_to_post\" : \"user_replied_to_post\";\n    } else {\n      return this.get(\"sameUser\") ? \"you_replied_to_topic\" : \"user_replied_to_topic\";\n    }\n  }.property(\"reply_to_post_number\", \"sameUser\"),\n\n  descriptionHtml: function () {\n    var descriptionKey = this.get(\"descriptionKey\");\n    if (!descriptionKey) { return; }\n\n    var description = I18n.t(\"user_action.\" + descriptionKey, {\n      userUrl: this.get(\"usernameUrl\"),\n      user: Handlebars.Utils.escapeExpression(this.get(\"presentName\")),\n      postUrl: this.get(\"url\"),\n      post_number: \"#\" + this.get(\"reply_to_post_number\"),\n      topicUrl: this.get(\"url\"),\n    });\n\n    return new Handlebars.SafeString(description);\n\n  }.property(\"descriptionKey\")\n\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A data model for archetypes such as polls, tasks, etc.

  @class Archetype
  @extends Discourse.Model
  @namespace Discourse
  @module Discourse
**/

Discourse.Archetype = Discourse.Model.extend({

  hasOptions: Em.computed.gt('options.length', 0),

  site: function() {
    return Discourse.Site.current();
  }.property(),

  isDefault: Discourse.computed.propertyEqual('id', 'site.default_archetype'),
  notDefault: Em.computed.not('isDefault')

});




// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/archetype.js'] = "/**\n  A data model for archetypes such as polls, tasks, etc.\n\n  @class Archetype\n  @extends Discourse.Model\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.Archetype = Discourse.Model.extend({\n\n  hasOptions: Em.computed.gt('options.length', 0),\n\n  site: function() {\n    return Discourse.Site.current();\n  }.property(),\n\n  isDefault: Discourse.computed.propertyEqual('id', 'site.default_archetype'),\n  notDefault: Em.computed.not('isDefault')\n\n});\n\n\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A data model representing a badge on Discourse

  @class Badge
  @extends Discourse.Model
  @namespace Discourse
  @module Discourse
**/

Discourse.Badge = Discourse.Model.extend({
  /**
    Is this a new badge?

    @property newBadge
    @type {String}
  **/
  newBadge: Em.computed.none('id'),

  hasQuery: function(){
    var query = this.get('query');
    return query && query.trim().length > 0;
  }.property('query'),

  /**
    @private

    The name key to use for fetching i18n translations.

    @property i18nNameKey
    @type {String}
  **/
  i18nNameKey: function() {
    return this.get('name').toLowerCase().replace(/\s/g, '_');
  }.property('name'),

  /**
    The display name of this badge. Attempts to use a translation and falls back to
    the actual name.

    @property displayName
    @type {String}
  **/
  displayName: function() {
    var i18nKey = "badges.badge." + this.get('i18nNameKey') + ".name";
    return I18n.t(i18nKey, {defaultValue: this.get('name')});
  }.property('name', 'i18nNameKey'),

  /**
    The i18n translated description for this badge. Returns the null if no
    translation exists.

    @property translatedDescription
    @type {String}
  **/
  translatedDescription: function() {
    var i18nKey = "badges.badge." + this.get('i18nNameKey') + ".description",
        translation = I18n.t(i18nKey);
    if (translation.indexOf(i18nKey) !== -1) {
      translation = null;
    }
    return translation;
  }.property('i18nNameKey'),

  displayDescription: function(){
    // we support html in description but in most places do not need it
    return this.get('displayDescriptionHtml').replace(/<[^>]*>/g, "");
  }.property('displayDescriptionHtml'),

  /**
    Display-friendly description string. Returns either a translation or the
    original description string.

    @property displayDescription
    @type {String}
  **/
  displayDescriptionHtml: function() {
    var translated = this.get('translatedDescription');
    return (translated === null ? this.get('description') : translated) || "";
  }.property('description', 'translatedDescription'),

  /**
    Update this badge with the response returned by the server on save.

    @method updateFromJson
    @param {Object} json The JSON response returned by the server
  **/
  updateFromJson: function(json) {
    var self = this;
    if (json.badge) {
      Object.keys(json.badge).forEach(function(key) {
        self.set(key, json.badge[key]);
      });
    }
    if (json.badge_types) {
      json.badge_types.forEach(function(badgeType) {
        if (badgeType.id === self.get('badge_type_id')) {
          self.set('badge_type', Object.create(badgeType));
        }
      });
    }
  },

  badgeTypeClassName: function() {
    var type = this.get('badge_type.name') || "";
    return "badge-type-" + type.toLowerCase();
  }.property('badge_type.name'),

  /**
    Save and update the badge from the server's response.

    @method save
    @returns {Promise} A promise that resolves to the updated `Discourse.Badge`
  **/
  save: function(fields) {
    this.set('savingStatus', I18n.t('saving'));
    this.set('saving', true);

    var url = "/admin/badges",
        requestType = "POST",
        self = this;

    if (!this.get('newBadge')) {
      // We are updating an existing badge.
      url += "/" + this.get('id');
      requestType = "PUT";
    }

    var boolFields = ['allow_title', 'multiple_grant',
                      'listable', 'auto_revoke',
                      'enabled', 'show_posts',
                      'target_posts' ];

    var data = {};
    fields.forEach(function(field){
      var d = self.get(field);
      if(_.include(boolFields, field)) {
        d = !!d;
      }
      data[field] = d;
    });

    return Discourse.ajax(url, {
      type: requestType,
      data: data
    }).then(function(json) {
      self.updateFromJson(json);
      self.set('savingStatus', I18n.t('saved'));
      self.set('saving', false);
      return self;
    }).catch(function(error) {
      self.set('savingStatus', I18n.t('failed'));
      self.set('saving', false);
      throw error;
    });
  },

  /**
    Destroy the badge.

    @method destroy
    @returns {Promise} A promise that resolves to the server response
  **/
  destroy: function() {
    if (this.get('newBadge')) return Ember.RSVP.resolve();
    return Discourse.ajax("/admin/badges/" + this.get('id'), {
      type: "DELETE"
    });
  }
});

Discourse.Badge.reopenClass({
  /**
    Create `Discourse.Badge` instances from the server JSON response.

    @method createFromJson
    @param {Object} json The JSON returned by the server
    @returns Array or instance of `Discourse.Badge` depending on the input JSON
  **/
  createFromJson: function(json) {
    // Create BadgeType objects.
    var badgeTypes = {};
    if ('badge_types' in json) {
      json.badge_types.forEach(function(badgeTypeJson) {
        badgeTypes[badgeTypeJson.id] = Ember.Object.create(badgeTypeJson);
      });
    }

    var badgeGroupings = {};
    if ('badge_groupings' in json) {
      json.badge_groupings.forEach(function(badgeGroupingJson) {
        badgeGroupings[badgeGroupingJson.id] = Discourse.BadgeGrouping.create(badgeGroupingJson);
      });
    }

    // Create Badge objects.
    var badges = [];
    if ("badge" in json) {
      badges = [json.badge];
    } else {
      badges = json.badges;
    }
    badges = badges.map(function(badgeJson) {
      var badge = Discourse.Badge.create(badgeJson);
      badge.set('badge_type', badgeTypes[badge.get('badge_type_id')]);
      badge.set('badge_grouping', badgeGroupings[badge.get('badge_grouping_id')]);
      return badge;
    });

    if ("badge" in json) {
      return badges[0];
    } else {
      return badges;
    }
  },

  /**
    Find all `Discourse.Badge` instances that have been defined.

    @method findAll
    @returns {Promise} a promise that resolves to an array of `Discourse.Badge`
  **/
  findAll: function(opts) {
    var listable = "";
    if(opts && opts.onlyListable){
      listable = "?only_listable=true";
    }
    return Discourse.ajax('/badges.json' + listable).then(function(badgesJson) {
      return Discourse.Badge.createFromJson(badgesJson);
    });
  },

  /**
    Returns a `Discourse.Badge` that has the given ID.

    @method findById
    @param {Number} id ID of the badge
    @returns {Promise} a promise that resolves to a `Discourse.Badge`
  **/
  findById: function(id) {
    return Discourse.ajax("/badges/" + id).then(function(badgeJson) {
      return Discourse.Badge.createFromJson(badgeJson);
    });
  }
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/badge.js'] = "/**\n  A data model representing a badge on Discourse\n\n  @class Badge\n  @extends Discourse.Model\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.Badge = Discourse.Model.extend({\n  /**\n    Is this a new badge?\n\n    @property newBadge\n    @type {String}\n  **/\n  newBadge: Em.computed.none('id'),\n\n  hasQuery: function(){\n    var query = this.get('query');\n    return query \u0026\u0026 query.trim().length \u003e 0;\n  }.property('query'),\n\n  /**\n    @private\n\n    The name key to use for fetching i18n translations.\n\n    @property i18nNameKey\n    @type {String}\n  **/\n  i18nNameKey: function() {\n    return this.get('name').toLowerCase().replace(/\\s/g, '_');\n  }.property('name'),\n\n  /**\n    The display name of this badge. Attempts to use a translation and falls back to\n    the actual name.\n\n    @property displayName\n    @type {String}\n  **/\n  displayName: function() {\n    var i18nKey = \"badges.badge.\" + this.get('i18nNameKey') + \".name\";\n    return I18n.t(i18nKey, {defaultValue: this.get('name')});\n  }.property('name', 'i18nNameKey'),\n\n  /**\n    The i18n translated description for this badge. Returns the null if no\n    translation exists.\n\n    @property translatedDescription\n    @type {String}\n  **/\n  translatedDescription: function() {\n    var i18nKey = \"badges.badge.\" + this.get('i18nNameKey') + \".description\",\n        translation = I18n.t(i18nKey);\n    if (translation.indexOf(i18nKey) !== -1) {\n      translation = null;\n    }\n    return translation;\n  }.property('i18nNameKey'),\n\n  displayDescription: function(){\n    // we support html in description but in most places do not need it\n    return this.get('displayDescriptionHtml').replace(/\u003c[^\u003e]*\u003e/g, \"\");\n  }.property('displayDescriptionHtml'),\n\n  /**\n    Display-friendly description string. Returns either a translation or the\n    original description string.\n\n    @property displayDescription\n    @type {String}\n  **/\n  displayDescriptionHtml: function() {\n    var translated = this.get('translatedDescription');\n    return (translated === null ? this.get('description') : translated) || \"\";\n  }.property('description', 'translatedDescription'),\n\n  /**\n    Update this badge with the response returned by the server on save.\n\n    @method updateFromJson\n    @param {Object} json The JSON response returned by the server\n  **/\n  updateFromJson: function(json) {\n    var self = this;\n    if (json.badge) {\n      Object.keys(json.badge).forEach(function(key) {\n        self.set(key, json.badge[key]);\n      });\n    }\n    if (json.badge_types) {\n      json.badge_types.forEach(function(badgeType) {\n        if (badgeType.id === self.get('badge_type_id')) {\n          self.set('badge_type', Object.create(badgeType));\n        }\n      });\n    }\n  },\n\n  badgeTypeClassName: function() {\n    var type = this.get('badge_type.name') || \"\";\n    return \"badge-type-\" + type.toLowerCase();\n  }.property('badge_type.name'),\n\n  /**\n    Save and update the badge from the server's response.\n\n    @method save\n    @returns {Promise} A promise that resolves to the updated `Discourse.Badge`\n  **/\n  save: function(fields) {\n    this.set('savingStatus', I18n.t('saving'));\n    this.set('saving', true);\n\n    var url = \"/admin/badges\",\n        requestType = \"POST\",\n        self = this;\n\n    if (!this.get('newBadge')) {\n      // We are updating an existing badge.\n      url += \"/\" + this.get('id');\n      requestType = \"PUT\";\n    }\n\n    var boolFields = ['allow_title', 'multiple_grant',\n                      'listable', 'auto_revoke',\n                      'enabled', 'show_posts',\n                      'target_posts' ];\n\n    var data = {};\n    fields.forEach(function(field){\n      var d = self.get(field);\n      if(_.include(boolFields, field)) {\n        d = !!d;\n      }\n      data[field] = d;\n    });\n\n    return Discourse.ajax(url, {\n      type: requestType,\n      data: data\n    }).then(function(json) {\n      self.updateFromJson(json);\n      self.set('savingStatus', I18n.t('saved'));\n      self.set('saving', false);\n      return self;\n    }).catch(function(error) {\n      self.set('savingStatus', I18n.t('failed'));\n      self.set('saving', false);\n      throw error;\n    });\n  },\n\n  /**\n    Destroy the badge.\n\n    @method destroy\n    @returns {Promise} A promise that resolves to the server response\n  **/\n  destroy: function() {\n    if (this.get('newBadge')) return Ember.RSVP.resolve();\n    return Discourse.ajax(\"/admin/badges/\" + this.get('id'), {\n      type: \"DELETE\"\n    });\n  }\n});\n\nDiscourse.Badge.reopenClass({\n  /**\n    Create `Discourse.Badge` instances from the server JSON response.\n\n    @method createFromJson\n    @param {Object} json The JSON returned by the server\n    @returns Array or instance of `Discourse.Badge` depending on the input JSON\n  **/\n  createFromJson: function(json) {\n    // Create BadgeType objects.\n    var badgeTypes = {};\n    if ('badge_types' in json) {\n      json.badge_types.forEach(function(badgeTypeJson) {\n        badgeTypes[badgeTypeJson.id] = Ember.Object.create(badgeTypeJson);\n      });\n    }\n\n    var badgeGroupings = {};\n    if ('badge_groupings' in json) {\n      json.badge_groupings.forEach(function(badgeGroupingJson) {\n        badgeGroupings[badgeGroupingJson.id] = Discourse.BadgeGrouping.create(badgeGroupingJson);\n      });\n    }\n\n    // Create Badge objects.\n    var badges = [];\n    if (\"badge\" in json) {\n      badges = [json.badge];\n    } else {\n      badges = json.badges;\n    }\n    badges = badges.map(function(badgeJson) {\n      var badge = Discourse.Badge.create(badgeJson);\n      badge.set('badge_type', badgeTypes[badge.get('badge_type_id')]);\n      badge.set('badge_grouping', badgeGroupings[badge.get('badge_grouping_id')]);\n      return badge;\n    });\n\n    if (\"badge\" in json) {\n      return badges[0];\n    } else {\n      return badges;\n    }\n  },\n\n  /**\n    Find all `Discourse.Badge` instances that have been defined.\n\n    @method findAll\n    @returns {Promise} a promise that resolves to an array of `Discourse.Badge`\n  **/\n  findAll: function(opts) {\n    var listable = \"\";\n    if(opts \u0026\u0026 opts.onlyListable){\n      listable = \"?only_listable=true\";\n    }\n    return Discourse.ajax('/badges.json' + listable).then(function(badgesJson) {\n      return Discourse.Badge.createFromJson(badgesJson);\n    });\n  },\n\n  /**\n    Returns a `Discourse.Badge` that has the given ID.\n\n    @method findById\n    @param {Number} id ID of the badge\n    @returns {Promise} a promise that resolves to a `Discourse.Badge`\n  **/\n  findById: function(id) {\n    return Discourse.ajax(\"/badges/\" + id).then(function(badgeJson) {\n      return Discourse.Badge.createFromJson(badgeJson);\n    });\n  }\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

Discourse.BadgeGrouping= Discourse.Model.extend({
  i18nNameKey: function() {
    return this.get('name').toLowerCase().replace(/\s/g, '_');
  }.property('name'),

  displayName: function(){
    var i18nKey = "badges.badge_grouping." + this.get('i18nNameKey') + ".name";
    return I18n.t(i18nKey, {defaultValue: this.get('name')});
  }.property()
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/badge_grouping.js'] = "Discourse.BadgeGrouping= Discourse.Model.extend({\n  i18nNameKey: function() {\n    return this.get('name').toLowerCase().replace(/\\s/g, '_');\n  }.property('name'),\n\n  displayName: function(){\n    var i18nKey = \"badges.badge_grouping.\" + this.get('i18nNameKey') + \".name\";\n    return I18n.t(i18nKey, {defaultValue: this.get('name')});\n  }.property()\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

Discourse.Category = Discourse.Model.extend({

  init: function() {
    this._super();
    var availableGroups = Em.A(this.get("available_groups"));

    this.set("availableGroups", availableGroups);
    this.set("permissions", Em.A(_.map(this.group_permissions, function(elem){
      availableGroups.removeObject(elem.group_name);
      return {
                group_name: elem.group_name,
                permission: Discourse.PermissionType.create({id: elem.permission_type})
      };
    })));
  },

  availablePermissions: function(){
    return [  Discourse.PermissionType.create({id: Discourse.PermissionType.FULL}),
              Discourse.PermissionType.create({id: Discourse.PermissionType.CREATE_POST}),
              Discourse.PermissionType.create({id: Discourse.PermissionType.READONLY})
           ];
  }.property(),

  searchContext: function() {
    return ({ type: 'category', id: this.get('id'), category: this });
  }.property('id'),

  url: function() {
    return Discourse.getURL("/category/") + Discourse.Category.slugFor(this);
  }.property('name'),

  nameLower: function() {
    return this.get('name').toLowerCase();
  }.property('name'),

  unreadUrl: function() {
    return this.get('url') + '/l/unread';
  }.property('url'),

  newUrl: function() {
    return this.get('url') + '/l/new';
  }.property('url'),

  style: function() {
    return "background-color: #" + this.get('category.color') + "; color: #" + this.get('category.text_color') + ";";
  }.property('color', 'text_color'),

  moreTopics: function() {
    return this.get('topic_count') > Discourse.SiteSettings.category_featured_topics;
  }.property('topic_count'),

  save: function() {
    var url = "/categories";
    if (this.get('id')) {
      url = "/categories/" + this.get('id');
    }

    return Discourse.ajax(url, {
      data: {
        name: this.get('name'),
        color: this.get('color'),
        text_color: this.get('text_color'),
        secure: this.get('secure'),
        permissions: this.get('permissionsForUpdate'),
        auto_close_hours: this.get('auto_close_hours'),
        position: this.get('position'),
        email_in: this.get('email_in'),
        email_in_allow_strangers: this.get('email_in_allow_strangers'),
        parent_category_id: this.get('parent_category_id'),
        logo_url: this.get('logo_url'),
        background_url: this.get('background_url'),
        allow_badges: this.get('allow_badges')
      },
      type: this.get('id') ? 'PUT' : 'POST'
    });
  },

  permissionsForUpdate: function(){
    var rval = {};
    _.each(this.get("permissions"),function(p){
      rval[p.group_name] = p.permission.id;
    });
    return rval;
  }.property("permissions"),

  destroy: function() {
    return Discourse.ajax("/categories/" + (this.get('slug') || this.get('id')), { type: 'DELETE' });
  },

  addPermission: function(permission){
    this.get("permissions").addObject(permission);
    this.get("availableGroups").removeObject(permission.group_name);
  },


  removePermission: function(permission){
    this.get("permissions").removeObject(permission);
    this.get("availableGroups").addObject(permission.group_name);
  },

  // note, this is used in a data attribute, data attributes get downcased
  //  to avoid confusion later on using this naming here.
  description_text: function(){
    return $("<div>" + this.get("description") + "</div>").text();
  }.property("description"),

  permissions: function(){
    return Em.A([
      {group_name: "everyone", permission: Discourse.PermissionType.create({id: 1})},
      {group_name: "admins", permission: Discourse.PermissionType.create({id: 2}) },
      {group_name: "crap", permission: Discourse.PermissionType.create({id: 3}) }
    ]);
  }.property(),

  latestTopic: function(){
    var topics = this.get('topics');
    if (topics && topics.length) {
      return topics[0];
    }
  }.property("topics"),

  featuredTopics: function() {
    var topics = this.get('topics');
    if (topics && topics.length) {
      return topics.slice(0, Discourse.SiteSettings.category_featured_topics || 2);
    }
  }.property('topics'),

  topicTrackingState: function(){
    return Discourse.TopicTrackingState.current();
  }.property(),

  unreadTopics: function(){
    return this.get('topicTrackingState').countUnread(this.get('id'));
  }.property('topicTrackingState.messageCount'),

  newTopics: function(){
    return this.get('topicTrackingState').countNew(this.get('id'));
  }.property('topicTrackingState.messageCount'),

  topicStatsTitle: function() {
    var string = I18n.t('categories.topic_stats');
    _.each(this.get('topicCountStats'), function(stat) {
      string += ' ' + I18n.t('categories.topic_stat_sentence', {count: stat.value, unit: stat.unit});
    }, this);
    return string;
  }.property('post_count'),

  postStatsTitle: function() {
    var string = I18n.t('categories.post_stats');
    _.each(this.get('postCountStats'), function(stat) {
      string += ' ' + I18n.t('categories.post_stat_sentence', {count: stat.value, unit: stat.unit});
    }, this);
    return string;
  }.property('post_count'),

  topicCountStats: function() {
    return this.countStats('topics');
  }.property('topics_year', 'topics_month', 'topics_week', 'topics_day'),

  setNotification: function(notification_level) {
    var url = "/category/" + this.get('id')+"/notifications";
    this.set('notification_level', notification_level);
    return Discourse.ajax(url, {
      data: {
        notification_level: notification_level
      },
      type: 'POST'
    });
  },

  postCountStats: function() {
    return this.countStats('posts');
  }.property('posts_year', 'posts_month', 'posts_week', 'posts_day'),

  countStats: function(prefix) {
    var stats = [], val;
    _.each(['day', 'week', 'month', 'year'], function(unit) {
      val = this.get(prefix + '_' + unit);
      if (val > 0) stats.pushObject({value: val, unit: I18n.t(unit)});
      if (stats.length === 2) return false;
    }, this);
    return stats;
  },

  isUncategorizedCategory: function() {
    return this.get('id') === Discourse.Site.currentProp("uncategorized_category_id");
  }.property('id')
});

var _uncategorized;

Discourse.Category.reopenClass({

  NotificationLevel: {
    WATCHING: 3,
    TRACKING: 2,
    REGULAR: 1,
    MUTED: 0
  },

  findUncategorized: function() {
    _uncategorized = _uncategorized || Discourse.Category.list().findBy('id', Discourse.Site.currentProp('uncategorized_category_id'));
    return _uncategorized;
  },

  slugFor: function(category) {
    if (!category) return "";

    var parentCategory = Em.get(category, 'parentCategory'),
        result = "";

    if (parentCategory) {
      result = Discourse.Category.slugFor(parentCategory) + "/";
    }

    var id = Em.get(category, 'id'),
        slug = Em.get(category, 'slug');

    if (!slug || slug.trim().length === 0) return result + id + "-category";
    return result + slug;
  },

  list: function() {
    return Discourse.Site.currentProp('sortedCategories');
  },

  idMap: function() {
    return Discourse.Site.currentProp('categoriesById');
  },

  findSingleBySlug: function(slug) {
    return Discourse.Category.list().find(function(c) {
      return Discourse.Category.slugFor(c) === slug;
    });
  },

  findById: function(id) {
    return Discourse.Category.idMap()[id];
  },

  findByIds: function(ids){
    var categories = [];
    _.each(ids, function(id){
      var found = Discourse.Category.findById(id);
      if(found){
        categories.push(found);
      }
    });
    return categories;
  },

  findBySlug: function(slug, parentSlug) {
    var categories = Discourse.Category.list(),
        category;

    if (parentSlug) {
      var parentCategory = Discourse.Category.findSingleBySlug(parentSlug);
      if (parentCategory) {
        if (slug === 'none') { return parentCategory; }

        category = categories.find(function(item) {
          return item && item.get('parentCategory') === parentCategory && Discourse.Category.slugFor(item) === (parentSlug + "/" + slug);
        });
      }
    } else {
      category = Discourse.Category.findSingleBySlug(slug);

      // If we have a parent category, we need to enforce it
      if (category && category.get('parentCategory')) return;
    }

    // In case the slug didn't work, try to find it by id instead.
    if (!category) {
      category = categories.findBy('id', parseInt(slug, 10));
    }

    return category;
  },

  reloadById: function(id) {
    return Discourse.ajax("/category/" + id + "/show.json").then(function (result) {
      return Discourse.Category.create(result.category);
    });
  }
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/category.js'] = "Discourse.Category = Discourse.Model.extend({\n\n  init: function() {\n    this._super();\n    var availableGroups = Em.A(this.get(\"available_groups\"));\n\n    this.set(\"availableGroups\", availableGroups);\n    this.set(\"permissions\", Em.A(_.map(this.group_permissions, function(elem){\n      availableGroups.removeObject(elem.group_name);\n      return {\n                group_name: elem.group_name,\n                permission: Discourse.PermissionType.create({id: elem.permission_type})\n      };\n    })));\n  },\n\n  availablePermissions: function(){\n    return [  Discourse.PermissionType.create({id: Discourse.PermissionType.FULL}),\n              Discourse.PermissionType.create({id: Discourse.PermissionType.CREATE_POST}),\n              Discourse.PermissionType.create({id: Discourse.PermissionType.READONLY})\n           ];\n  }.property(),\n\n  searchContext: function() {\n    return ({ type: 'category', id: this.get('id'), category: this });\n  }.property('id'),\n\n  url: function() {\n    return Discourse.getURL(\"/category/\") + Discourse.Category.slugFor(this);\n  }.property('name'),\n\n  nameLower: function() {\n    return this.get('name').toLowerCase();\n  }.property('name'),\n\n  unreadUrl: function() {\n    return this.get('url') + '/l/unread';\n  }.property('url'),\n\n  newUrl: function() {\n    return this.get('url') + '/l/new';\n  }.property('url'),\n\n  style: function() {\n    return \"background-color: #\" + this.get('category.color') + \"; color: #\" + this.get('category.text_color') + \";\";\n  }.property('color', 'text_color'),\n\n  moreTopics: function() {\n    return this.get('topic_count') \u003e Discourse.SiteSettings.category_featured_topics;\n  }.property('topic_count'),\n\n  save: function() {\n    var url = \"/categories\";\n    if (this.get('id')) {\n      url = \"/categories/\" + this.get('id');\n    }\n\n    return Discourse.ajax(url, {\n      data: {\n        name: this.get('name'),\n        color: this.get('color'),\n        text_color: this.get('text_color'),\n        secure: this.get('secure'),\n        permissions: this.get('permissionsForUpdate'),\n        auto_close_hours: this.get('auto_close_hours'),\n        position: this.get('position'),\n        email_in: this.get('email_in'),\n        email_in_allow_strangers: this.get('email_in_allow_strangers'),\n        parent_category_id: this.get('parent_category_id'),\n        logo_url: this.get('logo_url'),\n        background_url: this.get('background_url'),\n        allow_badges: this.get('allow_badges')\n      },\n      type: this.get('id') ? 'PUT' : 'POST'\n    });\n  },\n\n  permissionsForUpdate: function(){\n    var rval = {};\n    _.each(this.get(\"permissions\"),function(p){\n      rval[p.group_name] = p.permission.id;\n    });\n    return rval;\n  }.property(\"permissions\"),\n\n  destroy: function() {\n    return Discourse.ajax(\"/categories/\" + (this.get('slug') || this.get('id')), { type: 'DELETE' });\n  },\n\n  addPermission: function(permission){\n    this.get(\"permissions\").addObject(permission);\n    this.get(\"availableGroups\").removeObject(permission.group_name);\n  },\n\n\n  removePermission: function(permission){\n    this.get(\"permissions\").removeObject(permission);\n    this.get(\"availableGroups\").addObject(permission.group_name);\n  },\n\n  // note, this is used in a data attribute, data attributes get downcased\n  //  to avoid confusion later on using this naming here.\n  description_text: function(){\n    return $(\"\u003cdiv\u003e\" + this.get(\"description\") + \"\u003c/div\u003e\").text();\n  }.property(\"description\"),\n\n  permissions: function(){\n    return Em.A([\n      {group_name: \"everyone\", permission: Discourse.PermissionType.create({id: 1})},\n      {group_name: \"admins\", permission: Discourse.PermissionType.create({id: 2}) },\n      {group_name: \"crap\", permission: Discourse.PermissionType.create({id: 3}) }\n    ]);\n  }.property(),\n\n  latestTopic: function(){\n    var topics = this.get('topics');\n    if (topics \u0026\u0026 topics.length) {\n      return topics[0];\n    }\n  }.property(\"topics\"),\n\n  featuredTopics: function() {\n    var topics = this.get('topics');\n    if (topics \u0026\u0026 topics.length) {\n      return topics.slice(0, Discourse.SiteSettings.category_featured_topics || 2);\n    }\n  }.property('topics'),\n\n  topicTrackingState: function(){\n    return Discourse.TopicTrackingState.current();\n  }.property(),\n\n  unreadTopics: function(){\n    return this.get('topicTrackingState').countUnread(this.get('id'));\n  }.property('topicTrackingState.messageCount'),\n\n  newTopics: function(){\n    return this.get('topicTrackingState').countNew(this.get('id'));\n  }.property('topicTrackingState.messageCount'),\n\n  topicStatsTitle: function() {\n    var string = I18n.t('categories.topic_stats');\n    _.each(this.get('topicCountStats'), function(stat) {\n      string += ' ' + I18n.t('categories.topic_stat_sentence', {count: stat.value, unit: stat.unit});\n    }, this);\n    return string;\n  }.property('post_count'),\n\n  postStatsTitle: function() {\n    var string = I18n.t('categories.post_stats');\n    _.each(this.get('postCountStats'), function(stat) {\n      string += ' ' + I18n.t('categories.post_stat_sentence', {count: stat.value, unit: stat.unit});\n    }, this);\n    return string;\n  }.property('post_count'),\n\n  topicCountStats: function() {\n    return this.countStats('topics');\n  }.property('topics_year', 'topics_month', 'topics_week', 'topics_day'),\n\n  setNotification: function(notification_level) {\n    var url = \"/category/\" + this.get('id')+\"/notifications\";\n    this.set('notification_level', notification_level);\n    return Discourse.ajax(url, {\n      data: {\n        notification_level: notification_level\n      },\n      type: 'POST'\n    });\n  },\n\n  postCountStats: function() {\n    return this.countStats('posts');\n  }.property('posts_year', 'posts_month', 'posts_week', 'posts_day'),\n\n  countStats: function(prefix) {\n    var stats = [], val;\n    _.each(['day', 'week', 'month', 'year'], function(unit) {\n      val = this.get(prefix + '_' + unit);\n      if (val \u003e 0) stats.pushObject({value: val, unit: I18n.t(unit)});\n      if (stats.length === 2) return false;\n    }, this);\n    return stats;\n  },\n\n  isUncategorizedCategory: function() {\n    return this.get('id') === Discourse.Site.currentProp(\"uncategorized_category_id\");\n  }.property('id')\n});\n\nvar _uncategorized;\n\nDiscourse.Category.reopenClass({\n\n  NotificationLevel: {\n    WATCHING: 3,\n    TRACKING: 2,\n    REGULAR: 1,\n    MUTED: 0\n  },\n\n  findUncategorized: function() {\n    _uncategorized = _uncategorized || Discourse.Category.list().findBy('id', Discourse.Site.currentProp('uncategorized_category_id'));\n    return _uncategorized;\n  },\n\n  slugFor: function(category) {\n    if (!category) return \"\";\n\n    var parentCategory = Em.get(category, 'parentCategory'),\n        result = \"\";\n\n    if (parentCategory) {\n      result = Discourse.Category.slugFor(parentCategory) + \"/\";\n    }\n\n    var id = Em.get(category, 'id'),\n        slug = Em.get(category, 'slug');\n\n    if (!slug || slug.trim().length === 0) return result + id + \"-category\";\n    return result + slug;\n  },\n\n  list: function() {\n    return Discourse.Site.currentProp('sortedCategories');\n  },\n\n  idMap: function() {\n    return Discourse.Site.currentProp('categoriesById');\n  },\n\n  findSingleBySlug: function(slug) {\n    return Discourse.Category.list().find(function(c) {\n      return Discourse.Category.slugFor(c) === slug;\n    });\n  },\n\n  findById: function(id) {\n    return Discourse.Category.idMap()[id];\n  },\n\n  findByIds: function(ids){\n    var categories = [];\n    _.each(ids, function(id){\n      var found = Discourse.Category.findById(id);\n      if(found){\n        categories.push(found);\n      }\n    });\n    return categories;\n  },\n\n  findBySlug: function(slug, parentSlug) {\n    var categories = Discourse.Category.list(),\n        category;\n\n    if (parentSlug) {\n      var parentCategory = Discourse.Category.findSingleBySlug(parentSlug);\n      if (parentCategory) {\n        if (slug === 'none') { return parentCategory; }\n\n        category = categories.find(function(item) {\n          return item \u0026\u0026 item.get('parentCategory') === parentCategory \u0026\u0026 Discourse.Category.slugFor(item) === (parentSlug + \"/\" + slug);\n        });\n      }\n    } else {\n      category = Discourse.Category.findSingleBySlug(slug);\n\n      // If we have a parent category, we need to enforce it\n      if (category \u0026\u0026 category.get('parentCategory')) return;\n    }\n\n    // In case the slug didn't work, try to find it by id instead.\n    if (!category) {\n      category = categories.findBy('id', parseInt(slug, 10));\n    }\n\n    return category;\n  },\n\n  reloadById: function(id) {\n    return Discourse.ajax(\"/category/\" + id + \"/show.json\").then(function (result) {\n      return Discourse.Category.create(result.category);\n    });\n  }\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A data model for containing a list of categories

  @class CategoryList
  @extends Discourse.Model
  @namespace Discourse
  @module Discourse
**/

Discourse.CategoryList = Ember.ArrayProxy.extend({
  init: function() {
    this.content = [];
    this._super();
  }
});

Discourse.CategoryList.reopenClass({
  categoriesFrom: function(result) {
    var categories = Discourse.CategoryList.create(),
        users = Discourse.Model.extractByKey(result.featured_users, Discourse.User),
        list = Discourse.Category.list();

    result.category_list.categories.forEach(function(c) {

      if (c.parent_category_id) {
        c.parentCategory = list.findBy('id', c.parent_category_id);
      }

      if (c.subcategory_ids) {
        c.subcategories = c.subcategory_ids.map(function(scid) { return list.findBy('id', parseInt(scid, 10)); });
      }

      if (c.featured_user_ids) {
        c.featured_users = c.featured_user_ids.map(function(u) {
          return users[u];
        });
      }
      if (c.topics) {
        c.topics = c.topics.map(function(t) {
          return Discourse.Topic.create(t);
        });
      }

      categories.pushObject(Discourse.Category.create(c));

    });
    return categories;
  },

  listForParent: function(category) {
    var self = this;
    return Discourse.ajax('/categories.json?parent_category_id=' + category.get('id')).then(function(result) {
      return Discourse.CategoryList.create({
        categories: self.categoriesFrom(result)
      });
    });
  },

  list: function() {
    var self = this;

    return PreloadStore.getAndRemove("categories_list", function() {
      return Discourse.ajax("/categories.json");
    }).then(function(result) {
      return Discourse.CategoryList.create({
        categories: self.categoriesFrom(result),
        can_create_category: result.category_list.can_create_category,
        can_create_topic: result.category_list.can_create_topic,
        draft_key: result.category_list.draft_key,
        draft: result.category_list.draft,
        draft_sequence: result.category_list.draft_sequence
      });
    });
  }

});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/category_list.js'] = "/**\n  A data model for containing a list of categories\n\n  @class CategoryList\n  @extends Discourse.Model\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.CategoryList = Ember.ArrayProxy.extend({\n  init: function() {\n    this.content = [];\n    this._super();\n  }\n});\n\nDiscourse.CategoryList.reopenClass({\n  categoriesFrom: function(result) {\n    var categories = Discourse.CategoryList.create(),\n        users = Discourse.Model.extractByKey(result.featured_users, Discourse.User),\n        list = Discourse.Category.list();\n\n    result.category_list.categories.forEach(function(c) {\n\n      if (c.parent_category_id) {\n        c.parentCategory = list.findBy('id', c.parent_category_id);\n      }\n\n      if (c.subcategory_ids) {\n        c.subcategories = c.subcategory_ids.map(function(scid) { return list.findBy('id', parseInt(scid, 10)); });\n      }\n\n      if (c.featured_user_ids) {\n        c.featured_users = c.featured_user_ids.map(function(u) {\n          return users[u];\n        });\n      }\n      if (c.topics) {\n        c.topics = c.topics.map(function(t) {\n          return Discourse.Topic.create(t);\n        });\n      }\n\n      categories.pushObject(Discourse.Category.create(c));\n\n    });\n    return categories;\n  },\n\n  listForParent: function(category) {\n    var self = this;\n    return Discourse.ajax('/categories.json?parent_category_id=' + category.get('id')).then(function(result) {\n      return Discourse.CategoryList.create({\n        categories: self.categoriesFrom(result)\n      });\n    });\n  },\n\n  list: function() {\n    var self = this;\n\n    return PreloadStore.getAndRemove(\"categories_list\", function() {\n      return Discourse.ajax(\"/categories.json\");\n    }).then(function(result) {\n      return Discourse.CategoryList.create({\n        categories: self.categoriesFrom(result),\n        can_create_category: result.category_list.can_create_category,\n        can_create_topic: result.category_list.can_create_topic,\n        draft_key: result.category_list.draft_key,\n        draft: result.category_list.draft,\n        draft_sequence: result.category_list.draft_sequence\n      });\n    });\n  }\n\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  Represents a pop up message displayed over the composer

  @class ComposerMessage
  @extends Ember.Object
  @namespace Discourse
  @module Discourse
**/

Discourse.ComposerMessage = Em.Object.extend({});

Discourse.ComposerMessage.reopenClass({
  /**
    Look for composer messages given the current composing settings.

    @method find
    @param {Discourse.Composer} composer The current composer
    @returns {Discourse.ComposerMessage} the composer message to display (or null)
  **/
  find: function(composer) {

    var data = { composerAction: composer.get('action') },
        topicId = composer.get('topic.id'),
        postId = composer.get('post.id');

    if (topicId) { data.topic_id = topicId; }
    if (postId)  { data.post_id = postId; }

    return Discourse.ajax('/composer-messages', { data: data }).then(function (messages) {
      return messages.map(function (message) {
        return Discourse.ComposerMessage.create(message);
      });
    });
  }

});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/composer_message.js'] = "/**\n  Represents a pop up message displayed over the composer\n\n  @class ComposerMessage\n  @extends Ember.Object\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.ComposerMessage = Em.Object.extend({});\n\nDiscourse.ComposerMessage.reopenClass({\n  /**\n    Look for composer messages given the current composing settings.\n\n    @method find\n    @param {Discourse.Composer} composer The current composer\n    @returns {Discourse.ComposerMessage} the composer message to display (or null)\n  **/\n  find: function(composer) {\n\n    var data = { composerAction: composer.get('action') },\n        topicId = composer.get('topic.id'),\n        postId = composer.get('post.id');\n\n    if (topicId) { data.topic_id = topicId; }\n    if (postId)  { data.post_id = postId; }\n\n    return Discourse.ajax('/composer-messages', { data: data }).then(function (messages) {\n      return messages.map(function (message) {\n        return Discourse.ComposerMessage.create(message);\n      });\n    });\n  }\n\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A data model representing a draft post

  @class Draft
  @extends Discourse.Model
  @namespace Discourse
  @module Discourse
**/

Discourse.Draft = Discourse.Model.extend({});

Discourse.Draft.reopenClass({

  clear: function(key, sequence) {
    return Discourse.ajax("/draft.json", {
      type: 'DELETE',
      data: {
        draft_key: key,
        sequence: sequence
      }
    });
  },

  get: function(key) {
    return Discourse.ajax('/draft.json', {
      data: { draft_key: key },
      dataType: 'json'
    });
  },

  getLocal: function(key, current) {
    // TODO: implement this
    return current;
  },

  save: function(key, sequence, data) {
    data = typeof data === "string" ? data : JSON.stringify(data);
    return Discourse.ajax("/draft.json", {
      type: 'POST',
      data: {
        draft_key: key,
        data: data,
        sequence: sequence
      }
    });
  }

});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/draft.js'] = "/**\n  A data model representing a draft post\n\n  @class Draft\n  @extends Discourse.Model\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.Draft = Discourse.Model.extend({});\n\nDiscourse.Draft.reopenClass({\n\n  clear: function(key, sequence) {\n    return Discourse.ajax(\"/draft.json\", {\n      type: 'DELETE',\n      data: {\n        draft_key: key,\n        sequence: sequence\n      }\n    });\n  },\n\n  get: function(key) {\n    return Discourse.ajax('/draft.json', {\n      data: { draft_key: key },\n      dataType: 'json'\n    });\n  },\n\n  getLocal: function(key, current) {\n    // TODO: implement this\n    return current;\n  },\n\n  save: function(key, sequence, data) {\n    data = typeof data === \"string\" ? data : JSON.stringify(data);\n    return Discourse.ajax(\"/draft.json\", {\n      type: 'POST',\n      data: {\n        draft_key: key,\n        data: data,\n        sequence: sequence\n      }\n    });\n  }\n\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  The data model for a Group

  @class Group
  @extends Discourse.Model
  @namespace Discourse
  @module Discourse
**/

Discourse.Group = Discourse.Model.extend({

  userCountDisplay: function(){
    var c = this.get('user_count');
    // don't display zero its ugly
    if(c > 0) {
      return c;
    }
  }.property('user_count'),

  findMembers: function() {
    if (Em.isEmpty(this.get('name'))) { return Ember.RSVP.resolve([]); }

    return Discourse.ajax('/groups/' + this.get('name') + '/members').then(function(result) {
      return result.map(function(u) { return Discourse.User.create(u) });
    });
  },

  destroy: function(){
    if(!this.get('id')) return;
    return Discourse.ajax("/admin/groups/" + this.get('id'), {type: "DELETE"});
  },

  asJSON: function() {
    return { group: {
             name: this.get('name'),
             alias_level: this.get('alias_level'),
             visible: !!this.get('visible'),
             usernames: this.get('usernames') } };
  },

  createWithUsernames: function(usernames){
    var self = this,
        json = this.asJSON();
    json.group.usernames = usernames;

    return Discourse.ajax("/admin/groups", {type: "POST", data: json}).then(function(resp) {
      self.set('id', resp.basic_group.id);
    });
  },

  saveWithUsernames: function(usernames){
    var json = this.asJSON();
    json.group.usernames = usernames;
    return Discourse.ajax("/admin/groups/" + this.get('id'), {
      type: "PUT",
      data: json
    });
  },

  findPosts: function(opts) {
    opts = opts || {};

    var data = {};
    if (opts.beforePostId) { data.before_post_id = opts.beforePostId; }

    return Discourse.ajax("/groups/" + this.get('name') + "/posts.json", { data: data }).then(function (posts) {
      return posts.map(function (p) {
        p.user = Discourse.User.create(p.user);
        return Em.Object.create(p);
      });
    });
  }
});

Discourse.Group.reopenClass({
  findAll: function(opts){
    return Discourse.ajax("/admin/groups.json", { data: opts }).then(function(groups){
      return groups.map(function(g) { return Discourse.Group.create(g); });
    });
  },

  findGroupCounts: function(name) {
    return Discourse.ajax("/groups/" + name + "/counts.json").then(function (result) {
      return Em.Object.create(result.counts);
    });
  },

  find: function(name) {
    return Discourse.ajax("/groups/" + name + ".json").then(function(g) {
      return Discourse.Group.create(g.basic_group);
    });
  }
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/group.js'] = "/**\n  The data model for a Group\n\n  @class Group\n  @extends Discourse.Model\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.Group = Discourse.Model.extend({\n\n  userCountDisplay: function(){\n    var c = this.get('user_count');\n    // don't display zero its ugly\n    if(c \u003e 0) {\n      return c;\n    }\n  }.property('user_count'),\n\n  findMembers: function() {\n    if (Em.isEmpty(this.get('name'))) { return Ember.RSVP.resolve([]); }\n\n    return Discourse.ajax('/groups/' + this.get('name') + '/members').then(function(result) {\n      return result.map(function(u) { return Discourse.User.create(u) });\n    });\n  },\n\n  destroy: function(){\n    if(!this.get('id')) return;\n    return Discourse.ajax(\"/admin/groups/\" + this.get('id'), {type: \"DELETE\"});\n  },\n\n  asJSON: function() {\n    return { group: {\n             name: this.get('name'),\n             alias_level: this.get('alias_level'),\n             visible: !!this.get('visible'),\n             usernames: this.get('usernames') } };\n  },\n\n  createWithUsernames: function(usernames){\n    var self = this,\n        json = this.asJSON();\n    json.group.usernames = usernames;\n\n    return Discourse.ajax(\"/admin/groups\", {type: \"POST\", data: json}).then(function(resp) {\n      self.set('id', resp.basic_group.id);\n    });\n  },\n\n  saveWithUsernames: function(usernames){\n    var json = this.asJSON();\n    json.group.usernames = usernames;\n    return Discourse.ajax(\"/admin/groups/\" + this.get('id'), {\n      type: \"PUT\",\n      data: json\n    });\n  },\n\n  findPosts: function(opts) {\n    opts = opts || {};\n\n    var data = {};\n    if (opts.beforePostId) { data.before_post_id = opts.beforePostId; }\n\n    return Discourse.ajax(\"/groups/\" + this.get('name') + \"/posts.json\", { data: data }).then(function (posts) {\n      return posts.map(function (p) {\n        p.user = Discourse.User.create(p.user);\n        return Em.Object.create(p);\n      });\n    });\n  }\n});\n\nDiscourse.Group.reopenClass({\n  findAll: function(opts){\n    return Discourse.ajax(\"/admin/groups.json\", { data: opts }).then(function(groups){\n      return groups.map(function(g) { return Discourse.Group.create(g); });\n    });\n  },\n\n  findGroupCounts: function(name) {\n    return Discourse.ajax(\"/groups/\" + name + \"/counts.json\").then(function (result) {\n      return Em.Object.create(result.counts);\n    });\n  },\n\n  find: function(name) {\n    return Discourse.ajax(\"/groups/\" + name + \".json\").then(function(g) {\n      return Discourse.Group.create(g.basic_group);\n    });\n  }\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A trivial model we use to handle input validation

  @class InputValidation
  @extends Discourse.Model
  @namespace Discourse
  @module Discourse
**/

Discourse.InputValidation = Discourse.Model.extend({});




// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/input_validation.js'] = "/**\n  A trivial model we use to handle input validation\n\n  @class InputValidation\n  @extends Discourse.Model\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.InputValidation = Discourse.Model.extend({});\n\n\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A data model representing an Invite

  @class Invite
  @extends Discourse.Model
  @namespace Discourse
  @module Discourse
**/


Discourse.Invite = Discourse.Model.extend({

  rescind: function() {
    Discourse.ajax('/invites', {
      type: 'DELETE',
      data: { email: this.get('email') }
    });
    this.set('rescinded', true);
  }

});

Discourse.Invite.reopenClass({

  create: function() {
    var result = this._super.apply(this, arguments);
    if (result.user) {
      result.user = Discourse.User.create(result.user);
    }
    return result;
  },

  findInvitedBy: function(user, filter, offset) {
    if (!user) { return Em.RSVP.resolve(); }

    var data = {};
    if (!Em.isNone(filter)) { data.filter = filter; }
    data.offset = offset || 0;

    return Discourse.ajax("/users/" + user.get('username_lower') + "/invited.json", {data: data}).then(function (result) {
      result.invites = result.invites.map(function (i) {
        return Discourse.Invite.create(i);
      });

      return Em.Object.create(result);
    });
  }

});




// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/invite.js'] = "/**\n  A data model representing an Invite\n\n  @class Invite\n  @extends Discourse.Model\n  @namespace Discourse\n  @module Discourse\n**/\n\n\nDiscourse.Invite = Discourse.Model.extend({\n\n  rescind: function() {\n    Discourse.ajax('/invites', {\n      type: 'DELETE',\n      data: { email: this.get('email') }\n    });\n    this.set('rescinded', true);\n  }\n\n});\n\nDiscourse.Invite.reopenClass({\n\n  create: function() {\n    var result = this._super.apply(this, arguments);\n    if (result.user) {\n      result.user = Discourse.User.create(result.user);\n    }\n    return result;\n  },\n\n  findInvitedBy: function(user, filter, offset) {\n    if (!user) { return Em.RSVP.resolve(); }\n\n    var data = {};\n    if (!Em.isNone(filter)) { data.filter = filter; }\n    data.offset = offset || 0;\n\n    return Discourse.ajax(\"/users/\" + user.get('username_lower') + \"/invited.json\", {data: data}).then(function (result) {\n      result.invites = result.invites.map(function (i) {\n        return Discourse.Invite.create(i);\n      });\n\n      return Em.Object.create(result);\n    });\n  }\n\n});\n\n\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

Discourse.LoginMethod = Ember.Object.extend({
  title: function(){
    return this.get("titleOverride") || I18n.t("login." + this.get("name") + ".title");
  }.property(),

  message: function(){
    return this.get("messageOverride") || I18n.t("login." + this.get("name") + ".message");
  }.property()
});

// Note, you can add login methods by adding to the list
//  just Em.get("Discourse.LoginMethod.all") and then
//  pushObject for any new methods
Discourse.LoginMethod.reopenClass({
  register: function(method){
    if(this.methods){
      this.methods.pushObject(method);
    } else {
      this.preRegister = this.preRegister || [];
      this.preRegister.push(method);
    }
  },

  all: function(){
    if (this.methods) { return this.methods; }

    var methods = this.methods = Em.A();

    /*
     * enable_google_logins etc.
     * */

    [ "google",
      "google_oauth2",
      "facebook",
      "cas",
      "twitter",
      "yahoo",
      "github"
    ].forEach(function(name){
      if (Discourse.SiteSettings["enable_" + name + "_logins"]) {

        var params = {name: name};

        if (name === "google" || name === "google_oauth2") {
          params.frameWidth = 850;
          params.frameHeight = 500;
        } else if (name === "facebook") {
          params.frameHeight = 450;
        }

        methods.pushObject(Discourse.LoginMethod.create(params));
      }
    });

    if (this.preRegister){
      this.preRegister.forEach(function(method){
        methods.pushObject(method);
      });
      delete this.preRegister;
    }
    return methods;
  }.property()
});



// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/login_method.js'] = "Discourse.LoginMethod = Ember.Object.extend({\n  title: function(){\n    return this.get(\"titleOverride\") || I18n.t(\"login.\" + this.get(\"name\") + \".title\");\n  }.property(),\n\n  message: function(){\n    return this.get(\"messageOverride\") || I18n.t(\"login.\" + this.get(\"name\") + \".message\");\n  }.property()\n});\n\n// Note, you can add login methods by adding to the list\n//  just Em.get(\"Discourse.LoginMethod.all\") and then\n//  pushObject for any new methods\nDiscourse.LoginMethod.reopenClass({\n  register: function(method){\n    if(this.methods){\n      this.methods.pushObject(method);\n    } else {\n      this.preRegister = this.preRegister || [];\n      this.preRegister.push(method);\n    }\n  },\n\n  all: function(){\n    if (this.methods) { return this.methods; }\n\n    var methods = this.methods = Em.A();\n\n    /*\n     * enable_google_logins etc.\n     * */\n\n    [ \"google\",\n      \"google_oauth2\",\n      \"facebook\",\n      \"cas\",\n      \"twitter\",\n      \"yahoo\",\n      \"github\"\n    ].forEach(function(name){\n      if (Discourse.SiteSettings[\"enable_\" + name + \"_logins\"]) {\n\n        var params = {name: name};\n\n        if (name === \"google\" || name === \"google_oauth2\") {\n          params.frameWidth = 850;\n          params.frameHeight = 500;\n        } else if (name === \"facebook\") {\n          params.frameHeight = 450;\n        }\n\n        methods.pushObject(Discourse.LoginMethod.create(params));\n      }\n    });\n\n    if (this.preRegister){\n      this.preRegister.forEach(function(method){\n        methods.pushObject(method);\n      });\n      delete this.preRegister;\n    }\n    return methods;\n  }.property()\n});\n\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A data model representing a navigation item on the list views

  @class NavItem
  @extends Discourse.Model
  @namespace Discourse
  @module Discourse
**/


Discourse.NavItem = Discourse.Model.extend({

  topicTrackingState: function() {
    return Discourse.TopicTrackingState.current();
  }.property(),

  categoryName: function() {
    var split = this.get('name').split('/');
    return split[0] === 'category' ? split[1] : null;
  }.property('name'),

  categorySlug: function() {
    var split = this.get('name').split('/');
    if (split[0] === 'category' && split[1]) {
      var cat = Discourse.Site.current().categories.findProperty('nameLower', split[1].toLowerCase());
      return cat ? Discourse.Category.slugFor(cat) : null;
    }
    return null;
  }.property('name'),

  // href from this item
  href: function() {
    return Discourse.getURL("/") + this.get('filterMode');
  }.property('filterMode'),

  // href from this item
  filterMode: function() {
    var name = this.get('name');

    if( name.split('/')[0] === 'category' ) {
      return 'category/' + this.get('categorySlug');
    } else {
      var mode = "",
      category = this.get("category");

      if(category){
        mode += "category/";
        mode += Discourse.Category.slugFor(this.get('category'));
        if (this.get('noSubcategories')) { mode += '/none'; }
        mode += "/l/";
      }
      return mode + name.replace(' ', '-');
    }
  }.property('name'),

  count: function() {
    var state = this.get('topicTrackingState');
    if (state) {
      return state.lookupCount(this.get('name'), this.get('category'));
    }
  }.property('topicTrackingState.messageCount')

});

Discourse.NavItem.reopenClass({

  // create a nav item from the text, will return null if there is not valid nav item for this particular text
  fromText: function(text, opts) {
    var split = text.split(","),
        name = split[0],
        testName = name.split("/")[0],
        anonymous = !Discourse.User.current();

    if (anonymous && !Discourse.Site.currentProp('anonymous_top_menu_items').contains(testName)) return null;
    if (!Discourse.Category.list() && testName === "categories") return null;
    if (!Discourse.Site.currentProp('top_menu_items').contains(testName)) return null;

    var args = { name: name, hasIcon: name === "unread" || name === "starred" };
    if (opts.category) { args.category = opts.category; }
    if (opts.noSubcategories) { args.noSubcategories = true; }
    return Discourse.NavItem.create(args);
  },

  buildList: function(category, args) {
    args = args || {};
    if (category) { args.category = category }

    return Discourse.SiteSettings.top_menu.split("|").map(function(i) {
      return Discourse.NavItem.fromText(i, args);
    }).filter(function(i) {
      return i !== null && !(category && i.get("name").indexOf("categor") === 0);
    });
  }

});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/nav_item.js'] = "/**\n  A data model representing a navigation item on the list views\n\n  @class NavItem\n  @extends Discourse.Model\n  @namespace Discourse\n  @module Discourse\n**/\n\n\nDiscourse.NavItem = Discourse.Model.extend({\n\n  topicTrackingState: function() {\n    return Discourse.TopicTrackingState.current();\n  }.property(),\n\n  categoryName: function() {\n    var split = this.get('name').split('/');\n    return split[0] === 'category' ? split[1] : null;\n  }.property('name'),\n\n  categorySlug: function() {\n    var split = this.get('name').split('/');\n    if (split[0] === 'category' \u0026\u0026 split[1]) {\n      var cat = Discourse.Site.current().categories.findProperty('nameLower', split[1].toLowerCase());\n      return cat ? Discourse.Category.slugFor(cat) : null;\n    }\n    return null;\n  }.property('name'),\n\n  // href from this item\n  href: function() {\n    return Discourse.getURL(\"/\") + this.get('filterMode');\n  }.property('filterMode'),\n\n  // href from this item\n  filterMode: function() {\n    var name = this.get('name');\n\n    if( name.split('/')[0] === 'category' ) {\n      return 'category/' + this.get('categorySlug');\n    } else {\n      var mode = \"\",\n      category = this.get(\"category\");\n\n      if(category){\n        mode += \"category/\";\n        mode += Discourse.Category.slugFor(this.get('category'));\n        if (this.get('noSubcategories')) { mode += '/none'; }\n        mode += \"/l/\";\n      }\n      return mode + name.replace(' ', '-');\n    }\n  }.property('name'),\n\n  count: function() {\n    var state = this.get('topicTrackingState');\n    if (state) {\n      return state.lookupCount(this.get('name'), this.get('category'));\n    }\n  }.property('topicTrackingState.messageCount')\n\n});\n\nDiscourse.NavItem.reopenClass({\n\n  // create a nav item from the text, will return null if there is not valid nav item for this particular text\n  fromText: function(text, opts) {\n    var split = text.split(\",\"),\n        name = split[0],\n        testName = name.split(\"/\")[0],\n        anonymous = !Discourse.User.current();\n\n    if (anonymous \u0026\u0026 !Discourse.Site.currentProp('anonymous_top_menu_items').contains(testName)) return null;\n    if (!Discourse.Category.list() \u0026\u0026 testName === \"categories\") return null;\n    if (!Discourse.Site.currentProp('top_menu_items').contains(testName)) return null;\n\n    var args = { name: name, hasIcon: name === \"unread\" || name === \"starred\" };\n    if (opts.category) { args.category = opts.category; }\n    if (opts.noSubcategories) { args.noSubcategories = true; }\n    return Discourse.NavItem.create(args);\n  },\n\n  buildList: function(category, args) {\n    args = args || {};\n    if (category) { args.category = category }\n\n    return Discourse.SiteSettings.top_menu.split(\"|\").map(function(i) {\n      return Discourse.NavItem.fromText(i, args);\n    }).filter(function(i) {\n      return i !== null \u0026\u0026 !(category \u0026\u0026 i.get(\"name\").indexOf(\"categor\") === 0);\n    });\n  }\n\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:


Discourse.PermissionType = Discourse.Model.extend({
  description: function(){
    var key = "";

    switch(this.get("id")){
      case 1:
        key = "full";
        break;
      case 2:
        key = "create_post";
        break;
      case 3:
        key = "readonly";
        break;
    }
    return I18n.t("permission_types." + key);
  }.property("id")
});

Discourse.PermissionType.FULL = 1;
Discourse.PermissionType.CREATE_POST = 2;
Discourse.PermissionType.READONLY = 3;


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/permission_type.js'] = "\nDiscourse.PermissionType = Discourse.Model.extend({\n  description: function(){\n    var key = \"\";\n\n    switch(this.get(\"id\")){\n      case 1:\n        key = \"full\";\n        break;\n      case 2:\n        key = \"create_post\";\n        break;\n      case 3:\n        key = \"readonly\";\n        break;\n    }\n    return I18n.t(\"permission_types.\" + key);\n  }.property(\"id\")\n});\n\nDiscourse.PermissionType.FULL = 1;\nDiscourse.PermissionType.CREATE_POST = 2;\nDiscourse.PermissionType.READONLY = 3;\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A data model representing action types (flags, likes) against a Post

  @class PostActionType
  @extends Discourse.Model
  @namespace Discourse
  @module Discourse
**/

Discourse.PostActionType = Discourse.Model.extend({
  notCustomFlag: Em.computed.not('is_custom_flag')
});

Discourse.PostActionType.reopenClass({
  MAX_MESSAGE_LENGTH: 500
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/post_action_type.js'] = "/**\n  A data model representing action types (flags, likes) against a Post\n\n  @class PostActionType\n  @extends Discourse.Model\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.PostActionType = Discourse.Model.extend({\n  notCustomFlag: Em.computed.not('is_custom_flag')\n});\n\nDiscourse.PostActionType.reopenClass({\n  MAX_MESSAGE_LENGTH: 500\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  We use this class to keep on top of streaming and filtering posts within a topic.

  @class PostStream
  @extends Ember.Object
  @namespace Discourse
  @module Discourse
**/

Discourse.PostStream = Em.Object.extend({

  /**
    Are we currently loading posts in any way?

    @property loading
  **/
  loading: Em.computed.or('loadingAbove', 'loadingBelow', 'loadingFilter', 'stagingPost'),

  notLoading: Em.computed.not('loading'),

  filteredPostsCount: Em.computed.alias("stream.length"),

  /**
    Have we loaded any posts?

    @property hasPosts
  **/
  hasPosts: function(){
    return this.get('posts.length') > 0;
  }.property("posts.@each"),

  /**
    Do we have a stream list of post ids?

    @property hasStream
  **/
  hasStream: Em.computed.gt('filteredPostsCount', 0),

  /**
    Can we append more posts to our current stream?

    @property canAppendMore
  **/
  canAppendMore: Em.computed.and('notLoading', 'hasPosts', 'lastPostNotLoaded'),

  /**
    Can we prepend more posts to our current stream?

    @property canPrependMore
  **/
  canPrependMore: Em.computed.and('notLoading', 'hasPosts', 'firstPostNotLoaded'),

  /**
    Have we loaded the first post in the stream?

    @property firstPostPresent
  **/
  firstPostPresent: function() {
    if (!this.get('hasLoadedData')) { return false; }
    return !!this.get('posts').findProperty('id', this.get('firstPostId'));
  }.property('hasLoadedData', 'posts.@each', 'firstPostId'),

  firstPostNotLoaded: Em.computed.not('firstPostPresent'),

  /**
    The first post that we have loaded. Useful for checking to see if we should scroll upwards

    @property firstLoadedPost
  **/
  firstLoadedPost: function() {
    return _.first(this.get('posts'));
  }.property('posts.@each'),

  /**
    The last post we have loaded. Useful for checking to see if we should load more

    @property lastLoadedPost
  **/
  lastLoadedPost: function() {
    return _.last(this.get('posts'));
  }.property('posts.@each'),

  /**
    Returns the id of the first post in the set

    @property firstPostId
  **/
  firstPostId: function() {
    return this.get('stream')[0];
  }.property('stream.@each'),

  /**
    Returns the id of the last post in the set

    @property lastPostId
  **/
  lastPostId: function() {
    return _.last(this.get('stream'));
  }.property('stream.@each'),

  /**
    Have we loaded the last post in the stream?

    @property loadedAllPosts
  **/
  loadedAllPosts: function() {
    if (!this.get('hasLoadedData')) { return false; }
    return !!this.get('posts').findProperty('id', this.get('lastPostId'));
  }.property('hasLoadedData', 'posts.@each.id', 'lastPostId'),

  lastPostNotLoaded: Em.computed.not('loadedAllPosts'),

  /**
    Returns a JS Object of current stream filter options. It should match the query
    params for the stream.

    @property streamFilters
  **/
  streamFilters: function() {
    var result = {};
    if (this.get('summary')) { result.filter = "summary"; }
    if (this.get('show_deleted')) { result.show_deleted = true; }

    var userFilters = this.get('userFilters');
    if (!Em.isEmpty(userFilters)) {
      result.username_filters = userFilters.join(",");
    }

    return result;
  }.property('userFilters.[]', 'summary', 'show_deleted'),

  hasNoFilters: function() {
    var streamFilters = this.get('streamFilters');
    return !(streamFilters && ((streamFilters.filter === 'summary') || streamFilters.userFilters));
  }.property('streamFilters.[]', 'topic.posts_count', 'posts.length'),

  /**
    Returns the window of posts above the current set in the stream, bound to the top of the stream.
    This is the collection we'll ask for when scrolling upwards.

    @property previousWindow
  **/
  previousWindow: function() {
    // If we can't find the last post loaded, bail
    var firstPost = _.first(this.get('posts'));
    if (!firstPost) { return []; }

    // Find the index of the last post loaded, if not found, bail
    var stream = this.get('stream');
    var firstIndex = this.indexOf(firstPost);
    if (firstIndex === -1) { return []; }

    var startIndex = firstIndex - Discourse.SiteSettings.posts_per_page;
    if (startIndex < 0) { startIndex = 0; }
    return stream.slice(startIndex, firstIndex);

  }.property('posts.@each', 'stream.@each'),

  /**
    Returns the window of posts below the current set in the stream, bound by the bottom of the
    stream. This is the collection we use when scrolling downwards.

    @property nextWindow
  **/
  nextWindow: function() {
    // If we can't find the last post loaded, bail
    var lastLoadedPost = this.get('lastLoadedPost');
    if (!lastLoadedPost) { return []; }

    // Find the index of the last post loaded, if not found, bail
    var stream = this.get('stream');
    var lastIndex = this.indexOf(lastLoadedPost);
    if (lastIndex === -1) { return []; }
    if ((lastIndex + 1) >= this.get('highest_post_number')) { return []; }

    // find our window of posts
    return stream.slice(lastIndex+1, lastIndex+Discourse.SiteSettings.posts_per_page+1);
  }.property('lastLoadedPost', 'stream.@each'),


  /**
    Cancel any active filters on the stream.

    @method cancelFilter
  **/
  cancelFilter: function() {
    this.set('summary', false);
    this.set('show_deleted', false);
    this.get('userFilters').clear();
  },

  /**
    Toggle summary mode for the stream.

    @method toggleSummary
  **/
  toggleSummary: function() {
    this.get('userFilters').clear();
    this.toggleProperty('summary');
    return this.refresh();
  },

  toggleDeleted: function() {
    this.toggleProperty('show_deleted');
    return this.refresh();
  },

  /**
    Filter the stream to a particular user.

    @method toggleParticipant
  **/
  toggleParticipant: function(username) {
    var userFilters = this.get('userFilters');
    this.set('summary', false);
    this.set('show_deleted', true);
    if (userFilters.contains(username)) {
      userFilters.removeObject(username);
    } else {
      userFilters.addObject(username);
    }
    return this.refresh();
  },

  /**
    Loads a new set of posts into the stream. If you provide a `nearPost` option and the post
    is already loaded, it will simply scroll there and load nothing.

    @method refresh
    @param {Object} opts Options for loading the stream
      @param {Integer} opts.nearPost The post we want to find other posts near to.
      @param {Boolean} opts.track_visit Whether or not to track this as a visit to a topic.
    @returns {Ember.Deferred} a promise that is resolved when the posts have been inserted into the stream.
  **/
  refresh: function(opts) {
    opts = opts || {};
    opts.nearPost = parseInt(opts.nearPost, 10);

    var topic = this.get('topic'),
        self = this;

    // Do we already have the post in our list of posts? Jump there.
    var postWeWant = this.get('posts').findProperty('post_number', opts.nearPost);
    if (postWeWant) { return Ember.RSVP.resolve(); }

    // TODO: if we have all the posts in the filter, don't go to the server for them.
    self.set('loadingFilter', true);

    opts = _.merge(opts, self.get('streamFilters'));

    // Request a topicView
    return Discourse.PostStream.loadTopicView(topic.get('id'), opts).then(function (json) {
      topic.updateFromJson(json);
      self.updateFromJson(json.post_stream);
      self.setProperties({ loadingFilter: false, loaded: true });
    }).catch(function(result) {
      self.errorLoading(result);
      throw result;
    });
  },
  hasLoadedData: Em.computed.and('hasPosts', 'hasStream'),


  /**
    Fill in a gap of posts before a particular post

    @method fillGapBefore
    @paaram {Discourse.Post} post beside gap
    @paaram {Array} gap array of post ids to load
    @returns {Ember.Deferred} a promise that's resolved when the posts have been added.
  **/
  fillGapBefore: function(post, gap) {
    var postId = post.get('id'),
        stream = this.get('stream'),
        idx = stream.indexOf(postId),
        currentPosts = this.get('posts'),
        self = this;

    if (idx !== -1) {
      // Insert the gap at the appropriate place
      stream.splice.apply(stream, [idx, 0].concat(gap));

      var postIdx = currentPosts.indexOf(post);
      if (postIdx !== -1) {
        return this.findPostsByIds(gap).then(function(posts) {
          posts.forEach(function(p) {
            var stored = self.storePost(p);
            if (!currentPosts.contains(stored)) {
              currentPosts.insertAt(postIdx++, stored);
            }
          });

          delete self.get('gaps.before')[postId];
          self.get('stream').enumerableContentDidChange();
        });
      }
    }
    return Ember.RSVP.resolve();
  },

  /**
    Fill in a gap of posts after a particular post

    @method fillGapAfter
    @paaram {Discourse.Post} post beside gap
    @paaram {Array} gap array of post ids to load
    @returns {Ember.Deferred} a promise that's resolved when the posts have been added.
  **/
  fillGapAfter: function(post, gap) {
    var postId = post.get('id'),
        stream = this.get('stream'),
        idx = stream.indexOf(postId),
        self = this;

    if (idx !== -1) {
      stream.pushObjects(gap);
      return this.appendMore().then(function() {
        self.get('stream').enumerableContentDidChange();
      });
    }
    return Ember.RSVP.resolve();
  },

  /**
    Appends the next window of posts to the stream. Call it when scrolling downwards.

    @method appendMore
    @returns {Ember.Deferred} a promise that's resolved when the posts have been added.
  **/
  appendMore: function() {
    var self = this;

    // Make sure we can append more posts
    if (!self.get('canAppendMore')) { return Ember.RSVP.resolve(); }

    var postIds = self.get('nextWindow');
    if (Ember.isEmpty(postIds)) { return Ember.RSVP.resolve(); }

    self.set('loadingBelow', true);

    var stopLoading = function() {
      self.set('loadingBelow', false);
    };

    return self.findPostsByIds(postIds).then(function(posts) {
      posts.forEach(function(p) {
        self.appendPost(p);
      });
      stopLoading();
    }, stopLoading);
  },

  /**
    Prepend the previous window of posts to the stream. Call it when scrolling upwards.

    @method prependMore
    @returns {Ember.Deferred} a promise that's resolved when the posts have been added.
  **/
  prependMore: function() {
    var postStream = this;

    // Make sure we can append more posts
    if (!postStream.get('canPrependMore')) { return Ember.RSVP.resolve(); }

    var postIds = postStream.get('previousWindow');
    if (Ember.isEmpty(postIds)) { return Ember.RSVP.resolve(); }

    postStream.set('loadingAbove', true);
    return postStream.findPostsByIds(postIds.reverse()).then(function(posts) {
      posts.forEach(function(p) {
        postStream.prependPost(p);
      });
      postStream.set('loadingAbove', false);
    });
  },

  /**
    Stage a post for insertion in the stream. It should be rendered right away under the
    assumption that the post will succeed. We can then `commitPost` when it succeeds or
    `undoPost` when it fails.

    @method stagePost
    @param {Discourse.Post} post the post to stage in the stream
    @param {Discourse.User} user the user creating the post
  **/
  stagePost: function(post, user) {

    // We can't stage two posts simultaneously
    if (this.get('stagingPost')) { return false; }
    this.set('stagingPost', true);

    var topic = this.get('topic');
    topic.setProperties({
      posts_count: (topic.get('posts_count') || 0) + 1,
      last_posted_at: new Date(),
      'details.last_poster': user,
      highest_post_number: (topic.get('highest_post_number') || 0) + 1
    });

    post.setProperties({
      post_number: topic.get('highest_post_number'),
      topic: topic,
      created_at: new Date(),
      id: -1
    });

    // If we're at the end of the stream, add the post
    if (this.get('loadedAllPosts')) {
      this.appendPost(post);
      this.get('stream').addObject(post.get('id'));
    }

    return true;
  },

  /**
    Commit the post we staged. Call this after a save succeeds.

    @method commitPost
    @param {Discourse.Post} the post we saved in the stream.
  **/
  commitPost: function(post) {
    if (this.get('loadedAllPosts')) {
      this.appendPost(post);
    }
    // Correct for a dangling deleted post, if needed
    // compensating for message bus pumping in new posts while
    // your post is in transit
    if(this.get('topic.highest_post_number') < post.get('post_number')){
      this.set('topic.highest_post_number', post.get('post_number'));
    }
    this.get('stream').removeObject(-1);
    this.get('postIdentityMap').set(-1, null);
    this.get('postIdentityMap').set(post.get('id'), post);

    this.get('stream').addObject(post.get('id'));
    this.set('stagingPost', false);
  },

  /**
    Undo a post we've staged in the stream. Remove it from being rendered and revert the
    state we changed.

    @method undoPost
    @param {Discourse.Post} the post to undo from the stream
  **/
  undoPost: function(post) {
    this.get('stream').removeObject(-1);
    this.posts.removeObject(post);
    this.get('postIdentityMap').set(-1, null);

    var topic = this.get('topic');
    this.set('stagingPost', false);

    topic.setProperties({
      highest_post_number: (topic.get('highest_post_number') || 0) - 1,
      posts_count: (topic.get('posts_count') || 0) - 1
    });

    // TODO unfudge reply count on parent post
  },

  /**
    Prepends a single post to the stream.

    @method prependPost
    @param {Discourse.Post} post The post we're prepending
    @returns {Discourse.Post} the post that was inserted.
  **/
  prependPost: function(post) {
    this.get('posts').unshiftObject(this.storePost(post));
    return post;
  },

  /**
    Appends a single post into the stream.

    @method appendPost
    @param {Discourse.Post} post The post we're appending
    @returns {Discourse.Post} the post that was inserted.
  **/
  appendPost: function(post) {
    var stored = this.storePost(post);
    if (stored) {
      this.get('posts').addObject(stored);
    }
    return post;
  },

  /**
    Removes posts from the stream.

    @method removePosts
    @param {Array} posts the collection of posts to remove
  **/
  removePosts: function(posts) {
    if (Em.isEmpty(posts)) { return; }

    var postIds = posts.map(function (p) { return p.get('id'); });
    var identityMap = this.get('postIdentityMap');

    this.get('stream').removeObjects(postIds);
    this.get('posts').removeObjects(posts);
    postIds.forEach(function(id){
      identityMap.remove(id);
    });
  },

  /**
    Returns a post from the identity map if it's been inserted.

    @method findLoadedPost
    @param {Integer} id The post we want from the identity map.
    @returns {Discourse.Post} the post that was inserted.
  **/
  findLoadedPost: function(id) {
    return this.get('postIdentityMap').get(id);
  },

  /**
    Finds and adds a post to the stream by id. Typically this would happen if we receive a message
    from the message bus indicating there's a new post. We'll only insert it if we currently
    have no filters.

    @method triggerNewPostInStream
    @param {Integer} postId The id of the new post to be inserted into the stream
  **/
  triggerNewPostInStream: function(postId) {
    if (!postId) { return; }

    // We only trigger if there are no filters active
    if (!this.get('hasNoFilters')) { return; }

    var loadedAllPosts = this.get('loadedAllPosts');

    if (this.get('stream').indexOf(postId) === -1) {
      this.get('stream').addObject(postId);
      if (loadedAllPosts) { this.appendMore(); }
    }
  },

  triggerRecoveredPost: function(postId){
    var self = this,
        postIdentityMap = this.get('postIdentityMap'),
        existing = postIdentityMap.get(postId);

    if(existing){
      this.triggerChangedPost(postId, new Date());
    } else {
      // need to insert into stream
      var url = "/posts/" + postId;
      Discourse.ajax(url).then(function(p){
        var post = Discourse.Post.create(p);
        var stream = self.get("stream");
        var posts = self.get("posts");
        self.storePost(post);

        // we need to zip this into the stream
        var index = 0;
        stream.forEach(function(postId){
          if(postId < p.id){
            index+= 1;
          }
        });

        stream.insertAt(index, p.id);

        index = 0;
        posts.forEach(function(_post){
          if(_post.id < p.id){
            index+= 1;
          }
        });

        if(index < posts.length){
          posts.insertAt(index, post);
        } else {
          if(post.post_number < posts[posts.length-1].post_number + 5){
            self.appendMore();
          }
        }
      });
    }
  },

  triggerDeletedPost: function(postId){
    var self = this,
        postIdentityMap = this.get('postIdentityMap'),
        existing = postIdentityMap.get(postId);

    if(existing){
      var url = "/posts/" + postId;
      Discourse.ajax(url).then(
        function(p){
          self.storePost(Discourse.Post.create(p));
        },
        function(){
          self.removePosts([existing]);
        });
    }
  },

  triggerChangedPost: function(postId, updatedAt) {
    if (!postId) { return; }

    var postIdentityMap = this.get('postIdentityMap'),
        existing = postIdentityMap.get(postId),
        self = this;

    if (existing && existing.updated_at !== updatedAt) {
      var url = "/posts/" + postId;
      Discourse.ajax(url).then(function(p){
        self.storePost(Discourse.Post.create(p));
      });
    }
  },

  /**
    Returns the "thread" of posts in the history of a post.

    @method findReplyHistory
    @param {Discourse.Post} post the post whose history we want
    @returns {Array} the posts in the history.
  **/
  findReplyHistory: function(post) {
    var postStream = this,
        url = "/posts/" + post.get('id') + "/reply-history.json";

    return Discourse.ajax(url).then(function(result) {
      return result.map(function (p) {
        return postStream.storePost(Discourse.Post.create(p));
      });
    }).then(function (replyHistory) {
      post.set('replyHistory', replyHistory);
    });
  },

  /**
    Returns the closest post given a postNumber that may not exist in the stream.
    For example, if the user asks for a post that's deleted or otherwise outside the range.
    This allows us to set the progress bar with the correct number.

    @method closestPostForPostNumber
    @param {Number} postNumber the post number we're looking for
    @return {Post} the closest post
    @see PostStream.closestPostNumberFor
  **/
  closestPostForPostNumber: function(postNumber) {
    if (!this.get('hasPosts')) { return; }

    var closest = null;
    this.get('posts').forEach(function (p) {
      if (closest === postNumber) { return; }
      if (!closest) { closest = p; }

      if (Math.abs(postNumber - p.get('post_number')) < Math.abs(closest.get('post_number') - postNumber)) {
        closest = p;
      }
    });

    return closest;
  },

  /**
    Get the index of a post in the stream. (Use this for the topic progress bar.)

    @param post the post to get the index of
    @returns {Number} 1-starting index of the post, or 0 if not found
    @see PostStream.progressIndexOfPostId
  **/
  progressIndexOfPost: function(post) {
    return this.progressIndexOfPostId(post.get('id'));
  },

  /**
    Get the index in the stream of a post id. (Use this for the topic progress bar.)

    @param post_id - post id to search for
    @returns {Number} 1-starting index of the post, or 0 if not found
  **/
  progressIndexOfPostId: function(post_id) {
    return this.get('stream').indexOf(post_id) + 1;
  },

  /**
    Returns the closest post number given a postNumber that may not exist in the stream.
    For example, if the user asks for a post that's deleted or otherwise outside the range.
    This allows us to set the progress bar with the correct number.

    @method closestPostNumberFor
    @param {Number} postNumber the post number we're looking for
    @return {Number} a close post number
  **/
  closestPostNumberFor: function(postNumber) {
    if (!this.get('hasPosts')) { return; }

    var closest = null;
    this.get('posts').forEach(function (p) {
      if (closest === postNumber) { return; }
      if (!closest) { closest = p.get('post_number'); }

      if (Math.abs(postNumber - p.get('post_number')) < Math.abs(closest - postNumber)) {
        closest = p.get('post_number');
      }
    });

    return closest;
  },

  /**
    @private

    Given a JSON packet, update this stream and the posts that exist in it.

    @param {Object} postStreamData The JSON data we want to update from.
    @method updateFromJson
  **/
  updateFromJson: function(postStreamData) {
    var postStream = this,
        posts = this.get('posts');

    posts.clear();
    this.set('gaps', null);
    if (postStreamData) {
      // Load posts if present
      postStreamData.posts.forEach(function(p) {
        postStream.appendPost(Discourse.Post.create(p));
      });
      delete postStreamData.posts;

      // Update our attributes
      postStream.setProperties(postStreamData);
    }
  },

  /**
    @private

    Stores a post in our identity map, and sets up the references it needs to
    find associated objects like the topic. It might return a different reference
    than you supplied if the post has already been loaded.

    @method storePost
    @param {Discourse.Post} post The post we're storing in the identity map
    @returns {Discourse.Post} the post from the identity map
  **/
  storePost: function(post) {
    // Calling `Em.get(undefined` raises an error
    if (!post) { return; }

    var postId = Em.get(post, 'id');
    if (postId) {
      var postIdentityMap = this.get('postIdentityMap'),
          existing = postIdentityMap.get(post.get('id'));

      if (existing) {
        // If the post is in the identity map, update it and return the old reference.
        existing.updateFromPost(post);
        return existing;
      }

      post.set('topic', this.get('topic'));
      postIdentityMap.set(post.get('id'), post);

      // Update the `highest_post_number` if this post is higher.
      var postNumber = post.get('post_number');
      if (postNumber && postNumber > (this.get('topic.highest_post_number') || 0)) {
        this.set('topic.highest_post_number', postNumber);
      }
    }
    return post;
  },

  /**
    @private

    Given a list of postIds, returns a list of the posts we don't have in our
    identity map and need to load.

    @method listUnloadedIds
    @param {Array} postIds The post Ids we want to load from the server
    @returns {Array} the array of postIds we don't have loaded.
  **/
  listUnloadedIds: function(postIds) {
    var unloaded = Em.A(),
        postIdentityMap = this.get('postIdentityMap');
    postIds.forEach(function(p) {
      if (!postIdentityMap.has(p)) { unloaded.pushObject(p); }
    });
    return unloaded;
  },

  /**
    @private

    Returns a list of posts in order requested, by id.

    @method findPostsByIds
    @param {Array} postIds The post Ids we want to retrieve, in order.
    @returns {Ember.Deferred} a promise that will resolve to the posts in the order requested.
  **/
  findPostsByIds: function(postIds) {
    var unloaded = this.listUnloadedIds(postIds),
        postIdentityMap = this.get('postIdentityMap');

    // Load our unloaded posts by id
    return this.loadIntoIdentityMap(unloaded).then(function() {
      return postIds.map(function (p) {
        return postIdentityMap.get(p);
      }).compact();
    });
  },

  /**
    @private

    Loads a list of posts from the server and inserts them into our identity map.

    @method loadIntoIdentityMap
    @param {Array} postIds The post Ids we want to insert into the identity map.
    @returns {Ember.Deferred} a promise that will resolve to the posts in the order requested.
  **/
  loadIntoIdentityMap: function(postIds) {

    // If we don't want any posts, return a promise that resolves right away
    if (Em.isEmpty(postIds)) {
      return Ember.Deferred.promise(function (p) { p.resolve(); });
    }

    var url = "/t/" + this.get('topic.id') + "/posts.json",
        data = { post_ids: postIds },
        postStream = this;

    return Discourse.ajax(url, {data: data}).then(function(result) {
      var posts = Em.get(result, "post_stream.posts");
      if (posts) {
        posts.forEach(function (p) {
          postStream.storePost(Discourse.Post.create(p));
        });
      }
    });
  },


  /**
    @private

    Returns the index of a particular post in the stream

    @method indexOf
    @param {Discourse.Post} post The post we're looking for
  **/
  indexOf: function(post) {
    return this.get('stream').indexOf(post.get('id'));
  },


  /**
    @private

    Handles an error loading a topic based on a HTTP status code. Updates
    the text to the correct values.

    @method errorLoading
    @param {Integer} status the HTTP status code
    @param {Discourse.Topic} topic The topic instance we were trying to load
  **/
  errorLoading: function(result) {
    var status = result.status;

    var topic = this.get('topic');
    topic.set('loadingFilter', false);
    topic.set('errorLoading', true);

    // If the result was 404 the post is not found
    if (status === 404) {
      topic.set('errorTitle', I18n.t('topic.not_found.title'));
      topic.set('notFoundHtml', result.responseText);
      return;
    }

    // If the result is 403 it means invalid access
    if (status === 403) {
      topic.set('errorTitle', I18n.t('topic.invalid_access.title'));
      topic.set('noRetry', true);
      if (Discourse.User.current()) {
        topic.set('message', I18n.t('topic.invalid_access.description'));
      } else {
        topic.set('message', I18n.t('topic.invalid_access.login_required'));
      }
      return;
    }

    // Otherwise supply a generic error message
    topic.set('errorTitle', I18n.t('topic.server_error.title'));
    topic.set('message', I18n.t('topic.server_error.description'));
  }

});


Discourse.PostStream.reopenClass({

  create: function() {
    var postStream = this._super.apply(this, arguments);
    postStream.setProperties({
      posts: [],
      stream: [],
      userFilters: [],
      postIdentityMap: Em.Map.create(),
      summary: false,
      loaded: false,
      loadingAbove: false,
      loadingBelow: false,
      loadingFilter: false,
      stagingPost: false
    });
    return postStream;
  },

  loadTopicView: function(topicId, args) {
    var opts = _.merge({}, args),
        url = Discourse.getURL("/t/") + topicId;
    if (opts.nearPost) {
      url += "/" + opts.nearPost;
    }
    delete opts.nearPost;

    return PreloadStore.getAndRemove("topic_" + topicId, function() {
      return Discourse.ajax(url + ".json", {data: opts});
    });

  }

});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/post_stream.js'] = "/**\n  We use this class to keep on top of streaming and filtering posts within a topic.\n\n  @class PostStream\n  @extends Ember.Object\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.PostStream = Em.Object.extend({\n\n  /**\n    Are we currently loading posts in any way?\n\n    @property loading\n  **/\n  loading: Em.computed.or('loadingAbove', 'loadingBelow', 'loadingFilter', 'stagingPost'),\n\n  notLoading: Em.computed.not('loading'),\n\n  filteredPostsCount: Em.computed.alias(\"stream.length\"),\n\n  /**\n    Have we loaded any posts?\n\n    @property hasPosts\n  **/\n  hasPosts: function(){\n    return this.get('posts.length') \u003e 0;\n  }.property(\"posts.@each\"),\n\n  /**\n    Do we have a stream list of post ids?\n\n    @property hasStream\n  **/\n  hasStream: Em.computed.gt('filteredPostsCount', 0),\n\n  /**\n    Can we append more posts to our current stream?\n\n    @property canAppendMore\n  **/\n  canAppendMore: Em.computed.and('notLoading', 'hasPosts', 'lastPostNotLoaded'),\n\n  /**\n    Can we prepend more posts to our current stream?\n\n    @property canPrependMore\n  **/\n  canPrependMore: Em.computed.and('notLoading', 'hasPosts', 'firstPostNotLoaded'),\n\n  /**\n    Have we loaded the first post in the stream?\n\n    @property firstPostPresent\n  **/\n  firstPostPresent: function() {\n    if (!this.get('hasLoadedData')) { return false; }\n    return !!this.get('posts').findProperty('id', this.get('firstPostId'));\n  }.property('hasLoadedData', 'posts.@each', 'firstPostId'),\n\n  firstPostNotLoaded: Em.computed.not('firstPostPresent'),\n\n  /**\n    The first post that we have loaded. Useful for checking to see if we should scroll upwards\n\n    @property firstLoadedPost\n  **/\n  firstLoadedPost: function() {\n    return _.first(this.get('posts'));\n  }.property('posts.@each'),\n\n  /**\n    The last post we have loaded. Useful for checking to see if we should load more\n\n    @property lastLoadedPost\n  **/\n  lastLoadedPost: function() {\n    return _.last(this.get('posts'));\n  }.property('posts.@each'),\n\n  /**\n    Returns the id of the first post in the set\n\n    @property firstPostId\n  **/\n  firstPostId: function() {\n    return this.get('stream')[0];\n  }.property('stream.@each'),\n\n  /**\n    Returns the id of the last post in the set\n\n    @property lastPostId\n  **/\n  lastPostId: function() {\n    return _.last(this.get('stream'));\n  }.property('stream.@each'),\n\n  /**\n    Have we loaded the last post in the stream?\n\n    @property loadedAllPosts\n  **/\n  loadedAllPosts: function() {\n    if (!this.get('hasLoadedData')) { return false; }\n    return !!this.get('posts').findProperty('id', this.get('lastPostId'));\n  }.property('hasLoadedData', 'posts.@each.id', 'lastPostId'),\n\n  lastPostNotLoaded: Em.computed.not('loadedAllPosts'),\n\n  /**\n    Returns a JS Object of current stream filter options. It should match the query\n    params for the stream.\n\n    @property streamFilters\n  **/\n  streamFilters: function() {\n    var result = {};\n    if (this.get('summary')) { result.filter = \"summary\"; }\n    if (this.get('show_deleted')) { result.show_deleted = true; }\n\n    var userFilters = this.get('userFilters');\n    if (!Em.isEmpty(userFilters)) {\n      result.username_filters = userFilters.join(\",\");\n    }\n\n    return result;\n  }.property('userFilters.[]', 'summary', 'show_deleted'),\n\n  hasNoFilters: function() {\n    var streamFilters = this.get('streamFilters');\n    return !(streamFilters \u0026\u0026 ((streamFilters.filter === 'summary') || streamFilters.userFilters));\n  }.property('streamFilters.[]', 'topic.posts_count', 'posts.length'),\n\n  /**\n    Returns the window of posts above the current set in the stream, bound to the top of the stream.\n    This is the collection we'll ask for when scrolling upwards.\n\n    @property previousWindow\n  **/\n  previousWindow: function() {\n    // If we can't find the last post loaded, bail\n    var firstPost = _.first(this.get('posts'));\n    if (!firstPost) { return []; }\n\n    // Find the index of the last post loaded, if not found, bail\n    var stream = this.get('stream');\n    var firstIndex = this.indexOf(firstPost);\n    if (firstIndex === -1) { return []; }\n\n    var startIndex = firstIndex - Discourse.SiteSettings.posts_per_page;\n    if (startIndex \u003c 0) { startIndex = 0; }\n    return stream.slice(startIndex, firstIndex);\n\n  }.property('posts.@each', 'stream.@each'),\n\n  /**\n    Returns the window of posts below the current set in the stream, bound by the bottom of the\n    stream. This is the collection we use when scrolling downwards.\n\n    @property nextWindow\n  **/\n  nextWindow: function() {\n    // If we can't find the last post loaded, bail\n    var lastLoadedPost = this.get('lastLoadedPost');\n    if (!lastLoadedPost) { return []; }\n\n    // Find the index of the last post loaded, if not found, bail\n    var stream = this.get('stream');\n    var lastIndex = this.indexOf(lastLoadedPost);\n    if (lastIndex === -1) { return []; }\n    if ((lastIndex + 1) \u003e= this.get('highest_post_number')) { return []; }\n\n    // find our window of posts\n    return stream.slice(lastIndex+1, lastIndex+Discourse.SiteSettings.posts_per_page+1);\n  }.property('lastLoadedPost', 'stream.@each'),\n\n\n  /**\n    Cancel any active filters on the stream.\n\n    @method cancelFilter\n  **/\n  cancelFilter: function() {\n    this.set('summary', false);\n    this.set('show_deleted', false);\n    this.get('userFilters').clear();\n  },\n\n  /**\n    Toggle summary mode for the stream.\n\n    @method toggleSummary\n  **/\n  toggleSummary: function() {\n    this.get('userFilters').clear();\n    this.toggleProperty('summary');\n    return this.refresh();\n  },\n\n  toggleDeleted: function() {\n    this.toggleProperty('show_deleted');\n    return this.refresh();\n  },\n\n  /**\n    Filter the stream to a particular user.\n\n    @method toggleParticipant\n  **/\n  toggleParticipant: function(username) {\n    var userFilters = this.get('userFilters');\n    this.set('summary', false);\n    this.set('show_deleted', true);\n    if (userFilters.contains(username)) {\n      userFilters.removeObject(username);\n    } else {\n      userFilters.addObject(username);\n    }\n    return this.refresh();\n  },\n\n  /**\n    Loads a new set of posts into the stream. If you provide a `nearPost` option and the post\n    is already loaded, it will simply scroll there and load nothing.\n\n    @method refresh\n    @param {Object} opts Options for loading the stream\n      @param {Integer} opts.nearPost The post we want to find other posts near to.\n      @param {Boolean} opts.track_visit Whether or not to track this as a visit to a topic.\n    @returns {Ember.Deferred} a promise that is resolved when the posts have been inserted into the stream.\n  **/\n  refresh: function(opts) {\n    opts = opts || {};\n    opts.nearPost = parseInt(opts.nearPost, 10);\n\n    var topic = this.get('topic'),\n        self = this;\n\n    // Do we already have the post in our list of posts? Jump there.\n    var postWeWant = this.get('posts').findProperty('post_number', opts.nearPost);\n    if (postWeWant) { return Ember.RSVP.resolve(); }\n\n    // TODO: if we have all the posts in the filter, don't go to the server for them.\n    self.set('loadingFilter', true);\n\n    opts = _.merge(opts, self.get('streamFilters'));\n\n    // Request a topicView\n    return Discourse.PostStream.loadTopicView(topic.get('id'), opts).then(function (json) {\n      topic.updateFromJson(json);\n      self.updateFromJson(json.post_stream);\n      self.setProperties({ loadingFilter: false, loaded: true });\n    }).catch(function(result) {\n      self.errorLoading(result);\n      throw result;\n    });\n  },\n  hasLoadedData: Em.computed.and('hasPosts', 'hasStream'),\n\n\n  /**\n    Fill in a gap of posts before a particular post\n\n    @method fillGapBefore\n    @paaram {Discourse.Post} post beside gap\n    @paaram {Array} gap array of post ids to load\n    @returns {Ember.Deferred} a promise that's resolved when the posts have been added.\n  **/\n  fillGapBefore: function(post, gap) {\n    var postId = post.get('id'),\n        stream = this.get('stream'),\n        idx = stream.indexOf(postId),\n        currentPosts = this.get('posts'),\n        self = this;\n\n    if (idx !== -1) {\n      // Insert the gap at the appropriate place\n      stream.splice.apply(stream, [idx, 0].concat(gap));\n\n      var postIdx = currentPosts.indexOf(post);\n      if (postIdx !== -1) {\n        return this.findPostsByIds(gap).then(function(posts) {\n          posts.forEach(function(p) {\n            var stored = self.storePost(p);\n            if (!currentPosts.contains(stored)) {\n              currentPosts.insertAt(postIdx++, stored);\n            }\n          });\n\n          delete self.get('gaps.before')[postId];\n          self.get('stream').enumerableContentDidChange();\n        });\n      }\n    }\n    return Ember.RSVP.resolve();\n  },\n\n  /**\n    Fill in a gap of posts after a particular post\n\n    @method fillGapAfter\n    @paaram {Discourse.Post} post beside gap\n    @paaram {Array} gap array of post ids to load\n    @returns {Ember.Deferred} a promise that's resolved when the posts have been added.\n  **/\n  fillGapAfter: function(post, gap) {\n    var postId = post.get('id'),\n        stream = this.get('stream'),\n        idx = stream.indexOf(postId),\n        self = this;\n\n    if (idx !== -1) {\n      stream.pushObjects(gap);\n      return this.appendMore().then(function() {\n        self.get('stream').enumerableContentDidChange();\n      });\n    }\n    return Ember.RSVP.resolve();\n  },\n\n  /**\n    Appends the next window of posts to the stream. Call it when scrolling downwards.\n\n    @method appendMore\n    @returns {Ember.Deferred} a promise that's resolved when the posts have been added.\n  **/\n  appendMore: function() {\n    var self = this;\n\n    // Make sure we can append more posts\n    if (!self.get('canAppendMore')) { return Ember.RSVP.resolve(); }\n\n    var postIds = self.get('nextWindow');\n    if (Ember.isEmpty(postIds)) { return Ember.RSVP.resolve(); }\n\n    self.set('loadingBelow', true);\n\n    var stopLoading = function() {\n      self.set('loadingBelow', false);\n    };\n\n    return self.findPostsByIds(postIds).then(function(posts) {\n      posts.forEach(function(p) {\n        self.appendPost(p);\n      });\n      stopLoading();\n    }, stopLoading);\n  },\n\n  /**\n    Prepend the previous window of posts to the stream. Call it when scrolling upwards.\n\n    @method prependMore\n    @returns {Ember.Deferred} a promise that's resolved when the posts have been added.\n  **/\n  prependMore: function() {\n    var postStream = this;\n\n    // Make sure we can append more posts\n    if (!postStream.get('canPrependMore')) { return Ember.RSVP.resolve(); }\n\n    var postIds = postStream.get('previousWindow');\n    if (Ember.isEmpty(postIds)) { return Ember.RSVP.resolve(); }\n\n    postStream.set('loadingAbove', true);\n    return postStream.findPostsByIds(postIds.reverse()).then(function(posts) {\n      posts.forEach(function(p) {\n        postStream.prependPost(p);\n      });\n      postStream.set('loadingAbove', false);\n    });\n  },\n\n  /**\n    Stage a post for insertion in the stream. It should be rendered right away under the\n    assumption that the post will succeed. We can then `commitPost` when it succeeds or\n    `undoPost` when it fails.\n\n    @method stagePost\n    @param {Discourse.Post} post the post to stage in the stream\n    @param {Discourse.User} user the user creating the post\n  **/\n  stagePost: function(post, user) {\n\n    // We can't stage two posts simultaneously\n    if (this.get('stagingPost')) { return false; }\n    this.set('stagingPost', true);\n\n    var topic = this.get('topic');\n    topic.setProperties({\n      posts_count: (topic.get('posts_count') || 0) + 1,\n      last_posted_at: new Date(),\n      'details.last_poster': user,\n      highest_post_number: (topic.get('highest_post_number') || 0) + 1\n    });\n\n    post.setProperties({\n      post_number: topic.get('highest_post_number'),\n      topic: topic,\n      created_at: new Date(),\n      id: -1\n    });\n\n    // If we're at the end of the stream, add the post\n    if (this.get('loadedAllPosts')) {\n      this.appendPost(post);\n      this.get('stream').addObject(post.get('id'));\n    }\n\n    return true;\n  },\n\n  /**\n    Commit the post we staged. Call this after a save succeeds.\n\n    @method commitPost\n    @param {Discourse.Post} the post we saved in the stream.\n  **/\n  commitPost: function(post) {\n    if (this.get('loadedAllPosts')) {\n      this.appendPost(post);\n    }\n    // Correct for a dangling deleted post, if needed\n    // compensating for message bus pumping in new posts while\n    // your post is in transit\n    if(this.get('topic.highest_post_number') \u003c post.get('post_number')){\n      this.set('topic.highest_post_number', post.get('post_number'));\n    }\n    this.get('stream').removeObject(-1);\n    this.get('postIdentityMap').set(-1, null);\n    this.get('postIdentityMap').set(post.get('id'), post);\n\n    this.get('stream').addObject(post.get('id'));\n    this.set('stagingPost', false);\n  },\n\n  /**\n    Undo a post we've staged in the stream. Remove it from being rendered and revert the\n    state we changed.\n\n    @method undoPost\n    @param {Discourse.Post} the post to undo from the stream\n  **/\n  undoPost: function(post) {\n    this.get('stream').removeObject(-1);\n    this.posts.removeObject(post);\n    this.get('postIdentityMap').set(-1, null);\n\n    var topic = this.get('topic');\n    this.set('stagingPost', false);\n\n    topic.setProperties({\n      highest_post_number: (topic.get('highest_post_number') || 0) - 1,\n      posts_count: (topic.get('posts_count') || 0) - 1\n    });\n\n    // TODO unfudge reply count on parent post\n  },\n\n  /**\n    Prepends a single post to the stream.\n\n    @method prependPost\n    @param {Discourse.Post} post The post we're prepending\n    @returns {Discourse.Post} the post that was inserted.\n  **/\n  prependPost: function(post) {\n    this.get('posts').unshiftObject(this.storePost(post));\n    return post;\n  },\n\n  /**\n    Appends a single post into the stream.\n\n    @method appendPost\n    @param {Discourse.Post} post The post we're appending\n    @returns {Discourse.Post} the post that was inserted.\n  **/\n  appendPost: function(post) {\n    var stored = this.storePost(post);\n    if (stored) {\n      this.get('posts').addObject(stored);\n    }\n    return post;\n  },\n\n  /**\n    Removes posts from the stream.\n\n    @method removePosts\n    @param {Array} posts the collection of posts to remove\n  **/\n  removePosts: function(posts) {\n    if (Em.isEmpty(posts)) { return; }\n\n    var postIds = posts.map(function (p) { return p.get('id'); });\n    var identityMap = this.get('postIdentityMap');\n\n    this.get('stream').removeObjects(postIds);\n    this.get('posts').removeObjects(posts);\n    postIds.forEach(function(id){\n      identityMap.remove(id);\n    });\n  },\n\n  /**\n    Returns a post from the identity map if it's been inserted.\n\n    @method findLoadedPost\n    @param {Integer} id The post we want from the identity map.\n    @returns {Discourse.Post} the post that was inserted.\n  **/\n  findLoadedPost: function(id) {\n    return this.get('postIdentityMap').get(id);\n  },\n\n  /**\n    Finds and adds a post to the stream by id. Typically this would happen if we receive a message\n    from the message bus indicating there's a new post. We'll only insert it if we currently\n    have no filters.\n\n    @method triggerNewPostInStream\n    @param {Integer} postId The id of the new post to be inserted into the stream\n  **/\n  triggerNewPostInStream: function(postId) {\n    if (!postId) { return; }\n\n    // We only trigger if there are no filters active\n    if (!this.get('hasNoFilters')) { return; }\n\n    var loadedAllPosts = this.get('loadedAllPosts');\n\n    if (this.get('stream').indexOf(postId) === -1) {\n      this.get('stream').addObject(postId);\n      if (loadedAllPosts) { this.appendMore(); }\n    }\n  },\n\n  triggerRecoveredPost: function(postId){\n    var self = this,\n        postIdentityMap = this.get('postIdentityMap'),\n        existing = postIdentityMap.get(postId);\n\n    if(existing){\n      this.triggerChangedPost(postId, new Date());\n    } else {\n      // need to insert into stream\n      var url = \"/posts/\" + postId;\n      Discourse.ajax(url).then(function(p){\n        var post = Discourse.Post.create(p);\n        var stream = self.get(\"stream\");\n        var posts = self.get(\"posts\");\n        self.storePost(post);\n\n        // we need to zip this into the stream\n        var index = 0;\n        stream.forEach(function(postId){\n          if(postId \u003c p.id){\n            index+= 1;\n          }\n        });\n\n        stream.insertAt(index, p.id);\n\n        index = 0;\n        posts.forEach(function(_post){\n          if(_post.id \u003c p.id){\n            index+= 1;\n          }\n        });\n\n        if(index \u003c posts.length){\n          posts.insertAt(index, post);\n        } else {\n          if(post.post_number \u003c posts[posts.length-1].post_number + 5){\n            self.appendMore();\n          }\n        }\n      });\n    }\n  },\n\n  triggerDeletedPost: function(postId){\n    var self = this,\n        postIdentityMap = this.get('postIdentityMap'),\n        existing = postIdentityMap.get(postId);\n\n    if(existing){\n      var url = \"/posts/\" + postId;\n      Discourse.ajax(url).then(\n        function(p){\n          self.storePost(Discourse.Post.create(p));\n        },\n        function(){\n          self.removePosts([existing]);\n        });\n    }\n  },\n\n  triggerChangedPost: function(postId, updatedAt) {\n    if (!postId) { return; }\n\n    var postIdentityMap = this.get('postIdentityMap'),\n        existing = postIdentityMap.get(postId),\n        self = this;\n\n    if (existing \u0026\u0026 existing.updated_at !== updatedAt) {\n      var url = \"/posts/\" + postId;\n      Discourse.ajax(url).then(function(p){\n        self.storePost(Discourse.Post.create(p));\n      });\n    }\n  },\n\n  /**\n    Returns the \"thread\" of posts in the history of a post.\n\n    @method findReplyHistory\n    @param {Discourse.Post} post the post whose history we want\n    @returns {Array} the posts in the history.\n  **/\n  findReplyHistory: function(post) {\n    var postStream = this,\n        url = \"/posts/\" + post.get('id') + \"/reply-history.json\";\n\n    return Discourse.ajax(url).then(function(result) {\n      return result.map(function (p) {\n        return postStream.storePost(Discourse.Post.create(p));\n      });\n    }).then(function (replyHistory) {\n      post.set('replyHistory', replyHistory);\n    });\n  },\n\n  /**\n    Returns the closest post given a postNumber that may not exist in the stream.\n    For example, if the user asks for a post that's deleted or otherwise outside the range.\n    This allows us to set the progress bar with the correct number.\n\n    @method closestPostForPostNumber\n    @param {Number} postNumber the post number we're looking for\n    @return {Post} the closest post\n    @see PostStream.closestPostNumberFor\n  **/\n  closestPostForPostNumber: function(postNumber) {\n    if (!this.get('hasPosts')) { return; }\n\n    var closest = null;\n    this.get('posts').forEach(function (p) {\n      if (closest === postNumber) { return; }\n      if (!closest) { closest = p; }\n\n      if (Math.abs(postNumber - p.get('post_number')) \u003c Math.abs(closest.get('post_number') - postNumber)) {\n        closest = p;\n      }\n    });\n\n    return closest;\n  },\n\n  /**\n    Get the index of a post in the stream. (Use this for the topic progress bar.)\n\n    @param post the post to get the index of\n    @returns {Number} 1-starting index of the post, or 0 if not found\n    @see PostStream.progressIndexOfPostId\n  **/\n  progressIndexOfPost: function(post) {\n    return this.progressIndexOfPostId(post.get('id'));\n  },\n\n  /**\n    Get the index in the stream of a post id. (Use this for the topic progress bar.)\n\n    @param post_id - post id to search for\n    @returns {Number} 1-starting index of the post, or 0 if not found\n  **/\n  progressIndexOfPostId: function(post_id) {\n    return this.get('stream').indexOf(post_id) + 1;\n  },\n\n  /**\n    Returns the closest post number given a postNumber that may not exist in the stream.\n    For example, if the user asks for a post that's deleted or otherwise outside the range.\n    This allows us to set the progress bar with the correct number.\n\n    @method closestPostNumberFor\n    @param {Number} postNumber the post number we're looking for\n    @return {Number} a close post number\n  **/\n  closestPostNumberFor: function(postNumber) {\n    if (!this.get('hasPosts')) { return; }\n\n    var closest = null;\n    this.get('posts').forEach(function (p) {\n      if (closest === postNumber) { return; }\n      if (!closest) { closest = p.get('post_number'); }\n\n      if (Math.abs(postNumber - p.get('post_number')) \u003c Math.abs(closest - postNumber)) {\n        closest = p.get('post_number');\n      }\n    });\n\n    return closest;\n  },\n\n  /**\n    @private\n\n    Given a JSON packet, update this stream and the posts that exist in it.\n\n    @param {Object} postStreamData The JSON data we want to update from.\n    @method updateFromJson\n  **/\n  updateFromJson: function(postStreamData) {\n    var postStream = this,\n        posts = this.get('posts');\n\n    posts.clear();\n    this.set('gaps', null);\n    if (postStreamData) {\n      // Load posts if present\n      postStreamData.posts.forEach(function(p) {\n        postStream.appendPost(Discourse.Post.create(p));\n      });\n      delete postStreamData.posts;\n\n      // Update our attributes\n      postStream.setProperties(postStreamData);\n    }\n  },\n\n  /**\n    @private\n\n    Stores a post in our identity map, and sets up the references it needs to\n    find associated objects like the topic. It might return a different reference\n    than you supplied if the post has already been loaded.\n\n    @method storePost\n    @param {Discourse.Post} post The post we're storing in the identity map\n    @returns {Discourse.Post} the post from the identity map\n  **/\n  storePost: function(post) {\n    // Calling `Em.get(undefined` raises an error\n    if (!post) { return; }\n\n    var postId = Em.get(post, 'id');\n    if (postId) {\n      var postIdentityMap = this.get('postIdentityMap'),\n          existing = postIdentityMap.get(post.get('id'));\n\n      if (existing) {\n        // If the post is in the identity map, update it and return the old reference.\n        existing.updateFromPost(post);\n        return existing;\n      }\n\n      post.set('topic', this.get('topic'));\n      postIdentityMap.set(post.get('id'), post);\n\n      // Update the `highest_post_number` if this post is higher.\n      var postNumber = post.get('post_number');\n      if (postNumber \u0026\u0026 postNumber \u003e (this.get('topic.highest_post_number') || 0)) {\n        this.set('topic.highest_post_number', postNumber);\n      }\n    }\n    return post;\n  },\n\n  /**\n    @private\n\n    Given a list of postIds, returns a list of the posts we don't have in our\n    identity map and need to load.\n\n    @method listUnloadedIds\n    @param {Array} postIds The post Ids we want to load from the server\n    @returns {Array} the array of postIds we don't have loaded.\n  **/\n  listUnloadedIds: function(postIds) {\n    var unloaded = Em.A(),\n        postIdentityMap = this.get('postIdentityMap');\n    postIds.forEach(function(p) {\n      if (!postIdentityMap.has(p)) { unloaded.pushObject(p); }\n    });\n    return unloaded;\n  },\n\n  /**\n    @private\n\n    Returns a list of posts in order requested, by id.\n\n    @method findPostsByIds\n    @param {Array} postIds The post Ids we want to retrieve, in order.\n    @returns {Ember.Deferred} a promise that will resolve to the posts in the order requested.\n  **/\n  findPostsByIds: function(postIds) {\n    var unloaded = this.listUnloadedIds(postIds),\n        postIdentityMap = this.get('postIdentityMap');\n\n    // Load our unloaded posts by id\n    return this.loadIntoIdentityMap(unloaded).then(function() {\n      return postIds.map(function (p) {\n        return postIdentityMap.get(p);\n      }).compact();\n    });\n  },\n\n  /**\n    @private\n\n    Loads a list of posts from the server and inserts them into our identity map.\n\n    @method loadIntoIdentityMap\n    @param {Array} postIds The post Ids we want to insert into the identity map.\n    @returns {Ember.Deferred} a promise that will resolve to the posts in the order requested.\n  **/\n  loadIntoIdentityMap: function(postIds) {\n\n    // If we don't want any posts, return a promise that resolves right away\n    if (Em.isEmpty(postIds)) {\n      return Ember.Deferred.promise(function (p) { p.resolve(); });\n    }\n\n    var url = \"/t/\" + this.get('topic.id') + \"/posts.json\",\n        data = { post_ids: postIds },\n        postStream = this;\n\n    return Discourse.ajax(url, {data: data}).then(function(result) {\n      var posts = Em.get(result, \"post_stream.posts\");\n      if (posts) {\n        posts.forEach(function (p) {\n          postStream.storePost(Discourse.Post.create(p));\n        });\n      }\n    });\n  },\n\n\n  /**\n    @private\n\n    Returns the index of a particular post in the stream\n\n    @method indexOf\n    @param {Discourse.Post} post The post we're looking for\n  **/\n  indexOf: function(post) {\n    return this.get('stream').indexOf(post.get('id'));\n  },\n\n\n  /**\n    @private\n\n    Handles an error loading a topic based on a HTTP status code. Updates\n    the text to the correct values.\n\n    @method errorLoading\n    @param {Integer} status the HTTP status code\n    @param {Discourse.Topic} topic The topic instance we were trying to load\n  **/\n  errorLoading: function(result) {\n    var status = result.status;\n\n    var topic = this.get('topic');\n    topic.set('loadingFilter', false);\n    topic.set('errorLoading', true);\n\n    // If the result was 404 the post is not found\n    if (status === 404) {\n      topic.set('errorTitle', I18n.t('topic.not_found.title'));\n      topic.set('notFoundHtml', result.responseText);\n      return;\n    }\n\n    // If the result is 403 it means invalid access\n    if (status === 403) {\n      topic.set('errorTitle', I18n.t('topic.invalid_access.title'));\n      topic.set('noRetry', true);\n      if (Discourse.User.current()) {\n        topic.set('message', I18n.t('topic.invalid_access.description'));\n      } else {\n        topic.set('message', I18n.t('topic.invalid_access.login_required'));\n      }\n      return;\n    }\n\n    // Otherwise supply a generic error message\n    topic.set('errorTitle', I18n.t('topic.server_error.title'));\n    topic.set('message', I18n.t('topic.server_error.description'));\n  }\n\n});\n\n\nDiscourse.PostStream.reopenClass({\n\n  create: function() {\n    var postStream = this._super.apply(this, arguments);\n    postStream.setProperties({\n      posts: [],\n      stream: [],\n      userFilters: [],\n      postIdentityMap: Em.Map.create(),\n      summary: false,\n      loaded: false,\n      loadingAbove: false,\n      loadingBelow: false,\n      loadingFilter: false,\n      stagingPost: false\n    });\n    return postStream;\n  },\n\n  loadTopicView: function(topicId, args) {\n    var opts = _.merge({}, args),\n        url = Discourse.getURL(\"/t/\") + topicId;\n    if (opts.nearPost) {\n      url += \"/\" + opts.nearPost;\n    }\n    delete opts.nearPost;\n\n    return PreloadStore.getAndRemove(\"topic_\" + topicId, function() {\n      return Discourse.ajax(url + \".json\", {data: opts});\n    });\n\n  }\n\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

// this allows you to track the selected item in an array, ghetto for now
Discourse.SelectableArray = Em.ArrayProxy.extend({

  init: function() {
    this.content = [];
    this._super();
  },

  selectIndex: function(index){
    this.select(this[index]);
  },

  select: function(selected){
    _.each(this.content,function(item){
      if(item === selected){
        Em.set(item, "active", true);
      } else {
        if (item.get("active")) {
          Em.set(item, "active", false);
        }
      }
    });
    this.set("active", selected);
  },

  removeObject: function(object) {
    if(object === this.get("active")){
      this.set("active", null);
      Em.set(object, "active", false);
    }

    this._super(object);
  }

});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/selectable_array.js'] = "// this allows you to track the selected item in an array, ghetto for now\nDiscourse.SelectableArray = Em.ArrayProxy.extend({\n\n  init: function() {\n    this.content = [];\n    this._super();\n  },\n\n  selectIndex: function(index){\n    this.select(this[index]);\n  },\n\n  select: function(selected){\n    _.each(this.content,function(item){\n      if(item === selected){\n        Em.set(item, \"active\", true);\n      } else {\n        if (item.get(\"active\")) {\n          Em.set(item, \"active\", false);\n        }\n      }\n    });\n    this.set(\"active\", selected);\n  },\n\n  removeObject: function(object) {\n    if(object === this.get(\"active\")){\n      this.set(\"active\", null);\n      Em.set(object, \"active\", false);\n    }\n\n    this._super(object);\n  }\n\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A data model representing current session data. You can put transient
  data here you might want later. It is not stored or serialized anywhere.

  @class Session
  @extends Discourse.Model
  @namespace Discourse
  @module Discourse
**/

Discourse.Session = Discourse.Model.extend({
  init: function() {
    this.set('highestSeenByTopic', {});
  }
});

Discourse.Session.reopenClass(Discourse.Singleton);


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/session.js'] = "/**\n  A data model representing current session data. You can put transient\n  data here you might want later. It is not stored or serialized anywhere.\n\n  @class Session\n  @extends Discourse.Model\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.Session = Discourse.Model.extend({\n  init: function() {\n    this.set('highestSeenByTopic', {});\n  }\n});\n\nDiscourse.Session.reopenClass(Discourse.Singleton);\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A data model representing a link to share a post on a 3rd party site,
  like Twitter, Facebook, and Google+.

  @class ShareLink
  @extends Discourse.Model
  @namespace Discourse
  @module Discourse
**/

Discourse.ShareLink = Discourse.Model.extend({

  href: function() {
    return Discourse.ShareLink.urlFor[this.get('target')](this.get('link'), this.get('topicTitle'));
  }.property('target', 'link', 'topicTitle'),

  title: Discourse.computed.i18n('target', 'share.%@'),

  iconClass: function() {
    return Discourse.ShareLink.iconClasses[this.get('target')];
  }.property('target'),

  openInPopup: function() {
    return( Discourse.ShareLink.shouldOpenInPopup[this.get('target')] );
  }.property('target')

});

Discourse.ShareLink.reopenClass({
  supportedTargets: [],
  urlFor: {},
  iconClasses: {},
  popupHeights: {},
  shouldOpenInPopup: {},

  addTarget: function(id, object) {
    var self = this;
    self.supportedTargets.push(id);
    self.urlFor[id] = object.generateUrl;
    self.iconClasses[id] = object.iconClass;
    self.popupHeights[id] = object.popupHeight || 315;
    self.shouldOpenInPopup[id] = object.shouldOpenInPopup;
  },

  popupHeight: function(target) {
    return (this.popupHeights[target] || 315);
  }
});

(function() {
  Discourse.ShareLink.addTarget('twitter', {
    iconClass: 'fa-twitter',
    generateUrl: function(link, title) {
      return ("http://twitter.com/intent/tweet?url=" + encodeURIComponent(link) + "&text=" + encodeURIComponent(title) );
    },
    shouldOpenInPopup: true,
    popupHeight: 265
  });

  Discourse.ShareLink.addTarget('facebook', {
    iconClass: 'fa-facebook-square',
    generateUrl: function(link, title) {
      return ("http://www.facebook.com/sharer.php?u=" + encodeURIComponent(link) + '&t=' + encodeURIComponent(title));
    },
    shouldOpenInPopup: true,
    popupHeight: 315
  });

  Discourse.ShareLink.addTarget('google+', {
    iconClass: 'fa-google-plus',
    generateUrl: function(link) {
      return ("https://plus.google.com/share?url=" + encodeURIComponent(link));
    },
    shouldOpenInPopup: true,
    popupHeight: 600
  });

  Discourse.ShareLink.addTarget('email', {
    iconClass: 'fa-envelope',
    generateUrl: function(link, title) {
      return ("mailto:?to=&subject=" + encodeURIComponent('[' + Discourse.SiteSettings.title + '] ' + title) + "&body=" + encodeURIComponent(link));
    },
    shouldOpenInPopup: false
  });
})();


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/share_link.js'] = "/**\n  A data model representing a link to share a post on a 3rd party site,\n  like Twitter, Facebook, and Google+.\n\n  @class ShareLink\n  @extends Discourse.Model\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.ShareLink = Discourse.Model.extend({\n\n  href: function() {\n    return Discourse.ShareLink.urlFor[this.get('target')](this.get('link'), this.get('topicTitle'));\n  }.property('target', 'link', 'topicTitle'),\n\n  title: Discourse.computed.i18n('target', 'share.%@'),\n\n  iconClass: function() {\n    return Discourse.ShareLink.iconClasses[this.get('target')];\n  }.property('target'),\n\n  openInPopup: function() {\n    return( Discourse.ShareLink.shouldOpenInPopup[this.get('target')] );\n  }.property('target')\n\n});\n\nDiscourse.ShareLink.reopenClass({\n  supportedTargets: [],\n  urlFor: {},\n  iconClasses: {},\n  popupHeights: {},\n  shouldOpenInPopup: {},\n\n  addTarget: function(id, object) {\n    var self = this;\n    self.supportedTargets.push(id);\n    self.urlFor[id] = object.generateUrl;\n    self.iconClasses[id] = object.iconClass;\n    self.popupHeights[id] = object.popupHeight || 315;\n    self.shouldOpenInPopup[id] = object.shouldOpenInPopup;\n  },\n\n  popupHeight: function(target) {\n    return (this.popupHeights[target] || 315);\n  }\n});\n\n(function() {\n  Discourse.ShareLink.addTarget('twitter', {\n    iconClass: 'fa-twitter',\n    generateUrl: function(link, title) {\n      return (\"http://twitter.com/intent/tweet?url=\" + encodeURIComponent(link) + \"\u0026text=\" + encodeURIComponent(title) );\n    },\n    shouldOpenInPopup: true,\n    popupHeight: 265\n  });\n\n  Discourse.ShareLink.addTarget('facebook', {\n    iconClass: 'fa-facebook-square',\n    generateUrl: function(link, title) {\n      return (\"http://www.facebook.com/sharer.php?u=\" + encodeURIComponent(link) + '\u0026t=' + encodeURIComponent(title));\n    },\n    shouldOpenInPopup: true,\n    popupHeight: 315\n  });\n\n  Discourse.ShareLink.addTarget('google+', {\n    iconClass: 'fa-google-plus',\n    generateUrl: function(link) {\n      return (\"https://plus.google.com/share?url=\" + encodeURIComponent(link));\n    },\n    shouldOpenInPopup: true,\n    popupHeight: 600\n  });\n\n  Discourse.ShareLink.addTarget('email', {\n    iconClass: 'fa-envelope',\n    generateUrl: function(link, title) {\n      return (\"mailto:?to=\u0026subject=\" + encodeURIComponent('[' + Discourse.SiteSettings.title + '] ' + title) + \"\u0026body=\" + encodeURIComponent(link));\n    },\n    shouldOpenInPopup: false\n  });\n})();\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A data model representing the site (instance of Discourse)

  @class Site
  @extends Discourse.Model
  @namespace Discourse
  @module Discourse
**/

Discourse.Site = Discourse.Model.extend({

  notificationLookup: function() {
    var result = [];
    _.each(this.get('notification_types'), function(v,k) {
      result[v] = k;
    });
    return result;
  }.property('notification_types'),

  flagTypes: function() {
    var postActionTypes = this.get('post_action_types');
    if (!postActionTypes) return [];
    return postActionTypes.filterProperty('is_flag', true);
  }.property('post_action_types.@each'),

  categoriesByCount: Em.computed.sort('categories', function(a, b) {
    return (b.get('topic_count') || 0) - (a.get('topic_count') || 0);
  }),

  // Sort subcategories under parents
  sortedCategories: function() {
    var cats = this.get('categoriesByCount'),
        result = [],
        remaining = {};

    cats.forEach(function(c) {
      var parentCategoryId = parseInt(c.get('parent_category_id'), 10);
      if (!parentCategoryId) {
        result.pushObject(c);
      } else {
        remaining[parentCategoryId] = remaining[parentCategoryId] || [];
        remaining[parentCategoryId].pushObject(c);
      }
    });

    Ember.keys(remaining).forEach(function(parentCategoryId) {
      var category = result.findBy('id', parseInt(parentCategoryId, 10)),
          index = result.indexOf(category);

      if (index !== -1) {
        result.replace(index+1, 0, remaining[parentCategoryId]);
      }
    });

    return result;
  }.property(),

  postActionTypeById: function(id) {
    return this.get("postActionByIdLookup.action" + id);
  },

  topicFlagTypeById: function(id) {
    return this.get("topicFlagByIdLookup.action" + id);
  },

  updateCategory: function(newCategory) {
    var existingCategory = this.get('categories').findProperty('id', Em.get(newCategory, 'id'));
    if (existingCategory) existingCategory.setProperties(newCategory);
  }
});

Discourse.Site.reopenClass(Discourse.Singleton, {

  /**
    The current singleton will retrieve its attributes from the `PreloadStore`.

    @method createCurrent
    @returns {Discourse.Site} the site
  **/
  createCurrent: function() {
    return Discourse.Site.create(PreloadStore.get('site'));
  },

  create: function() {
    var result = this._super.apply(this, arguments);

    if (result.categories) {
      result.categoriesById = {};
      result.categories = _.map(result.categories, function(c) {
        result.categoriesById[c.id] = Discourse.Category.create(c);
        return result.categoriesById[c.id];
      });

      // Associate the categories with their parents
      result.categories.forEach(function (c) {
        if (c.get('parent_category_id')) {
          c.set('parentCategory',
            result.categoriesById[c.get('parent_category_id')]);
        }
      });
    }

    if (result.trust_levels) {
      result.trustLevels = result.trust_levels.map(function (tl) {
        return Discourse.TrustLevel.create(tl);
      });

      delete result.trust_levels;
    }

    if (result.post_action_types) {
      result.postActionByIdLookup = Em.Object.create();
      result.post_action_types = _.map(result.post_action_types,function(p) {
        var actionType = Discourse.PostActionType.create(p);
        result.postActionByIdLookup.set("action" + p.id, actionType);
        return actionType;
      });
    }

    if (result.topic_flag_types) {
      result.topicFlagByIdLookup = Em.Object.create();
      result.topic_flag_types = _.map(result.topic_flag_types,function(p) {
        var actionType = Discourse.PostActionType.create(p);
        result.topicFlagByIdLookup.set("action" + p.id, actionType);
        return actionType;
      });
    }

    if (result.archetypes) {
      result.archetypes = _.map(result.archetypes,function(a) {
        return Discourse.Archetype.create(a);
      });
    }

    return result;
  }
});




// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/site.js'] = "/**\n  A data model representing the site (instance of Discourse)\n\n  @class Site\n  @extends Discourse.Model\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.Site = Discourse.Model.extend({\n\n  notificationLookup: function() {\n    var result = [];\n    _.each(this.get('notification_types'), function(v,k) {\n      result[v] = k;\n    });\n    return result;\n  }.property('notification_types'),\n\n  flagTypes: function() {\n    var postActionTypes = this.get('post_action_types');\n    if (!postActionTypes) return [];\n    return postActionTypes.filterProperty('is_flag', true);\n  }.property('post_action_types.@each'),\n\n  categoriesByCount: Em.computed.sort('categories', function(a, b) {\n    return (b.get('topic_count') || 0) - (a.get('topic_count') || 0);\n  }),\n\n  // Sort subcategories under parents\n  sortedCategories: function() {\n    var cats = this.get('categoriesByCount'),\n        result = [],\n        remaining = {};\n\n    cats.forEach(function(c) {\n      var parentCategoryId = parseInt(c.get('parent_category_id'), 10);\n      if (!parentCategoryId) {\n        result.pushObject(c);\n      } else {\n        remaining[parentCategoryId] = remaining[parentCategoryId] || [];\n        remaining[parentCategoryId].pushObject(c);\n      }\n    });\n\n    Ember.keys(remaining).forEach(function(parentCategoryId) {\n      var category = result.findBy('id', parseInt(parentCategoryId, 10)),\n          index = result.indexOf(category);\n\n      if (index !== -1) {\n        result.replace(index+1, 0, remaining[parentCategoryId]);\n      }\n    });\n\n    return result;\n  }.property(),\n\n  postActionTypeById: function(id) {\n    return this.get(\"postActionByIdLookup.action\" + id);\n  },\n\n  topicFlagTypeById: function(id) {\n    return this.get(\"topicFlagByIdLookup.action\" + id);\n  },\n\n  updateCategory: function(newCategory) {\n    var existingCategory = this.get('categories').findProperty('id', Em.get(newCategory, 'id'));\n    if (existingCategory) existingCategory.setProperties(newCategory);\n  }\n});\n\nDiscourse.Site.reopenClass(Discourse.Singleton, {\n\n  /**\n    The current singleton will retrieve its attributes from the `PreloadStore`.\n\n    @method createCurrent\n    @returns {Discourse.Site} the site\n  **/\n  createCurrent: function() {\n    return Discourse.Site.create(PreloadStore.get('site'));\n  },\n\n  create: function() {\n    var result = this._super.apply(this, arguments);\n\n    if (result.categories) {\n      result.categoriesById = {};\n      result.categories = _.map(result.categories, function(c) {\n        result.categoriesById[c.id] = Discourse.Category.create(c);\n        return result.categoriesById[c.id];\n      });\n\n      // Associate the categories with their parents\n      result.categories.forEach(function (c) {\n        if (c.get('parent_category_id')) {\n          c.set('parentCategory',\n            result.categoriesById[c.get('parent_category_id')]);\n        }\n      });\n    }\n\n    if (result.trust_levels) {\n      result.trustLevels = result.trust_levels.map(function (tl) {\n        return Discourse.TrustLevel.create(tl);\n      });\n\n      delete result.trust_levels;\n    }\n\n    if (result.post_action_types) {\n      result.postActionByIdLookup = Em.Object.create();\n      result.post_action_types = _.map(result.post_action_types,function(p) {\n        var actionType = Discourse.PostActionType.create(p);\n        result.postActionByIdLookup.set(\"action\" + p.id, actionType);\n        return actionType;\n      });\n    }\n\n    if (result.topic_flag_types) {\n      result.topicFlagByIdLookup = Em.Object.create();\n      result.topic_flag_types = _.map(result.topic_flag_types,function(p) {\n        var actionType = Discourse.PostActionType.create(p);\n        result.topicFlagByIdLookup.set(\"action\" + p.id, actionType);\n        return actionType;\n      });\n    }\n\n    if (result.archetypes) {\n      result.archetypes = _.map(result.archetypes,function(a) {\n        return Discourse.Archetype.create(a);\n      });\n    }\n\n    return result;\n  }\n});\n\n\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

Discourse.StaticPage = Em.Object.extend();

Discourse.StaticPage.reopenClass({
  find: function(path) {
    return new Em.RSVP.Promise(function(resolve) {
      // Models shouldn't really be doing Ajax request, but this is a huge speed boost if we
      // preload content.
      var $preloaded = $("noscript[data-path=\"/" + path + "\"]");
      if ($preloaded.length) {
        var text = $preloaded.text();
        text = text.match(/<!-- preload-content: -->((?:.|[\n\r])*)<!-- :preload-content -->/)[1];
        resolve(Discourse.StaticPage.create({path: path, html: text}));
      } else {
        Discourse.ajax(path + ".html", {dataType: 'html'}).then(function (result) {
          resolve(Discourse.StaticPage.create({path: path, html: result}));
        });
      }
    });
  }
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/static_page.js'] = "Discourse.StaticPage = Em.Object.extend();\n\nDiscourse.StaticPage.reopenClass({\n  find: function(path) {\n    return new Em.RSVP.Promise(function(resolve) {\n      // Models shouldn't really be doing Ajax request, but this is a huge speed boost if we\n      // preload content.\n      var $preloaded = $(\"noscript[data-path=\\\"/\" + path + \"\\\"]\");\n      if ($preloaded.length) {\n        var text = $preloaded.text();\n        text = text.match(/\u003c!-- preload-content: --\u003e((?:.|[\\n\\r])*)\u003c!-- :preload-content --\u003e/)[1];\n        resolve(Discourse.StaticPage.create({path: path, html: text}));\n      } else {\n        Discourse.ajax(path + \".html\", {dataType: 'html'}).then(function (result) {\n          resolve(Discourse.StaticPage.create({path: path, html: result}));\n        });\n      }\n    });\n  }\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A model representing a Topic's details that aren't always present, such as a list of participants.
  When showing topics in lists and such this information should not be required.

  @class TopicDetails
  @extends Discourse.Model
  @namespace Discourse
  @module Discourse
**/

Discourse.TopicDetails = Discourse.Model.extend({
  loaded: false,

  updateFromJson: function(details) {
    if (details.allowed_users) {
      details.allowed_users = details.allowed_users.map(function (u) {
        return Discourse.User.create(u);
      });
    }

    if (details.suggested_topics) {
      details.suggested_topics = details.suggested_topics.map(function (st) {
        return Discourse.Topic.create(st);
      });
    }

    if (details.participants) {
      var topic = this.get('topic');
      details.participants = details.participants.map(function (p) {
        p.topic = topic;
        return Em.Object.create(p);
      });
    }

    this.setProperties(details);
    this.set('loaded', true);
  },

  fewParticipants: function() {
    if (!this.present('participants')) return null;
    return this.get('participants').slice(0, 3);
  }.property('participants'),


  notificationReasonText: function() {
    var level = this.get('notification_level');
    if(typeof level !== 'number'){
      level = 1;
    }

    var localeString = "topic.notifications.reasons." + level;
    if (typeof this.get('notifications_reason_id') === 'number') {
      var tmp = localeString +  "_" + this.get('notifications_reason_id');
      // some sane protection for missing translations of edge cases
      if(I18n.lookup(tmp)){
        localeString = tmp;
      }
    }
    return I18n.t(localeString, { username: Discourse.User.currentProp('username_lower') });
  }.property('notification_level', 'notifications_reason_id'),


  updateNotifications: function(v) {
    this.set('notification_level', v);
    this.set('notifications_reason_id', null);
    return Discourse.ajax("/t/" + (this.get('topic.id')) + "/notifications", {
      type: 'POST',
      data: { notification_level: v }
    });
  },

  removeAllowedUser: function(user) {
    var users = this.get('allowed_users'),
        username = user.get('username');

    Discourse.ajax("/t/" + this.get('topic.id') + "/remove-allowed-user", {
      type: 'PUT',
      data: { username: username }
    }).then(function() {
      users.removeObject(users.findProperty('username', username));
    });
  }
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/topic_details.js'] = "/**\n  A model representing a Topic's details that aren't always present, such as a list of participants.\n  When showing topics in lists and such this information should not be required.\n\n  @class TopicDetails\n  @extends Discourse.Model\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.TopicDetails = Discourse.Model.extend({\n  loaded: false,\n\n  updateFromJson: function(details) {\n    if (details.allowed_users) {\n      details.allowed_users = details.allowed_users.map(function (u) {\n        return Discourse.User.create(u);\n      });\n    }\n\n    if (details.suggested_topics) {\n      details.suggested_topics = details.suggested_topics.map(function (st) {\n        return Discourse.Topic.create(st);\n      });\n    }\n\n    if (details.participants) {\n      var topic = this.get('topic');\n      details.participants = details.participants.map(function (p) {\n        p.topic = topic;\n        return Em.Object.create(p);\n      });\n    }\n\n    this.setProperties(details);\n    this.set('loaded', true);\n  },\n\n  fewParticipants: function() {\n    if (!this.present('participants')) return null;\n    return this.get('participants').slice(0, 3);\n  }.property('participants'),\n\n\n  notificationReasonText: function() {\n    var level = this.get('notification_level');\n    if(typeof level !== 'number'){\n      level = 1;\n    }\n\n    var localeString = \"topic.notifications.reasons.\" + level;\n    if (typeof this.get('notifications_reason_id') === 'number') {\n      var tmp = localeString +  \"_\" + this.get('notifications_reason_id');\n      // some sane protection for missing translations of edge cases\n      if(I18n.lookup(tmp)){\n        localeString = tmp;\n      }\n    }\n    return I18n.t(localeString, { username: Discourse.User.currentProp('username_lower') });\n  }.property('notification_level', 'notifications_reason_id'),\n\n\n  updateNotifications: function(v) {\n    this.set('notification_level', v);\n    this.set('notifications_reason_id', null);\n    return Discourse.ajax(\"/t/\" + (this.get('topic.id')) + \"/notifications\", {\n      type: 'POST',\n      data: { notification_level: v }\n    });\n  },\n\n  removeAllowedUser: function(user) {\n    var users = this.get('allowed_users'),\n        username = user.get('username');\n\n    Discourse.ajax(\"/t/\" + this.get('topic.id') + \"/remove-allowed-user\", {\n      type: 'PUT',\n      data: { username: username }\n    }).then(function() {\n      users.removeObject(users.findProperty('username', username));\n    });\n  }\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A data model representing a list of topics

  @class TopicList
  @extends Discourse.Model
  @namespace Discourse
  @module Discourse
**/


function finderFor(filter, params) {
  return function() {
    var url = Discourse.getURL("/") + filter + ".json";

    if (params) {
      var keys = Object.keys(params),
          encoded = [];

      keys.forEach(function(p) {
        var value = params[p];
        if (typeof value !== 'undefined') {
          encoded.push(p + "=" + value);
        }
      });

      if (encoded.length > 0) {
        url += "?" + encoded.join('&');
      }
    }
    return Discourse.ajax(url);
  };
}

Discourse.TopicList = Discourse.Model.extend({
  forEachNew: function(topics, callback) {
    var topicIds = [];
    _.each(this.get('topics'),function(topic) {
      topicIds[topic.get('id')] = true;
    });

    _.each(topics,function(topic) {
      if(!topicIds[topic.id]) {
        callback(topic);
      }
    });
  },

  refreshSort: function(order, ascending) {
    var self = this,
        params = this.get('params');

    params.order = order;
    params.ascending = ascending;

    this.set('loaded', false);
    var finder = finderFor(this.get('filter'), params);
    finder().then(function (result) {
      var newTopics = Discourse.TopicList.topicsFrom(result),
          topics = self.get('topics');

      topics.clear();
      topics.pushObjects(newTopics);
      self.setProperties({ loaded: true, more_topics_url: result.topic_list.more_topics_url });
    });
  },

  loadMore: function() {
    if (this.get('loadingMore')) { return Ember.RSVP.resolve(); }

    var moreUrl = this.get('more_topics_url');
    if (moreUrl) {

      var self = this;
      this.set('loadingMore', true);

      return Discourse.ajax({url: moreUrl}).then(function (result) {
        var topicsAdded = 0;
        if (result) {
          // the new topics loaded from the server
          var newTopics = Discourse.TopicList.topicsFrom(result),
              topics = self.get("topics");

          self.forEachNew(newTopics, function(t) {
            t.set('highlight', topicsAdded++ === 0);
            topics.pushObject(t);
          });

          self.setProperties({ loadingMore: false, more_topics_url: result.topic_list.more_topics_url });
          Discourse.Session.currentProp('topicList', self);
          return self.get('more_topics_url');
        }
      });
    } else {
      // Return a promise indicating no more results
      return Ember.RSVP.resolve();
    }
  },


  // loads topics with these ids "before" the current topics
  loadBefore: function(topic_ids){
    var topicList = this,
        topics = this.get('topics');

    // refresh dupes
    topics.removeObjects(topics.filter(function(topic){
      return topic_ids.indexOf(topic.get('id')) >= 0;
    }));

    Discourse.TopicList.loadTopics(topic_ids, this.get('filter'))
      .then(function(newTopics){
        var i = 0;
        topicList.forEachNew(newTopics, function(t) {
          // highlight the first of the new topics so we can get a visual feedback
          t.set('highlight', true);
          topics.insertAt(i,t);
          i++;
        });
        Discourse.Session.currentProp('topicList', topicList);
      });
  }
});

Discourse.TopicList.reopenClass({

  loadTopics: function(topic_ids, filter) {
    var defer = new Ember.Deferred(),
        url = Discourse.getURL("/") + filter + "?topic_ids=" + topic_ids.join(",");

    Discourse.ajax({url: url}).then(function (result) {
      if (result) {
        // the new topics loaded from the server
        var newTopics = Discourse.TopicList.topicsFrom(result);
        defer.resolve(newTopics);
      } else {
        defer.reject();
      }
    }).then(null, function(){ defer.reject(); });

    return defer;
  },

  /**
    Stitch together side loaded topic data

    @method topicsFrom
    @param {Object} result JSON object with topic data
    @returns {Array} the list of topics
  **/
  topicsFrom: function(result) {
    // Stitch together our side loaded data
    var categories = Discourse.Category.list(),
        users = this.extractByKey(result.users, Discourse.User);

    return result.topic_list.topics.map(function (t) {
      t.category = categories.findBy('id', t.category_id);
      t.posters.forEach(function(p) {
        p.user = users[p.user_id];
      });
      if (t.participants) {
        t.participants.forEach(function(p) {
          p.user = users[p.user_id];
        });
      }
      return Discourse.Topic.create(t);
    });
  },

  from: function(result, filter, params) {
    var topicList = Discourse.TopicList.create({
      inserted: Em.A(),
      filter: filter,
      params: params || {},
      topics: Discourse.TopicList.topicsFrom(result),
      can_create_topic: result.topic_list.can_create_topic,
      more_topics_url: result.topic_list.more_topics_url,
      draft_key: result.topic_list.draft_key,
      draft_sequence: result.topic_list.draft_sequence,
      draft: result.topic_list.draft,
      for_period: result.topic_list.for_period,
      loaded: true
    });

    if (result.topic_list.filtered_category) {
      topicList.set('category', Discourse.Category.create(result.topic_list.filtered_category));
    }

    return topicList;
  },

  /**
    Lists topics on a given menu item

    @method list
    @param {Object} filter The menu item to filter to
    @param {Object} params Any additional params to pass to TopicList.find()
    @returns {Promise} a promise that resolves to the list of topics
  **/
  list: function(filter, params) {
    var session = Discourse.Session.current(),
        list = session.get('topicList'),
        tracking = Discourse.TopicTrackingState.current();

    return new Ember.RSVP.Promise(function(resolve) {
      // Try to use the cached version
      if (list && (list.get('filter') === filter) &&
               _.isEqual(list.get('listParams'), params)) {
        list.set('loaded', true);

        if (tracking) {
          tracking.updateTopics(list.get('topics'));
        }
        return resolve(list);
      }

      // Perform the search
      session.setProperties({topicList: null, topicListScrollPosition: null});

      // Clean up any string parameters that might slip through
      params = params || {};
      Ember.keys(params).forEach(function(k) {
        var val = params[k];
        if (val === "undefined" || val === "null" || val === 'false') {
          params[k] = undefined;
        }
      });

      var findParams = {};
      Discourse.SiteSettings.top_menu.split('|').forEach(function (i) {
        if (i.indexOf(filter) === 0) {
          var exclude = i.split("-");
          if (exclude && exclude.length === 2) {
            findParams.exclude_category = exclude[1];
          }
        }
      });
      return resolve(Discourse.TopicList.find(filter, _.extend(findParams, params || {})));

    }).then(function(list) {
      list.set('listParams', params);
      if (tracking) {
        tracking.sync(list, list.filter);
        tracking.trackIncoming(list.filter);
      }
      Discourse.Session.currentProp('topicList', list);
      return list;
    });
  },

  find: function(filter, params) {
    return PreloadStore.getAndRemove("topic_list_" + filter, finderFor(filter, params)).then(function(result) {
      return Discourse.TopicList.from(result, filter, params);
    });
  }

});



// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/topic_list.js'] = "/**\n  A data model representing a list of topics\n\n  @class TopicList\n  @extends Discourse.Model\n  @namespace Discourse\n  @module Discourse\n**/\n\n\nfunction finderFor(filter, params) {\n  return function() {\n    var url = Discourse.getURL(\"/\") + filter + \".json\";\n\n    if (params) {\n      var keys = Object.keys(params),\n          encoded = [];\n\n      keys.forEach(function(p) {\n        var value = params[p];\n        if (typeof value !== 'undefined') {\n          encoded.push(p + \"=\" + value);\n        }\n      });\n\n      if (encoded.length \u003e 0) {\n        url += \"?\" + encoded.join('\u0026');\n      }\n    }\n    return Discourse.ajax(url);\n  };\n}\n\nDiscourse.TopicList = Discourse.Model.extend({\n  forEachNew: function(topics, callback) {\n    var topicIds = [];\n    _.each(this.get('topics'),function(topic) {\n      topicIds[topic.get('id')] = true;\n    });\n\n    _.each(topics,function(topic) {\n      if(!topicIds[topic.id]) {\n        callback(topic);\n      }\n    });\n  },\n\n  refreshSort: function(order, ascending) {\n    var self = this,\n        params = this.get('params');\n\n    params.order = order;\n    params.ascending = ascending;\n\n    this.set('loaded', false);\n    var finder = finderFor(this.get('filter'), params);\n    finder().then(function (result) {\n      var newTopics = Discourse.TopicList.topicsFrom(result),\n          topics = self.get('topics');\n\n      topics.clear();\n      topics.pushObjects(newTopics);\n      self.setProperties({ loaded: true, more_topics_url: result.topic_list.more_topics_url });\n    });\n  },\n\n  loadMore: function() {\n    if (this.get('loadingMore')) { return Ember.RSVP.resolve(); }\n\n    var moreUrl = this.get('more_topics_url');\n    if (moreUrl) {\n\n      var self = this;\n      this.set('loadingMore', true);\n\n      return Discourse.ajax({url: moreUrl}).then(function (result) {\n        var topicsAdded = 0;\n        if (result) {\n          // the new topics loaded from the server\n          var newTopics = Discourse.TopicList.topicsFrom(result),\n              topics = self.get(\"topics\");\n\n          self.forEachNew(newTopics, function(t) {\n            t.set('highlight', topicsAdded++ === 0);\n            topics.pushObject(t);\n          });\n\n          self.setProperties({ loadingMore: false, more_topics_url: result.topic_list.more_topics_url });\n          Discourse.Session.currentProp('topicList', self);\n          return self.get('more_topics_url');\n        }\n      });\n    } else {\n      // Return a promise indicating no more results\n      return Ember.RSVP.resolve();\n    }\n  },\n\n\n  // loads topics with these ids \"before\" the current topics\n  loadBefore: function(topic_ids){\n    var topicList = this,\n        topics = this.get('topics');\n\n    // refresh dupes\n    topics.removeObjects(topics.filter(function(topic){\n      return topic_ids.indexOf(topic.get('id')) \u003e= 0;\n    }));\n\n    Discourse.TopicList.loadTopics(topic_ids, this.get('filter'))\n      .then(function(newTopics){\n        var i = 0;\n        topicList.forEachNew(newTopics, function(t) {\n          // highlight the first of the new topics so we can get a visual feedback\n          t.set('highlight', true);\n          topics.insertAt(i,t);\n          i++;\n        });\n        Discourse.Session.currentProp('topicList', topicList);\n      });\n  }\n});\n\nDiscourse.TopicList.reopenClass({\n\n  loadTopics: function(topic_ids, filter) {\n    var defer = new Ember.Deferred(),\n        url = Discourse.getURL(\"/\") + filter + \"?topic_ids=\" + topic_ids.join(\",\");\n\n    Discourse.ajax({url: url}).then(function (result) {\n      if (result) {\n        // the new topics loaded from the server\n        var newTopics = Discourse.TopicList.topicsFrom(result);\n        defer.resolve(newTopics);\n      } else {\n        defer.reject();\n      }\n    }).then(null, function(){ defer.reject(); });\n\n    return defer;\n  },\n\n  /**\n    Stitch together side loaded topic data\n\n    @method topicsFrom\n    @param {Object} result JSON object with topic data\n    @returns {Array} the list of topics\n  **/\n  topicsFrom: function(result) {\n    // Stitch together our side loaded data\n    var categories = Discourse.Category.list(),\n        users = this.extractByKey(result.users, Discourse.User);\n\n    return result.topic_list.topics.map(function (t) {\n      t.category = categories.findBy('id', t.category_id);\n      t.posters.forEach(function(p) {\n        p.user = users[p.user_id];\n      });\n      if (t.participants) {\n        t.participants.forEach(function(p) {\n          p.user = users[p.user_id];\n        });\n      }\n      return Discourse.Topic.create(t);\n    });\n  },\n\n  from: function(result, filter, params) {\n    var topicList = Discourse.TopicList.create({\n      inserted: Em.A(),\n      filter: filter,\n      params: params || {},\n      topics: Discourse.TopicList.topicsFrom(result),\n      can_create_topic: result.topic_list.can_create_topic,\n      more_topics_url: result.topic_list.more_topics_url,\n      draft_key: result.topic_list.draft_key,\n      draft_sequence: result.topic_list.draft_sequence,\n      draft: result.topic_list.draft,\n      for_period: result.topic_list.for_period,\n      loaded: true\n    });\n\n    if (result.topic_list.filtered_category) {\n      topicList.set('category', Discourse.Category.create(result.topic_list.filtered_category));\n    }\n\n    return topicList;\n  },\n\n  /**\n    Lists topics on a given menu item\n\n    @method list\n    @param {Object} filter The menu item to filter to\n    @param {Object} params Any additional params to pass to TopicList.find()\n    @returns {Promise} a promise that resolves to the list of topics\n  **/\n  list: function(filter, params) {\n    var session = Discourse.Session.current(),\n        list = session.get('topicList'),\n        tracking = Discourse.TopicTrackingState.current();\n\n    return new Ember.RSVP.Promise(function(resolve) {\n      // Try to use the cached version\n      if (list \u0026\u0026 (list.get('filter') === filter) \u0026\u0026\n               _.isEqual(list.get('listParams'), params)) {\n        list.set('loaded', true);\n\n        if (tracking) {\n          tracking.updateTopics(list.get('topics'));\n        }\n        return resolve(list);\n      }\n\n      // Perform the search\n      session.setProperties({topicList: null, topicListScrollPosition: null});\n\n      // Clean up any string parameters that might slip through\n      params = params || {};\n      Ember.keys(params).forEach(function(k) {\n        var val = params[k];\n        if (val === \"undefined\" || val === \"null\" || val === 'false') {\n          params[k] = undefined;\n        }\n      });\n\n      var findParams = {};\n      Discourse.SiteSettings.top_menu.split('|').forEach(function (i) {\n        if (i.indexOf(filter) === 0) {\n          var exclude = i.split(\"-\");\n          if (exclude \u0026\u0026 exclude.length === 2) {\n            findParams.exclude_category = exclude[1];\n          }\n        }\n      });\n      return resolve(Discourse.TopicList.find(filter, _.extend(findParams, params || {})));\n\n    }).then(function(list) {\n      list.set('listParams', params);\n      if (tracking) {\n        tracking.sync(list, list.filter);\n        tracking.trackIncoming(list.filter);\n      }\n      Discourse.Session.currentProp('topicList', list);\n      return list;\n    });\n  },\n\n  find: function(filter, params) {\n    return PreloadStore.getAndRemove(\"topic_list_\" + filter, finderFor(filter, params)).then(function(result) {\n      return Discourse.TopicList.from(result, filter, params);\n    });\n  }\n\n});\n\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

Discourse.TopicTrackingState = Discourse.Model.extend({
  messageCount: 0,

  _setup: function() {
    this.unreadSequence = [];
    this.newSequence = [];
    this.states = {};
  }.on('init'),

  establishChannels: function() {
    var tracker = this;

    var process = function(data){
      if (data.message_type === "delete") {
        tracker.removeTopic(data.topic_id);
        tracker.incrementMessageCount();
      }

      if (data.message_type === "new_topic" || data.message_type === "latest") {
        var ignored_categories = Discourse.User.currentProp("muted_category_ids");
        if(_.include(ignored_categories, data.payload.category_id)){
          return;
        }
      }

      if (data.message_type === "latest"){
        tracker.notify(data);
      }

      if (data.message_type === "new_topic" || data.message_type === "unread" || data.message_type === "read") {
        tracker.notify(data);
        var old = tracker.states["t" + data.topic_id];

        if(!_.isEqual(old, data.payload)){
          tracker.states["t" + data.topic_id] = data.payload;
          tracker.incrementMessageCount();
        }
      }
    };

    Discourse.MessageBus.subscribe("/new", process);
    Discourse.MessageBus.subscribe("/latest", process);
    var currentUser = Discourse.User.current();
    if(currentUser) {
      Discourse.MessageBus.subscribe("/unread/" + currentUser.id, process);
    }
  },

  updateSeen: function(topicId, highestSeen) {
    if(!topicId || !highestSeen) { return; }
    var state = this.states["t" + topicId];
    if(state && (!state.last_read_post_number || state.last_read_post_number < highestSeen)) {
      state.last_read_post_number = highestSeen;
      this.incrementMessageCount();
    }
  },

  notify: function(data){
    if (!this.newIncoming) { return; }

    var filter = this.get("filter");

    if ((filter === "all" || filter === "latest" || filter === "new") && data.message_type === "new_topic" ) {
      this.addIncoming(data.topic_id);
    }

    if ((filter === "all" || filter === "unread") && data.message_type === "unread") {
      var old = this.states["t" + data.topic_id];
      if(!old || old.highest_post_number === old.last_read_post_number) {
        this.addIncoming(data.topic_id);
      }
    }

    if(filter === "latest" && data.message_type === "latest") {
      this.addIncoming(data.topic_id);
    }

    this.set("incomingCount", this.newIncoming.length);
  },

  addIncoming: function(topicId) {
    if(this.newIncoming.indexOf(topicId) === -1){
      this.newIncoming.push(topicId);
    }
  },

  resetTracking: function(){
    this.newIncoming = [];
    this.set("incomingCount", 0);
  },

  // track how many new topics came for this filter
  trackIncoming: function(filter) {
    this.newIncoming = [];
    this.set("filter", filter);
    this.set("incomingCount", 0);
  },

  hasIncoming: function(){
    var count = this.get('incomingCount');
    return count && count > 0;
  }.property('incomingCount'),

  removeTopic: function(topic_id) {
    delete this.states["t" + topic_id];
  },

  // If we have a cached topic list, we can update it from our tracking
  // information.
  updateTopics: function(topics) {
    if (Em.isEmpty(topics)) { return; }

    var states = this.states;
    topics.forEach(function(t) {
      var state = states['t' + t.get('id')];

      if (state) {
        var lastRead = t.get('last_read_post_number');
        if (lastRead !== state.last_read_post_number) {
          var postsCount = t.get('posts_count'),
              newPosts = postsCount - state.highest_post_number,
              unread = postsCount - state.last_read_post_number;

          if (newPosts < 0) { newPosts = 0; }
          if (!state.last_read_post_number) {
            unread = 0;
          }
          if (unread < 0) { unread = 0; }

          t.setProperties({
            highest_post_number: state.highest_post_number,
            last_read_post_number: state.last_read_post_number,
            new_posts: newPosts,
            unread: unread,
            unseen: !state.last_read_post_number
          });
        }
      }
    });
  },

  sync: function(list, filter) {
    var tracker = this,
        states = tracker.states;

    if (!list || !list.topics) { return; }

    // compensate for delayed "new" topics
    // client side we know they are not new, server side we think they are
    for (var i=list.topics.length-1; i>=0; i--) {
      var state = states["t"+ list.topics[i].id];
      if (state && state.last_read_post_number > 0) {
        if (filter === "new") {
          list.topics.splice(i, 1);
        } else {
          list.topics[i].unseen = false;
          list.topics[i].dont_sync = true;
        }
      }
    }

    list.topics.forEach(function(topic){
      var row = tracker.states["t" + topic.id] || {};
      row.topic_id = topic.id;
      row.notification_level = topic.notification_level;


      if (topic.unseen) {
        row.last_read_post_number = null;
      } else if (topic.unread || topic.new_posts) {
        row.last_read_post_number = topic.highest_post_number - ((topic.unread||0) + (topic.new_posts||0));
      } else {
        if (!topic.dont_sync) {
          delete tracker.states["t" + topic.id];
        }
        return;
      }

      row.highest_post_number = topic.highest_post_number;
      if (topic.category) {
        row.category_id = topic.category.id;
      }

      tracker.states["t" + topic.id] = row;
    });

    this.incrementMessageCount();
  },

  incrementMessageCount: function() {
    this.set("messageCount", this.get("messageCount") + 1);
  },

  countNew: function(category_id){
    return _.chain(this.states)
      .where({last_read_post_number: null})
      .where(function(topic) {
        // !0 is true
        return (topic.notification_level !== 0 && !topic.notification_level) ||
               topic.notification_level >= Discourse.Topic.NotificationLevel.TRACKING;
      })
      .where(function(topic){ return topic.category_id === category_id || !category_id;})
      .value()
      .length;
  },

  resetNew: function() {
    var self = this;
    Object.keys(this.states).forEach(function (id) {
      if (self.states[id].last_read_post_number === null) {
        delete self.states[id];
      }
    });
  },

  countUnread: function(category_id){
    return _.chain(this.states)
      .where(function(topic){
        return topic.last_read_post_number !== null &&
               topic.last_read_post_number < topic.highest_post_number;
      })
      .where(function(topic) { return topic.notification_level >= Discourse.Topic.NotificationLevel.TRACKING})
      .where(function(topic){ return topic.category_id === category_id || !category_id;})
      .value()
      .length;
  },

  countCategory: function(category_id) {
    var count = 0;
    _.each(this.states, function(topic){
      if (topic.category_id === category_id) {
        count += (topic.last_read_post_number === null ||
                  topic.last_read_post_number < topic.highest_post_number) ? 1 : 0;
      }
    });
    return count;
  },

  lookupCount: function(name, category){
    var categoryName = category ? Em.get(category, "name") : null;
    if(name === "new") {
      return this.countNew(categoryName);
    } else if(name === "unread") {
      return this.countUnread(categoryName);
    } else {
      categoryName = name.split("/")[1];
      if(categoryName) {
        return this.countCategory(categoryName);
      }
    }
  },
  loadStates: function (data) {
    // not exposed
    var states = this.states;

    if(data) {
      _.each(data,function(topic){
        states["t" + topic.topic_id] = topic;
      });
    }
  }
});


Discourse.TopicTrackingState.reopenClass({
  createFromStates: function(data){
    var instance = Discourse.TopicTrackingState.create();
    instance.loadStates(data);
    instance.establishChannels();
    return instance;
  },
  current: function(){
    if (!this.tracker) {
      var data = PreloadStore.get('topicTrackingStates');
      this.tracker = this.createFromStates(data);
      PreloadStore.remove('topicTrackingStates');
    }
    return this.tracker;
  }
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/topic_tracking_state.js'] = "Discourse.TopicTrackingState = Discourse.Model.extend({\n  messageCount: 0,\n\n  _setup: function() {\n    this.unreadSequence = [];\n    this.newSequence = [];\n    this.states = {};\n  }.on('init'),\n\n  establishChannels: function() {\n    var tracker = this;\n\n    var process = function(data){\n      if (data.message_type === \"delete\") {\n        tracker.removeTopic(data.topic_id);\n        tracker.incrementMessageCount();\n      }\n\n      if (data.message_type === \"new_topic\" || data.message_type === \"latest\") {\n        var ignored_categories = Discourse.User.currentProp(\"muted_category_ids\");\n        if(_.include(ignored_categories, data.payload.category_id)){\n          return;\n        }\n      }\n\n      if (data.message_type === \"latest\"){\n        tracker.notify(data);\n      }\n\n      if (data.message_type === \"new_topic\" || data.message_type === \"unread\" || data.message_type === \"read\") {\n        tracker.notify(data);\n        var old = tracker.states[\"t\" + data.topic_id];\n\n        if(!_.isEqual(old, data.payload)){\n          tracker.states[\"t\" + data.topic_id] = data.payload;\n          tracker.incrementMessageCount();\n        }\n      }\n    };\n\n    Discourse.MessageBus.subscribe(\"/new\", process);\n    Discourse.MessageBus.subscribe(\"/latest\", process);\n    var currentUser = Discourse.User.current();\n    if(currentUser) {\n      Discourse.MessageBus.subscribe(\"/unread/\" + currentUser.id, process);\n    }\n  },\n\n  updateSeen: function(topicId, highestSeen) {\n    if(!topicId || !highestSeen) { return; }\n    var state = this.states[\"t\" + topicId];\n    if(state \u0026\u0026 (!state.last_read_post_number || state.last_read_post_number \u003c highestSeen)) {\n      state.last_read_post_number = highestSeen;\n      this.incrementMessageCount();\n    }\n  },\n\n  notify: function(data){\n    if (!this.newIncoming) { return; }\n\n    var filter = this.get(\"filter\");\n\n    if ((filter === \"all\" || filter === \"latest\" || filter === \"new\") \u0026\u0026 data.message_type === \"new_topic\" ) {\n      this.addIncoming(data.topic_id);\n    }\n\n    if ((filter === \"all\" || filter === \"unread\") \u0026\u0026 data.message_type === \"unread\") {\n      var old = this.states[\"t\" + data.topic_id];\n      if(!old || old.highest_post_number === old.last_read_post_number) {\n        this.addIncoming(data.topic_id);\n      }\n    }\n\n    if(filter === \"latest\" \u0026\u0026 data.message_type === \"latest\") {\n      this.addIncoming(data.topic_id);\n    }\n\n    this.set(\"incomingCount\", this.newIncoming.length);\n  },\n\n  addIncoming: function(topicId) {\n    if(this.newIncoming.indexOf(topicId) === -1){\n      this.newIncoming.push(topicId);\n    }\n  },\n\n  resetTracking: function(){\n    this.newIncoming = [];\n    this.set(\"incomingCount\", 0);\n  },\n\n  // track how many new topics came for this filter\n  trackIncoming: function(filter) {\n    this.newIncoming = [];\n    this.set(\"filter\", filter);\n    this.set(\"incomingCount\", 0);\n  },\n\n  hasIncoming: function(){\n    var count = this.get('incomingCount');\n    return count \u0026\u0026 count \u003e 0;\n  }.property('incomingCount'),\n\n  removeTopic: function(topic_id) {\n    delete this.states[\"t\" + topic_id];\n  },\n\n  // If we have a cached topic list, we can update it from our tracking\n  // information.\n  updateTopics: function(topics) {\n    if (Em.isEmpty(topics)) { return; }\n\n    var states = this.states;\n    topics.forEach(function(t) {\n      var state = states['t' + t.get('id')];\n\n      if (state) {\n        var lastRead = t.get('last_read_post_number');\n        if (lastRead !== state.last_read_post_number) {\n          var postsCount = t.get('posts_count'),\n              newPosts = postsCount - state.highest_post_number,\n              unread = postsCount - state.last_read_post_number;\n\n          if (newPosts \u003c 0) { newPosts = 0; }\n          if (!state.last_read_post_number) {\n            unread = 0;\n          }\n          if (unread \u003c 0) { unread = 0; }\n\n          t.setProperties({\n            highest_post_number: state.highest_post_number,\n            last_read_post_number: state.last_read_post_number,\n            new_posts: newPosts,\n            unread: unread,\n            unseen: !state.last_read_post_number\n          });\n        }\n      }\n    });\n  },\n\n  sync: function(list, filter) {\n    var tracker = this,\n        states = tracker.states;\n\n    if (!list || !list.topics) { return; }\n\n    // compensate for delayed \"new\" topics\n    // client side we know they are not new, server side we think they are\n    for (var i=list.topics.length-1; i\u003e=0; i--) {\n      var state = states[\"t\"+ list.topics[i].id];\n      if (state \u0026\u0026 state.last_read_post_number \u003e 0) {\n        if (filter === \"new\") {\n          list.topics.splice(i, 1);\n        } else {\n          list.topics[i].unseen = false;\n          list.topics[i].dont_sync = true;\n        }\n      }\n    }\n\n    list.topics.forEach(function(topic){\n      var row = tracker.states[\"t\" + topic.id] || {};\n      row.topic_id = topic.id;\n      row.notification_level = topic.notification_level;\n\n\n      if (topic.unseen) {\n        row.last_read_post_number = null;\n      } else if (topic.unread || topic.new_posts) {\n        row.last_read_post_number = topic.highest_post_number - ((topic.unread||0) + (topic.new_posts||0));\n      } else {\n        if (!topic.dont_sync) {\n          delete tracker.states[\"t\" + topic.id];\n        }\n        return;\n      }\n\n      row.highest_post_number = topic.highest_post_number;\n      if (topic.category) {\n        row.category_id = topic.category.id;\n      }\n\n      tracker.states[\"t\" + topic.id] = row;\n    });\n\n    this.incrementMessageCount();\n  },\n\n  incrementMessageCount: function() {\n    this.set(\"messageCount\", this.get(\"messageCount\") + 1);\n  },\n\n  countNew: function(category_id){\n    return _.chain(this.states)\n      .where({last_read_post_number: null})\n      .where(function(topic) {\n        // !0 is true\n        return (topic.notification_level !== 0 \u0026\u0026 !topic.notification_level) ||\n               topic.notification_level \u003e= Discourse.Topic.NotificationLevel.TRACKING;\n      })\n      .where(function(topic){ return topic.category_id === category_id || !category_id;})\n      .value()\n      .length;\n  },\n\n  resetNew: function() {\n    var self = this;\n    Object.keys(this.states).forEach(function (id) {\n      if (self.states[id].last_read_post_number === null) {\n        delete self.states[id];\n      }\n    });\n  },\n\n  countUnread: function(category_id){\n    return _.chain(this.states)\n      .where(function(topic){\n        return topic.last_read_post_number !== null \u0026\u0026\n               topic.last_read_post_number \u003c topic.highest_post_number;\n      })\n      .where(function(topic) { return topic.notification_level \u003e= Discourse.Topic.NotificationLevel.TRACKING})\n      .where(function(topic){ return topic.category_id === category_id || !category_id;})\n      .value()\n      .length;\n  },\n\n  countCategory: function(category_id) {\n    var count = 0;\n    _.each(this.states, function(topic){\n      if (topic.category_id === category_id) {\n        count += (topic.last_read_post_number === null ||\n                  topic.last_read_post_number \u003c topic.highest_post_number) ? 1 : 0;\n      }\n    });\n    return count;\n  },\n\n  lookupCount: function(name, category){\n    var categoryName = category ? Em.get(category, \"name\") : null;\n    if(name === \"new\") {\n      return this.countNew(categoryName);\n    } else if(name === \"unread\") {\n      return this.countUnread(categoryName);\n    } else {\n      categoryName = name.split(\"/\")[1];\n      if(categoryName) {\n        return this.countCategory(categoryName);\n      }\n    }\n  },\n  loadStates: function (data) {\n    // not exposed\n    var states = this.states;\n\n    if(data) {\n      _.each(data,function(topic){\n        states[\"t\" + topic.topic_id] = topic;\n      });\n    }\n  }\n});\n\n\nDiscourse.TopicTrackingState.reopenClass({\n  createFromStates: function(data){\n    var instance = Discourse.TopicTrackingState.create();\n    instance.loadStates(data);\n    instance.establishChannels();\n    return instance;\n  },\n  current: function(){\n    if (!this.tracker) {\n      var data = PreloadStore.get('topicTrackingStates');\n      this.tracker = this.createFromStates(data);\n      PreloadStore.remove('topicTrackingStates');\n    }\n    return this.tracker;\n  }\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  Represents a user's trust level in the system

  @class TrustLevel
  @extends Discourse.Model
  @namespace Discourse
  @module Discourse
**/

Discourse.TrustLevel = Discourse.Model.extend({
  detailedName: Discourse.computed.fmt('id', 'name', '%@ - %@')
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/trust_level.js'] = "/**\n  Represents a user's trust level in the system\n\n  @class TrustLevel\n  @extends Discourse.Model\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.TrustLevel = Discourse.Model.extend({\n  detailedName: Discourse.computed.fmt('id', 'name', '%@ - %@')\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A data model representing a user on Discourse

  @class User
  @extends Discourse.Model
  @namespace Discourse
  @module Discourse
**/

Discourse.User = Discourse.Model.extend({

  hasPMs: Em.computed.gt("private_messages_stats.all", 0),
  hasStartedPMs: Em.computed.gt("private_messages_stats.mine", 0),
  hasUnreadPMs: Em.computed.gt("private_messages_stats.unread", 0),

  /**
    The user's stream

    @property stream
    @type {Discourse.UserStream}
  **/
  stream: function() {
    return Discourse.UserStream.create({ user: this });
  }.property(),

  /**
    The user's posts stream

    @property postsStream
    @type {Discourse.UserPostsStream}
  **/
  postsStream: function() {
    return Discourse.UserPostsStream.create({ user: this });
  }.property(),

  /**
    Is this user a member of staff?

    @property staff
    @type {Boolean}
  **/
  staff: Em.computed.or('admin', 'moderator'),

  searchContext: function() {
    return {
      type: 'user',
      id: this.get('username_lower'),
      user: this
    };
  }.property('username_lower'),

  /**
    This user's display name. Returns the name if possible, otherwise returns the
    username.

    @property displayName
    @type {String}
  **/
  displayName: function() {
    if (Discourse.SiteSettings.enable_names && !this.blank('name')) {
      return this.get('name');
    }
    return this.get('username');
  }.property('username', 'name'),

  /**
    This user's profile background(in CSS).

    @property websiteName
    @type {String}
  **/
  profileBackground: function() {
    var background = this.get('profile_background');
    if(Em.isEmpty(background) || !Discourse.SiteSettings.allow_profile_backgrounds) { return; }

    return 'background-image: url(' + background + ')';
  }.property('profile_background'),

  statusIcon: function() {
    var name = Handlebars.Utils.escapeExpression(this.get('name')),
        desc;

    if(this.get('admin')) {
      desc = I18n.t('user.admin', {user: name});
      return '<i class="fa fa-shield" title="' + desc +  '" alt="' + desc + '"></i>';
    }
    if(this.get('moderator')){
      desc = I18n.t('user.moderator', {user: name});
      return '<i class="fa fa-shield" title="' + desc +  '" alt="' + desc + '"></i>';
    }
    return null;
  }.property('admin','moderator'),

  /**
    Path to this user.

    @property path
    @type {String}
  **/
  path: Discourse.computed.url('username_lower', "/users/%@"),

  /**
    Path to this user's administration

    @property adminPath
    @type {String}
  **/
  adminPath: Discourse.computed.url('username_lower', "/admin/users/%@"),

  /**
    This user's username in lowercase.

    @property username_lower
    @type {String}
  **/
  username_lower: function() {
    return this.get('username').toLowerCase();
  }.property('username'),

  /**
    This user's trust level.

    @property trustLevel
    @type {Integer}
  **/
  trustLevel: function() {
    return Discourse.Site.currentProp('trustLevels').findProperty('id', parseInt(this.get('trust_level'), 10));
  }.property('trust_level'),

  isBasic: Em.computed.equal('trust_level', 0),
  isLeader: Em.computed.equal('trust_level', 3),
  isElder: Em.computed.equal('trust_level', 4),
  canManageTopic: Em.computed.or('staff', 'isElder'),

  isSuspended: Em.computed.equal('suspended', true),

  suspended: function() {
    return this.get('suspended_till') && moment(this.get('suspended_till')).isAfter();
  }.property('suspended_till'),

  suspendedTillDate: function() {
    return Discourse.Formatter.longDate(this.get('suspended_till'));
  }.property('suspended_till'),

  /**
    Changes this user's username.

    @method changeUsername
    @param {String} newUsername The user's new username
    @returns Result of ajax call
  **/
  changeUsername: function(newUsername) {
    return Discourse.ajax("/users/" + this.get('username_lower') + "/preferences/username", {
      type: 'PUT',
      data: { new_username: newUsername }
    });
  },

  /**
    Changes this user's email address.

    @method changeEmail
    @param {String} email The user's new email address\
    @returns Result of ajax call
  **/
  changeEmail: function(email) {
    return Discourse.ajax("/users/" + this.get('username_lower') + "/preferences/email", {
      type: 'PUT',
      data: { email: email }
    });
  },

  /**
    Returns a copy of this user.

    @method copy
    @returns {User}
  **/
  copy: function() {
    return Discourse.User.create(this.getProperties(Ember.keys(this)));
  },

  /**
    Save's this user's properties over AJAX via a PUT request.

    @method save
    @returns {Promise} the result of the operation
  **/
  save: function() {
    var user = this;
    var data = this.getProperties('auto_track_topics_after_msecs',
                               'bio_raw',
                               'website',
                               'location',
                               'name',
                               'locale',
                               'email_digests',
                               'email_direct',
                               'email_always',
                               'email_private_messages',
                               'dynamic_favicon',
                               'digest_after_days',
                               'new_topic_duration_minutes',
                               'external_links_in_new_tab',
                               'mailing_list_mode',
                               'enable_quoting',
                               'disable_jump_reply',
                               'custom_fields');

    _.each(['muted','watched','tracked'], function(s){
      var cats = user.get(s + 'Categories').map(function(c){ return c.get('id')});
      // HACK: denote lack of categories
      if(cats.length === 0) { cats = [-1]; }
      data[s + '_category_ids'] = cats;
    });

    if (!Discourse.SiteSettings.edit_history_visible_to_public) {
      data['edit_history_public'] = this.get('edit_history_public');
    }

    return Discourse.ajax("/users/" + this.get('username_lower'), {
      data: data,
      type: 'PUT'
    }).then(function(data) {
      user.set('bio_excerpt',data.user.bio_excerpt);

      _.each([
        'enable_quoting', 'external_links_in_new_tab', 'dynamic_favicon'
      ], function(preference) {
        Discourse.User.current().set(preference, user.get(preference));
      });
    });
  },

  /**
    Changes the password and calls the callback function on AJAX.complete.

    @method changePassword
    @returns {Promise} the result of the change password operation
  **/
  changePassword: function() {
    return Discourse.ajax("/session/forgot_password", {
      dataType: 'json',
      data: { login: this.get('username') },
      type: 'POST'
    });
  },

  /**
    Loads a single user action by id.

    @method loadUserAction
    @param {Integer} id The id of the user action being loaded
    @returns A stream of the user's actions containing the action of id
  **/
  loadUserAction: function(id) {
    var self = this,
        stream = this.get('stream');
    return Discourse.ajax("/user_actions/" + id + ".json", { cache: 'false' }).then(function(result) {
      if (result && result.user_action) {
        var ua = result.user_action;
        if ((self.get('stream.filter') || ua.action_type) !== ua.action_type) return;
        var action = Discourse.UserAction.collapseStream([Discourse.UserAction.create(ua)]);
        stream.set('itemsLoaded', stream.get('itemsLoaded') + 1);
        stream.get('content').insertAt(0, action[0]);
      }
    });
  },

  /**
  The user's stat count, excluding PMs.

    @property statsCountNonPM
    @type {Integer}
  **/
  statsCountNonPM: function() {
    if (this.blank('statsExcludingPms')) return 0;
    var count = 0;
    _.each(this.get('statsExcludingPms'), function(val) {
      count += val.count;
    });
    return count;
  }.property('statsExcludingPms.@each.count'),

  /**
  The user's stats, excluding PMs.

    @property statsExcludingPms
    @type {Array}
  **/
  statsExcludingPms: function() {
    if (this.blank('stats')) return [];
    return this.get('stats').rejectProperty('isPM');
  }.property('stats.@each.isPM'),

  findDetails: function() {
    var user = this;

    return PreloadStore.getAndRemove("user_" + user.get('username'), function() {
      return Discourse.ajax("/users/" + user.get('username') + '.json');
    }).then(function (json) {

      if (!Em.isEmpty(json.user.stats)) {
        json.user.stats = Discourse.User.groupStats(_.map(json.user.stats,function(s) {
          if (s.count) s.count = parseInt(s.count, 10);
          return Discourse.UserActionStat.create(s);
        }));
      }

      if (!Em.isEmpty(json.user.custom_groups)) {
        json.user.custom_groups = json.user.custom_groups.map(function (g) {
          return Discourse.Group.create(g);
        });
      }

      if (json.user.invited_by) {
        json.user.invited_by = Discourse.User.create(json.user.invited_by);
      }

      if (!Em.isEmpty(json.user.featured_user_badge_ids)) {
        var userBadgesMap = {};
        Discourse.UserBadge.createFromJson(json).forEach(function(userBadge) {
          userBadgesMap[ userBadge.get('id') ] = userBadge;
        });
        json.user.featured_user_badges = json.user.featured_user_badge_ids.map(function(id) {
          return userBadgesMap[id];
        });
      }

      user.setProperties(json.user);
      return user;
    });
  },

  avatarTemplate: function() {
    return Discourse.User.avatarTemplate(this.get('username'), this.get('uploaded_avatar_id'));
  }.property('uploaded_avatar_id', 'username'),

  /*
    Change avatar selection
  */
  pickAvatar: function(uploadId) {
    this.set("uploaded_avatar_id", uploadId);
    return Discourse.ajax("/users/" + this.get("username_lower") + "/preferences/avatar/pick", {
      type: 'PUT',
      data: { upload_id: uploadId }
    });
  },

  /**
    Determines whether the current user is allowed to upload a file.

    @method isAllowedToUploadAFile
    @param {String} type The type of the upload (image, attachment)
    @returns true if the current user is allowed to upload a file
  **/
  isAllowedToUploadAFile: function(type) {
    return this.get('staff') ||
           this.get('trust_level') > 0 ||
           Discourse.SiteSettings['newuser_max_' + type + 's'] > 0;
  },

  /**
    Invite a user to the site

    @method createInvite
    @param {String} email The email address of the user to invite to the site
    @returns {Promise} the result of the server call
  **/
  createInvite: function(email, groupNames) {
    return Discourse.ajax('/invites', {
      type: 'POST',
      data: {email: email, group_names: groupNames}
    });
  },

  updateMutedCategories: function() {
    this.set("mutedCategories", Discourse.Category.findByIds(this.muted_category_ids));
  }.observes("muted_category_ids"),

  updateTrackedCategories: function() {
    this.set("trackedCategories", Discourse.Category.findByIds(this.tracked_category_ids));
  }.observes("tracked_category_ids"),

  updateWatchedCategories: function() {
    this.set("watchedCategories", Discourse.Category.findByIds(this.watched_category_ids));
  }.observes("watched_category_ids"),

  canDeleteAccount: function() {
    return this.get('can_delete_account') && ((this.get('reply_count')||0) + (this.get('topic_count')||0)) <= 1;
  }.property('can_delete_account', 'reply_count', 'topic_count'),

  "delete": function() {
    if (this.get('can_delete_account')) {
      return Discourse.ajax("/users/" + this.get('username'), {
        type: 'DELETE',
        data: {context: window.location.pathname}
      });
    } else {
      return Ember.RSVP.reject(I18n.t('user.delete_yourself_not_allowed'));
    }
  },

  dismissBanner: function (bannerKey) {
    this.set("dismissed_banner_key", bannerKey);
    Discourse.ajax("/users/" + this.get('username'), {
      type: 'PUT',
      data: { dismissed_banner_key: bannerKey }
    });
  }

});

Discourse.User.reopenClass(Discourse.Singleton, {

  avatarTemplate: function(username, uploadedAvatarId) {
    var url;
    if (uploadedAvatarId) {
      url = "/user_avatar/" +
            Discourse.BaseUrl +
            "/" +
            username.toLowerCase() +
            "/{size}/" +
            uploadedAvatarId + ".png";
    } else {
      url = "/letter_avatar/" +
            username.toLowerCase() +
            "/{size}/" +
            Discourse.LetterAvatarVersion + ".png";
    }

    url = Discourse.getURL(url);
    if (Discourse.CDN) {
      url = Discourse.CDN + url;
    }
    return url;
  },

  /**
    Find a `Discourse.User` for a given username.

    @method findByUsername
    @returns {Promise} a promise that resolves to a `Discourse.User`
  **/
  findByUsername: function(username) {
    var user = Discourse.User.create({username: username});
    return user.findDetails();
  },

  /**
    The current singleton will retrieve its attributes from the `PreloadStore`
    if it exists. Otherwise, no instance is created.

    @method createCurrent
    @returns {Discourse.User} the user, if logged in.
  **/
  createCurrent: function() {
    var userJson = PreloadStore.get('currentUser');
    if (userJson) { return Discourse.User.create(userJson); }
    return null;
  },

  /**
    Logs out the currently logged in user

    @method logout
    @returns {Promise} resolved when the logout finishes
  **/
  logout: function() {
    var discourseUserClass = this;
    return Discourse.ajax("/session/" + Discourse.User.currentProp('username'), {
      type: 'DELETE'
    }).then(function () {
      discourseUserClass.currentUser = null;
    });
  },

  /**
    Checks if given username is valid for this email address

    @method checkUsername
    @param {String} username A username to check
    @param {String} email An email address to check
    @param {Number} forUserId user id - provide when changing username
  **/
  checkUsername: function(username, email, forUserId) {
    return Discourse.ajax('/users/check_username', {
      data: { username: username, email: email, for_user_id: forUserId }
    });
  },

  /**
    Groups the user's statistics

    @method groupStats
    @param {Array} stats Given stats
    @returns {Object}
  **/
  groupStats: function(stats) {
    var responses = Discourse.UserActionStat.create({
      count: 0,
      action_type: Discourse.UserAction.TYPES.replies
    });

    stats.filterProperty('isResponse').forEach(function (stat) {
      responses.set('count', responses.get('count') + stat.get('count'));
    });

    var result = Em.A();
    result.pushObjects(stats.rejectProperty('isResponse'));

    var insertAt = 0;
    result.forEach(function(item, index){
     if(item.action_type === Discourse.UserAction.TYPES.topics || item.action_type === Discourse.UserAction.TYPES.posts){
       insertAt = index + 1;
     }
    });
    if(responses.count > 0) {
      result.insertAt(insertAt, responses);
    }
    return(result);
  },

  /**
  Creates a new account over POST

    @method createAccount
    @param {String} name This user's name
    @param {String} email This user's email
    @param {String} password This user's password
    @param {String} username This user's username
    @param {String} passwordConfirm This user's confirmed password
    @param {String} challenge
    @returns Result of ajax call
  **/
  createAccount: function(name, email, password, username, passwordConfirm, challenge) {
    return Discourse.ajax("/users", {
      data: {
        name: name,
        email: email,
        password: password,
        username: username,
        password_confirmation: passwordConfirm,
        challenge: challenge
      },
      type: 'POST'
    });
  }
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/user.js'] = "/**\n  A data model representing a user on Discourse\n\n  @class User\n  @extends Discourse.Model\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.User = Discourse.Model.extend({\n\n  hasPMs: Em.computed.gt(\"private_messages_stats.all\", 0),\n  hasStartedPMs: Em.computed.gt(\"private_messages_stats.mine\", 0),\n  hasUnreadPMs: Em.computed.gt(\"private_messages_stats.unread\", 0),\n\n  /**\n    The user's stream\n\n    @property stream\n    @type {Discourse.UserStream}\n  **/\n  stream: function() {\n    return Discourse.UserStream.create({ user: this });\n  }.property(),\n\n  /**\n    The user's posts stream\n\n    @property postsStream\n    @type {Discourse.UserPostsStream}\n  **/\n  postsStream: function() {\n    return Discourse.UserPostsStream.create({ user: this });\n  }.property(),\n\n  /**\n    Is this user a member of staff?\n\n    @property staff\n    @type {Boolean}\n  **/\n  staff: Em.computed.or('admin', 'moderator'),\n\n  searchContext: function() {\n    return {\n      type: 'user',\n      id: this.get('username_lower'),\n      user: this\n    };\n  }.property('username_lower'),\n\n  /**\n    This user's display name. Returns the name if possible, otherwise returns the\n    username.\n\n    @property displayName\n    @type {String}\n  **/\n  displayName: function() {\n    if (Discourse.SiteSettings.enable_names \u0026\u0026 !this.blank('name')) {\n      return this.get('name');\n    }\n    return this.get('username');\n  }.property('username', 'name'),\n\n  /**\n    This user's profile background(in CSS).\n\n    @property websiteName\n    @type {String}\n  **/\n  profileBackground: function() {\n    var background = this.get('profile_background');\n    if(Em.isEmpty(background) || !Discourse.SiteSettings.allow_profile_backgrounds) { return; }\n\n    return 'background-image: url(' + background + ')';\n  }.property('profile_background'),\n\n  statusIcon: function() {\n    var name = Handlebars.Utils.escapeExpression(this.get('name')),\n        desc;\n\n    if(this.get('admin')) {\n      desc = I18n.t('user.admin', {user: name});\n      return '\u003ci class=\"fa fa-shield\" title=\"' + desc +  '\" alt=\"' + desc + '\"\u003e\u003c/i\u003e';\n    }\n    if(this.get('moderator')){\n      desc = I18n.t('user.moderator', {user: name});\n      return '\u003ci class=\"fa fa-shield\" title=\"' + desc +  '\" alt=\"' + desc + '\"\u003e\u003c/i\u003e';\n    }\n    return null;\n  }.property('admin','moderator'),\n\n  /**\n    Path to this user.\n\n    @property path\n    @type {String}\n  **/\n  path: Discourse.computed.url('username_lower', \"/users/%@\"),\n\n  /**\n    Path to this user's administration\n\n    @property adminPath\n    @type {String}\n  **/\n  adminPath: Discourse.computed.url('username_lower', \"/admin/users/%@\"),\n\n  /**\n    This user's username in lowercase.\n\n    @property username_lower\n    @type {String}\n  **/\n  username_lower: function() {\n    return this.get('username').toLowerCase();\n  }.property('username'),\n\n  /**\n    This user's trust level.\n\n    @property trustLevel\n    @type {Integer}\n  **/\n  trustLevel: function() {\n    return Discourse.Site.currentProp('trustLevels').findProperty('id', parseInt(this.get('trust_level'), 10));\n  }.property('trust_level'),\n\n  isBasic: Em.computed.equal('trust_level', 0),\n  isLeader: Em.computed.equal('trust_level', 3),\n  isElder: Em.computed.equal('trust_level', 4),\n  canManageTopic: Em.computed.or('staff', 'isElder'),\n\n  isSuspended: Em.computed.equal('suspended', true),\n\n  suspended: function() {\n    return this.get('suspended_till') \u0026\u0026 moment(this.get('suspended_till')).isAfter();\n  }.property('suspended_till'),\n\n  suspendedTillDate: function() {\n    return Discourse.Formatter.longDate(this.get('suspended_till'));\n  }.property('suspended_till'),\n\n  /**\n    Changes this user's username.\n\n    @method changeUsername\n    @param {String} newUsername The user's new username\n    @returns Result of ajax call\n  **/\n  changeUsername: function(newUsername) {\n    return Discourse.ajax(\"/users/\" + this.get('username_lower') + \"/preferences/username\", {\n      type: 'PUT',\n      data: { new_username: newUsername }\n    });\n  },\n\n  /**\n    Changes this user's email address.\n\n    @method changeEmail\n    @param {String} email The user's new email address\\\n    @returns Result of ajax call\n  **/\n  changeEmail: function(email) {\n    return Discourse.ajax(\"/users/\" + this.get('username_lower') + \"/preferences/email\", {\n      type: 'PUT',\n      data: { email: email }\n    });\n  },\n\n  /**\n    Returns a copy of this user.\n\n    @method copy\n    @returns {User}\n  **/\n  copy: function() {\n    return Discourse.User.create(this.getProperties(Ember.keys(this)));\n  },\n\n  /**\n    Save's this user's properties over AJAX via a PUT request.\n\n    @method save\n    @returns {Promise} the result of the operation\n  **/\n  save: function() {\n    var user = this;\n    var data = this.getProperties('auto_track_topics_after_msecs',\n                               'bio_raw',\n                               'website',\n                               'location',\n                               'name',\n                               'locale',\n                               'email_digests',\n                               'email_direct',\n                               'email_always',\n                               'email_private_messages',\n                               'dynamic_favicon',\n                               'digest_after_days',\n                               'new_topic_duration_minutes',\n                               'external_links_in_new_tab',\n                               'mailing_list_mode',\n                               'enable_quoting',\n                               'disable_jump_reply',\n                               'custom_fields');\n\n    _.each(['muted','watched','tracked'], function(s){\n      var cats = user.get(s + 'Categories').map(function(c){ return c.get('id')});\n      // HACK: denote lack of categories\n      if(cats.length === 0) { cats = [-1]; }\n      data[s + '_category_ids'] = cats;\n    });\n\n    if (!Discourse.SiteSettings.edit_history_visible_to_public) {\n      data['edit_history_public'] = this.get('edit_history_public');\n    }\n\n    return Discourse.ajax(\"/users/\" + this.get('username_lower'), {\n      data: data,\n      type: 'PUT'\n    }).then(function(data) {\n      user.set('bio_excerpt',data.user.bio_excerpt);\n\n      _.each([\n        'enable_quoting', 'external_links_in_new_tab', 'dynamic_favicon'\n      ], function(preference) {\n        Discourse.User.current().set(preference, user.get(preference));\n      });\n    });\n  },\n\n  /**\n    Changes the password and calls the callback function on AJAX.complete.\n\n    @method changePassword\n    @returns {Promise} the result of the change password operation\n  **/\n  changePassword: function() {\n    return Discourse.ajax(\"/session/forgot_password\", {\n      dataType: 'json',\n      data: { login: this.get('username') },\n      type: 'POST'\n    });\n  },\n\n  /**\n    Loads a single user action by id.\n\n    @method loadUserAction\n    @param {Integer} id The id of the user action being loaded\n    @returns A stream of the user's actions containing the action of id\n  **/\n  loadUserAction: function(id) {\n    var self = this,\n        stream = this.get('stream');\n    return Discourse.ajax(\"/user_actions/\" + id + \".json\", { cache: 'false' }).then(function(result) {\n      if (result \u0026\u0026 result.user_action) {\n        var ua = result.user_action;\n        if ((self.get('stream.filter') || ua.action_type) !== ua.action_type) return;\n        var action = Discourse.UserAction.collapseStream([Discourse.UserAction.create(ua)]);\n        stream.set('itemsLoaded', stream.get('itemsLoaded') + 1);\n        stream.get('content').insertAt(0, action[0]);\n      }\n    });\n  },\n\n  /**\n  The user's stat count, excluding PMs.\n\n    @property statsCountNonPM\n    @type {Integer}\n  **/\n  statsCountNonPM: function() {\n    if (this.blank('statsExcludingPms')) return 0;\n    var count = 0;\n    _.each(this.get('statsExcludingPms'), function(val) {\n      count += val.count;\n    });\n    return count;\n  }.property('statsExcludingPms.@each.count'),\n\n  /**\n  The user's stats, excluding PMs.\n\n    @property statsExcludingPms\n    @type {Array}\n  **/\n  statsExcludingPms: function() {\n    if (this.blank('stats')) return [];\n    return this.get('stats').rejectProperty('isPM');\n  }.property('stats.@each.isPM'),\n\n  findDetails: function() {\n    var user = this;\n\n    return PreloadStore.getAndRemove(\"user_\" + user.get('username'), function() {\n      return Discourse.ajax(\"/users/\" + user.get('username') + '.json');\n    }).then(function (json) {\n\n      if (!Em.isEmpty(json.user.stats)) {\n        json.user.stats = Discourse.User.groupStats(_.map(json.user.stats,function(s) {\n          if (s.count) s.count = parseInt(s.count, 10);\n          return Discourse.UserActionStat.create(s);\n        }));\n      }\n\n      if (!Em.isEmpty(json.user.custom_groups)) {\n        json.user.custom_groups = json.user.custom_groups.map(function (g) {\n          return Discourse.Group.create(g);\n        });\n      }\n\n      if (json.user.invited_by) {\n        json.user.invited_by = Discourse.User.create(json.user.invited_by);\n      }\n\n      if (!Em.isEmpty(json.user.featured_user_badge_ids)) {\n        var userBadgesMap = {};\n        Discourse.UserBadge.createFromJson(json).forEach(function(userBadge) {\n          userBadgesMap[ userBadge.get('id') ] = userBadge;\n        });\n        json.user.featured_user_badges = json.user.featured_user_badge_ids.map(function(id) {\n          return userBadgesMap[id];\n        });\n      }\n\n      user.setProperties(json.user);\n      return user;\n    });\n  },\n\n  avatarTemplate: function() {\n    return Discourse.User.avatarTemplate(this.get('username'), this.get('uploaded_avatar_id'));\n  }.property('uploaded_avatar_id', 'username'),\n\n  /*\n    Change avatar selection\n  */\n  pickAvatar: function(uploadId) {\n    this.set(\"uploaded_avatar_id\", uploadId);\n    return Discourse.ajax(\"/users/\" + this.get(\"username_lower\") + \"/preferences/avatar/pick\", {\n      type: 'PUT',\n      data: { upload_id: uploadId }\n    });\n  },\n\n  /**\n    Determines whether the current user is allowed to upload a file.\n\n    @method isAllowedToUploadAFile\n    @param {String} type The type of the upload (image, attachment)\n    @returns true if the current user is allowed to upload a file\n  **/\n  isAllowedToUploadAFile: function(type) {\n    return this.get('staff') ||\n           this.get('trust_level') \u003e 0 ||\n           Discourse.SiteSettings['newuser_max_' + type + 's'] \u003e 0;\n  },\n\n  /**\n    Invite a user to the site\n\n    @method createInvite\n    @param {String} email The email address of the user to invite to the site\n    @returns {Promise} the result of the server call\n  **/\n  createInvite: function(email, groupNames) {\n    return Discourse.ajax('/invites', {\n      type: 'POST',\n      data: {email: email, group_names: groupNames}\n    });\n  },\n\n  updateMutedCategories: function() {\n    this.set(\"mutedCategories\", Discourse.Category.findByIds(this.muted_category_ids));\n  }.observes(\"muted_category_ids\"),\n\n  updateTrackedCategories: function() {\n    this.set(\"trackedCategories\", Discourse.Category.findByIds(this.tracked_category_ids));\n  }.observes(\"tracked_category_ids\"),\n\n  updateWatchedCategories: function() {\n    this.set(\"watchedCategories\", Discourse.Category.findByIds(this.watched_category_ids));\n  }.observes(\"watched_category_ids\"),\n\n  canDeleteAccount: function() {\n    return this.get('can_delete_account') \u0026\u0026 ((this.get('reply_count')||0) + (this.get('topic_count')||0)) \u003c= 1;\n  }.property('can_delete_account', 'reply_count', 'topic_count'),\n\n  \"delete\": function() {\n    if (this.get('can_delete_account')) {\n      return Discourse.ajax(\"/users/\" + this.get('username'), {\n        type: 'DELETE',\n        data: {context: window.location.pathname}\n      });\n    } else {\n      return Ember.RSVP.reject(I18n.t('user.delete_yourself_not_allowed'));\n    }\n  },\n\n  dismissBanner: function (bannerKey) {\n    this.set(\"dismissed_banner_key\", bannerKey);\n    Discourse.ajax(\"/users/\" + this.get('username'), {\n      type: 'PUT',\n      data: { dismissed_banner_key: bannerKey }\n    });\n  }\n\n});\n\nDiscourse.User.reopenClass(Discourse.Singleton, {\n\n  avatarTemplate: function(username, uploadedAvatarId) {\n    var url;\n    if (uploadedAvatarId) {\n      url = \"/user_avatar/\" +\n            Discourse.BaseUrl +\n            \"/\" +\n            username.toLowerCase() +\n            \"/{size}/\" +\n            uploadedAvatarId + \".png\";\n    } else {\n      url = \"/letter_avatar/\" +\n            username.toLowerCase() +\n            \"/{size}/\" +\n            Discourse.LetterAvatarVersion + \".png\";\n    }\n\n    url = Discourse.getURL(url);\n    if (Discourse.CDN) {\n      url = Discourse.CDN + url;\n    }\n    return url;\n  },\n\n  /**\n    Find a `Discourse.User` for a given username.\n\n    @method findByUsername\n    @returns {Promise} a promise that resolves to a `Discourse.User`\n  **/\n  findByUsername: function(username) {\n    var user = Discourse.User.create({username: username});\n    return user.findDetails();\n  },\n\n  /**\n    The current singleton will retrieve its attributes from the `PreloadStore`\n    if it exists. Otherwise, no instance is created.\n\n    @method createCurrent\n    @returns {Discourse.User} the user, if logged in.\n  **/\n  createCurrent: function() {\n    var userJson = PreloadStore.get('currentUser');\n    if (userJson) { return Discourse.User.create(userJson); }\n    return null;\n  },\n\n  /**\n    Logs out the currently logged in user\n\n    @method logout\n    @returns {Promise} resolved when the logout finishes\n  **/\n  logout: function() {\n    var discourseUserClass = this;\n    return Discourse.ajax(\"/session/\" + Discourse.User.currentProp('username'), {\n      type: 'DELETE'\n    }).then(function () {\n      discourseUserClass.currentUser = null;\n    });\n  },\n\n  /**\n    Checks if given username is valid for this email address\n\n    @method checkUsername\n    @param {String} username A username to check\n    @param {String} email An email address to check\n    @param {Number} forUserId user id - provide when changing username\n  **/\n  checkUsername: function(username, email, forUserId) {\n    return Discourse.ajax('/users/check_username', {\n      data: { username: username, email: email, for_user_id: forUserId }\n    });\n  },\n\n  /**\n    Groups the user's statistics\n\n    @method groupStats\n    @param {Array} stats Given stats\n    @returns {Object}\n  **/\n  groupStats: function(stats) {\n    var responses = Discourse.UserActionStat.create({\n      count: 0,\n      action_type: Discourse.UserAction.TYPES.replies\n    });\n\n    stats.filterProperty('isResponse').forEach(function (stat) {\n      responses.set('count', responses.get('count') + stat.get('count'));\n    });\n\n    var result = Em.A();\n    result.pushObjects(stats.rejectProperty('isResponse'));\n\n    var insertAt = 0;\n    result.forEach(function(item, index){\n     if(item.action_type === Discourse.UserAction.TYPES.topics || item.action_type === Discourse.UserAction.TYPES.posts){\n       insertAt = index + 1;\n     }\n    });\n    if(responses.count \u003e 0) {\n      result.insertAt(insertAt, responses);\n    }\n    return(result);\n  },\n\n  /**\n  Creates a new account over POST\n\n    @method createAccount\n    @param {String} name This user's name\n    @param {String} email This user's email\n    @param {String} password This user's password\n    @param {String} username This user's username\n    @param {String} passwordConfirm This user's confirmed password\n    @param {String} challenge\n    @returns Result of ajax call\n  **/\n  createAccount: function(name, email, password, username, passwordConfirm, challenge) {\n    return Discourse.ajax(\"/users\", {\n      data: {\n        name: name,\n        email: email,\n        password: password,\n        username: username,\n        password_confirmation: passwordConfirm,\n        challenge: challenge\n      },\n      type: 'POST'\n    });\n  }\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A data model representing a group of UserActions

  @class UserActionGroup
  @extends Discourse.Model
  @namespace Discourse
  @module Discourse
**/

Discourse.UserActionGroup = Discourse.Model.extend({
  push: function(item) {
    if (!this.items) {
      this.items = [];
    }
    return this.items.push(item);
  }
});




// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/user_action_group.js'] = "/**\n  A data model representing a group of UserActions\n\n  @class UserActionGroup\n  @extends Discourse.Model\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.UserActionGroup = Discourse.Model.extend({\n  push: function(item) {\n    if (!this.items) {\n      this.items = [];\n    }\n    return this.items.push(item);\n  }\n});\n\n\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A data model representing a statistic on a UserAction

  @class UserActionStat
  @extends Discourse.Model
  @namespace Discourse
  @module Discourse
**/

Discourse.UserActionStat = Discourse.Model.extend({

  isPM: function() {
    var actionType = this.get('action_type');
    return actionType === Discourse.UserAction.TYPES.messages_sent ||
           actionType === Discourse.UserAction.TYPES.messages_received;
  }.property('action_type'),

  description: Discourse.computed.i18n('action_type', 'user_action_groups.%@'),

  isResponse: function() {
    var actionType = this.get('action_type');
    return actionType === Discourse.UserAction.TYPES.replies ||
           actionType === Discourse.UserAction.TYPES.mentions ||
           actionType === Discourse.UserAction.TYPES.quotes;
  }.property('action_type')

});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/user_action_stat.js'] = "/**\n  A data model representing a statistic on a UserAction\n\n  @class UserActionStat\n  @extends Discourse.Model\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.UserActionStat = Discourse.Model.extend({\n\n  isPM: function() {\n    var actionType = this.get('action_type');\n    return actionType === Discourse.UserAction.TYPES.messages_sent ||\n           actionType === Discourse.UserAction.TYPES.messages_received;\n  }.property('action_type'),\n\n  description: Discourse.computed.i18n('action_type', 'user_action_groups.%@'),\n\n  isResponse: function() {\n    var actionType = this.get('action_type');\n    return actionType === Discourse.UserAction.TYPES.replies ||\n           actionType === Discourse.UserAction.TYPES.mentions ||\n           actionType === Discourse.UserAction.TYPES.quotes;\n  }.property('action_type')\n\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  A data model representing a user badge grant on Discourse

  @class UserBadge
  @extends Discourse.Model
  @namespace Discourse
  @module Discourse
**/

Discourse.UserBadge = Discourse.Model.extend({
  /**
    Revoke this badge.

    @method revoke
    @returns {Promise} a promise that resolves when the badge has been revoked.
  **/
  revoke: function() {
    return Discourse.ajax("/user_badges/" + this.get('id'), {
      type: "DELETE"
    });
  }
});

Discourse.UserBadge.reopenClass({
  /**
    Create `Discourse.UserBadge` instances from the server JSON response.

    @method createFromJson
    @param {Object} json The JSON returned by the server
    @returns Array or instance of `Discourse.UserBadge` depending on the input JSON
  **/
  createFromJson: function(json) {
    // Create User objects.
    if (json.users === undefined) { json.users = []; }
    var users = {};
    json.users.forEach(function(userJson) {
      users[userJson.id] = Discourse.User.create(userJson);
    });

    // Create Topic objects.
    if (json.topics === undefined) { json.topics = []; }
    var topics = {};
    json.topics.forEach(function(topicJson) {
      topics[topicJson.id] = Discourse.Topic.create(topicJson);
    });

    // Create the badges.
    if (json.badges === undefined) { json.badges = []; }
    var badges = {};
    Discourse.Badge.createFromJson(json).forEach(function(badge) {
      badges[badge.get('id')] = badge;
    });

    // Create UserBadge object(s).
    var userBadges = [];
    if ("user_badge" in json) {
      userBadges = [json.user_badge];
    } else {
      userBadges = json.user_badges;
    }

    userBadges = userBadges.map(function(userBadgeJson) {
      var userBadge = Discourse.UserBadge.create(userBadgeJson);

      var grantedAtDate = Date.parse(userBadge.get('granted_at'));
      userBadge.set('grantedAt', grantedAtDate);

      userBadge.set('badge', badges[userBadge.get('badge_id')]);
      if (userBadge.get('user_id')) {
        userBadge.set('user', users[userBadge.get('user_id')]);
      }
      if (userBadge.get('granted_by_id')) {
        userBadge.set('granted_by', users[userBadge.get('granted_by_id')]);
      }
      if (userBadge.get('topic_id')) {
        userBadge.set('topic', topics[userBadge.get('topic_id')]);
      }
      return userBadge;
    });

    if ("user_badge" in json) {
      return userBadges[0];
    } else {
      return userBadges;
    }
  },

  /**
    Find all badges for a given username.

    @method findByUsername
    @param {String} username
    @param {Object} options
    @returns {Promise} a promise that resolves to an array of `Discourse.UserBadge`.
  **/
  findByUsername: function(username, options) {
    var url = "/users/" + username + "/badges_json.json";
    if (options && options.grouped) {
      url += "?grouped=true";
    }
    return Discourse.ajax(url).then(function(json) {
      return Discourse.UserBadge.createFromJson(json);
    });
  },

  /**
    Find all badge grants for a given badge ID.

    @method findById
    @param {String} badgeId
    @returns {Promise} a promise that resolves to an array of `Discourse.UserBadge`.
  **/
  findByBadgeId: function(badgeId, options) {
    if (!options) { options = {}; }
    options.badge_id = badgeId;

    return Discourse.ajax("/user_badges.json", {
      data: options
    }).then(function(json) {
      return Discourse.UserBadge.createFromJson(json);
    });
  },

  /**
    Grant the badge having id `badgeId` to the user identified by `username`.

    @method grant
    @param {Integer} badgeId id of the badge to be granted.
    @param {String} username username of the user to be granted the badge.
    @returns {Promise} a promise that resolves to an instance of `Discourse.UserBadge`.
  **/
  grant: function(badgeId, username) {
    return Discourse.ajax("/user_badges", {
      type: "POST",
      data: {
        username: username,
        badge_id: badgeId
      }
    }).then(function(json) {
      return Discourse.UserBadge.createFromJson(json);
    });
  }
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/user_badge.js'] = "/**\n  A data model representing a user badge grant on Discourse\n\n  @class UserBadge\n  @extends Discourse.Model\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.UserBadge = Discourse.Model.extend({\n  /**\n    Revoke this badge.\n\n    @method revoke\n    @returns {Promise} a promise that resolves when the badge has been revoked.\n  **/\n  revoke: function() {\n    return Discourse.ajax(\"/user_badges/\" + this.get('id'), {\n      type: \"DELETE\"\n    });\n  }\n});\n\nDiscourse.UserBadge.reopenClass({\n  /**\n    Create `Discourse.UserBadge` instances from the server JSON response.\n\n    @method createFromJson\n    @param {Object} json The JSON returned by the server\n    @returns Array or instance of `Discourse.UserBadge` depending on the input JSON\n  **/\n  createFromJson: function(json) {\n    // Create User objects.\n    if (json.users === undefined) { json.users = []; }\n    var users = {};\n    json.users.forEach(function(userJson) {\n      users[userJson.id] = Discourse.User.create(userJson);\n    });\n\n    // Create Topic objects.\n    if (json.topics === undefined) { json.topics = []; }\n    var topics = {};\n    json.topics.forEach(function(topicJson) {\n      topics[topicJson.id] = Discourse.Topic.create(topicJson);\n    });\n\n    // Create the badges.\n    if (json.badges === undefined) { json.badges = []; }\n    var badges = {};\n    Discourse.Badge.createFromJson(json).forEach(function(badge) {\n      badges[badge.get('id')] = badge;\n    });\n\n    // Create UserBadge object(s).\n    var userBadges = [];\n    if (\"user_badge\" in json) {\n      userBadges = [json.user_badge];\n    } else {\n      userBadges = json.user_badges;\n    }\n\n    userBadges = userBadges.map(function(userBadgeJson) {\n      var userBadge = Discourse.UserBadge.create(userBadgeJson);\n\n      var grantedAtDate = Date.parse(userBadge.get('granted_at'));\n      userBadge.set('grantedAt', grantedAtDate);\n\n      userBadge.set('badge', badges[userBadge.get('badge_id')]);\n      if (userBadge.get('user_id')) {\n        userBadge.set('user', users[userBadge.get('user_id')]);\n      }\n      if (userBadge.get('granted_by_id')) {\n        userBadge.set('granted_by', users[userBadge.get('granted_by_id')]);\n      }\n      if (userBadge.get('topic_id')) {\n        userBadge.set('topic', topics[userBadge.get('topic_id')]);\n      }\n      return userBadge;\n    });\n\n    if (\"user_badge\" in json) {\n      return userBadges[0];\n    } else {\n      return userBadges;\n    }\n  },\n\n  /**\n    Find all badges for a given username.\n\n    @method findByUsername\n    @param {String} username\n    @param {Object} options\n    @returns {Promise} a promise that resolves to an array of `Discourse.UserBadge`.\n  **/\n  findByUsername: function(username, options) {\n    var url = \"/users/\" + username + \"/badges_json.json\";\n    if (options \u0026\u0026 options.grouped) {\n      url += \"?grouped=true\";\n    }\n    return Discourse.ajax(url).then(function(json) {\n      return Discourse.UserBadge.createFromJson(json);\n    });\n  },\n\n  /**\n    Find all badge grants for a given badge ID.\n\n    @method findById\n    @param {String} badgeId\n    @returns {Promise} a promise that resolves to an array of `Discourse.UserBadge`.\n  **/\n  findByBadgeId: function(badgeId, options) {\n    if (!options) { options = {}; }\n    options.badge_id = badgeId;\n\n    return Discourse.ajax(\"/user_badges.json\", {\n      data: options\n    }).then(function(json) {\n      return Discourse.UserBadge.createFromJson(json);\n    });\n  },\n\n  /**\n    Grant the badge having id `badgeId` to the user identified by `username`.\n\n    @method grant\n    @param {Integer} badgeId id of the badge to be granted.\n    @param {String} username username of the user to be granted the badge.\n    @returns {Promise} a promise that resolves to an instance of `Discourse.UserBadge`.\n  **/\n  grant: function(badgeId, username) {\n    return Discourse.ajax(\"/user_badges\", {\n      type: \"POST\",\n      data: {\n        username: username,\n        badge_id: badgeId\n      }\n    }).then(function(json) {\n      return Discourse.UserBadge.createFromJson(json);\n    });\n  }\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  Represents a user's stream

  @class UserPostsStream
  @extends Discourse.Model
  @namespace Discourse
  @module Discourse
**/

Discourse.UserPostsStream = Discourse.Model.extend({
  loaded: false,

  _initialize: function () {
    this.setProperties({
      itemsLoaded: 0,
      content: []
    });
  }.on("init"),

  url: Discourse.computed.url("user.username_lower", "filter", "itemsLoaded", "/posts/%@/%@?offset=%@"),

  filterBy: function (filter) {
    if (this.get("loaded") && this.get("filter") === filter) { return Ember.RSVP.resolve(); }

    this.setProperties({
      filter: filter,
      itemsLoaded: 0,
      content: []
    });

    return this.findItems();
  },

  findItems: function () {
    var self = this;
    if (this.get("loading")) { return Ember.RSVP.reject(); }

    this.set("loading", true);

    return Discourse.ajax(this.get("url"), { cache: false }).then(function (result) {
      if (result) {
        var posts = result.map(function (post) { return Discourse.AdminPost.create(post); });
        self.get("content").pushObjects(posts);
        self.setProperties({
          loaded: true,
          itemsLoaded: self.get("itemsLoaded") + posts.length
        });
      }
    }).finally(function () {
      self.set("loading", false);
    });
  }

});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/user_posts_stream.js'] = "/**\n  Represents a user's stream\n\n  @class UserPostsStream\n  @extends Discourse.Model\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.UserPostsStream = Discourse.Model.extend({\n  loaded: false,\n\n  _initialize: function () {\n    this.setProperties({\n      itemsLoaded: 0,\n      content: []\n    });\n  }.on(\"init\"),\n\n  url: Discourse.computed.url(\"user.username_lower\", \"filter\", \"itemsLoaded\", \"/posts/%@/%@?offset=%@\"),\n\n  filterBy: function (filter) {\n    if (this.get(\"loaded\") \u0026\u0026 this.get(\"filter\") === filter) { return Ember.RSVP.resolve(); }\n\n    this.setProperties({\n      filter: filter,\n      itemsLoaded: 0,\n      content: []\n    });\n\n    return this.findItems();\n  },\n\n  findItems: function () {\n    var self = this;\n    if (this.get(\"loading\")) { return Ember.RSVP.reject(); }\n\n    this.set(\"loading\", true);\n\n    return Discourse.ajax(this.get(\"url\"), { cache: false }).then(function (result) {\n      if (result) {\n        var posts = result.map(function (post) { return Discourse.AdminPost.create(post); });\n        self.get(\"content\").pushObjects(posts);\n        self.setProperties({\n          loaded: true,\n          itemsLoaded: self.get(\"itemsLoaded\") + posts.length\n        });\n      }\n    }).finally(function () {\n      self.set(\"loading\", false);\n    });\n  }\n\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  Represents a user's stream

  @class UserStream
  @extends Discourse.Model
  @namespace Discourse
  @module Discourse
**/

Discourse.UserStream = Discourse.Model.extend({
  loaded: false,

  _initialize: function() {
    this.setProperties({
      itemsLoaded: 0,
      content: []
    });
  }.on("init"),

  filterParam: function() {
    var filter = this.get('filter');
    if (filter === Discourse.UserAction.TYPES.replies) {
      return [Discourse.UserAction.TYPES.replies,
              Discourse.UserAction.TYPES.mentions,
              Discourse.UserAction.TYPES.quotes].join(",");
    }
    return filter;
  }.property('filter'),

  baseUrl: Discourse.computed.url('itemsLoaded', 'user.username_lower', '/user_actions.json?offset=%@&username=%@'),

  filterBy: function(filter) {
    if (this.get('loaded') && (this.get('filter') === filter)) { return Ember.RSVP.resolve(); }

    this.setProperties({
      filter: filter,
      itemsLoaded: 0,
      content: []
    });

    return this.findItems();
  },

  remove: function(userAction) {
    // 1) remove the user action from the child groups
    this.get("content").forEach(function (ua) {
      ["likes", "stars", "edits", "bookmarks"].forEach(function (group) {
        var items = ua.get("childGroups." + group + ".items");
        if (items) {
          items.removeObject(userAction);
        }
      });
    });

    // 2) remove the parents that have no children
    var content = this.get("content").filter(function (ua) {
      return ["likes", "stars", "edits", "bookmarks"].any(function (group) {
        return ua.get("childGroups." + group + ".items.length") > 0;
      });
    });

    this.setProperties({
      content: content,
      itemsLoaded: content.length
    });
  },

  findItems: function() {
    var self = this;

    var url = this.get('baseUrl');
    if (this.get('filterParam')) {
      url += "&filter=" + this.get('filterParam');
    }

    // Don't load the same stream twice. We're probably at the end.
    var lastLoadedUrl = this.get('lastLoadedUrl');
    if (lastLoadedUrl === url) { return Ember.RSVP.resolve(); }

    if (this.get('loading')) { return Ember.RSVP.resolve(); }
    this.set('loading', true);
    return Discourse.ajax(url, {cache: 'false'}).then( function(result) {
      if (result && result.user_actions) {
        var copy = Em.A();
        result.user_actions.forEach(function(action) {
          copy.pushObject(Discourse.UserAction.create(action));
        });

        self.get('content').pushObjects(Discourse.UserAction.collapseStream(copy));
        self.setProperties({
          loaded: true,
          itemsLoaded: self.get('itemsLoaded') + result.user_actions.length
        });
      }
    }).finally(function() {
      self.set('loading', false);
      self.set('lastLoadedUrl', url);
    });
  }

});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/models/user_stream.js'] = "/**\n  Represents a user's stream\n\n  @class UserStream\n  @extends Discourse.Model\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.UserStream = Discourse.Model.extend({\n  loaded: false,\n\n  _initialize: function() {\n    this.setProperties({\n      itemsLoaded: 0,\n      content: []\n    });\n  }.on(\"init\"),\n\n  filterParam: function() {\n    var filter = this.get('filter');\n    if (filter === Discourse.UserAction.TYPES.replies) {\n      return [Discourse.UserAction.TYPES.replies,\n              Discourse.UserAction.TYPES.mentions,\n              Discourse.UserAction.TYPES.quotes].join(\",\");\n    }\n    return filter;\n  }.property('filter'),\n\n  baseUrl: Discourse.computed.url('itemsLoaded', 'user.username_lower', '/user_actions.json?offset=%@\u0026username=%@'),\n\n  filterBy: function(filter) {\n    if (this.get('loaded') \u0026\u0026 (this.get('filter') === filter)) { return Ember.RSVP.resolve(); }\n\n    this.setProperties({\n      filter: filter,\n      itemsLoaded: 0,\n      content: []\n    });\n\n    return this.findItems();\n  },\n\n  remove: function(userAction) {\n    // 1) remove the user action from the child groups\n    this.get(\"content\").forEach(function (ua) {\n      [\"likes\", \"stars\", \"edits\", \"bookmarks\"].forEach(function (group) {\n        var items = ua.get(\"childGroups.\" + group + \".items\");\n        if (items) {\n          items.removeObject(userAction);\n        }\n      });\n    });\n\n    // 2) remove the parents that have no children\n    var content = this.get(\"content\").filter(function (ua) {\n      return [\"likes\", \"stars\", \"edits\", \"bookmarks\"].any(function (group) {\n        return ua.get(\"childGroups.\" + group + \".items.length\") \u003e 0;\n      });\n    });\n\n    this.setProperties({\n      content: content,\n      itemsLoaded: content.length\n    });\n  },\n\n  findItems: function() {\n    var self = this;\n\n    var url = this.get('baseUrl');\n    if (this.get('filterParam')) {\n      url += \"\u0026filter=\" + this.get('filterParam');\n    }\n\n    // Don't load the same stream twice. We're probably at the end.\n    var lastLoadedUrl = this.get('lastLoadedUrl');\n    if (lastLoadedUrl === url) { return Ember.RSVP.resolve(); }\n\n    if (this.get('loading')) { return Ember.RSVP.resolve(); }\n    this.set('loading', true);\n    return Discourse.ajax(url, {cache: 'false'}).then( function(result) {\n      if (result \u0026\u0026 result.user_actions) {\n        var copy = Em.A();\n        result.user_actions.forEach(function(action) {\n          copy.pushObject(Discourse.UserAction.create(action));\n        });\n\n        self.get('content').pushObjects(Discourse.UserAction.collapseStream(copy));\n        self.setProperties({\n          loaded: true,\n          itemsLoaded: self.get('itemsLoaded') + result.user_actions.length\n        });\n      }\n    }).finally(function() {\n      self.set('loading', false);\n      self.set('lastLoadedUrl', url);\n    });\n  }\n\n});\n";
define("discourse/components/activity-column", 
  ["discourse/helpers/cold-age-class","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var daysSinceEpoch = __dependency1__.daysSinceEpoch;

    __exports__["default"] = Ember.Component.extend({
      tagName: 'td',
      classNameBindings: [':activity', 'coldness'],
      attributeBindings: ['title'],

      // returns createdAt if there's no bumped date
      bumpedAt: function() {
        var bumpedAt = this.get('topic.bumped_at');
        if (bumpedAt) {
          return new Date(bumpedAt);
        } else {
          return this.get('createdAt');
        }
      }.property('topic.bumped_at', 'createdAt'),

      createdAt: function() {
        return new Date(this.get('topic.created_at'));
      }.property('topic.created_at'),

      coldness: function() {
        var bumpedAt = this.get('bumpedAt'),
            createdAt = this.get('createdAt');

        if (!bumpedAt) { return; }
        var delta = daysSinceEpoch(bumpedAt) - daysSinceEpoch(createdAt);

        if (delta > Discourse.SiteSettings.cold_age_days_high) { return 'coldmap-high'; }
        if (delta > Discourse.SiteSettings.cold_age_days_medium) { return 'coldmap-med'; }
        if (delta > Discourse.SiteSettings.cold_age_days_low) { return 'coldmap-low'; }
      }.property('bumpedAt', 'createdAt'),

      title: function() {
        return I18n.t('first_post') + ": " + Discourse.Formatter.longDate(this.get('createdAt')) + "\n" +
               I18n.t('last_post') + ": " + Discourse.Formatter.longDate(this.get('bumpedAt'));
      }.property('bumpedAt', 'createdAt'),

      render: function(buffer) {
        buffer.push("<a href='" + this.get('topic.lastPostUrl') +"'>" + Discourse.Formatter.autoUpdatingRelativeAge(this.get('bumpedAt')) + "</a>");
      }

    });
  });

Discourse.ActivityColumnComponent = require('discourse/components/activity-column').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/activity-column.js'] = "define(\"discourse/components/activity-column\", \n  [\"discourse/helpers/cold-age-class\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var daysSinceEpoch = __dependency1__.daysSinceEpoch;\n\n    __exports__[\"default\"] = Ember.Component.extend({\n      tagName: 'td',\n      classNameBindings: [':activity', 'coldness'],\n      attributeBindings: ['title'],\n\n      // returns createdAt if there's no bumped date\n      bumpedAt: function() {\n        var bumpedAt = this.get('topic.bumped_at');\n        if (bumpedAt) {\n          return new Date(bumpedAt);\n        } else {\n          return this.get('createdAt');\n        }\n      }.property('topic.bumped_at', 'createdAt'),\n\n      createdAt: function() {\n        return new Date(this.get('topic.created_at'));\n      }.property('topic.created_at'),\n\n      coldness: function() {\n        var bumpedAt = this.get('bumpedAt'),\n            createdAt = this.get('createdAt');\n\n        if (!bumpedAt) { return; }\n        var delta = daysSinceEpoch(bumpedAt) - daysSinceEpoch(createdAt);\n\n        if (delta \u003e Discourse.SiteSettings.cold_age_days_high) { return 'coldmap-high'; }\n        if (delta \u003e Discourse.SiteSettings.cold_age_days_medium) { return 'coldmap-med'; }\n        if (delta \u003e Discourse.SiteSettings.cold_age_days_low) { return 'coldmap-low'; }\n      }.property('bumpedAt', 'createdAt'),\n\n      title: function() {\n        return I18n.t('first_post') + \": \" + Discourse.Formatter.longDate(this.get('createdAt')) + \"\\n\" +\n               I18n.t('last_post') + \": \" + Discourse.Formatter.longDate(this.get('bumpedAt'));\n      }.property('bumpedAt', 'createdAt'),\n\n      render: function(buffer) {\n        buffer.push(\"\u003ca href='\" + this.get('topic.lastPostUrl') +\"'\u003e\" + Discourse.Formatter.autoUpdatingRelativeAge(this.get('bumpedAt')) + \"\u003c/a\u003e\");\n      }\n\n    });\n  });";
define("discourse/components/auto-close-form", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Component.extend({
      autoCloseValid: false,

      label: function() {
        return I18n.t( this.get('labelKey') || 'composer.auto_close_label' );
      }.property('labelKey'),

      autoCloseChanged: function() {
        if( this.get('autoCloseTime') && this.get('autoCloseTime').length > 0 ) {
          this.set('autoCloseTime', this.get('autoCloseTime').replace(/[^:\d-\s]/g, '') );
        }
        this.set('autoCloseValid', this.isAutoCloseValid());
      }.observes('autoCloseTime'),

      isAutoCloseValid: function() {
        if (this.get('autoCloseTime')) {
          var t = this.get('autoCloseTime').trim();
          if (t.match(/^[\d]{4}-[\d]{1,2}-[\d]{1,2} [\d]{1,2}:[\d]{2}/)) {
            return moment(t).isAfter(); // In the future
          } else {
            return (t.match(/^[\d]+$/) || t.match(/^[\d]{1,2}:[\d]{2}$/)) !== null;
          }
        } else {
          return true;
        }
      }
    });
  });

Discourse.AutoCloseFormComponent = require('discourse/components/auto-close-form').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/auto-close-form.js'] = "define(\"discourse/components/auto-close-form\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Component.extend({\n      autoCloseValid: false,\n\n      label: function() {\n        return I18n.t( this.get('labelKey') || 'composer.auto_close_label' );\n      }.property('labelKey'),\n\n      autoCloseChanged: function() {\n        if( this.get('autoCloseTime') \u0026\u0026 this.get('autoCloseTime').length \u003e 0 ) {\n          this.set('autoCloseTime', this.get('autoCloseTime').replace(/[^:\\d-\\s]/g, '') );\n        }\n        this.set('autoCloseValid', this.isAutoCloseValid());\n      }.observes('autoCloseTime'),\n\n      isAutoCloseValid: function() {\n        if (this.get('autoCloseTime')) {\n          var t = this.get('autoCloseTime').trim();\n          if (t.match(/^[\\d]{4}-[\\d]{1,2}-[\\d]{1,2} [\\d]{1,2}:[\\d]{2}/)) {\n            return moment(t).isAfter(); // In the future\n          } else {\n            return (t.match(/^[\\d]+$/) || t.match(/^[\\d]{1,2}:[\\d]{2}$/)) !== null;\n          }\n        } else {\n          return true;\n        }\n      }\n    });\n  });";
define("discourse/components/avatar-uploader", 
  ["discourse/mixins/upload","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var UploadMixin = __dependency1__["default"];

    __exports__["default"] = Em.Component.extend(UploadMixin, {
      tagName: 'span',
      imageIsNotASquare: false,
      type: 'avatar',

      uploadUrl: Discourse.computed.url('username', '/users/%@/preferences/user_image'),

      uploadButtonText: function() {
        return this.get("uploading") ? I18n.t("uploading") : I18n.t("user.change_avatar.upload_picture");
      }.property("uploading"),

      uploadDone: function(data) {
        var self = this;

        // indicates the users is using an uploaded avatar
        this.set("custom_avatar_upload_id", data.result.upload_id);

        // display a warning whenever the image is not a square
        this.set("imageIsNotASquare", data.result.width !== data.result.height);
        // in order to be as much responsive as possible, we're cheating a bit here
        // indeed, the server gives us back the url to the file we've just uploaded
        // often, this file is not a square, so we need to crop it properly
        // this will also capture the first frame of animated avatars when they're not allowed
        Discourse.Utilities.cropAvatar(data.result.url, data.files[0].type).then(function(avatarTemplate) {
          self.set("uploadedAvatarTemplate", avatarTemplate);
        });
      }
    });
  });

Discourse.AvatarUploaderComponent = require('discourse/components/avatar-uploader').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/avatar-uploader.js'] = "define(\"discourse/components/avatar-uploader\", \n  [\"discourse/mixins/upload\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var UploadMixin = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Em.Component.extend(UploadMixin, {\n      tagName: 'span',\n      imageIsNotASquare: false,\n      type: 'avatar',\n\n      uploadUrl: Discourse.computed.url('username', '/users/%@/preferences/user_image'),\n\n      uploadButtonText: function() {\n        return this.get(\"uploading\") ? I18n.t(\"uploading\") : I18n.t(\"user.change_avatar.upload_picture\");\n      }.property(\"uploading\"),\n\n      uploadDone: function(data) {\n        var self = this;\n\n        // indicates the users is using an uploaded avatar\n        this.set(\"custom_avatar_upload_id\", data.result.upload_id);\n\n        // display a warning whenever the image is not a square\n        this.set(\"imageIsNotASquare\", data.result.width !== data.result.height);\n        // in order to be as much responsive as possible, we're cheating a bit here\n        // indeed, the server gives us back the url to the file we've just uploaded\n        // often, this file is not a square, so we need to crop it properly\n        // this will also capture the first frame of animated avatars when they're not allowed\n        Discourse.Utilities.cropAvatar(data.result.url, data.files[0].type).then(function(avatarTemplate) {\n          self.set(\"uploadedAvatarTemplate\", avatarTemplate);\n        });\n      }\n    });\n  });";
define("discourse/components/basic-topic-list", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      This view is used for rendering a basic list of topics.

      @class BasicTopicListComponent
      @extends Discourse.View
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Ember.Component.extend({

      loaded: function() {
        var topicList = this.get('topicList');
        if (topicList) {
          return topicList.get('loaded');
        } else {
          return true;
        }
      }.property('topicList.loaded'),

      _topicListChanged: function() {
        this._initFromTopicList(this.get('topicList'));
      }.observes('topicList.@each'),

      _initFromTopicList: function(topicList) {
        if (topicList !== null) {
          this.set('topics', topicList.get('topics'));
          this.rerender();
        }
      },

      init: function() {
        this._super();
        var topicList = this.get('topicList');
        if (topicList) {
          this._initFromTopicList(topicList);
        } else {
          // Without a topic list, we assume it's loaded always.
          this.set('loaded', true);
        }
      },

      actions: {
        clickedPosts: function(data) {
          this.sendAction('postsAction', data);
        }
      }

    });
  });

Discourse.BasicTopicListComponent = require('discourse/components/basic-topic-list').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/basic-topic-list.js'] = "define(\"discourse/components/basic-topic-list\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      This view is used for rendering a basic list of topics.\n\n      @class BasicTopicListComponent\n      @extends Discourse.View\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Ember.Component.extend({\n\n      loaded: function() {\n        var topicList = this.get('topicList');\n        if (topicList) {\n          return topicList.get('loaded');\n        } else {\n          return true;\n        }\n      }.property('topicList.loaded'),\n\n      _topicListChanged: function() {\n        this._initFromTopicList(this.get('topicList'));\n      }.observes('topicList.@each'),\n\n      _initFromTopicList: function(topicList) {\n        if (topicList !== null) {\n          this.set('topics', topicList.get('topics'));\n          this.rerender();\n        }\n      },\n\n      init: function() {\n        this._super();\n        var topicList = this.get('topicList');\n        if (topicList) {\n          this._initFromTopicList(topicList);\n        } else {\n          // Without a topic list, we assume it's loaded always.\n          this.set('loaded', true);\n        }\n      },\n\n      actions: {\n        clickedPosts: function(data) {\n          this.sendAction('postsAction', data);\n        }\n      }\n\n    });\n  });";
define("discourse/components/bread-crumbs", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      A breadcrumb including category drop downs

      @class BreadCrumbsComponent
      @extends Ember.Component
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Ember.Component.extend({
      classNames: ['category-breadcrumb'],
      tagName: 'ol',
      parentCategory: Em.computed.alias('category.parentCategory'),

      parentCategories: Em.computed.filter('categories', function(c) {
        if (c.id === Discourse.Site.currentProp("uncategorized_category_id") && !Discourse.SiteSettings.allow_uncategorized_topics) {
          // Don't show "uncategorized" if allow_uncategorized_topics setting is false.
          return false;
        }
        return !c.get('parentCategory');
      }),

      firstCategory: function() {
        return this.get('parentCategory') || this.get('category');
      }.property('parentCategory', 'category'),

      secondCategory: function() {
        if (this.get('parentCategory')) return this.get('category');
        return null;
      }.property('category', 'parentCategory'),

      childCategories: function() {
        if (this.get('hideSubcategories')) { return []; }
        var firstCategory = this.get('firstCategory');
        if (!firstCategory) { return []; }

        return this.get('categories').filter(function (c) {
          return c.get('parentCategory') === firstCategory;
        });
      }.property('firstCategory', 'hideSubcategories')

    });
  });

Discourse.BreadCrumbsComponent = require('discourse/components/bread-crumbs').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/bread-crumbs.js'] = "define(\"discourse/components/bread-crumbs\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      A breadcrumb including category drop downs\n\n      @class BreadCrumbsComponent\n      @extends Ember.Component\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Ember.Component.extend({\n      classNames: ['category-breadcrumb'],\n      tagName: 'ol',\n      parentCategory: Em.computed.alias('category.parentCategory'),\n\n      parentCategories: Em.computed.filter('categories', function(c) {\n        if (c.id === Discourse.Site.currentProp(\"uncategorized_category_id\") \u0026\u0026 !Discourse.SiteSettings.allow_uncategorized_topics) {\n          // Don't show \"uncategorized\" if allow_uncategorized_topics setting is false.\n          return false;\n        }\n        return !c.get('parentCategory');\n      }),\n\n      firstCategory: function() {\n        return this.get('parentCategory') || this.get('category');\n      }.property('parentCategory', 'category'),\n\n      secondCategory: function() {\n        if (this.get('parentCategory')) return this.get('category');\n        return null;\n      }.property('category', 'parentCategory'),\n\n      childCategories: function() {\n        if (this.get('hideSubcategories')) { return []; }\n        var firstCategory = this.get('firstCategory');\n        if (!firstCategory) { return []; }\n\n        return this.get('categories').filter(function (c) {\n          return c.get('parentCategory') === firstCategory;\n        });\n      }.property('firstCategory', 'hideSubcategories')\n\n    });\n  });";
define("discourse/components/category-drop", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      Renders a drop down for selecting a category

      @class CategoryDropComponent
      @extends Ember.Component
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Ember.Component.extend({
      classNameBindings: ['category::no-category', 'categories:has-drop'],
      tagName: 'li',

      iconClass: function() {
        if (this.get('expanded')) { return "fa fa-caret-down"; }
        return "fa fa-caret-right";
      }.property('expanded'),

      allCategoriesUrl: function() {
        if (this.get('subCategory')) {
          return this.get('parentCategory.url') || "/";
        } else {
          return "/";
        }
      }.property('parentCategory.url', 'subCategory'),

      noCategoriesUrl: function() {
        return this.get('parentCategory.url') + "/none";
      }.property('parentCategory.url'),

      allCategoriesLabel: function() {
        if (this.get('subCategory')) {
          return I18n.t('categories.all_subcategories', {categoryName: this.get('parentCategory.name')});
        }
        return I18n.t('categories.all');
      }.property('category'),

      dropdownButtonClass: function() {
        var result = 'badge-category category-dropdown-button';
        if (Em.isNone(this.get('category'))) {
          result += ' home';
        }
        return result;
      }.property('category'),

      badgeStyle: function() {
        var category = this.get('category');
        if (category) {
          return Discourse.HTML.categoryStyle(category);
        } else {
          return "background-color: #eee; color: #333";
        }
      }.property('category'),

      actions: {
        expand: function() {
          if (this.get('expanded')) {
            this.close();
            return;
          }

          if (this.get('categories')) {
            this.set('expanded', true);
          }
          var self = this,
              $dropdown = this.$()[0];

          this.$('a[data-drop-close]').on('click.category-drop', function() {
            self.close();
          });

          $('html').on('click.category-drop', function(e) {
            var $target = $(e.target),
                closest = $target.closest($dropdown);

            return ($(e.currentTarget).hasClass('badge-category') || (closest.length && closest[0] === $dropdown)) ? true : self.close();
          });
        }
      },

      close: function() {
        $('html').off('click.category-drop');
        this.$('a[data-drop-close]').off('click.category-drop');
        this.set('expanded', false);
      },

      willDestroyElement: function() {
        $('html').off('click.category-drop');
        this.$('a[data-drop-close]').off('click.category-drop');
      }

    });
  });

Discourse.CategoryDropComponent = require('discourse/components/category-drop').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/category-drop.js'] = "define(\"discourse/components/category-drop\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      Renders a drop down for selecting a category\n\n      @class CategoryDropComponent\n      @extends Ember.Component\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Ember.Component.extend({\n      classNameBindings: ['category::no-category', 'categories:has-drop'],\n      tagName: 'li',\n\n      iconClass: function() {\n        if (this.get('expanded')) { return \"fa fa-caret-down\"; }\n        return \"fa fa-caret-right\";\n      }.property('expanded'),\n\n      allCategoriesUrl: function() {\n        if (this.get('subCategory')) {\n          return this.get('parentCategory.url') || \"/\";\n        } else {\n          return \"/\";\n        }\n      }.property('parentCategory.url', 'subCategory'),\n\n      noCategoriesUrl: function() {\n        return this.get('parentCategory.url') + \"/none\";\n      }.property('parentCategory.url'),\n\n      allCategoriesLabel: function() {\n        if (this.get('subCategory')) {\n          return I18n.t('categories.all_subcategories', {categoryName: this.get('parentCategory.name')});\n        }\n        return I18n.t('categories.all');\n      }.property('category'),\n\n      dropdownButtonClass: function() {\n        var result = 'badge-category category-dropdown-button';\n        if (Em.isNone(this.get('category'))) {\n          result += ' home';\n        }\n        return result;\n      }.property('category'),\n\n      badgeStyle: function() {\n        var category = this.get('category');\n        if (category) {\n          return Discourse.HTML.categoryStyle(category);\n        } else {\n          return \"background-color: #eee; color: #333\";\n        }\n      }.property('category'),\n\n      actions: {\n        expand: function() {\n          if (this.get('expanded')) {\n            this.close();\n            return;\n          }\n\n          if (this.get('categories')) {\n            this.set('expanded', true);\n          }\n          var self = this,\n              $dropdown = this.$()[0];\n\n          this.$('a[data-drop-close]').on('click.category-drop', function() {\n            self.close();\n          });\n\n          $('html').on('click.category-drop', function(e) {\n            var $target = $(e.target),\n                closest = $target.closest($dropdown);\n\n            return ($(e.currentTarget).hasClass('badge-category') || (closest.length \u0026\u0026 closest[0] === $dropdown)) ? true : self.close();\n          });\n        }\n      },\n\n      close: function() {\n        $('html').off('click.category-drop');\n        this.$('a[data-drop-close]').off('click.category-drop');\n        this.set('expanded', false);\n      },\n\n      willDestroyElement: function() {\n        $('html').off('click.category-drop');\n        this.$('a[data-drop-close]').off('click.category-drop');\n      }\n\n    });\n  });";
define("discourse/components/category-group", 
  ["exports"],
  function(__exports__) {
    "use strict";
    // Compile and memoize a template
    var compiled;
    function templateFunction() {
      compiled = compiled || Handlebars.compile("<div class='autocomplete'>" +
                                    "<ul>" +
                                    "{{#each options}}" +
                                      "<li>" +
                                          "{{category-link-raw this allowUncategorized=true}}" +
                                      "</li>" +
                                      "{{/each}}" +
                                    "</ul>" +
                                  "</div>");
      return compiled;
    }

    __exports__["default"] = Ember.Component.extend({

      didInsertElement: function(){
        var self = this;

        this.$('input').autocomplete({
          items: this.get('categories'),
          single: false,
          allowAny: false,
          dataSource: function(term){
            return Discourse.Category.list().filter(function(category){
              var regex = new RegExp(term, "i");
              return category.get("name").match(regex) &&
                !_.contains(self.get('blacklist') || [], category) &&
                !_.contains(self.get('categories'), category) ;
            });
          },
          onChangeItems: function(items) {
            var categories = _.map(items, function(link) {
              var slug = link.match(/href=['"]\/category\/([^'"]+)/)[1];
              return Discourse.Category.findSingleBySlug(slug);
            });
            self.set("categories", categories);
          },
          template: templateFunction(),
          transformComplete: function(category) {
            return Discourse.HTML.categoryBadge(category, {allowUncategorized: true});
          }
        });
      }
    });
  });

Discourse.CategoryGroupComponent = require('discourse/components/category-group').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/category-group.js'] = "define(\"discourse/components/category-group\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    // Compile and memoize a template\n    var compiled;\n    function templateFunction() {\n      compiled = compiled || Handlebars.compile(\"\u003cdiv class='autocomplete'\u003e\" +\n                                    \"\u003cul\u003e\" +\n                                    \"{{#each options}}\" +\n                                      \"\u003cli\u003e\" +\n                                          \"{{category-link-raw this allowUncategorized=true}}\" +\n                                      \"\u003c/li\u003e\" +\n                                      \"{{/each}}\" +\n                                    \"\u003c/ul\u003e\" +\n                                  \"\u003c/div\u003e\");\n      return compiled;\n    }\n\n    __exports__[\"default\"] = Ember.Component.extend({\n\n      didInsertElement: function(){\n        var self = this;\n\n        this.$('input').autocomplete({\n          items: this.get('categories'),\n          single: false,\n          allowAny: false,\n          dataSource: function(term){\n            return Discourse.Category.list().filter(function(category){\n              var regex = new RegExp(term, \"i\");\n              return category.get(\"name\").match(regex) \u0026\u0026\n                !_.contains(self.get('blacklist') || [], category) \u0026\u0026\n                !_.contains(self.get('categories'), category) ;\n            });\n          },\n          onChangeItems: function(items) {\n            var categories = _.map(items, function(link) {\n              var slug = link.match(/href=['\"]\\/category\\/([^'\"]+)/)[1];\n              return Discourse.Category.findSingleBySlug(slug);\n            });\n            self.set(\"categories\", categories);\n          },\n          template: templateFunction(),\n          transformComplete: function(category) {\n            return Discourse.HTML.categoryBadge(category, {allowUncategorized: true});\n          }\n        });\n      }\n    });\n  });";
define("discourse/components/category-title-link", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Em.Component.extend({
      tagName: 'h3',

      render: function(buffer) {
        var category = this.get('category'),
            logoUrl = category.get('logo_url');

        if (category.get('read_restricted')) {
          buffer.push("<i class='fa fa-group'></i> ");
        }

        buffer.push("<a href='" + Discourse.getURL('/category/') + Discourse.Category.slugFor(category) + "'>");

        var noLogo = Em.isEmpty(logoUrl);
        buffer.push(Handlebars.Utils.escapeExpression(category.get('name')));
        if (!noLogo) {
          buffer.push("<br><img src='" + logoUrl + "' class='category-logo'>");
        }
        buffer.push("</a>");
      }
    });
  });

Discourse.CategoryTitleLinkComponent = require('discourse/components/category-title-link').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/category-title-link.js'] = "define(\"discourse/components/category-title-link\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Em.Component.extend({\n      tagName: 'h3',\n\n      render: function(buffer) {\n        var category = this.get('category'),\n            logoUrl = category.get('logo_url');\n\n        if (category.get('read_restricted')) {\n          buffer.push(\"\u003ci class='fa fa-group'\u003e\u003c/i\u003e \");\n        }\n\n        buffer.push(\"\u003ca href='\" + Discourse.getURL('/category/') + Discourse.Category.slugFor(category) + \"'\u003e\");\n\n        var noLogo = Em.isEmpty(logoUrl);\n        buffer.push(Handlebars.Utils.escapeExpression(category.get('name')));\n        if (!noLogo) {\n          buffer.push(\"\u003cbr\u003e\u003cimg src='\" + logoUrl + \"' class='category-logo'\u003e\");\n        }\n        buffer.push(\"\u003c/a\u003e\");\n      }\n    });\n  });";
define("discourse/components/color-picker", 
  ["discourse/views/container","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var DiscourseContainerView = __dependency1__["default"];

    __exports__["default"] = DiscourseContainerView.extend({
      classNames: 'colors-container',

      _createButtons: function() {
        var colors = this.get('colors'),
            isUsed, usedColors = this.get('usedColors') || [];

        if (!colors) return;

        var self = this;
        colors.forEach(function(color) {
          isUsed = usedColors.indexOf(color.toUpperCase()) >= 0;

          self.attachViewWithArgs({
            tagName: 'button',
            attributeBindings: ['style', 'title'],
            classNames: ['colorpicker'].concat( isUsed ? ['used-color'] : ['unused-color'] ),
            style: 'background-color: #' + color + ';',
            title: isUsed ? I18n.t("category.already_used") : null,
            click: function() {
              self.set("value", color);
              return false;
            }
          });

        });
      }.on('init')
    });
  });

Discourse.ColorPickerComponent = require('discourse/components/color-picker').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/color-picker.js'] = "define(\"discourse/components/color-picker\", \n  [\"discourse/views/container\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DiscourseContainerView = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = DiscourseContainerView.extend({\n      classNames: 'colors-container',\n\n      _createButtons: function() {\n        var colors = this.get('colors'),\n            isUsed, usedColors = this.get('usedColors') || [];\n\n        if (!colors) return;\n\n        var self = this;\n        colors.forEach(function(color) {\n          isUsed = usedColors.indexOf(color.toUpperCase()) \u003e= 0;\n\n          self.attachViewWithArgs({\n            tagName: 'button',\n            attributeBindings: ['style', 'title'],\n            classNames: ['colorpicker'].concat( isUsed ? ['used-color'] : ['unused-color'] ),\n            style: 'background-color: #' + color + ';',\n            title: isUsed ? I18n.t(\"category.already_used\") : null,\n            click: function() {\n              self.set(\"value\", color);\n              return false;\n            }\n          });\n\n        });\n      }.on('init')\n    });\n  });";
define("discourse/components/composer-text-area", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.TextArea.extend({
      elementId: 'wmd-input',

      placeholder: function() {
        return I18n.t('composer.reply_placeholder');
      }.property('placeholderKey'),

      _signalParentInsert: function() {
        return this.get('parentView').childDidInsertElement(this);
      }.on('didInsertElement'),

      _signalParentDestroy: function() {
        return this.get('parentView').childWillDestroyElement(this);
      }.on('willDestroyElement')
    });
  });

Discourse.ComposerTextAreaComponent = require('discourse/components/composer-text-area').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/composer-text-area.js'] = "define(\"discourse/components/composer-text-area\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.TextArea.extend({\n      elementId: 'wmd-input',\n\n      placeholder: function() {\n        return I18n.t('composer.reply_placeholder');\n      }.property('placeholderKey'),\n\n      _signalParentInsert: function() {\n        return this.get('parentView').childDidInsertElement(this);\n      }.on('didInsertElement'),\n\n      _signalParentDestroy: function() {\n        return this.get('parentView').childWillDestroyElement(this);\n      }.on('willDestroyElement')\n    });\n  });";
define("discourse/components/discourse-action-history", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      This component handles rendering of what actions have been taken on a post. It uses
      buffer rendering for performance rather than a template.

      @class ActionsHistoryComponent
      @extends Em.Component
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Em.Component.extend({
      tagName: 'section',
      classNameBindings: [':post-actions', 'hidden'],
      actionsHistory: Em.computed.alias('post.actionsHistory'),
      emptyHistory: Em.computed.empty('actionsHistory'),
      hidden: Em.computed.and('emptyHistory', 'post.notDeleted'),
      shouldRerender: Discourse.View.renderIfChanged('actionsHistory.@each', 'actionsHistory.users.length', 'post.deleted'),

      // This was creating way too many bound ifs and subviews in the handlebars version.
      render: function(buffer) {

        if (!this.get('emptyHistory')) {
          this.get('actionsHistory').forEach(function(c) {
            buffer.push("<div class='post-action'>");

            var renderActionIf = function(property, dataAttribute, text) {
              if (!c.get(property)) { return; }
              buffer.push(" <span class='action-link " + dataAttribute  +"-action'><a href='#' data-" + dataAttribute + "='" + c.get('id') + "'>" + text + "</a>.</span>");
            };

            // TODO multi line expansion for flags
            var iconsHtml = "";
            if (c.get('usersExpanded')) {
              var postUrl;
              c.get('users').forEach(function(u) {
                iconsHtml += "<a href=\"" + Discourse.getURL("/users/") + (u.get('username_lower')) + "\">";
                if (u.post_url) {
                  postUrl = postUrl || u.post_url;
                }
                iconsHtml += Discourse.Utilities.avatarImg({
                  size: 'small',
                  avatarTemplate: u.get('avatarTemplate'),
                  title: u.get('username')
                });
                iconsHtml += "</a>";
              });

              var key = 'post.actions.people.' + c.get('actionType.name_key');
              if (postUrl) { key = key + "_with_url"; }

              // TODO postUrl might be uninitialized? pick a good default
              buffer.push(" " + I18n.t(key, { icons: iconsHtml, postUrl: postUrl}) + ".");
            }
            renderActionIf('usersCollapsed', 'who-acted', c.get('description'));
            renderActionIf('canAlsoAction', 'act', I18n.t("post.actions.it_too." + c.get('actionType.name_key')));
            renderActionIf('can_undo', 'undo', I18n.t("post.actions.undo." + c.get('actionType.name_key')));
            renderActionIf('can_defer_flags', 'defer-flags', I18n.t("post.actions.defer_flags", { count: c.count }));

            buffer.push("</div>");
          });
        }

        var post = this.get('post');
        if (post.get('deleted')) {
          buffer.push("<div class='post-action'>" +
                      "<i class='fa fa-trash-o'></i>&nbsp;" +
                      Discourse.Utilities.tinyAvatar(post.get('postDeletedBy.avatar_template'), {title: post.get('postDeletedBy.username')}) +
                      Discourse.Formatter.autoUpdatingRelativeAge(new Date(post.get('postDeletedAt'))) +
                      "</div>");
        }
      },

      actionTypeById: function(actionTypeId) {
        return this.get('actionsHistory').findProperty('id', actionTypeId);
      },

      click: function(e) {
        var $target = $(e.target),
            actionTypeId;

        if (actionTypeId = $target.data('defer-flags')) {
          this.actionTypeById(actionTypeId).deferFlags();
          return false;
        }

        // User wants to know who actioned it
        if (actionTypeId = $target.data('who-acted')) {
          this.actionTypeById(actionTypeId).loadUsers();
          return false;
        }

        if (actionTypeId = $target.data('act')) {
          this.get('actionsHistory').findProperty('id', actionTypeId).act();
          return false;
        }

        if (actionTypeId = $target.data('undo')) {
          this.get('actionsHistory').findProperty('id', actionTypeId).undo();
          return false;
        }

        return false;
      }
    });
  });

Discourse.DiscourseActionHistoryComponent = require('discourse/components/discourse-action-history').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/discourse-action-history.js'] = "define(\"discourse/components/discourse-action-history\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      This component handles rendering of what actions have been taken on a post. It uses\n      buffer rendering for performance rather than a template.\n\n      @class ActionsHistoryComponent\n      @extends Em.Component\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Em.Component.extend({\n      tagName: 'section',\n      classNameBindings: [':post-actions', 'hidden'],\n      actionsHistory: Em.computed.alias('post.actionsHistory'),\n      emptyHistory: Em.computed.empty('actionsHistory'),\n      hidden: Em.computed.and('emptyHistory', 'post.notDeleted'),\n      shouldRerender: Discourse.View.renderIfChanged('actionsHistory.@each', 'actionsHistory.users.length', 'post.deleted'),\n\n      // This was creating way too many bound ifs and subviews in the handlebars version.\n      render: function(buffer) {\n\n        if (!this.get('emptyHistory')) {\n          this.get('actionsHistory').forEach(function(c) {\n            buffer.push(\"\u003cdiv class='post-action'\u003e\");\n\n            var renderActionIf = function(property, dataAttribute, text) {\n              if (!c.get(property)) { return; }\n              buffer.push(\" \u003cspan class='action-link \" + dataAttribute  +\"-action'\u003e\u003ca href='#' data-\" + dataAttribute + \"='\" + c.get('id') + \"'\u003e\" + text + \"\u003c/a\u003e.\u003c/span\u003e\");\n            };\n\n            // TODO multi line expansion for flags\n            var iconsHtml = \"\";\n            if (c.get('usersExpanded')) {\n              var postUrl;\n              c.get('users').forEach(function(u) {\n                iconsHtml += \"\u003ca href=\\\"\" + Discourse.getURL(\"/users/\") + (u.get('username_lower')) + \"\\\"\u003e\";\n                if (u.post_url) {\n                  postUrl = postUrl || u.post_url;\n                }\n                iconsHtml += Discourse.Utilities.avatarImg({\n                  size: 'small',\n                  avatarTemplate: u.get('avatarTemplate'),\n                  title: u.get('username')\n                });\n                iconsHtml += \"\u003c/a\u003e\";\n              });\n\n              var key = 'post.actions.people.' + c.get('actionType.name_key');\n              if (postUrl) { key = key + \"_with_url\"; }\n\n              // TODO postUrl might be uninitialized? pick a good default\n              buffer.push(\" \" + I18n.t(key, { icons: iconsHtml, postUrl: postUrl}) + \".\");\n            }\n            renderActionIf('usersCollapsed', 'who-acted', c.get('description'));\n            renderActionIf('canAlsoAction', 'act', I18n.t(\"post.actions.it_too.\" + c.get('actionType.name_key')));\n            renderActionIf('can_undo', 'undo', I18n.t(\"post.actions.undo.\" + c.get('actionType.name_key')));\n            renderActionIf('can_defer_flags', 'defer-flags', I18n.t(\"post.actions.defer_flags\", { count: c.count }));\n\n            buffer.push(\"\u003c/div\u003e\");\n          });\n        }\n\n        var post = this.get('post');\n        if (post.get('deleted')) {\n          buffer.push(\"\u003cdiv class='post-action'\u003e\" +\n                      \"\u003ci class='fa fa-trash-o'\u003e\u003c/i\u003e\u0026nbsp;\" +\n                      Discourse.Utilities.tinyAvatar(post.get('postDeletedBy.avatar_template'), {title: post.get('postDeletedBy.username')}) +\n                      Discourse.Formatter.autoUpdatingRelativeAge(new Date(post.get('postDeletedAt'))) +\n                      \"\u003c/div\u003e\");\n        }\n      },\n\n      actionTypeById: function(actionTypeId) {\n        return this.get('actionsHistory').findProperty('id', actionTypeId);\n      },\n\n      click: function(e) {\n        var $target = $(e.target),\n            actionTypeId;\n\n        if (actionTypeId = $target.data('defer-flags')) {\n          this.actionTypeById(actionTypeId).deferFlags();\n          return false;\n        }\n\n        // User wants to know who actioned it\n        if (actionTypeId = $target.data('who-acted')) {\n          this.actionTypeById(actionTypeId).loadUsers();\n          return false;\n        }\n\n        if (actionTypeId = $target.data('act')) {\n          this.get('actionsHistory').findProperty('id', actionTypeId).act();\n          return false;\n        }\n\n        if (actionTypeId = $target.data('undo')) {\n          this.get('actionsHistory').findProperty('id', actionTypeId).undo();\n          return false;\n        }\n\n        return false;\n      }\n    });\n  });";
define("discourse/components/discourse-banner", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Component.extend({

      visible: function () {
        var bannerKey = this.get("banner.key"),
            dismissedBannerKey = this.get("user.dismissed_banner_key") ||
                                 Discourse.KeyValueStore.get("dismissed_banner_key");

        if (bannerKey) { bannerKey = parseInt(bannerKey, 10); }
        if (dismissedBannerKey) { dismissedBannerKey = parseInt(dismissedBannerKey, 10); }

        return bannerKey && dismissedBannerKey !== bannerKey;
      }.property("user.dismissed_banner_key", "banner.key"),

      actions: {
        dismiss: function () {
          if (this.get("user")) {
            this.get("user").dismissBanner(this.get("banner.key"));
          } else {
            this.set("visible", false);
            Discourse.KeyValueStore.set({ key: "dismissed_banner_key", value: this.get("banner.key") });
          }
        }
      }

    });
  });

Discourse.DiscourseBannerComponent = require('discourse/components/discourse-banner').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/discourse-banner.js'] = "define(\"discourse/components/discourse-banner\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Component.extend({\n\n      visible: function () {\n        var bannerKey = this.get(\"banner.key\"),\n            dismissedBannerKey = this.get(\"user.dismissed_banner_key\") ||\n                                 Discourse.KeyValueStore.get(\"dismissed_banner_key\");\n\n        if (bannerKey) { bannerKey = parseInt(bannerKey, 10); }\n        if (dismissedBannerKey) { dismissedBannerKey = parseInt(dismissedBannerKey, 10); }\n\n        return bannerKey \u0026\u0026 dismissedBannerKey !== bannerKey;\n      }.property(\"user.dismissed_banner_key\", \"banner.key\"),\n\n      actions: {\n        dismiss: function () {\n          if (this.get(\"user\")) {\n            this.get(\"user\").dismissBanner(this.get(\"banner.key\"));\n          } else {\n            this.set(\"visible\", false);\n            Discourse.KeyValueStore.set({ key: \"dismissed_banner_key\", value: this.get(\"banner.key\") });\n          }\n        }\n      }\n\n    });\n  });";
define("discourse/components/edit-category-tab", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Em.Component.extend({
      tagName: 'li',
      classNameBindings: ['active'],

      active: Discourse.computed.propertyEqual('selectedTab', 'tab'),
      title: Discourse.computed.i18n('tab', 'category.%@'),

      _insertInParent: function() {
        this.get('parentView.panels').addObject(this.get('tab'));
      }.on('didInsertElement'),

      actions: {
        select: function() {
          this.set('selectedTab', this.get('tab'));
        }
      }
    });
  });

Discourse.EditCategoryTabComponent = require('discourse/components/edit-category-tab').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/edit-category-tab.js'] = "define(\"discourse/components/edit-category-tab\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Em.Component.extend({\n      tagName: 'li',\n      classNameBindings: ['active'],\n\n      active: Discourse.computed.propertyEqual('selectedTab', 'tab'),\n      title: Discourse.computed.i18n('tab', 'category.%@'),\n\n      _insertInParent: function() {\n        this.get('parentView.panels').addObject(this.get('tab'));\n      }.on('didInsertElement'),\n\n      actions: {\n        select: function() {\n          this.set('selectedTab', this.get('tab'));\n        }\n      }\n    });\n  });";
define("discourse/components/group-selector", 
  ["exports"],
  function(__exports__) {
    "use strict";
    var compiled;

    function templateFunction() {
      compiled = compiled || Handlebars.compile(
        "<div class='autocomplete'>" +
          "<ul>" +
          "{{#each options}}" +
            "<li>" +
                "<a href=''>{{this.name}}</a>" +
            "</li>" +
          "{{/each}}" +
          "</ul>" +
          "</div>"
      );
      return compiled;
    }

    __exports__["default"] = Em.Component.extend({
      placeholder: function(){
        return I18n.t(this.get("placeholderKey"));
      }.property("placeholderKey"),

      didInsertElement: function() {
        var self = this;
        var selectedGroups;

        self.$('input').autocomplete({
          allowAny: false,
          onChangeItems: function(items){
            selectedGroups = items;
            self.set("groupNames", items.join(","));
          },
          transformComplete: function(g) {
            return g.name;
          },
          dataSource: function(term) {
            return self.get("groupFinder")(term).then(function(groups){

              if(!selectedGroups){
                return groups;
              }

              return groups.filter(function(group){
                return !selectedGroups.any(function(s){return s === group.name});
              });
            });
          },
          template: templateFunction()
        });
      }
    });
  });

Discourse.GroupSelectorComponent = require('discourse/components/group-selector').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/group-selector.js'] = "define(\"discourse/components/group-selector\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var compiled;\n\n    function templateFunction() {\n      compiled = compiled || Handlebars.compile(\n        \"\u003cdiv class='autocomplete'\u003e\" +\n          \"\u003cul\u003e\" +\n          \"{{#each options}}\" +\n            \"\u003cli\u003e\" +\n                \"\u003ca href=''\u003e{{this.name}}\u003c/a\u003e\" +\n            \"\u003c/li\u003e\" +\n          \"{{/each}}\" +\n          \"\u003c/ul\u003e\" +\n          \"\u003c/div\u003e\"\n      );\n      return compiled;\n    }\n\n    __exports__[\"default\"] = Em.Component.extend({\n      placeholder: function(){\n        return I18n.t(this.get(\"placeholderKey\"));\n      }.property(\"placeholderKey\"),\n\n      didInsertElement: function() {\n        var self = this;\n        var selectedGroups;\n\n        self.$('input').autocomplete({\n          allowAny: false,\n          onChangeItems: function(items){\n            selectedGroups = items;\n            self.set(\"groupNames\", items.join(\",\"));\n          },\n          transformComplete: function(g) {\n            return g.name;\n          },\n          dataSource: function(term) {\n            return self.get(\"groupFinder\")(term).then(function(groups){\n\n              if(!selectedGroups){\n                return groups;\n              }\n\n              return groups.filter(function(group){\n                return !selectedGroups.any(function(s){return s === group.name});\n              });\n            });\n          },\n          template: templateFunction()\n        });\n      }\n    });\n  });";
define("discourse/components/groups-list", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      Displays a list of groups that a user belongs to.

      @class Discourse.GroupsListComponent
      @extends Ember.Component
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Em.Component.extend({
      classNames: ['groups']
    });
  });

Discourse.GroupsListComponent = require('discourse/components/groups-list').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/groups-list.js'] = "define(\"discourse/components/groups-list\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      Displays a list of groups that a user belongs to.\n\n      @class Discourse.GroupsListComponent\n      @extends Ember.Component\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Em.Component.extend({\n      classNames: ['groups']\n    });\n  });";
define("discourse/components/home-logo", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Component.extend({
      classNames: ["title"],

      linkUrl: function() {
        return Discourse.getURL('/');
      }.property(),

      showSmallLogo: function() {
        return !Discourse.Mobile.mobileView && this.get("minimized");
      }.property("minimized"),

      showMobileLogo: function() {
        return Discourse.Mobile.mobileView && !Ember.isBlank(this.get('mobileBigLogoUrl'));
      }.property(),

      smallLogoUrl: Discourse.computed.setting('logo_small_url'),
      bigLogoUrl: Discourse.computed.setting('logo_url'),
      mobileBigLogoUrl: Discourse.computed.setting('mobile_logo_url'),
      title: Discourse.computed.setting('title'),

      click: function(e) {
        // if they want to open in a new tab, let it so
        if (e.shiftKey || e.metaKey || e.ctrlKey || e.which === 2) { return true; }

        e.preventDefault();

        // When you click the logo, never use a cached list
        var session = Discourse.Session.current();
        session.setProperties({topicList: null, topicListScrollPosition: null});

        Discourse.URL.routeTo('/');
        return false;
      }
    });
  });

Discourse.HomeLogoComponent = require('discourse/components/home-logo').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/home-logo.js'] = "define(\"discourse/components/home-logo\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Component.extend({\n      classNames: [\"title\"],\n\n      linkUrl: function() {\n        return Discourse.getURL('/');\n      }.property(),\n\n      showSmallLogo: function() {\n        return !Discourse.Mobile.mobileView \u0026\u0026 this.get(\"minimized\");\n      }.property(\"minimized\"),\n\n      showMobileLogo: function() {\n        return Discourse.Mobile.mobileView \u0026\u0026 !Ember.isBlank(this.get('mobileBigLogoUrl'));\n      }.property(),\n\n      smallLogoUrl: Discourse.computed.setting('logo_small_url'),\n      bigLogoUrl: Discourse.computed.setting('logo_url'),\n      mobileBigLogoUrl: Discourse.computed.setting('mobile_logo_url'),\n      title: Discourse.computed.setting('title'),\n\n      click: function(e) {\n        // if they want to open in a new tab, let it so\n        if (e.shiftKey || e.metaKey || e.ctrlKey || e.which === 2) { return true; }\n\n        e.preventDefault();\n\n        // When you click the logo, never use a cached list\n        var session = Discourse.Session.current();\n        session.setProperties({topicList: null, topicListScrollPosition: null});\n\n        Discourse.URL.routeTo('/');\n        return false;\n      }\n    });\n  });";
define("discourse/components/image-uploader", 
  ["discourse/mixins/upload","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var UploadMixin = __dependency1__["default"];

    __exports__["default"] = Em.Component.extend(UploadMixin, {

      backgroundStyle: function() {
        var imageUrl = this.get('imageUrl');
        if (Em.isNone(imageUrl)) { return; }

        return "background-image: url(" + imageUrl + ")";
      }.property('imageUrl'),

      uploadDone: function(data) {
        this.set('imageUrl', data.result.url);
      },

      actions: {
        trash: function() {
          this.set('imageUrl', null);

          // Do we want to signal the delete to the server right away?
          if (this.get('instantDelete')) {
            Discourse.ajax(this.get('uploadUrl'), {
              type: 'DELETE',
              data: { image_type: this.get('type') }
            }).then(null, function() {
              bootbox.alert(I18n.t('generic_error'));
            });
          }
        }
      }
    });
  });

Discourse.ImageUploaderComponent = require('discourse/components/image-uploader').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/image-uploader.js'] = "define(\"discourse/components/image-uploader\", \n  [\"discourse/mixins/upload\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var UploadMixin = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Em.Component.extend(UploadMixin, {\n\n      backgroundStyle: function() {\n        var imageUrl = this.get('imageUrl');\n        if (Em.isNone(imageUrl)) { return; }\n\n        return \"background-image: url(\" + imageUrl + \")\";\n      }.property('imageUrl'),\n\n      uploadDone: function(data) {\n        this.set('imageUrl', data.result.url);\n      },\n\n      actions: {\n        trash: function() {\n          this.set('imageUrl', null);\n\n          // Do we want to signal the delete to the server right away?\n          if (this.get('instantDelete')) {\n            Discourse.ajax(this.get('uploadUrl'), {\n              type: 'DELETE',\n              data: { image_type: this.get('type') }\n            }).then(null, function() {\n              bootbox.alert(I18n.t('generic_error'));\n            });\n          }\n        }\n      }\n    });\n  });";
define("discourse/components/login-buttons", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Component.extend({
      elementId: 'login-buttons',
      classNameBindings: ['hidden'],

      hidden: Em.computed.equal('buttons.length', 0),

      buttons: function() {
        return Em.get('Discourse.LoginMethod.all');
      }.property(),

      actions: {
        externalLogin: function(provider) {
          this.sendAction('action', provider);
        }
      }
    });
  });

Discourse.LoginButtonsComponent = require('discourse/components/login-buttons').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/login-buttons.js'] = "define(\"discourse/components/login-buttons\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Component.extend({\n      elementId: 'login-buttons',\n      classNameBindings: ['hidden'],\n\n      hidden: Em.computed.equal('buttons.length', 0),\n\n      buttons: function() {\n        return Em.get('Discourse.LoginMethod.all');\n      }.property(),\n\n      actions: {\n        externalLogin: function(provider) {\n          this.sendAction('action', provider);\n        }\n      }\n    });\n  });";
define("discourse/components/navigation-item", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      This view handles rendering of a navigation item

      @class NavigationItemComponent
      @extends Ember.Component
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Ember.Component.extend({
      tagName: 'li',
      classNameBindings: ['active', 'content.hasIcon:has-icon'],
      attributeBindings: ['title'],
      hidden: Em.computed.not('content.visible'),
      shouldRerender: Discourse.View.renderIfChanged('content.count'),

      title: function() {
        var categoryName = this.get('content.categoryName'),
            name = this.get('content.name'),
            extra;

        if (categoryName) {
          extra = { categoryName: categoryName };
          name = "category";
        }
        return I18n.t("filters." + name + ".help", extra);
      }.property("content.name"),

      active: function() {
        return this.get('content.filterMode') === this.get('filterMode') ||
               this.get('filterMode').indexOf(this.get('content.filterMode')) === 0;
      }.property('content.filterMode', 'filterMode'),

      name: function() {
        var categoryName = this.get('content.categoryName'),
            name = this.get('content.name'),
            extra = { count: this.get('content.count') || 0 };

        if (categoryName) {
          name = 'category';
          extra.categoryName = Discourse.Formatter.toTitleCase(categoryName);
        }
        return I18n.t("filters." + name + ".title", extra);
      }.property('content.count'),

      render: function(buffer) {
        var content = this.get('content');
        buffer.push("<a href='" + content.get('href') + "'>");
        if (content.get('hasIcon')) {
          buffer.push("<span class='" + content.get('name') + "'></span>");
        }
        buffer.push(this.get('name'));
        buffer.push("</a>");
      }
    });
  });

Discourse.NavigationItemComponent = require('discourse/components/navigation-item').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/navigation-item.js'] = "define(\"discourse/components/navigation-item\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      This view handles rendering of a navigation item\n\n      @class NavigationItemComponent\n      @extends Ember.Component\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Ember.Component.extend({\n      tagName: 'li',\n      classNameBindings: ['active', 'content.hasIcon:has-icon'],\n      attributeBindings: ['title'],\n      hidden: Em.computed.not('content.visible'),\n      shouldRerender: Discourse.View.renderIfChanged('content.count'),\n\n      title: function() {\n        var categoryName = this.get('content.categoryName'),\n            name = this.get('content.name'),\n            extra;\n\n        if (categoryName) {\n          extra = { categoryName: categoryName };\n          name = \"category\";\n        }\n        return I18n.t(\"filters.\" + name + \".help\", extra);\n      }.property(\"content.name\"),\n\n      active: function() {\n        return this.get('content.filterMode') === this.get('filterMode') ||\n               this.get('filterMode').indexOf(this.get('content.filterMode')) === 0;\n      }.property('content.filterMode', 'filterMode'),\n\n      name: function() {\n        var categoryName = this.get('content.categoryName'),\n            name = this.get('content.name'),\n            extra = { count: this.get('content.count') || 0 };\n\n        if (categoryName) {\n          name = 'category';\n          extra.categoryName = Discourse.Formatter.toTitleCase(categoryName);\n        }\n        return I18n.t(\"filters.\" + name + \".title\", extra);\n      }.property('content.count'),\n\n      render: function(buffer) {\n        var content = this.get('content');\n        buffer.push(\"\u003ca href='\" + content.get('href') + \"'\u003e\");\n        if (content.get('hasIcon')) {\n          buffer.push(\"\u003cspan class='\" + content.get('name') + \"'\u003e\u003c/span\u003e\");\n        }\n        buffer.push(this.get('name'));\n        buffer.push(\"\u003c/a\u003e\");\n      }\n    });\n  });";
define("discourse/components/notification-item", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Component.extend({
      tagName: 'li',
      classNameBindings: ['notification.read'],

      _markRead: function(){
        var self = this;
        this.$('a').click(function(){
          self.set('notification.read', true);
          return true;
        });
      }.on('didInsertElement'),

      render: function(buffer) {
        var notification = this.get('notification'),
            text = I18n.t(this.get('scope'), Em.getProperties(notification, 'description', 'username'));

        var url = notification.get('url');
        if (url) {
          buffer.push('<a href="' + notification.get('url') + '">' + text + '</a>');
        } else {
          buffer.push(text);
        }
      }
    });
  });

Discourse.NotificationItemComponent = require('discourse/components/notification-item').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/notification-item.js'] = "define(\"discourse/components/notification-item\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Component.extend({\n      tagName: 'li',\n      classNameBindings: ['notification.read'],\n\n      _markRead: function(){\n        var self = this;\n        this.$('a').click(function(){\n          self.set('notification.read', true);\n          return true;\n        });\n      }.on('didInsertElement'),\n\n      render: function(buffer) {\n        var notification = this.get('notification'),\n            text = I18n.t(this.get('scope'), Em.getProperties(notification, 'description', 'username'));\n\n        var url = notification.get('url');\n        if (url) {\n          buffer.push('\u003ca href=\"' + notification.get('url') + '\"\u003e' + text + '\u003c/a\u003e');\n        } else {\n          buffer.push(text);\n        }\n      }\n    });\n  });";
define("discourse/components/password-field", 
  ["discourse/components/text-field","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var TextField = __dependency1__["default"];

    /**
      Same as text-field, but with special features for a password input.
      Be sure to test on a variety of browsers and operating systems when changing this logic.

      @class PasswordFieldView
      @extends Discourse.TextFieldView
      @namespace Discourse
      @module Discourse
    **/
    __exports__["default"] = TextField.extend({
      canToggle: false,

      keyPress: function(e) {
        if ((e.which >= 65 && e.which <= 90 && !e.shiftKey) || (e.which >= 97 && e.which <= 122 && e.shiftKey)) {
          this.set('canToggle', true);
          this.set('capsLockOn', true);
        } else if ((e.which >= 65 && e.which <= 90 && e.shiftKey) || (e.which >= 97 && e.which <= 122 && !e.shiftKey)) {
          this.set('canToggle', true);
          this.set('capsLockOn', false);
        }
      },

      keyUp: function(e) {
        if (e.which == 20 && this.get('canToggle')) {
          this.toggleProperty('capsLockOn');
        }
      },

      focusOut: function(e) {
        this.set('capsLockOn', false);
      },

      focusIn: function() {
        this.set('canToggle', false); // can't know the state of caps lock yet. keyPress will figure it out.
      }
    });
  });

Discourse.PasswordFieldComponent = require('discourse/components/password-field').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/password-field.js'] = "define(\"discourse/components/password-field\", \n  [\"discourse/components/text-field\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var TextField = __dependency1__[\"default\"];\n\n    /**\n      Same as text-field, but with special features for a password input.\n      Be sure to test on a variety of browsers and operating systems when changing this logic.\n\n      @class PasswordFieldView\n      @extends Discourse.TextFieldView\n      @namespace Discourse\n      @module Discourse\n    **/\n    __exports__[\"default\"] = TextField.extend({\n      canToggle: false,\n\n      keyPress: function(e) {\n        if ((e.which \u003e= 65 \u0026\u0026 e.which \u003c= 90 \u0026\u0026 !e.shiftKey) || (e.which \u003e= 97 \u0026\u0026 e.which \u003c= 122 \u0026\u0026 e.shiftKey)) {\n          this.set('canToggle', true);\n          this.set('capsLockOn', true);\n        } else if ((e.which \u003e= 65 \u0026\u0026 e.which \u003c= 90 \u0026\u0026 e.shiftKey) || (e.which \u003e= 97 \u0026\u0026 e.which \u003c= 122 \u0026\u0026 !e.shiftKey)) {\n          this.set('canToggle', true);\n          this.set('capsLockOn', false);\n        }\n      },\n\n      keyUp: function(e) {\n        if (e.which == 20 \u0026\u0026 this.get('canToggle')) {\n          this.toggleProperty('capsLockOn');\n        }\n      },\n\n      focusOut: function(e) {\n        this.set('capsLockOn', false);\n      },\n\n      focusIn: function() {\n        this.set('canToggle', false); // can't know the state of caps lock yet. keyPress will figure it out.\n      }\n    });\n  });";
define("discourse/components/post-gap", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      Handles a gap between posts with a click to load more

      @class PostGapComponent
      @extends Ember.Component
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Ember.Component.extend({
      classNameBindings: [':gap', 'gap::hidden'],

      _setup: function() {
        this.set('loading', false);

        var before = this.get('before') === 'true',
            gaps = before ? this.get('postStream.gaps.before') : this.get('postStream.gaps.after');

        if (gaps) {
          this.set('gap', gaps[this.get('post.id')]);
        }
      }.on('init'),

      render: function(buffer) {
        if (this.get('loading')) {
          buffer.push(I18n.t('loading'));
        } else {
          var gapLength = this.get('gap.length');
          if (gapLength) {
            buffer.push(I18n.t('post.gap', {count: gapLength}));
          }
        }
      },

      click: function() {
        if (this.get('loading') || (!this.get('gap'))) { return false; }
        this.set('loading', true);
        this.rerender();

        var self = this,
            postStream = this.get('postStream'),
            filler = this.get('before') === 'true' ? postStream.fillGapBefore : postStream.fillGapAfter;

        filler.call(postStream, this.get('post'), this.get('gap')).then(function() {
          // hide this control after the promise is resolved
          self.set('gap', null);
        });

        return false;
      }
    });
  });

Discourse.PostGapComponent = require('discourse/components/post-gap').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/post-gap.js'] = "define(\"discourse/components/post-gap\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      Handles a gap between posts with a click to load more\n\n      @class PostGapComponent\n      @extends Ember.Component\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Ember.Component.extend({\n      classNameBindings: [':gap', 'gap::hidden'],\n\n      _setup: function() {\n        this.set('loading', false);\n\n        var before = this.get('before') === 'true',\n            gaps = before ? this.get('postStream.gaps.before') : this.get('postStream.gaps.after');\n\n        if (gaps) {\n          this.set('gap', gaps[this.get('post.id')]);\n        }\n      }.on('init'),\n\n      render: function(buffer) {\n        if (this.get('loading')) {\n          buffer.push(I18n.t('loading'));\n        } else {\n          var gapLength = this.get('gap.length');\n          if (gapLength) {\n            buffer.push(I18n.t('post.gap', {count: gapLength}));\n          }\n        }\n      },\n\n      click: function() {\n        if (this.get('loading') || (!this.get('gap'))) { return false; }\n        this.set('loading', true);\n        this.rerender();\n\n        var self = this,\n            postStream = this.get('postStream'),\n            filler = this.get('before') === 'true' ? postStream.fillGapBefore : postStream.fillGapAfter;\n\n        filler.call(postStream, this.get('post'), this.get('gap')).then(function() {\n          // hide this control after the promise is resolved\n          self.set('gap', null);\n        });\n\n        return false;\n      }\n    });\n  });";
define("discourse/components/post-gutter", 
  ["exports"],
  function(__exports__) {
    "use strict";
    var MAX_SHOWN = 5;

    __exports__["default"] = Em.Component.extend({
      classNameBindings: [':gutter'],

      // Roll up links to avoid duplicates
      collapsed: function() {
        var seen = {},
            result = [],
            links = this.get('links');

        if (!Em.isEmpty(links)) {
          links.forEach(function(l) {
            var title = Em.get(l, 'title');
            if (!seen[title]) {
              result.pushObject(l);
              seen[title] = true;
            }
          });
        }
        return result;
      }.property('links'),

      render: function(buffer) {
        var links = this.get('collapsed'),
            toRender = links,
            collapsed = !this.get('expanded');

        if (!Em.isEmpty(links)) {
          if (collapsed) {
            toRender = toRender.slice(0, MAX_SHOWN);
          }

          buffer.push("<ul class='post-links'>");
          toRender.forEach(function(l) {
            var direction = Em.get(l, 'reflection') ? 'left' : 'right',
                clicks = Em.get(l, 'clicks');

            buffer.push("<li><a href='" + Em.get(l, 'url') + "' class='track-link'>");
            buffer.push("<i class='fa fa-arrow-" + direction + "'></i>");
            var title = Em.get(l, 'title');
            if (!Em.isEmpty(title)) {
              buffer.push(Handlebars.Utils.escapeExpression(title));
            }
            if (clicks) {
              buffer.push("<span class='badge badge-notification clicks'>" + clicks + "</span>");
            }
            buffer.push("</a></li>");
          });

          if (collapsed) {
            var remaining = links.length - MAX_SHOWN;
            if (remaining > 0) {
              buffer.push("<li><a href='#' class='toggle-more'>" + I18n.t('post.more_links', {count: remaining}) + "</a></li>");
            }
          }
          buffer.push('</ul>');
        }

        if ((links.length <= MAX_SHOWN || !collapsed) && this.get('canReplyAsNewTopic')) {
          buffer.push("<a href='#' class='reply-new'><i class='fa fa-plus'></i>" + I18n.t('post.reply_as_new_topic') + "</a>");
        }
      },

      _rerenderIfNeeded: function() {
        this.rerender();
      }.observes('expanded'),

      click: function(e) {
        var $target = $(e.target);
        if ($target.hasClass('toggle-more')) {
          this.toggleProperty('expanded');
          return false;
        } else if ($target.closest('.reply-new').length) {
          this.sendAction('newTopicAction', this.get('post'));
          return false;
        }
        return true;
      }
    });
  });

Discourse.PostGutterComponent = require('discourse/components/post-gutter').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/post-gutter.js'] = "define(\"discourse/components/post-gutter\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var MAX_SHOWN = 5;\n\n    __exports__[\"default\"] = Em.Component.extend({\n      classNameBindings: [':gutter'],\n\n      // Roll up links to avoid duplicates\n      collapsed: function() {\n        var seen = {},\n            result = [],\n            links = this.get('links');\n\n        if (!Em.isEmpty(links)) {\n          links.forEach(function(l) {\n            var title = Em.get(l, 'title');\n            if (!seen[title]) {\n              result.pushObject(l);\n              seen[title] = true;\n            }\n          });\n        }\n        return result;\n      }.property('links'),\n\n      render: function(buffer) {\n        var links = this.get('collapsed'),\n            toRender = links,\n            collapsed = !this.get('expanded');\n\n        if (!Em.isEmpty(links)) {\n          if (collapsed) {\n            toRender = toRender.slice(0, MAX_SHOWN);\n          }\n\n          buffer.push(\"\u003cul class='post-links'\u003e\");\n          toRender.forEach(function(l) {\n            var direction = Em.get(l, 'reflection') ? 'left' : 'right',\n                clicks = Em.get(l, 'clicks');\n\n            buffer.push(\"\u003cli\u003e\u003ca href='\" + Em.get(l, 'url') + \"' class='track-link'\u003e\");\n            buffer.push(\"\u003ci class='fa fa-arrow-\" + direction + \"'\u003e\u003c/i\u003e\");\n            var title = Em.get(l, 'title');\n            if (!Em.isEmpty(title)) {\n              buffer.push(Handlebars.Utils.escapeExpression(title));\n            }\n            if (clicks) {\n              buffer.push(\"\u003cspan class='badge badge-notification clicks'\u003e\" + clicks + \"\u003c/span\u003e\");\n            }\n            buffer.push(\"\u003c/a\u003e\u003c/li\u003e\");\n          });\n\n          if (collapsed) {\n            var remaining = links.length - MAX_SHOWN;\n            if (remaining \u003e 0) {\n              buffer.push(\"\u003cli\u003e\u003ca href='#' class='toggle-more'\u003e\" + I18n.t('post.more_links', {count: remaining}) + \"\u003c/a\u003e\u003c/li\u003e\");\n            }\n          }\n          buffer.push('\u003c/ul\u003e');\n        }\n\n        if ((links.length \u003c= MAX_SHOWN || !collapsed) \u0026\u0026 this.get('canReplyAsNewTopic')) {\n          buffer.push(\"\u003ca href='#' class='reply-new'\u003e\u003ci class='fa fa-plus'\u003e\u003c/i\u003e\" + I18n.t('post.reply_as_new_topic') + \"\u003c/a\u003e\");\n        }\n      },\n\n      _rerenderIfNeeded: function() {\n        this.rerender();\n      }.observes('expanded'),\n\n      click: function(e) {\n        var $target = $(e.target);\n        if ($target.hasClass('toggle-more')) {\n          this.toggleProperty('expanded');\n          return false;\n        } else if ($target.closest('.reply-new').length) {\n          this.sendAction('newTopicAction', this.get('post'));\n          return false;\n        }\n        return true;\n      }\n    });\n  });";
define("discourse/components/poster-avatar", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Component.extend({
      tagName: 'a',
      attributeBindings: ['href'],
      classNames: ['trigger-expansion'],
      href: Em.computed.alias('post.usernameUrl'),

      click: function(e) {
        this.appEvents.trigger('poster:expand', $(e.target));
        this.sendAction('action', this.get('post'));
        return false;
      },

      render: function(buffer) {
        var avatar = Handlebars.helpers.avatar(this.get('post'), {hash: {imageSize: 'large'}});
        buffer.push(avatar);
      }
    });
  });

Discourse.PosterAvatarComponent = require('discourse/components/poster-avatar').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/poster-avatar.js'] = "define(\"discourse/components/poster-avatar\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Component.extend({\n      tagName: 'a',\n      attributeBindings: ['href'],\n      classNames: ['trigger-expansion'],\n      href: Em.computed.alias('post.usernameUrl'),\n\n      click: function(e) {\n        this.appEvents.trigger('poster:expand', $(e.target));\n        this.sendAction('action', this.get('post'));\n        return false;\n      },\n\n      render: function(buffer) {\n        var avatar = Handlebars.helpers.avatar(this.get('post'), {hash: {imageSize: 'large'}});\n        buffer.push(avatar);\n      }\n    });\n  });";
define("discourse/components/poster-name", 
  ["exports"],
  function(__exports__) {
    "use strict";
    var PosterNameComponent = Em.Component.extend({
      classNames: ['names', 'trigger-expansion'],
      displayNameOnPosts: Discourse.computed.setting('display_name_on_posts'),

      // sanitize name for comparison
      sanitizeName: function(name){
        return name.toLowerCase().replace(/[\s_-]/g,'');
      },

      render: function(buffer) {
        var post = this.get('post');

        if (post) {
          var name = post.get('name'),
              username = post.get('username'),
              linkClass = 'username',
              primaryGroupName = post.get('primary_group_name'),
              url = post.get('usernameUrl');

          if (post.get('staff')) { linkClass += ' staff'; }
          if (post.get('admin')) { linkClass += ' admin'; }
          if (post.get('moderator')) { linkClass += ' moderator'; }
          if (post.get('new_user')) { linkClass += ' new-user'; }

          if (!Em.isEmpty(primaryGroupName)) {
            linkClass += ' ' + primaryGroupName;
          }
          // Main link
          buffer.push("<span class='" + linkClass + "'><a href='" + url + "' data-auto-route='true'>" + username + "</a>");

          // Add a glyph if we have one
          var glyph = this.posterGlyph(post);
          if (!Em.isEmpty(glyph)) {
            buffer.push(glyph);
          }
          buffer.push("</span>");

          // Are we showing full names?
          if (name && this.get('displayNameOnPosts') && (this.sanitizeName(name) !== this.sanitizeName(username))) {
            name = Handlebars.Utils.escapeExpression(name);
            buffer.push("<span class='full-name'><a href='" + url + "' data-auto-route='true'>" + name + "</a></span>");
          }

          // User titles
          var title = post.get('user_title');
          if (!Em.isEmpty(title)) {

            title = Handlebars.Utils.escapeExpression(title);
            buffer.push('<span class="user-title">');
            if (Em.isEmpty(primaryGroupName)) {
              buffer.push(title);
            } else {
              buffer.push("<a href='/groups/" + post.get('primary_group_name') + "' class='user-group'>" + title + "</a>");
            }
            buffer.push("</span>");
          }

          PosterNameComponent.trigger('renderedName', buffer, post);
        }
      },

      click: function(e) {
        var $target = $(e.target),
            href = $target.attr('href'),
            url = this.get('post.usernameUrl');

        if (!Em.isEmpty(href) && href !== url) {
          return true;
        } else  {
          this.appEvents.trigger('poster:expand', $target);
          this.sendAction('expandAction', this.get('post'));
        }
        return false;
      },

      /**
        Overwrite this to give a user a custom font awesome glyph.

        @method posterGlyph
        @param {Post} the related post.
        @return {String} the glyph to render (or null for none)
      **/
      posterGlyph: function(post) {
        var desc;

        if(post.get('admin')) {
          desc = I18n.t('user.admin_tooltip');
          return '<i class="fa fa-shield" title="' + desc +  '" alt="' + desc + '"></i>';
        } else if(post.get('moderator')) {
          desc = I18n.t('user.moderator_tooltip');
          return '<i class="fa fa-shield" title="' + desc +  '" alt="' + desc + '"></i>';
        }
      }
    });

    // Support for event triggering
    PosterNameComponent.reopenClass(Em.Evented);

    __exports__["default"] = PosterNameComponent;
  });

Discourse.PosterNameComponent = require('discourse/components/poster-name').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/poster-name.js'] = "define(\"discourse/components/poster-name\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var PosterNameComponent = Em.Component.extend({\n      classNames: ['names', 'trigger-expansion'],\n      displayNameOnPosts: Discourse.computed.setting('display_name_on_posts'),\n\n      // sanitize name for comparison\n      sanitizeName: function(name){\n        return name.toLowerCase().replace(/[\\s_-]/g,'');\n      },\n\n      render: function(buffer) {\n        var post = this.get('post');\n\n        if (post) {\n          var name = post.get('name'),\n              username = post.get('username'),\n              linkClass = 'username',\n              primaryGroupName = post.get('primary_group_name'),\n              url = post.get('usernameUrl');\n\n          if (post.get('staff')) { linkClass += ' staff'; }\n          if (post.get('admin')) { linkClass += ' admin'; }\n          if (post.get('moderator')) { linkClass += ' moderator'; }\n          if (post.get('new_user')) { linkClass += ' new-user'; }\n\n          if (!Em.isEmpty(primaryGroupName)) {\n            linkClass += ' ' + primaryGroupName;\n          }\n          // Main link\n          buffer.push(\"\u003cspan class='\" + linkClass + \"'\u003e\u003ca href='\" + url + \"' data-auto-route='true'\u003e\" + username + \"\u003c/a\u003e\");\n\n          // Add a glyph if we have one\n          var glyph = this.posterGlyph(post);\n          if (!Em.isEmpty(glyph)) {\n            buffer.push(glyph);\n          }\n          buffer.push(\"\u003c/span\u003e\");\n\n          // Are we showing full names?\n          if (name \u0026\u0026 this.get('displayNameOnPosts') \u0026\u0026 (this.sanitizeName(name) !== this.sanitizeName(username))) {\n            name = Handlebars.Utils.escapeExpression(name);\n            buffer.push(\"\u003cspan class='full-name'\u003e\u003ca href='\" + url + \"' data-auto-route='true'\u003e\" + name + \"\u003c/a\u003e\u003c/span\u003e\");\n          }\n\n          // User titles\n          var title = post.get('user_title');\n          if (!Em.isEmpty(title)) {\n\n            title = Handlebars.Utils.escapeExpression(title);\n            buffer.push('\u003cspan class=\"user-title\"\u003e');\n            if (Em.isEmpty(primaryGroupName)) {\n              buffer.push(title);\n            } else {\n              buffer.push(\"\u003ca href='/groups/\" + post.get('primary_group_name') + \"' class='user-group'\u003e\" + title + \"\u003c/a\u003e\");\n            }\n            buffer.push(\"\u003c/span\u003e\");\n          }\n\n          PosterNameComponent.trigger('renderedName', buffer, post);\n        }\n      },\n\n      click: function(e) {\n        var $target = $(e.target),\n            href = $target.attr('href'),\n            url = this.get('post.usernameUrl');\n\n        if (!Em.isEmpty(href) \u0026\u0026 href !== url) {\n          return true;\n        } else  {\n          this.appEvents.trigger('poster:expand', $target);\n          this.sendAction('expandAction', this.get('post'));\n        }\n        return false;\n      },\n\n      /**\n        Overwrite this to give a user a custom font awesome glyph.\n\n        @method posterGlyph\n        @param {Post} the related post.\n        @return {String} the glyph to render (or null for none)\n      **/\n      posterGlyph: function(post) {\n        var desc;\n\n        if(post.get('admin')) {\n          desc = I18n.t('user.admin_tooltip');\n          return '\u003ci class=\"fa fa-shield\" title=\"' + desc +  '\" alt=\"' + desc + '\"\u003e\u003c/i\u003e';\n        } else if(post.get('moderator')) {\n          desc = I18n.t('user.moderator_tooltip');\n          return '\u003ci class=\"fa fa-shield\" title=\"' + desc +  '\" alt=\"' + desc + '\"\u003e\u003c/i\u003e';\n        }\n      }\n    });\n\n    // Support for event triggering\n    PosterNameComponent.reopenClass(Em.Evented);\n\n    __exports__[\"default\"] = PosterNameComponent;\n  });";
define("discourse/components/posts-count-column", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Component.extend({
      tagName: 'td',
      classNameBindings: [':posts', 'likesHeat'],
      attributeBindings: ['title'],

      ratio: function() {
        var likes = parseFloat(this.get('topic.like_count')),
            posts = parseFloat(this.get('topic.posts_count'));

        if (posts < 10) { return 0; }

        return (likes || 0) / posts;
      }.property('topic.like_count', 'topic.posts_count'),

      title: function() {
        return I18n.messageFormat('posts_likes_MF', {
          count: this.get('topic.posts_count'),
          ratio: this.get('ratioText')
        }).trim();
      }.property('topic.posts_count', 'likesHeat'),

      ratioText: function() {
        var ratio = this.get('ratio');

        if (ratio > Discourse.SiteSettings.topic_post_like_heat_high) { return 'high'; }
        if (ratio > Discourse.SiteSettings.topic_post_like_heat_medium) { return 'med'; }
        if (ratio > Discourse.SiteSettings.topic_post_like_heat_low) { return 'low'; }
        return '';
      }.property('ratio'),

      likesHeat: Discourse.computed.fmt('ratioText', 'heatmap-%@'),

      render: function(buffer) {
        var postsCount = this.get('topic.posts_count');

        buffer.push("<a href class='badge-posts " + this.get('likesHeat') + "'>");
        buffer.push(Discourse.Formatter.number(postsCount));
        buffer.push("</a>");
      },

      click: function() {
        var topic = this.get('topic');

        if (Discourse.Mobile.mobileView) {
          Discourse.URL.routeTo(topic.get('lastPostUrl'));
          return false;
        }

        this.sendAction('action', {
          topic: topic,
          position: this.$('a').position()
        });

        return false;
      }

    });
  });

Discourse.PostsCountColumnComponent = require('discourse/components/posts-count-column').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/posts-count-column.js'] = "define(\"discourse/components/posts-count-column\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Component.extend({\n      tagName: 'td',\n      classNameBindings: [':posts', 'likesHeat'],\n      attributeBindings: ['title'],\n\n      ratio: function() {\n        var likes = parseFloat(this.get('topic.like_count')),\n            posts = parseFloat(this.get('topic.posts_count'));\n\n        if (posts \u003c 10) { return 0; }\n\n        return (likes || 0) / posts;\n      }.property('topic.like_count', 'topic.posts_count'),\n\n      title: function() {\n        return I18n.messageFormat('posts_likes_MF', {\n          count: this.get('topic.posts_count'),\n          ratio: this.get('ratioText')\n        }).trim();\n      }.property('topic.posts_count', 'likesHeat'),\n\n      ratioText: function() {\n        var ratio = this.get('ratio');\n\n        if (ratio \u003e Discourse.SiteSettings.topic_post_like_heat_high) { return 'high'; }\n        if (ratio \u003e Discourse.SiteSettings.topic_post_like_heat_medium) { return 'med'; }\n        if (ratio \u003e Discourse.SiteSettings.topic_post_like_heat_low) { return 'low'; }\n        return '';\n      }.property('ratio'),\n\n      likesHeat: Discourse.computed.fmt('ratioText', 'heatmap-%@'),\n\n      render: function(buffer) {\n        var postsCount = this.get('topic.posts_count');\n\n        buffer.push(\"\u003ca href class='badge-posts \" + this.get('likesHeat') + \"'\u003e\");\n        buffer.push(Discourse.Formatter.number(postsCount));\n        buffer.push(\"\u003c/a\u003e\");\n      },\n\n      click: function() {\n        var topic = this.get('topic');\n\n        if (Discourse.Mobile.mobileView) {\n          Discourse.URL.routeTo(topic.get('lastPostUrl'));\n          return false;\n        }\n\n        this.sendAction('action', {\n          topic: topic,\n          position: this.$('a').position()\n        });\n\n        return false;\n      }\n\n    });\n  });";
define("discourse/components/preference-checkbox", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Em.Component.extend({
      classNames: ['controls'],

      label: function() {
        return I18n.t(this.get('labelKey'));
      }.property('labelKey')
    });
  });

Discourse.PreferenceCheckboxComponent = require('discourse/components/preference-checkbox').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/preference-checkbox.js'] = "define(\"discourse/components/preference-checkbox\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Em.Component.extend({\n      classNames: ['controls'],\n\n      label: function() {\n        return I18n.t(this.get('labelKey'));\n      }.property('labelKey')\n    });\n  });";
define("discourse/components/private-message-map", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      The controls at the top of a private message in the map area.

      @class PrivateMessageMapComponent
      @extends Ember.Component
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Ember.Component.extend({
      layoutName: 'components/private-message-map',
      tagName: 'section',
      classNames: ['information'],
      details: Em.computed.alias('topic.details'),

      actions: {
        removeAllowedUser: function(user) {
          var self = this;
          bootbox.dialog(I18n.t("private_message_info.remove_allowed_user", {name: user.get('username')}), [
            {label: I18n.t("no_value"),
             'class': 'btn-danger rightg'},
            {label: I18n.t("yes_value"),
             'class': 'btn-primary',
              callback: function() {
                self.get('topic.details').removeAllowedUser(user);
              }
            }
          ]);
        },

        showPrivateInvite: function() {
          this.sendAction('showPrivateInviteAction');
        }
      }

    });
  });

Discourse.PrivateMessageMapComponent = require('discourse/components/private-message-map').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/private-message-map.js'] = "define(\"discourse/components/private-message-map\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      The controls at the top of a private message in the map area.\n\n      @class PrivateMessageMapComponent\n      @extends Ember.Component\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Ember.Component.extend({\n      layoutName: 'components/private-message-map',\n      tagName: 'section',\n      classNames: ['information'],\n      details: Em.computed.alias('topic.details'),\n\n      actions: {\n        removeAllowedUser: function(user) {\n          var self = this;\n          bootbox.dialog(I18n.t(\"private_message_info.remove_allowed_user\", {name: user.get('username')}), [\n            {label: I18n.t(\"no_value\"),\n             'class': 'btn-danger rightg'},\n            {label: I18n.t(\"yes_value\"),\n             'class': 'btn-primary',\n              callback: function() {\n                self.get('topic.details').removeAllowedUser(user);\n              }\n            }\n          ]);\n        },\n\n        showPrivateInvite: function() {\n          this.sendAction('showPrivateInviteAction');\n        }\n      }\n\n    });\n  });";
define("discourse/components/radio-button", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Component.extend({
      tagName : "input",
      type : "radio",
      attributeBindings : [ "name", "type", "value", "checked:checked" ],
      click : function() {
        this.set("selection", this.$().val());
      },
      checked : function() {
        return this.get("value") === this.get("selection");
      }.property('selection'),
    });
  });

Discourse.RadioButtonComponent = require('discourse/components/radio-button').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/radio-button.js'] = "define(\"discourse/components/radio-button\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Component.extend({\n      tagName : \"input\",\n      type : \"radio\",\n      attributeBindings : [ \"name\", \"type\", \"value\", \"checked:checked\" ],\n      click : function() {\n        this.set(\"selection\", this.$().val());\n      },\n      checked : function() {\n        return this.get(\"value\") === this.get(\"selection\");\n      }.property('selection'),\n    });\n  });";
define("discourse/components/sortable-heading", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      Renders a heading for a table with optional sorting controls.

      @class SortableHeadingComponent
      @extends Ember.Component
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Ember.Component.extend({
      tagName: 'th',
      classNameBindings: ['number:num', 'sortBy', 'iconSortClass:sorting', 'sortable:sortable'],
      attributeBindings: ['colspan'],

      sortable: function() {
        return this.get('sortBy');
      }.property('sortBy'),

      iconSortClass: function() {
        if (this.get('sortable') && this.get('sortBy') === this.get('order')) {
          return this.get('ascending') ? 'fa fa-chevron-up' : 'fa fa-chevron-down';
        }
      }.property('sortable', 'order', 'ascending'),

      click: function() {
        this.sendAction('action', this.get('sortBy'));
      }
    });
  });

Discourse.SortableHeadingComponent = require('discourse/components/sortable-heading').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/sortable-heading.js'] = "define(\"discourse/components/sortable-heading\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      Renders a heading for a table with optional sorting controls.\n\n      @class SortableHeadingComponent\n      @extends Ember.Component\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Ember.Component.extend({\n      tagName: 'th',\n      classNameBindings: ['number:num', 'sortBy', 'iconSortClass:sorting', 'sortable:sortable'],\n      attributeBindings: ['colspan'],\n\n      sortable: function() {\n        return this.get('sortBy');\n      }.property('sortBy'),\n\n      iconSortClass: function() {\n        if (this.get('sortable') \u0026\u0026 this.get('sortBy') === this.get('order')) {\n          return this.get('ascending') ? 'fa fa-chevron-up' : 'fa fa-chevron-down';\n        }\n      }.property('sortable', 'order', 'ascending'),\n\n      click: function() {\n        this.sendAction('action', this.get('sortBy'));\n      }\n    });\n  });";
define("discourse/components/toggle-deleted", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      The controls for toggling the supression of deleted posts

      @class ToggleDeletedComponent
      @extends Ember.Component
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Ember.Component.extend({
      layoutName: 'components/toggle-deleted',
      tagName: 'section',
      classNames: ['information'],
      postStream: Em.computed.alias('topic.postStream'),

      actions: {
        toggleDeleted: function() {
          this.get('postStream').toggleDeleted();
        }
      }
    });
  });

Discourse.ToggleDeletedComponent = require('discourse/components/toggle-deleted').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/toggle-deleted.js'] = "define(\"discourse/components/toggle-deleted\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      The controls for toggling the supression of deleted posts\n\n      @class ToggleDeletedComponent\n      @extends Ember.Component\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Ember.Component.extend({\n      layoutName: 'components/toggle-deleted',\n      tagName: 'section',\n      classNames: ['information'],\n      postStream: Em.computed.alias('topic.postStream'),\n\n      actions: {\n        toggleDeleted: function() {\n          this.get('postStream').toggleDeleted();\n        }\n      }\n    });\n  });";
define("discourse/components/toggle-summary", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      The controls for toggling the summarized view on/off

      @class ToggleSummaryComponent
      @extends Ember.Component
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Ember.Component.extend({
      layoutName: 'components/toggle-summary',
      tagName: 'section',
      classNames: ['information'],
      postStream: Em.computed.alias('topic.postStream'),

      actions: {
        toggleSummary: function() {
          this.get('postStream').toggleSummary();
        }
      }
    });
  });

Discourse.ToggleSummaryComponent = require('discourse/components/toggle-summary').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/toggle-summary.js'] = "define(\"discourse/components/toggle-summary\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      The controls for toggling the summarized view on/off\n\n      @class ToggleSummaryComponent\n      @extends Ember.Component\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Ember.Component.extend({\n      layoutName: 'components/toggle-summary',\n      tagName: 'section',\n      classNames: ['information'],\n      postStream: Em.computed.alias('topic.postStream'),\n\n      actions: {\n        toggleSummary: function() {\n          this.get('postStream').toggleSummary();\n        }\n      }\n    });\n  });";
define("discourse/components/top-period-buttons", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Component.extend({
      classNames: ['top-title-buttons']
    });
  });

Discourse.TopPeriodButtonsComponent = require('discourse/components/top-period-buttons').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/top-period-buttons.js'] = "define(\"discourse/components/top-period-buttons\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Component.extend({\n      classNames: ['top-title-buttons']\n    });\n  });";
define("discourse/components/top-period-chooser", 
  ["discourse/mixins/cleans-up","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var CleansUp = __dependency1__["default"];

    __exports__["default"] = Ember.Component.extend(CleansUp, {
      classNames: 'period-chooser',
      showPeriods: false,

      cleanUp: function() {
        this.set('showPeriods', false);
        $('html').off('mousedown.top-period');
      },

      _clickToClose: function() {
        var self = this;
        $('html').off('mousedown.top-period').on('mousedown.top-period', function(e) {
          var $target = $(e.target);
          if (($target.prop('id') === 'topic-entrance') || (self.$().has($target).length !== 0)) {
            return;
          }
          self.cleanUp();
        });
      },

      click: function() {
        if (!this.get('showPeriods')) {
          var $chevron = this.$('i.fa-caret-down');
          this.$('#period-popup').css($chevron.position());
          this.set('showPeriods', true);
          this._clickToClose();
        }
      }
    });
  });

Discourse.TopPeriodChooserComponent = require('discourse/components/top-period-chooser').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/top-period-chooser.js'] = "define(\"discourse/components/top-period-chooser\", \n  [\"discourse/mixins/cleans-up\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var CleansUp = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Component.extend(CleansUp, {\n      classNames: 'period-chooser',\n      showPeriods: false,\n\n      cleanUp: function() {\n        this.set('showPeriods', false);\n        $('html').off('mousedown.top-period');\n      },\n\n      _clickToClose: function() {\n        var self = this;\n        $('html').off('mousedown.top-period').on('mousedown.top-period', function(e) {\n          var $target = $(e.target);\n          if (($target.prop('id') === 'topic-entrance') || (self.$().has($target).length !== 0)) {\n            return;\n          }\n          self.cleanUp();\n        });\n      },\n\n      click: function() {\n        if (!this.get('showPeriods')) {\n          var $chevron = this.$('i.fa-caret-down');\n          this.$('#period-popup').css($chevron.position());\n          this.set('showPeriods', true);\n          this._clickToClose();\n        }\n      }\n    });\n  });";
define("discourse/components/top-title-button", 
  ["discourse/components/top-title","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var TopTitle = __dependency1__["default"];

    __exports__["default"] = TopTitle.extend({
      tagName: 'button',
      classNameBindings: [':btn', ':btn-default', 'unless:hidden'],

      click: function() {
        var url = this.get('period.showMoreUrl');
        if (url) {
          Discourse.URL.routeTo(url);
        }
      }
    });
  });

Discourse.TopTitleButtonComponent = require('discourse/components/top-title-button').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/top-title-button.js'] = "define(\"discourse/components/top-title-button\", \n  [\"discourse/components/top-title\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var TopTitle = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = TopTitle.extend({\n      tagName: 'button',\n      classNameBindings: [':btn', ':btn-default', 'unless:hidden'],\n\n      click: function() {\n        var url = this.get('period.showMoreUrl');\n        if (url) {\n          Discourse.URL.routeTo(url);\n        }\n      }\n    });\n  });";
define("discourse/components/topic-map", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      The topic map underneath the first post of a topic.

      @class TopicMapComponent
      @extends Ember.Component
      @namespace Discourse
      @module Discourse
    **/


    var LINKS_SHOWN = 5;

    __exports__["default"] = Ember.Component.extend({
      mapCollapsed: true,
      layoutName: 'components/topic-map',
      details: Em.computed.alias('topic.details'),
      allLinksShown: false,

      init: function() {
        this._super();

        // If the topic has a summary, expand the map by default
        this.set('mapCollapsed', Discourse.Mobile.mobileView || (!this.get('topic.has_summary')));
      },

      showPosterAvatar: Em.computed.gt('topic.posts_count', 2),

      toggleMapClass: function() {
        return this.get('mapCollapsed') ? 'fa fa-chevron-down' : 'fa fa-chevron-up';
      }.property('mapCollapsed'),

      showAllLinksControls: function() {
        if (this.get('allLinksShown')) return false;
        if ((this.get('details.links.length') || 0) <= LINKS_SHOWN) return false;
        return true;
      }.property('allLinksShown', 'topic.details.links'),

      infoLinks: function() {
        var allLinks = this.get('details.links');
        if (Em.isNone(allLinks)) return [];

        if (this.get('allLinksShown')) return allLinks;
        return allLinks.slice(0, LINKS_SHOWN);

      }.property('details.links', 'allLinksShown'),

      actions: {
        toggleMap: function() {
          this.toggleProperty('mapCollapsed');
        },

        showAllLinks: function() {
          this.set('allLinksShown', true);
        }
      }
    });
  });

Discourse.TopicMapComponent = require('discourse/components/topic-map').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/topic-map.js'] = "define(\"discourse/components/topic-map\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      The topic map underneath the first post of a topic.\n\n      @class TopicMapComponent\n      @extends Ember.Component\n      @namespace Discourse\n      @module Discourse\n    **/\n\n\n    var LINKS_SHOWN = 5;\n\n    __exports__[\"default\"] = Ember.Component.extend({\n      mapCollapsed: true,\n      layoutName: 'components/topic-map',\n      details: Em.computed.alias('topic.details'),\n      allLinksShown: false,\n\n      init: function() {\n        this._super();\n\n        // If the topic has a summary, expand the map by default\n        this.set('mapCollapsed', Discourse.Mobile.mobileView || (!this.get('topic.has_summary')));\n      },\n\n      showPosterAvatar: Em.computed.gt('topic.posts_count', 2),\n\n      toggleMapClass: function() {\n        return this.get('mapCollapsed') ? 'fa fa-chevron-down' : 'fa fa-chevron-up';\n      }.property('mapCollapsed'),\n\n      showAllLinksControls: function() {\n        if (this.get('allLinksShown')) return false;\n        if ((this.get('details.links.length') || 0) \u003c= LINKS_SHOWN) return false;\n        return true;\n      }.property('allLinksShown', 'topic.details.links'),\n\n      infoLinks: function() {\n        var allLinks = this.get('details.links');\n        if (Em.isNone(allLinks)) return [];\n\n        if (this.get('allLinksShown')) return allLinks;\n        return allLinks.slice(0, LINKS_SHOWN);\n\n      }.property('details.links', 'allLinksShown'),\n\n      actions: {\n        toggleMap: function() {\n          this.toggleProperty('mapCollapsed');\n        },\n\n        showAllLinks: function() {\n          this.set('allLinksShown', true);\n        }\n      }\n    });\n  });";
define("discourse/components/topic-participant", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Component.extend({

      postStream: Em.computed.alias('participant.topic.postStream'),
      showPostCount: Em.computed.gte('participant.post_count', 2),

      toggled: function() {
        return this.get('postStream.userFilters').contains(this.get('participant.username'));
      }.property('postStream.userFilters.[]'),

      actions: {
        toggle: function() {
          var postStream = this.get('postStream');
          if (postStream) {
            postStream.toggleParticipant(this.get('participant.username'));
          }
        }
      }
    });
  });

Discourse.TopicParticipantComponent = require('discourse/components/topic-participant').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/topic-participant.js'] = "define(\"discourse/components/topic-participant\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Component.extend({\n\n      postStream: Em.computed.alias('participant.topic.postStream'),\n      showPostCount: Em.computed.gte('participant.post_count', 2),\n\n      toggled: function() {\n        return this.get('postStream.userFilters').contains(this.get('participant.username'));\n      }.property('postStream.userFilters.[]'),\n\n      actions: {\n        toggle: function() {\n          var postStream = this.get('postStream');\n          if (postStream) {\n            postStream.toggleParticipant(this.get('participant.username'));\n          }\n        }\n      }\n    });\n  });";
define("discourse/components/topic-post-badges", 
  ["exports"],
  function(__exports__) {
    "use strict";

    // Creates a link
    function link(buffer, prop, url, cssClass, i18nKey, text) {
      if (!prop) { return; }

      var title = I18n.t("topic." + i18nKey, {count: prop});
      buffer.push("<a href='" + url + "' class='badge " + cssClass + " badge-notification' title='" + title + "'>" + (text || prop) + "</a>\n");
    }

    __exports__["default"] = Ember.Component.extend({
      tagName: 'span',
      classNameBindings: [':topic-post-badges'],
      _shouldRerender: Discourse.View.renderIfChanged('url', 'unread', 'newPosts', 'unseen'),

      render: function(buffer) {
        var url = this.get('url');

        link(buffer, this.get('unread'), url, 'unread', 'unread_posts');
        link(buffer, this.get('newPosts'), url, 'new-posts', 'new_posts');
        link(buffer, this.get('unseen'), url, 'new-topic', 'new', I18n.t('filters.new.lower_title'));
      }
    });
  });

Discourse.TopicPostBadgesComponent = require('discourse/components/topic-post-badges').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/topic-post-badges.js'] = "define(\"discourse/components/topic-post-badges\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n\n    // Creates a link\n    function link(buffer, prop, url, cssClass, i18nKey, text) {\n      if (!prop) { return; }\n\n      var title = I18n.t(\"topic.\" + i18nKey, {count: prop});\n      buffer.push(\"\u003ca href='\" + url + \"' class='badge \" + cssClass + \" badge-notification' title='\" + title + \"'\u003e\" + (text || prop) + \"\u003c/a\u003e\\n\");\n    }\n\n    __exports__[\"default\"] = Ember.Component.extend({\n      tagName: 'span',\n      classNameBindings: [':topic-post-badges'],\n      _shouldRerender: Discourse.View.renderIfChanged('url', 'unread', 'newPosts', 'unseen'),\n\n      render: function(buffer) {\n        var url = this.get('url');\n\n        link(buffer, this.get('unread'), url, 'unread', 'unread_posts');\n        link(buffer, this.get('newPosts'), url, 'new-posts', 'new_posts');\n        link(buffer, this.get('unseen'), url, 'new-topic', 'new', I18n.t('filters.new.lower_title'));\n      }\n    });\n  });";
define("discourse/components/topic-status", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      This view is for rendering an icon representing the status of a topic

      @class TopicStatusComponent
      @extends Ember.Component
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Ember.Component.extend({
      classNames: ['topic-statuses'],

      hasDisplayableStatus: Em.computed.or('topic.archived','topic.closed', 'topic.pinned', 'topic.unpinned', 'topic.invisible', 'topic.archetypeObject.notDefault'),
      shouldRerender: Discourse.View.renderIfChanged('topic.archived','topic.closed', 'topic.pinned', 'topic.visible', 'topic.unpinned'),

      didInsertElement: function(){
        var self = this;

        this.$('a').click(function(){
          var topic = self.get('topic');

          // only pin unpin for now
          if (topic.get('pinned')) {
            topic.clearPin();
          } else {
            topic.rePin();
          }

          return false;
        });
      },

      canAct: function() {
        return Discourse.User.current() && !this.get('disableActions');
      }.property('disableActions'),

      render: function(buffer) {
        if (!this.get('hasDisplayableStatus')) { return; }

        var self = this;

        var renderIconIf = function(conditionProp, name, key, actionable) {
          if (!self.get(conditionProp)) { return; }
          var title = I18n.t("topic_statuses." + key + ".help");

          var startTag = actionable ? "a href='#'" : "span";
          var endTag = actionable ? "a" : "span";

          buffer.push("<" + startTag +
            " title='" + title +"' class='topic-status'><i class='fa fa-" + name + "'></i></" + endTag + ">");
        };

        // Allow a plugin to add a custom icon to a topic
        this.trigger('addCustomIcon', buffer);

        renderIconIf('topic.closed', 'lock', 'locked');
        renderIconIf('topic.archived', 'lock', 'archived');
        renderIconIf('topic.pinned', 'thumb-tack', 'pinned', self.get("canAct") );
        renderIconIf('topic.unpinned', 'thumb-tack unpinned', 'unpinned', self.get("canAct"));
        renderIconIf('topic.invisible', 'eye-slash', 'invisible');
      }
    });
  });

Discourse.TopicStatusComponent = require('discourse/components/topic-status').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/topic-status.js'] = "define(\"discourse/components/topic-status\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      This view is for rendering an icon representing the status of a topic\n\n      @class TopicStatusComponent\n      @extends Ember.Component\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Ember.Component.extend({\n      classNames: ['topic-statuses'],\n\n      hasDisplayableStatus: Em.computed.or('topic.archived','topic.closed', 'topic.pinned', 'topic.unpinned', 'topic.invisible', 'topic.archetypeObject.notDefault'),\n      shouldRerender: Discourse.View.renderIfChanged('topic.archived','topic.closed', 'topic.pinned', 'topic.visible', 'topic.unpinned'),\n\n      didInsertElement: function(){\n        var self = this;\n\n        this.$('a').click(function(){\n          var topic = self.get('topic');\n\n          // only pin unpin for now\n          if (topic.get('pinned')) {\n            topic.clearPin();\n          } else {\n            topic.rePin();\n          }\n\n          return false;\n        });\n      },\n\n      canAct: function() {\n        return Discourse.User.current() \u0026\u0026 !this.get('disableActions');\n      }.property('disableActions'),\n\n      render: function(buffer) {\n        if (!this.get('hasDisplayableStatus')) { return; }\n\n        var self = this;\n\n        var renderIconIf = function(conditionProp, name, key, actionable) {\n          if (!self.get(conditionProp)) { return; }\n          var title = I18n.t(\"topic_statuses.\" + key + \".help\");\n\n          var startTag = actionable ? \"a href='#'\" : \"span\";\n          var endTag = actionable ? \"a\" : \"span\";\n\n          buffer.push(\"\u003c\" + startTag +\n            \" title='\" + title +\"' class='topic-status'\u003e\u003ci class='fa fa-\" + name + \"'\u003e\u003c/i\u003e\u003c/\" + endTag + \"\u003e\");\n        };\n\n        // Allow a plugin to add a custom icon to a topic\n        this.trigger('addCustomIcon', buffer);\n\n        renderIconIf('topic.closed', 'lock', 'locked');\n        renderIconIf('topic.archived', 'lock', 'archived');\n        renderIconIf('topic.pinned', 'thumb-tack', 'pinned', self.get(\"canAct\") );\n        renderIconIf('topic.unpinned', 'thumb-tack unpinned', 'unpinned', self.get(\"canAct\"));\n        renderIconIf('topic.invisible', 'eye-slash', 'invisible');\n      }\n    });\n  });";
define("discourse/components/user-badge", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Component.extend({
      tagName: 'span',

      showGrantCount: function() {
        return this.get('count') && this.get('count') > 1;
      }.property('count'),

      isIcon: Em.computed.match('badge.icon', /^fa-/)
    });
  });

Discourse.UserBadgeComponent = require('discourse/components/user-badge').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/user-badge.js'] = "define(\"discourse/components/user-badge\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Component.extend({\n      tagName: 'span',\n\n      showGrantCount: function() {\n        return this.get('count') \u0026\u0026 this.get('count') \u003e 1;\n      }.property('count'),\n\n      isIcon: Em.computed.match('badge.icon', /^fa-/)\n    });\n  });";
define("discourse/components/user-small", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Component.extend({
      classNames: ['user-small']
    });
  });

Discourse.UserSmallComponent = require('discourse/components/user-small').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/components/user-small.js'] = "define(\"discourse/components/user-small\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Component.extend({\n      classNames: ['user-small']\n    });\n  });";
define("discourse/views/activity-filter", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Component.extend({
      tagName: 'li',
      classNameBindings: ['active', 'noGlyph'],

      shouldRerender: Discourse.View.renderIfChanged('content.count', 'count'),
      noGlyph: Em.computed.empty('icon'),

      active: function() {
        var content = this.get('content');
        if (content) {
          return parseInt(this.get('userActionType'), 10) === parseInt(Em.get(content, 'action_type'), 10);
        } else {
          return this.get('indexStream');
        }
      }.property('userActionType', 'indexStream'),

      activityCount: function() {
        return this.get('content.count') || this.get('count') || 0;
      }.property('content.count', 'count'),

      typeKey: function() {
        var actionType = this.get('content.action_type');
        if (actionType === Discourse.UserAction.TYPES.messages_received) { return ""; }

        var result = Discourse.UserAction.TYPES_INVERTED[actionType];
        if (!result) { return ""; }

        // We like our URLS to have hyphens, not underscores
        return "/" + result.replace("_", "-");
      }.property('content.action_type'),

      url: function() {
        return "/users/" + this.get('user.username_lower') + "/activity" + this.get('typeKey');
      }.property('typeKey', 'user.username_lower'),

      description: function() {
        return this.get('content.description') || I18n.t("user.filters.all");
      }.property('content.description'),

      render: function(buffer) {
        buffer.push("<a href='" + this.get('url') + "'>");
        var icon = this.get('icon');
        if (icon) {
          buffer.push("<i class='glyph fa fa-" + icon + "'></i> ");
        }
        buffer.push(this.get('description') + " <span class='count'>(" + this.get('activityCount') + ")</span>");
        buffer.push("<span class='fa fa-chevron-right'></span></a>");
      },

      icon: function() {
        switch(parseInt(this.get('content.action_type'), 10)) {
          case Discourse.UserAction.TYPES.likes_received: return "heart";
          case Discourse.UserAction.TYPES.bookmarks: return "bookmark";
          case Discourse.UserAction.TYPES.edits: return "pencil";
          case Discourse.UserAction.TYPES.replies: return "reply";
          case Discourse.UserAction.TYPES.starred: return "star";
        }
      }.property("content.action_type")
    });
  });

Discourse.ActivityFilterView = require('discourse/views/activity-filter').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/activity-filter.js'] = "define(\"discourse/views/activity-filter\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Component.extend({\n      tagName: 'li',\n      classNameBindings: ['active', 'noGlyph'],\n\n      shouldRerender: Discourse.View.renderIfChanged('content.count', 'count'),\n      noGlyph: Em.computed.empty('icon'),\n\n      active: function() {\n        var content = this.get('content');\n        if (content) {\n          return parseInt(this.get('userActionType'), 10) === parseInt(Em.get(content, 'action_type'), 10);\n        } else {\n          return this.get('indexStream');\n        }\n      }.property('userActionType', 'indexStream'),\n\n      activityCount: function() {\n        return this.get('content.count') || this.get('count') || 0;\n      }.property('content.count', 'count'),\n\n      typeKey: function() {\n        var actionType = this.get('content.action_type');\n        if (actionType === Discourse.UserAction.TYPES.messages_received) { return \"\"; }\n\n        var result = Discourse.UserAction.TYPES_INVERTED[actionType];\n        if (!result) { return \"\"; }\n\n        // We like our URLS to have hyphens, not underscores\n        return \"/\" + result.replace(\"_\", \"-\");\n      }.property('content.action_type'),\n\n      url: function() {\n        return \"/users/\" + this.get('user.username_lower') + \"/activity\" + this.get('typeKey');\n      }.property('typeKey', 'user.username_lower'),\n\n      description: function() {\n        return this.get('content.description') || I18n.t(\"user.filters.all\");\n      }.property('content.description'),\n\n      render: function(buffer) {\n        buffer.push(\"\u003ca href='\" + this.get('url') + \"'\u003e\");\n        var icon = this.get('icon');\n        if (icon) {\n          buffer.push(\"\u003ci class='glyph fa fa-\" + icon + \"'\u003e\u003c/i\u003e \");\n        }\n        buffer.push(this.get('description') + \" \u003cspan class='count'\u003e(\" + this.get('activityCount') + \")\u003c/span\u003e\");\n        buffer.push(\"\u003cspan class='fa fa-chevron-right'\u003e\u003c/span\u003e\u003c/a\u003e\");\n      },\n\n      icon: function() {\n        switch(parseInt(this.get('content.action_type'), 10)) {\n          case Discourse.UserAction.TYPES.likes_received: return \"heart\";\n          case Discourse.UserAction.TYPES.bookmarks: return \"bookmark\";\n          case Discourse.UserAction.TYPES.edits: return \"pencil\";\n          case Discourse.UserAction.TYPES.replies: return \"reply\";\n          case Discourse.UserAction.TYPES.starred: return \"star\";\n        }\n      }.property(\"content.action_type\")\n    });\n  });";
define("discourse/views/application", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.View.extend({
      _appendCategoryClass: function(obj, key) {
        var newClass = Em.get(obj, key);
        if (newClass) {
          $('body').addClass('category-' + newClass);
        }
      }.observes('controller.styleCategory.id'),

      _removeOldClass: function(obj, key) {
        var oldClass = Em.get(obj, key);
        if (oldClass) {
          $('body').removeClass('category-' + oldClass);
        }
      }.observesBefore('controller.styleCategory.id')
    });
  });

Discourse.ApplicationView = require('discourse/views/application').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/application.js'] = "define(\"discourse/views/application\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.View.extend({\n      _appendCategoryClass: function(obj, key) {\n        var newClass = Em.get(obj, key);\n        if (newClass) {\n          $('body').addClass('category-' + newClass);\n        }\n      }.observes('controller.styleCategory.id'),\n\n      _removeOldClass: function(obj, key) {\n        var oldClass = Em.get(obj, key);\n        if (oldClass) {\n          $('body').removeClass('category-' + oldClass);\n        }\n      }.observesBefore('controller.styleCategory.id')\n    });\n  });";
define("discourse/views/archetype-options-modal", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.ModalBodyView.extend({
      templateName: 'modal/archetype_options',
      title: I18n.t('topic.options')
    });
  });

Discourse.ArchetypeOptionsModalView = require('discourse/views/archetype-options-modal').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/archetype-options-modal.js'] = "define(\"discourse/views/archetype-options-modal\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.ModalBodyView.extend({\n      templateName: 'modal/archetype_options',\n      title: I18n.t('topic.options')\n    });\n  });";
define("discourse/views/archetype-options", 
  ["discourse/views/container","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var DiscourseContainerView = __dependency1__["default"];

    __exports__["default"] = DiscourseContainerView.extend({
      metaDataBinding: 'parentView.metaData',

      init: function() {
        this._super();
        var metaData = this.get('metaData');
        var archetypeOptionsView = this;
        return this.get('archetype.options').forEach(function(a) {
          if (a.option_type === 1) {
            archetypeOptionsView.attachViewWithArgs({
              content: a,
              checked: metaData.get(a.key) === 'true'
            }, Discourse.OptionBooleanView);
          }

        });
      }
    });
  });

Discourse.ArchetypeOptionsView = require('discourse/views/archetype-options').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/archetype-options.js'] = "define(\"discourse/views/archetype-options\", \n  [\"discourse/views/container\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DiscourseContainerView = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = DiscourseContainerView.extend({\n      metaDataBinding: 'parentView.metaData',\n\n      init: function() {\n        this._super();\n        var metaData = this.get('metaData');\n        var archetypeOptionsView = this;\n        return this.get('archetype.options').forEach(function(a) {\n          if (a.option_type === 1) {\n            archetypeOptionsView.attachViewWithArgs({\n              content: a,\n              checked: metaData.get(a.key) === 'true'\n            }, Discourse.OptionBooleanView);\n          }\n\n        });\n      }\n    });\n  });";
define("discourse/views/avatar-selector", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.ModalBodyView.extend({
      templateName: 'modal/avatar_selector',
      classNames: ['avatar-selector'],
      title: I18n.t('user.change_avatar.title'),
      saveDisabled: false,
      gravatarRefreshEnabled: Em.computed.not('controller.gravatarRefreshDisabled'),
      hasUploadedAvatar: Em.computed.or('uploadedAvatarTemplate', 'controller.custom_avatar_upload_id'),

      // *HACK* used to select the proper radio button, cause {{action}}
      //  stops the default behavior
      selectedChanged: function() {
        var self = this;
        Em.run.next(function() {
          var value = self.get('controller.selected');
          $('input:radio[name="avatar"]').val([value]);
        });
      }.observes('controller.selected')
    });
  });

Discourse.AvatarSelectorView = require('discourse/views/avatar-selector').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/avatar-selector.js'] = "define(\"discourse/views/avatar-selector\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.ModalBodyView.extend({\n      templateName: 'modal/avatar_selector',\n      classNames: ['avatar-selector'],\n      title: I18n.t('user.change_avatar.title'),\n      saveDisabled: false,\n      gravatarRefreshEnabled: Em.computed.not('controller.gravatarRefreshDisabled'),\n      hasUploadedAvatar: Em.computed.or('uploadedAvatarTemplate', 'controller.custom_avatar_upload_id'),\n\n      // *HACK* used to select the proper radio button, cause {{action}}\n      //  stops the default behavior\n      selectedChanged: function() {\n        var self = this;\n        Em.run.next(function() {\n          var value = self.get('controller.selected');\n          $('input:radio[name=\"avatar\"]').val([value]);\n        });\n      }.observes('controller.selected')\n    });\n  });";
define("discourse/views/badges-show", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.View.extend(Discourse.LoadMore, {
      eyelineSelector: '.badge-user',
      tickOrX: function(field){
        var icon = this.get('controller.model.' + field) ? "fa-check" : "fa-times";
        return "<i class='fa " + icon + "'></i>";
      },
      allowTitle: function() { return this.tickOrX("allow_title"); }.property(),
      multipleGrant: function() { return this.tickOrX("multiple_grant"); }.property()
    });
  });

Discourse.BadgesShowView = require('discourse/views/badges-show').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/badges-show.js'] = "define(\"discourse/views/badges-show\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.View.extend(Discourse.LoadMore, {\n      eyelineSelector: '.badge-user',\n      tickOrX: function(field){\n        var icon = this.get('controller.model.' + field) ? \"fa-check\" : \"fa-times\";\n        return \"\u003ci class='fa \" + icon + \"'\u003e\u003c/i\u003e\";\n      },\n      allowTitle: function() { return this.tickOrX(\"allow_title\"); }.property(),\n      multipleGrant: function() { return this.tickOrX(\"multiple_grant\"); }.property()\n    });\n  });";
define("discourse/views/category-chooser", 
  ["discourse/views/combo-box","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var ComboboxView = __dependency1__["default"];

    var badgeHtml = Discourse.HTML.categoryBadge;

    __exports__["default"] = ComboboxView.extend({
      classNames: ['combobox category-combobox'],
      overrideWidths: true,
      dataAttributes: ['id', 'description_text'],
      valueBinding: Ember.Binding.oneWay('source'),

      content: function() {
        var scopedCategoryId = this.get('scopedCategoryId');

        // Always scope to the parent of a category, if present
        if (scopedCategoryId) {
          var scopedCat = Discourse.Category.findById(scopedCategoryId);
          scopedCategoryId = scopedCat.get('parent_category_id') || scopedCat.get('id');
        }

        return this.get('categories').filter(function(c) {
          if (scopedCategoryId && (c.get('id') !== scopedCategoryId) && (c.get('parent_category_id') !== scopedCategoryId)) {
            return false;
          }
          return c.get('permission') === Discourse.PermissionType.FULL && !c.get('isUncategorizedCategory');
        });
      }.property('scopedCategoryId', 'categories'),

      _setCategories: function() {
        this.set('categories', this.get('categories') || Discourse.Category.list());
      }.on('init'),

      none: function() {
        if (Discourse.User.currentProp('staff') || Discourse.SiteSettings.allow_uncategorized_topics) {
          if (this.get('rootNone')) {
            return "category.none";
          } else {
            return Discourse.Category.findUncategorized();
          }
        } else {
          return 'category.choose';
        }
      }.property(),

      template: function(item) {

        var category;

        // If we have no id, but text with the uncategorized name, we can use that badge.
        if (Em.empty(item.id)) {
          var uncat = Discourse.Category.findUncategorized();
          if (uncat && uncat.get('name') === item.text) {
            category = uncat;
          }
        } else {
          category = Discourse.Category.findById(parseInt(item.id,10));
        }

        if (!category) return item.text;
        var result = badgeHtml(category, {showParent: false, link: false, allowUncategorized: true}),
            parentCategoryId = category.get('parent_category_id');
        if (parentCategoryId) {
          result = badgeHtml(Discourse.Category.findById(parentCategoryId), {link: false}) + "&nbsp;" + result;
        }

        result += " <span class='topic-count'>&times; " + category.get('topic_count') + "</span>";

        var description = category.get('description');
        // TODO wtf how can this be null?;
        if (description && description !== 'null') {
          result += '<div class="category-desc">' +
                     description.substr(0,200) +
                     (description.length > 200 ? '&hellip;' : '') +
                     '</div>';
        }
        return result;
      }

    });
  });

Discourse.CategoryChooserView = require('discourse/views/category-chooser').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/category-chooser.js'] = "define(\"discourse/views/category-chooser\", \n  [\"discourse/views/combo-box\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ComboboxView = __dependency1__[\"default\"];\n\n    var badgeHtml = Discourse.HTML.categoryBadge;\n\n    __exports__[\"default\"] = ComboboxView.extend({\n      classNames: ['combobox category-combobox'],\n      overrideWidths: true,\n      dataAttributes: ['id', 'description_text'],\n      valueBinding: Ember.Binding.oneWay('source'),\n\n      content: function() {\n        var scopedCategoryId = this.get('scopedCategoryId');\n\n        // Always scope to the parent of a category, if present\n        if (scopedCategoryId) {\n          var scopedCat = Discourse.Category.findById(scopedCategoryId);\n          scopedCategoryId = scopedCat.get('parent_category_id') || scopedCat.get('id');\n        }\n\n        return this.get('categories').filter(function(c) {\n          if (scopedCategoryId \u0026\u0026 (c.get('id') !== scopedCategoryId) \u0026\u0026 (c.get('parent_category_id') !== scopedCategoryId)) {\n            return false;\n          }\n          return c.get('permission') === Discourse.PermissionType.FULL \u0026\u0026 !c.get('isUncategorizedCategory');\n        });\n      }.property('scopedCategoryId', 'categories'),\n\n      _setCategories: function() {\n        this.set('categories', this.get('categories') || Discourse.Category.list());\n      }.on('init'),\n\n      none: function() {\n        if (Discourse.User.currentProp('staff') || Discourse.SiteSettings.allow_uncategorized_topics) {\n          if (this.get('rootNone')) {\n            return \"category.none\";\n          } else {\n            return Discourse.Category.findUncategorized();\n          }\n        } else {\n          return 'category.choose';\n        }\n      }.property(),\n\n      template: function(item) {\n\n        var category;\n\n        // If we have no id, but text with the uncategorized name, we can use that badge.\n        if (Em.empty(item.id)) {\n          var uncat = Discourse.Category.findUncategorized();\n          if (uncat \u0026\u0026 uncat.get('name') === item.text) {\n            category = uncat;\n          }\n        } else {\n          category = Discourse.Category.findById(parseInt(item.id,10));\n        }\n\n        if (!category) return item.text;\n        var result = badgeHtml(category, {showParent: false, link: false, allowUncategorized: true}),\n            parentCategoryId = category.get('parent_category_id');\n        if (parentCategoryId) {\n          result = badgeHtml(Discourse.Category.findById(parentCategoryId), {link: false}) + \"\u0026nbsp;\" + result;\n        }\n\n        result += \" \u003cspan class='topic-count'\u003e\u0026times; \" + category.get('topic_count') + \"\u003c/span\u003e\";\n\n        var description = category.get('description');\n        // TODO wtf how can this be null?;\n        if (description \u0026\u0026 description !== 'null') {\n          result += '\u003cdiv class=\"category-desc\"\u003e' +\n                     description.substr(0,200) +\n                     (description.length \u003e 200 ? '\u0026hellip;' : '') +\n                     '\u003c/div\u003e';\n        }\n        return result;\n      }\n\n    });\n  });";
define("discourse/views/category-notifications-button", 
  ["discourse/views/notifications-button","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var NotificationsButton = __dependency1__["default"];

    __exports__["default"] = NotificationsButton.extend({
      classNames: ['notification-options', 'category-notification-menu'],
      buttonIncludesText: false,
      longDescriptionBinding: null,
      hidden: Em.computed.alias('category.deleted'),
      notificationLevels: Discourse.Category.NotificationLevel,
      notificationLevel: Em.computed.alias('category.notification_level'),
      i18nPrefix: 'category.notifications',
      i18nPostfix: '',

      clicked: function(id) {
        this.get('category').setNotification(id);
      }
    });
  });

Discourse.CategoryNotificationsButtonView = require('discourse/views/category-notifications-button').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/category-notifications-button.js'] = "define(\"discourse/views/category-notifications-button\", \n  [\"discourse/views/notifications-button\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var NotificationsButton = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = NotificationsButton.extend({\n      classNames: ['notification-options', 'category-notification-menu'],\n      buttonIncludesText: false,\n      longDescriptionBinding: null,\n      hidden: Em.computed.alias('category.deleted'),\n      notificationLevels: Discourse.Category.NotificationLevel,\n      notificationLevel: Em.computed.alias('category.notification_level'),\n      i18nPrefix: 'category.notifications',\n      i18nPostfix: '',\n\n      clicked: function(id) {\n        this.get('category').setNotification(id);\n      }\n    });\n  });";
define("discourse/views/change-owner", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.ModalBodyView.extend({
      templateName: 'modal/change_owner',
      title: I18n.t('topic.change_owner.title')
    });
  });

Discourse.ChangeOwnerView = require('discourse/views/change-owner').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/change-owner.js'] = "define(\"discourse/views/change-owner\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.ModalBodyView.extend({\n      templateName: 'modal/change_owner',\n      title: I18n.t('topic.change_owner.title')\n    });\n  });";
define("discourse/views/choose-topic", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      This view presents the user with a widget to choose a topic.

      @class ChooseTopicView
      @extends Discourse.View
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Discourse.View.extend({
      templateName: 'choose_topic',

      topicTitleChanged: function() {
        this.set('loading', true);
        this.set('noResults', true);
        this.set('selectedTopicId', null);
        this.search(this.get('topicTitle'));
      }.observes('topicTitle'),

      topicsChanged: function() {
        var topics = this.get('topics');
        if (topics) {
          this.set('noResults', topics.length === 0);
        }
        this.set('loading', false);
      }.observes('topics'),

      search: Discourse.debounce(function(title) {
        var self = this;
        if (Em.isEmpty(title)) {
          self.setProperties({ topics: null, loading: false });
          return;
        }
        Discourse.Search.forTerm(title, {typeFilter: 'topic', searchForId: true}).then(function (results) {
          if (results && results.posts && results.posts.length > 0) {
            self.set('topics', results.posts.mapBy('topic'));
          } else {
            self.setProperties({ topics: null, loading: false });
          }
        });
      }, 300),

      actions: {
        chooseTopic: function (topic) {
          var topicId = Em.get(topic, 'id');
          this.set('selectedTopicId', topicId);

          Em.run.next(function () {
            $('#choose-topic-' + topicId).prop('checked', 'true');
          });

          return false;
        }
      }

    });
  });

Discourse.ChooseTopicView = require('discourse/views/choose-topic').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/choose-topic.js'] = "define(\"discourse/views/choose-topic\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      This view presents the user with a widget to choose a topic.\n\n      @class ChooseTopicView\n      @extends Discourse.View\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Discourse.View.extend({\n      templateName: 'choose_topic',\n\n      topicTitleChanged: function() {\n        this.set('loading', true);\n        this.set('noResults', true);\n        this.set('selectedTopicId', null);\n        this.search(this.get('topicTitle'));\n      }.observes('topicTitle'),\n\n      topicsChanged: function() {\n        var topics = this.get('topics');\n        if (topics) {\n          this.set('noResults', topics.length === 0);\n        }\n        this.set('loading', false);\n      }.observes('topics'),\n\n      search: Discourse.debounce(function(title) {\n        var self = this;\n        if (Em.isEmpty(title)) {\n          self.setProperties({ topics: null, loading: false });\n          return;\n        }\n        Discourse.Search.forTerm(title, {typeFilter: 'topic', searchForId: true}).then(function (results) {\n          if (results \u0026\u0026 results.posts \u0026\u0026 results.posts.length \u003e 0) {\n            self.set('topics', results.posts.mapBy('topic'));\n          } else {\n            self.setProperties({ topics: null, loading: false });\n          }\n        });\n      }, 300),\n\n      actions: {\n        chooseTopic: function (topic) {\n          var topicId = Em.get(topic, 'id');\n          this.set('selectedTopicId', topicId);\n\n          Em.run.next(function () {\n            $('#choose-topic-' + topicId).prop('checked', 'true');\n          });\n\n          return false;\n        }\n      }\n\n    });\n  });";
define("discourse/views/composer-messages", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      Renders a popup messages on the composer

      @class ComposerMessagesView
      @extends Discourse.View
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Ember.CollectionView.extend({
      classNameBindings: [':composer-popup-container', 'hidden'],
      content: Em.computed.alias('controller.content'),

      hidden: Em.computed.not('controller.controllers.composer.model.viewOpen'),

      itemViewClass: Discourse.View.extend({
        classNames: ['composer-popup', 'hidden'],
        templateName: Em.computed.alias('content.templateName'),

        init: function() {
          this._super();
          this.set('context', this.get('content'));

          if (this.get('content.extraClass')) {
            this.get('classNames').pushObject(this.get('content.extraClass'));
          }
        },

        didInsertElement: function() {
          var composerHeight = $('#reply-control').height() || 0;
          this.$().css('bottom', composerHeight + "px").show();
        }
      })
    });
  });

Discourse.ComposerMessagesView = require('discourse/views/composer-messages').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/composer-messages.js'] = "define(\"discourse/views/composer-messages\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      Renders a popup messages on the composer\n\n      @class ComposerMessagesView\n      @extends Discourse.View\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Ember.CollectionView.extend({\n      classNameBindings: [':composer-popup-container', 'hidden'],\n      content: Em.computed.alias('controller.content'),\n\n      hidden: Em.computed.not('controller.controllers.composer.model.viewOpen'),\n\n      itemViewClass: Discourse.View.extend({\n        classNames: ['composer-popup', 'hidden'],\n        templateName: Em.computed.alias('content.templateName'),\n\n        init: function() {\n          this._super();\n          this.set('context', this.get('content'));\n\n          if (this.get('content.extraClass')) {\n            this.get('classNames').pushObject(this.get('content.extraClass'));\n          }\n        },\n\n        didInsertElement: function() {\n          var composerHeight = $('#reply-control').height() || 0;\n          this.$().css('bottom', composerHeight + \"px\").show();\n        }\n      })\n    });\n  });";
define("discourse/views/composer", 
  ["discourse/lib/user-search","discourse/lib/after-transition","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    /*global assetPath:true */


    var userSearch = __dependency1__["default"];
    var afterTransition = __dependency2__["default"];

    var ComposerView = Discourse.View.extend(Ember.Evented, {
      templateName: 'composer',
      elementId: 'reply-control',
      classNameBindings: ['model.creatingPrivateMessage:private-message',
                          'composeState',
                          'model.loading',
                          'model.canEditTitle:edit-title',
                          'postMade',
                          'model.creatingTopic:topic',
                          'model.showPreview',
                          'model.hidePreview'],

      model: Em.computed.alias('controller.model'),

      // This is just in case something still references content. Can probably be removed
      content: Em.computed.alias('model'),

      composeState: function() {
        return this.get('model.composeState') || Discourse.Composer.CLOSED;
      }.property('model.composeState'),

      // Disable fields when we're loading
      loadingChanged: function() {
        if (this.get('loading')) {
          $('#wmd-input, #reply-title').prop('disabled', 'disabled');
        } else {
          $('#wmd-input, #reply-title').prop('disabled', '');
        }
      }.observes('loading'),

      postMade: function() {
        return this.present('controller.createdPost') ? 'created-post' : null;
      }.property('model.createdPost'),

      refreshPreview: Discourse.debounce(function() {
        if (this.editor) {
          this.editor.refreshPreview();
        }
      }, 30),

      observeReplyChanges: function() {
        if (this.get('model.hidePreview')) return;
        Ember.run.scheduleOnce('afterRender', this, 'refreshPreview');
      }.observes('model.reply', 'model.hidePreview'),

      focusIn: function() {
        var controller = this.get('controller');
        if (controller) controller.updateDraftStatus();
      },

      movePanels: function(sizePx) {
        $('#main-outlet').css('padding-bottom', sizePx);
        $('.composer-popup').css('bottom', sizePx);
        // signal the progress bar it should move!
        this.appEvents.trigger("composer:resized");
      },

      resize: function() {
        var self = this;
        Em.run.scheduleOnce('afterRender', function() {
          if (self.movePanels) {
            var h = $('#reply-control').height() || 0;
            self.movePanels.apply(self, [h + "px"]);
          }
        });
      }.observes('model.composeState'),

      keyUp: function() {
        var controller = this.get('controller');
        controller.checkReplyLength();

        var lastKeyUp = new Date();
        this.set('lastKeyUp', lastKeyUp);

        // One second from now, check to see if the last key was hit when
        // we recorded it. If it was, the user paused typing.
        var self = this;
        Em.run.later(function() {
          if (lastKeyUp !== self.get('lastKeyUp')) return;

          // Search for similar topics if the user pauses typing
          controller.findSimilarTopics();
        }, 1000);
      },

      keyDown: function(e) {
        if (e.which === 27) {
          // ESC
          this.get('controller').send('hitEsc');
          return false;
        } else if (e.which === 13 && (e.ctrlKey || e.metaKey)) {
          // CTRL+ENTER or CMD+ENTER
          this.get('controller').send('save');
          return false;
        }
      },

      _enableResizing: function() {
        var $replyControl = $('#reply-control'),
            self = this;
        $replyControl.DivResizer({
          resize: this.resize,
          onDrag: function (sizePx) { self.movePanels.apply(self, [sizePx]); }
        });
        afterTransition($replyControl, this.resize);
        this.ensureMaximumDimensionForImagesInPreview();
        this.set('controller.view', this);
      }.on('didInsertElement'),

      _unlinkView: function() {
        this.set('controller.view', null);
      }.on('willDestroyElement'),

      ensureMaximumDimensionForImagesInPreview: function() {
        // This enforce maximum dimensions of images in the preview according
        // to the current site settings.
        // For interactivity, we immediately insert the locally cooked version
        // of the post into the stream when the user hits reply. We therefore also
        // need to enforce these rules on the .cooked version.
        // Meanwhile, the server is busy post-processing the post and generating thumbnails.
        var style = Discourse.Mobile.mobileView ?
                    'max-width: 100%; height: auto;' :
                    'max-width:' + Discourse.SiteSettings.max_image_width + 'px;' +
                    'max-height:' + Discourse.SiteSettings.max_image_height + 'px;';

        $('<style>#wmd-preview img:not(.thumbnail), .cooked img:not(.thumbnail) {' + style + '}</style>').appendTo('head');
      },

      click: function() {
        this.get('controller').send('openIfDraft');
      },

      // Called after the preview renders. Debounced for performance
      afterRender: function() {
        var $wmdPreview = $('#wmd-preview');
        if ($wmdPreview.length === 0) return;

        Discourse.SyntaxHighlighting.apply($wmdPreview);

        var post = this.get('model.post'),
            refresh = false;

        // If we are editing a post, we'll refresh its contents once. This is a feature that
        // allows a user to refresh its contents once.
        if (post && post.blank('refreshedPost')) {
          refresh = true;
          post.set('refreshedPost', true);
        }

        // Load the post processing effects
        $('a.onebox', $wmdPreview).each(function(i, e) {
          Discourse.Onebox.load(e, refresh);
        });
        $('span.mention', $wmdPreview).each(function(i, e) {
          Discourse.Mention.paint(e);
        });

        this.trigger('previewRefreshed', $wmdPreview);
      },

      initEditor: function() {
        // not quite right, need a callback to pass in, meaning this gets called once,
        // but if you start replying to another topic it will get the avatars wrong
        var $wmdInput, editor, self = this;
        this.wmdInput = $wmdInput = $('#wmd-input');
        if ($wmdInput.length === 0 || $wmdInput.data('init') === true) return;

        $LAB.script(assetPath('defer/html-sanitizer-bundle'));
        ComposerView.trigger("initWmdEditor");

        var template = this.container.lookupFactory('view:user-selector').templateFunction();
        $wmdInput.data('init', true);
        $wmdInput.autocomplete({
          template: template,
          dataSource: function(term) {
            return userSearch({
              term: term,
              topicId: self.get('controller.controllers.topic.model.id'),
              include_groups: true
            });
          },
          key: "@",
          transformComplete: function(v) {
              if (v.username) {
                return v.username;
              } else {
                return v.usernames.join(", @");
              }
            }
        });

        this.editor = editor = Discourse.Markdown.createEditor({
          lookupAvatarByPostNumber: function(postNumber) {
            var posts = self.get('controller.controllers.topic.postStream.posts');
            if (posts) {
              var quotedPost = posts.findProperty("post_number", postNumber);
              if (quotedPost) {
                return Discourse.Utilities.tinyAvatar(quotedPost.get("avatar_template"));
              }
            }
          }
        });

        // HACK to change the upload icon of the composer's toolbar
        if (!Discourse.Utilities.allowsAttachments()) {
          Em.run.scheduleOnce("afterRender", function() {
            $("#wmd-image-button").addClass("image-only");
          });
        }

        this.editor.hooks.insertImageDialog = function(callback) {
          callback(null);
          self.get('controller').send('showUploadSelector', self);
          return true;
        };

        this.editor.hooks.onPreviewRefresh = function() {
          return self.afterRender();
        };

        this.editor.run();
        this.set('editor', this.editor);
        this.loadingChanged();

        var saveDraft = Discourse.debounce((function() {
          return self.get('controller').saveDraft();
        }), 2000);

        $wmdInput.keyup(function() {
          saveDraft();
          return true;
        });

        var $replyTitle = $('#reply-title');

        $replyTitle.keyup(function() {
          saveDraft();
          // removes the red background once the requirements are met
          if (self.get('model.missingTitleCharacters') <= 0) {
            $replyTitle.removeClass("requirements-not-met");
          }
          return true;
        });

        // when the title field loses the focus...
        $replyTitle.blur(function(){
          // ...and the requirements are not met (ie. the minimum number of characters)
          if (self.get('model.missingTitleCharacters') > 0) {
            // then, "redify" the background
            $replyTitle.toggleClass("requirements-not-met", true);
          }
        });

        // in case it's still bound somehow
        this._unbindUploadTarget();

        var $uploadTarget = $('#reply-control');

        $uploadTarget.fileupload({
          url: Discourse.getURL('/uploads'),
          dataType: 'json',
        });

        // submit - this event is triggered for each upload
        $uploadTarget.on('fileuploadsubmit', function (e, data) {
          var result = Discourse.Utilities.validateUploadedFiles(data.files);
          // reset upload status when everything is ok
          if (result) self.setProperties({ uploadProgress: 0, isUploading: true });
          return result;
        });

        // send - this event is triggered when the upload request is about to start
        $uploadTarget.on('fileuploadsend', function (e, data) {
          // hide the "file selector" modal
          self.get('controller').send('closeModal');
          // cf. https://github.com/blueimp/jQuery-File-Upload/wiki/API#how-to-cancel-an-upload
          var jqXHR = data.xhr();
          // need to wait for the link to show up in the DOM
          Em.run.schedule('afterRender', function() {
            // bind on the click event on the cancel link
            $('#cancel-file-upload').on('click', function() {
              // cancel the upload
              self.set('isUploading', false);
              // NOTE: this might trigger a 'fileuploadfail' event with status = 0
              if (jqXHR) jqXHR.abort();
              // unbind
              $(this).off('click');
            });
          });
        });

        // progress all
        $uploadTarget.on('fileuploadprogressall', function (e, data) {
          var progress = parseInt(data.loaded / data.total * 100, 10);
          self.set('uploadProgress', progress);
        });

        // done
        $uploadTarget.on('fileuploaddone', function (e, data) {
          // make sure we have a url
          if (data.result.url) {
            var markdown = Discourse.Utilities.getUploadMarkdown(data.result);
            // appends a space at the end of the inserted markdown
            self.addMarkdown(markdown + " ");
            self.set('isUploading', false);
          } else {
            bootbox.alert(I18n.t('post.errors.upload'));
          }
        });

        // fail
        $uploadTarget.on('fileuploadfail', function (e, data) {
          // hide upload status
          self.set('isUploading', false);
          // display an error message
          Discourse.Utilities.displayErrorForUpload(data);
        });

        // contenteditable div hack for getting image paste to upload working in
        // Firefox. This is pretty dangerous because it can potentially break
        // Ctrl+v to paste so we should be conservative about what browsers this runs
        // in.
        var uaMatch = navigator.userAgent.match(/Firefox\/(\d+)\.\d/);
        if (uaMatch && parseInt(uaMatch[1]) >= 24) {
          self.$().append( Ember.$("<div id='contenteditable' contenteditable='true' style='height: 0; width: 0; overflow: hidden'></div>") );
          self.$("textarea").off('keydown.contenteditable');
          self.$("textarea").on('keydown.contenteditable', function(event) {
            // Catch Ctrl+v / Cmd+v and hijack focus to a contenteditable div. We can't
            // use the onpaste event because for some reason the paste isn't resumed
            // after we switch focus, probably because it is being executed too late.
            if ((event.ctrlKey || event.metaKey) && (event.keyCode === 86)) {
              // Save the current textarea selection.
              var textarea = self.$("textarea")[0],
                  selectionStart = textarea.selectionStart,
                  selectionEnd   = textarea.selectionEnd;

              // Focus the contenteditable div.
              var contentEditableDiv = self.$('#contenteditable');
              contentEditableDiv.focus();

              // The paste doesn't finish immediately and we don't have any onpaste
              // event, so wait for 100ms which _should_ be enough time.
              setTimeout(function() {
                var pastedImg  = contentEditableDiv.find('img');

                if ( pastedImg.length === 1 ) {
                  pastedImg.remove();
                }

                // For restoring the selection.
                textarea.focus();
                var textareaContent = $(textarea).val(),
                    startContent = textareaContent.substring(0, selectionStart),
                    endContent = textareaContent.substring(selectionEnd);

                var restoreSelection = function(pastedText) {
                  $(textarea).val( startContent + pastedText + endContent );
                  textarea.selectionStart = selectionStart + pastedText.length;
                  textarea.selectionEnd = textarea.selectionStart;
                };

                if (contentEditableDiv.html().length > 0) {
                  // If the image wasn't the only pasted content we just give up and
                  // fall back to the original pasted text.
                  contentEditableDiv.find("br").replaceWith("\n");
                  restoreSelection(contentEditableDiv.text());
                } else {
                  // Depending on how the image is pasted in, we may get either a
                  // normal URL or a data URI. If we get a data URI we can convert it
                  // to a Blob and upload that, but if it is a regular URL that
                  // operation is prevented for security purposes. When we get a regular
                  // URL let's just create an <img> tag for the image.
                  var imageSrc = pastedImg.attr('src');

                  if (imageSrc.match(/^data:image/)) {
                    // Restore the cursor position, and remove any selected text.
                    restoreSelection("");

                    // Create a Blob to upload.
                    var image = new Image();
                    image.onload = function() {
                      // Create a new canvas.
                      var canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');
                      canvas.height = image.height;
                      canvas.width = image.width;
                      var ctx = canvas.getContext('2d');
                      ctx.drawImage(image, 0, 0);

                      canvas.toBlob(function(blob) {
                        $uploadTarget.fileupload('add', {files: blob});
                      });
                    };
                    image.src = imageSrc;
                  } else {
                    restoreSelection("<img src='" + imageSrc + "'>");
                  }
                }

                contentEditableDiv.html('');
              }, 100);
            }
          });
        }

        if (Discourse.Mobile.mobileView) {
          $(".mobile-file-upload").on("click", function () {
            // redirect the click on the hidden file input
            $("#mobile-uploader").click();
          });
        }

        // need to wait a bit for the "slide up" transition of the composer
        // we could use .on("transitionend") but it's not firing when the transition isn't completed :(
        Em.run.later(function() {
          self.resize();
          self.refreshPreview();
          if ($replyTitle.length) {
            $replyTitle.putCursorAtEnd();
          } else {
            $wmdInput.putCursorAtEnd();
          }
          self.appEvents.trigger("composer:opened");
        }, 400);
      },

      addMarkdown: function(text) {
        var ctrl = $('#wmd-input').get(0),
            caretPosition = Discourse.Utilities.caretPosition(ctrl),
            current = this.get('model.reply');
        this.set('model.reply', current.substring(0, caretPosition) + text + current.substring(caretPosition, current.length));

        Em.run.schedule('afterRender', function() {
          Discourse.Utilities.setCaretPosition(ctrl, caretPosition + text.length);
        });
      },

      // Uses javascript to get the image sizes from the preview, if present
      imageSizes: function() {
        var result = {};
        $('#wmd-preview img').each(function(i, e) {
          var $img = $(e),
              src = $img.prop('src');

          if (src && src.length) {
            result[src] = { width: $img.width(), height: $img.height() };
          }
        });
        return result;
      },

      childDidInsertElement: function() {
        return this.initEditor();
      },

      childWillDestroyElement: function() {
        var self = this;

        this._unbindUploadTarget();

        Em.run.next(function() {
          $('#main-outlet').css('padding-bottom', 0);
          // need to wait a bit for the "slide down" transition of the composer
          Em.run.later(function() {
            self.appEvents.trigger("composer:closed");
          }, 400);
        });
      },

      titleValidation: function() {
        var titleLength = this.get('model.titleLength'),
            missingChars = this.get('model.missingTitleCharacters'),
            reason;
        if( titleLength < 1 ){
          reason = I18n.t('composer.error.title_missing');
        } else if( missingChars > 0 ) {
          reason = I18n.t('composer.error.title_too_short', {min: this.get('model.minimumTitleLength')});
        } else if( titleLength > Discourse.SiteSettings.max_topic_title_length ) {
          reason = I18n.t('composer.error.title_too_long', {max: Discourse.SiteSettings.max_topic_title_length});
        }

        if( reason ) {
          return Discourse.InputValidation.create({ failed: true, reason: reason });
        }
      }.property('model.titleLength', 'model.missingTitleCharacters', 'model.minimumTitleLength'),

      categoryValidation: function() {
        if( !Discourse.SiteSettings.allow_uncategorized_topics && !this.get('model.categoryId')) {
          return Discourse.InputValidation.create({ failed: true, reason: I18n.t('composer.error.category_missing') });
        }
      }.property('model.categoryId'),

      replyValidation: function() {
        var replyLength = this.get('model.replyLength'),
            missingChars = this.get('model.missingReplyCharacters'),
            reason;
        if( replyLength < 1 ){
          reason = I18n.t('composer.error.post_missing');
        } else if( missingChars > 0 ) {
          reason = I18n.t('composer.error.post_length', {min: this.get('model.minimumPostLength')});
        }

        if( reason ) {
          return Discourse.InputValidation.create({ failed: true, reason: reason });
        }
      }.property('model.reply', 'model.replyLength', 'model.missingReplyCharacters', 'model.minimumPostLength'),

      _unbindUploadTarget: function() {
        var $uploadTarget = $('#reply-control');
        try { $uploadTarget.fileupload('destroy'); }
        catch (e) { /* wasn't initialized yet */ }
        $uploadTarget.off();
      }
    });

    RSVP.EventTarget.mixin(ComposerView);

    __exports__["default"] = ComposerView;
  });

Discourse.ComposerView = require('discourse/views/composer').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/composer.js'] = "define(\"discourse/views/composer\", \n  [\"discourse/lib/user-search\",\"discourse/lib/after-transition\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    /*global assetPath:true */\n\n\n    var userSearch = __dependency1__[\"default\"];\n    var afterTransition = __dependency2__[\"default\"];\n\n    var ComposerView = Discourse.View.extend(Ember.Evented, {\n      templateName: 'composer',\n      elementId: 'reply-control',\n      classNameBindings: ['model.creatingPrivateMessage:private-message',\n                          'composeState',\n                          'model.loading',\n                          'model.canEditTitle:edit-title',\n                          'postMade',\n                          'model.creatingTopic:topic',\n                          'model.showPreview',\n                          'model.hidePreview'],\n\n      model: Em.computed.alias('controller.model'),\n\n      // This is just in case something still references content. Can probably be removed\n      content: Em.computed.alias('model'),\n\n      composeState: function() {\n        return this.get('model.composeState') || Discourse.Composer.CLOSED;\n      }.property('model.composeState'),\n\n      // Disable fields when we're loading\n      loadingChanged: function() {\n        if (this.get('loading')) {\n          $('#wmd-input, #reply-title').prop('disabled', 'disabled');\n        } else {\n          $('#wmd-input, #reply-title').prop('disabled', '');\n        }\n      }.observes('loading'),\n\n      postMade: function() {\n        return this.present('controller.createdPost') ? 'created-post' : null;\n      }.property('model.createdPost'),\n\n      refreshPreview: Discourse.debounce(function() {\n        if (this.editor) {\n          this.editor.refreshPreview();\n        }\n      }, 30),\n\n      observeReplyChanges: function() {\n        if (this.get('model.hidePreview')) return;\n        Ember.run.scheduleOnce('afterRender', this, 'refreshPreview');\n      }.observes('model.reply', 'model.hidePreview'),\n\n      focusIn: function() {\n        var controller = this.get('controller');\n        if (controller) controller.updateDraftStatus();\n      },\n\n      movePanels: function(sizePx) {\n        $('#main-outlet').css('padding-bottom', sizePx);\n        $('.composer-popup').css('bottom', sizePx);\n        // signal the progress bar it should move!\n        this.appEvents.trigger(\"composer:resized\");\n      },\n\n      resize: function() {\n        var self = this;\n        Em.run.scheduleOnce('afterRender', function() {\n          if (self.movePanels) {\n            var h = $('#reply-control').height() || 0;\n            self.movePanels.apply(self, [h + \"px\"]);\n          }\n        });\n      }.observes('model.composeState'),\n\n      keyUp: function() {\n        var controller = this.get('controller');\n        controller.checkReplyLength();\n\n        var lastKeyUp = new Date();\n        this.set('lastKeyUp', lastKeyUp);\n\n        // One second from now, check to see if the last key was hit when\n        // we recorded it. If it was, the user paused typing.\n        var self = this;\n        Em.run.later(function() {\n          if (lastKeyUp !== self.get('lastKeyUp')) return;\n\n          // Search for similar topics if the user pauses typing\n          controller.findSimilarTopics();\n        }, 1000);\n      },\n\n      keyDown: function(e) {\n        if (e.which === 27) {\n          // ESC\n          this.get('controller').send('hitEsc');\n          return false;\n        } else if (e.which === 13 \u0026\u0026 (e.ctrlKey || e.metaKey)) {\n          // CTRL+ENTER or CMD+ENTER\n          this.get('controller').send('save');\n          return false;\n        }\n      },\n\n      _enableResizing: function() {\n        var $replyControl = $('#reply-control'),\n            self = this;\n        $replyControl.DivResizer({\n          resize: this.resize,\n          onDrag: function (sizePx) { self.movePanels.apply(self, [sizePx]); }\n        });\n        afterTransition($replyControl, this.resize);\n        this.ensureMaximumDimensionForImagesInPreview();\n        this.set('controller.view', this);\n      }.on('didInsertElement'),\n\n      _unlinkView: function() {\n        this.set('controller.view', null);\n      }.on('willDestroyElement'),\n\n      ensureMaximumDimensionForImagesInPreview: function() {\n        // This enforce maximum dimensions of images in the preview according\n        // to the current site settings.\n        // For interactivity, we immediately insert the locally cooked version\n        // of the post into the stream when the user hits reply. We therefore also\n        // need to enforce these rules on the .cooked version.\n        // Meanwhile, the server is busy post-processing the post and generating thumbnails.\n        var style = Discourse.Mobile.mobileView ?\n                    'max-width: 100%; height: auto;' :\n                    'max-width:' + Discourse.SiteSettings.max_image_width + 'px;' +\n                    'max-height:' + Discourse.SiteSettings.max_image_height + 'px;';\n\n        $('\u003cstyle\u003e#wmd-preview img:not(.thumbnail), .cooked img:not(.thumbnail) {' + style + '}\u003c/style\u003e').appendTo('head');\n      },\n\n      click: function() {\n        this.get('controller').send('openIfDraft');\n      },\n\n      // Called after the preview renders. Debounced for performance\n      afterRender: function() {\n        var $wmdPreview = $('#wmd-preview');\n        if ($wmdPreview.length === 0) return;\n\n        Discourse.SyntaxHighlighting.apply($wmdPreview);\n\n        var post = this.get('model.post'),\n            refresh = false;\n\n        // If we are editing a post, we'll refresh its contents once. This is a feature that\n        // allows a user to refresh its contents once.\n        if (post \u0026\u0026 post.blank('refreshedPost')) {\n          refresh = true;\n          post.set('refreshedPost', true);\n        }\n\n        // Load the post processing effects\n        $('a.onebox', $wmdPreview).each(function(i, e) {\n          Discourse.Onebox.load(e, refresh);\n        });\n        $('span.mention', $wmdPreview).each(function(i, e) {\n          Discourse.Mention.paint(e);\n        });\n\n        this.trigger('previewRefreshed', $wmdPreview);\n      },\n\n      initEditor: function() {\n        // not quite right, need a callback to pass in, meaning this gets called once,\n        // but if you start replying to another topic it will get the avatars wrong\n        var $wmdInput, editor, self = this;\n        this.wmdInput = $wmdInput = $('#wmd-input');\n        if ($wmdInput.length === 0 || $wmdInput.data('init') === true) return;\n\n        $LAB.script(assetPath('defer/html-sanitizer-bundle'));\n        ComposerView.trigger(\"initWmdEditor\");\n\n        var template = this.container.lookupFactory('view:user-selector').templateFunction();\n        $wmdInput.data('init', true);\n        $wmdInput.autocomplete({\n          template: template,\n          dataSource: function(term) {\n            return userSearch({\n              term: term,\n              topicId: self.get('controller.controllers.topic.model.id'),\n              include_groups: true\n            });\n          },\n          key: \"@\",\n          transformComplete: function(v) {\n              if (v.username) {\n                return v.username;\n              } else {\n                return v.usernames.join(\", @\");\n              }\n            }\n        });\n\n        this.editor = editor = Discourse.Markdown.createEditor({\n          lookupAvatarByPostNumber: function(postNumber) {\n            var posts = self.get('controller.controllers.topic.postStream.posts');\n            if (posts) {\n              var quotedPost = posts.findProperty(\"post_number\", postNumber);\n              if (quotedPost) {\n                return Discourse.Utilities.tinyAvatar(quotedPost.get(\"avatar_template\"));\n              }\n            }\n          }\n        });\n\n        // HACK to change the upload icon of the composer's toolbar\n        if (!Discourse.Utilities.allowsAttachments()) {\n          Em.run.scheduleOnce(\"afterRender\", function() {\n            $(\"#wmd-image-button\").addClass(\"image-only\");\n          });\n        }\n\n        this.editor.hooks.insertImageDialog = function(callback) {\n          callback(null);\n          self.get('controller').send('showUploadSelector', self);\n          return true;\n        };\n\n        this.editor.hooks.onPreviewRefresh = function() {\n          return self.afterRender();\n        };\n\n        this.editor.run();\n        this.set('editor', this.editor);\n        this.loadingChanged();\n\n        var saveDraft = Discourse.debounce((function() {\n          return self.get('controller').saveDraft();\n        }), 2000);\n\n        $wmdInput.keyup(function() {\n          saveDraft();\n          return true;\n        });\n\n        var $replyTitle = $('#reply-title');\n\n        $replyTitle.keyup(function() {\n          saveDraft();\n          // removes the red background once the requirements are met\n          if (self.get('model.missingTitleCharacters') \u003c= 0) {\n            $replyTitle.removeClass(\"requirements-not-met\");\n          }\n          return true;\n        });\n\n        // when the title field loses the focus...\n        $replyTitle.blur(function(){\n          // ...and the requirements are not met (ie. the minimum number of characters)\n          if (self.get('model.missingTitleCharacters') \u003e 0) {\n            // then, \"redify\" the background\n            $replyTitle.toggleClass(\"requirements-not-met\", true);\n          }\n        });\n\n        // in case it's still bound somehow\n        this._unbindUploadTarget();\n\n        var $uploadTarget = $('#reply-control');\n\n        $uploadTarget.fileupload({\n          url: Discourse.getURL('/uploads'),\n          dataType: 'json',\n        });\n\n        // submit - this event is triggered for each upload\n        $uploadTarget.on('fileuploadsubmit', function (e, data) {\n          var result = Discourse.Utilities.validateUploadedFiles(data.files);\n          // reset upload status when everything is ok\n          if (result) self.setProperties({ uploadProgress: 0, isUploading: true });\n          return result;\n        });\n\n        // send - this event is triggered when the upload request is about to start\n        $uploadTarget.on('fileuploadsend', function (e, data) {\n          // hide the \"file selector\" modal\n          self.get('controller').send('closeModal');\n          // cf. https://github.com/blueimp/jQuery-File-Upload/wiki/API#how-to-cancel-an-upload\n          var jqXHR = data.xhr();\n          // need to wait for the link to show up in the DOM\n          Em.run.schedule('afterRender', function() {\n            // bind on the click event on the cancel link\n            $('#cancel-file-upload').on('click', function() {\n              // cancel the upload\n              self.set('isUploading', false);\n              // NOTE: this might trigger a 'fileuploadfail' event with status = 0\n              if (jqXHR) jqXHR.abort();\n              // unbind\n              $(this).off('click');\n            });\n          });\n        });\n\n        // progress all\n        $uploadTarget.on('fileuploadprogressall', function (e, data) {\n          var progress = parseInt(data.loaded / data.total * 100, 10);\n          self.set('uploadProgress', progress);\n        });\n\n        // done\n        $uploadTarget.on('fileuploaddone', function (e, data) {\n          // make sure we have a url\n          if (data.result.url) {\n            var markdown = Discourse.Utilities.getUploadMarkdown(data.result);\n            // appends a space at the end of the inserted markdown\n            self.addMarkdown(markdown + \" \");\n            self.set('isUploading', false);\n          } else {\n            bootbox.alert(I18n.t('post.errors.upload'));\n          }\n        });\n\n        // fail\n        $uploadTarget.on('fileuploadfail', function (e, data) {\n          // hide upload status\n          self.set('isUploading', false);\n          // display an error message\n          Discourse.Utilities.displayErrorForUpload(data);\n        });\n\n        // contenteditable div hack for getting image paste to upload working in\n        // Firefox. This is pretty dangerous because it can potentially break\n        // Ctrl+v to paste so we should be conservative about what browsers this runs\n        // in.\n        var uaMatch = navigator.userAgent.match(/Firefox\\/(\\d+)\\.\\d/);\n        if (uaMatch \u0026\u0026 parseInt(uaMatch[1]) \u003e= 24) {\n          self.$().append( Ember.$(\"\u003cdiv id='contenteditable' contenteditable='true' style='height: 0; width: 0; overflow: hidden'\u003e\u003c/div\u003e\") );\n          self.$(\"textarea\").off('keydown.contenteditable');\n          self.$(\"textarea\").on('keydown.contenteditable', function(event) {\n            // Catch Ctrl+v / Cmd+v and hijack focus to a contenteditable div. We can't\n            // use the onpaste event because for some reason the paste isn't resumed\n            // after we switch focus, probably because it is being executed too late.\n            if ((event.ctrlKey || event.metaKey) \u0026\u0026 (event.keyCode === 86)) {\n              // Save the current textarea selection.\n              var textarea = self.$(\"textarea\")[0],\n                  selectionStart = textarea.selectionStart,\n                  selectionEnd   = textarea.selectionEnd;\n\n              // Focus the contenteditable div.\n              var contentEditableDiv = self.$('#contenteditable');\n              contentEditableDiv.focus();\n\n              // The paste doesn't finish immediately and we don't have any onpaste\n              // event, so wait for 100ms which _should_ be enough time.\n              setTimeout(function() {\n                var pastedImg  = contentEditableDiv.find('img');\n\n                if ( pastedImg.length === 1 ) {\n                  pastedImg.remove();\n                }\n\n                // For restoring the selection.\n                textarea.focus();\n                var textareaContent = $(textarea).val(),\n                    startContent = textareaContent.substring(0, selectionStart),\n                    endContent = textareaContent.substring(selectionEnd);\n\n                var restoreSelection = function(pastedText) {\n                  $(textarea).val( startContent + pastedText + endContent );\n                  textarea.selectionStart = selectionStart + pastedText.length;\n                  textarea.selectionEnd = textarea.selectionStart;\n                };\n\n                if (contentEditableDiv.html().length \u003e 0) {\n                  // If the image wasn't the only pasted content we just give up and\n                  // fall back to the original pasted text.\n                  contentEditableDiv.find(\"br\").replaceWith(\"\\n\");\n                  restoreSelection(contentEditableDiv.text());\n                } else {\n                  // Depending on how the image is pasted in, we may get either a\n                  // normal URL or a data URI. If we get a data URI we can convert it\n                  // to a Blob and upload that, but if it is a regular URL that\n                  // operation is prevented for security purposes. When we get a regular\n                  // URL let's just create an \u003cimg\u003e tag for the image.\n                  var imageSrc = pastedImg.attr('src');\n\n                  if (imageSrc.match(/^data:image/)) {\n                    // Restore the cursor position, and remove any selected text.\n                    restoreSelection(\"\");\n\n                    // Create a Blob to upload.\n                    var image = new Image();\n                    image.onload = function() {\n                      // Create a new canvas.\n                      var canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n                      canvas.height = image.height;\n                      canvas.width = image.width;\n                      var ctx = canvas.getContext('2d');\n                      ctx.drawImage(image, 0, 0);\n\n                      canvas.toBlob(function(blob) {\n                        $uploadTarget.fileupload('add', {files: blob});\n                      });\n                    };\n                    image.src = imageSrc;\n                  } else {\n                    restoreSelection(\"\u003cimg src='\" + imageSrc + \"'\u003e\");\n                  }\n                }\n\n                contentEditableDiv.html('');\n              }, 100);\n            }\n          });\n        }\n\n        if (Discourse.Mobile.mobileView) {\n          $(\".mobile-file-upload\").on(\"click\", function () {\n            // redirect the click on the hidden file input\n            $(\"#mobile-uploader\").click();\n          });\n        }\n\n        // need to wait a bit for the \"slide up\" transition of the composer\n        // we could use .on(\"transitionend\") but it's not firing when the transition isn't completed :(\n        Em.run.later(function() {\n          self.resize();\n          self.refreshPreview();\n          if ($replyTitle.length) {\n            $replyTitle.putCursorAtEnd();\n          } else {\n            $wmdInput.putCursorAtEnd();\n          }\n          self.appEvents.trigger(\"composer:opened\");\n        }, 400);\n      },\n\n      addMarkdown: function(text) {\n        var ctrl = $('#wmd-input').get(0),\n            caretPosition = Discourse.Utilities.caretPosition(ctrl),\n            current = this.get('model.reply');\n        this.set('model.reply', current.substring(0, caretPosition) + text + current.substring(caretPosition, current.length));\n\n        Em.run.schedule('afterRender', function() {\n          Discourse.Utilities.setCaretPosition(ctrl, caretPosition + text.length);\n        });\n      },\n\n      // Uses javascript to get the image sizes from the preview, if present\n      imageSizes: function() {\n        var result = {};\n        $('#wmd-preview img').each(function(i, e) {\n          var $img = $(e),\n              src = $img.prop('src');\n\n          if (src \u0026\u0026 src.length) {\n            result[src] = { width: $img.width(), height: $img.height() };\n          }\n        });\n        return result;\n      },\n\n      childDidInsertElement: function() {\n        return this.initEditor();\n      },\n\n      childWillDestroyElement: function() {\n        var self = this;\n\n        this._unbindUploadTarget();\n\n        Em.run.next(function() {\n          $('#main-outlet').css('padding-bottom', 0);\n          // need to wait a bit for the \"slide down\" transition of the composer\n          Em.run.later(function() {\n            self.appEvents.trigger(\"composer:closed\");\n          }, 400);\n        });\n      },\n\n      titleValidation: function() {\n        var titleLength = this.get('model.titleLength'),\n            missingChars = this.get('model.missingTitleCharacters'),\n            reason;\n        if( titleLength \u003c 1 ){\n          reason = I18n.t('composer.error.title_missing');\n        } else if( missingChars \u003e 0 ) {\n          reason = I18n.t('composer.error.title_too_short', {min: this.get('model.minimumTitleLength')});\n        } else if( titleLength \u003e Discourse.SiteSettings.max_topic_title_length ) {\n          reason = I18n.t('composer.error.title_too_long', {max: Discourse.SiteSettings.max_topic_title_length});\n        }\n\n        if( reason ) {\n          return Discourse.InputValidation.create({ failed: true, reason: reason });\n        }\n      }.property('model.titleLength', 'model.missingTitleCharacters', 'model.minimumTitleLength'),\n\n      categoryValidation: function() {\n        if( !Discourse.SiteSettings.allow_uncategorized_topics \u0026\u0026 !this.get('model.categoryId')) {\n          return Discourse.InputValidation.create({ failed: true, reason: I18n.t('composer.error.category_missing') });\n        }\n      }.property('model.categoryId'),\n\n      replyValidation: function() {\n        var replyLength = this.get('model.replyLength'),\n            missingChars = this.get('model.missingReplyCharacters'),\n            reason;\n        if( replyLength \u003c 1 ){\n          reason = I18n.t('composer.error.post_missing');\n        } else if( missingChars \u003e 0 ) {\n          reason = I18n.t('composer.error.post_length', {min: this.get('model.minimumPostLength')});\n        }\n\n        if( reason ) {\n          return Discourse.InputValidation.create({ failed: true, reason: reason });\n        }\n      }.property('model.reply', 'model.replyLength', 'model.missingReplyCharacters', 'model.minimumPostLength'),\n\n      _unbindUploadTarget: function() {\n        var $uploadTarget = $('#reply-control');\n        try { $uploadTarget.fileupload('destroy'); }\n        catch (e) { /* wasn't initialized yet */ }\n        $uploadTarget.off();\n      }\n    });\n\n    RSVP.EventTarget.mixin(ComposerView);\n\n    __exports__[\"default\"] = ComposerView;\n  });";
define("discourse/views/create-account", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.ModalBodyView.extend({
      templateName: 'modal/create_account',
      title: I18n.t('create_account.title'),
      classNames: ['create-account'],

      _setup: function() {
        // allows the submission the form when pressing 'ENTER' on *any* text input field
        // but only when the submit button is enabled
        var createAccountController = this.get('controller');
        Em.run.schedule('afterRender', function() {
          $("input[type='text'], input[type='password']").keydown(function(e) {
            if (createAccountController.get('submitDisabled') === false && e.keyCode === 13) {
              createAccountController.send('createAccount');
            }
          });
        });
      }.on('didInsertElement')
    });
  });

Discourse.CreateAccountView = require('discourse/views/create-account').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/create-account.js'] = "define(\"discourse/views/create-account\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.ModalBodyView.extend({\n      templateName: 'modal/create_account',\n      title: I18n.t('create_account.title'),\n      classNames: ['create-account'],\n\n      _setup: function() {\n        // allows the submission the form when pressing 'ENTER' on *any* text input field\n        // but only when the submit button is enabled\n        var createAccountController = this.get('controller');\n        Em.run.schedule('afterRender', function() {\n          $(\"input[type='text'], input[type='password']\").keydown(function(e) {\n            if (createAccountController.get('submitDisabled') === false \u0026\u0026 e.keyCode === 13) {\n              createAccountController.send('createAccount');\n            }\n          });\n        });\n      }.on('didInsertElement')\n    });\n  });";
define("discourse/views/discovery-categories", 
  ["discourse/mixins/url-refresh","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var UrlRefresh = __dependency1__["default"];

    __exports__["default"] = Discourse.View.extend(UrlRefresh, Discourse.ScrollTop);
  });

Discourse.DiscoveryCategorysView = require('discourse/views/discovery-categories').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/discovery-categories.js'] = "define(\"discourse/views/discovery-categories\", \n  [\"discourse/mixins/url-refresh\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var UrlRefresh = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Discourse.View.extend(UrlRefresh, Discourse.ScrollTop);\n  });";
define("discourse/views/discovery-top", 
  ["discourse/mixins/url-refresh","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var UrlRefresh = __dependency1__["default"];

    __exports__["default"] = Discourse.View.extend(Discourse.ScrollTop, UrlRefresh);
  });

Discourse.DiscoveryTopView = require('discourse/views/discovery-top').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/discovery-top.js'] = "define(\"discourse/views/discovery-top\", \n  [\"discourse/mixins/url-refresh\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var UrlRefresh = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Discourse.View.extend(Discourse.ScrollTop, UrlRefresh);\n  });";
define("discourse/views/discovery-topics", 
  ["discourse/mixins/url-refresh","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var UrlRefresh = __dependency1__["default"];

    __exports__["default"] = Discourse.View.extend(Discourse.LoadMore, UrlRefresh, {
      eyelineSelector: '.topic-list-item',

      actions: {
        loadMore: function() {
          var self = this;
          Discourse.notifyTitle(0);
          this.get('controller').loadMoreTopics().then(function (hasMoreResults) {
            Em.run.schedule('afterRender', function() {
              self.saveScrollPosition();
            });
            if (!hasMoreResults) {
              self.get('eyeline').flushRest();
            }
          });
        }
      },

      _readjustScrollPosition: function() {
        var scrollTo = Discourse.Session.currentProp('topicListScrollPosition');

        if (typeof scrollTo !== "undefined") {
          Em.run.schedule('afterRender', function() {
            $(window).scrollTop(scrollTo+1);
          });
        }
      }.on('didInsertElement'),

      _updateTitle: function() {
        Discourse.notifyTitle(this.get('controller.topicTrackingState.incomingCount'));
      }.observes('controller.topicTrackingState.incomingCount'),

      // Remember where we were scrolled to
      saveScrollPosition: function() {
        Discourse.Session.current().set('topicListScrollPosition', $(window).scrollTop());
      },

      // When the topic list is scrolled
      scrolled: function() {
        this._super();
        this.saveScrollPosition();
      }
    });
  });

Discourse.DiscoveryTopicsView = require('discourse/views/discovery-topics').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/discovery-topics.js'] = "define(\"discourse/views/discovery-topics\", \n  [\"discourse/mixins/url-refresh\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var UrlRefresh = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Discourse.View.extend(Discourse.LoadMore, UrlRefresh, {\n      eyelineSelector: '.topic-list-item',\n\n      actions: {\n        loadMore: function() {\n          var self = this;\n          Discourse.notifyTitle(0);\n          this.get('controller').loadMoreTopics().then(function (hasMoreResults) {\n            Em.run.schedule('afterRender', function() {\n              self.saveScrollPosition();\n            });\n            if (!hasMoreResults) {\n              self.get('eyeline').flushRest();\n            }\n          });\n        }\n      },\n\n      _readjustScrollPosition: function() {\n        var scrollTo = Discourse.Session.currentProp('topicListScrollPosition');\n\n        if (typeof scrollTo !== \"undefined\") {\n          Em.run.schedule('afterRender', function() {\n            $(window).scrollTop(scrollTo+1);\n          });\n        }\n      }.on('didInsertElement'),\n\n      _updateTitle: function() {\n        Discourse.notifyTitle(this.get('controller.topicTrackingState.incomingCount'));\n      }.observes('controller.topicTrackingState.incomingCount'),\n\n      // Remember where we were scrolled to\n      saveScrollPosition: function() {\n        Discourse.Session.current().set('topicListScrollPosition', $(window).scrollTop());\n      },\n\n      // When the topic list is scrolled\n      scrolled: function() {\n        this._super();\n        this.saveScrollPosition();\n      }\n    });\n  });";
define("discourse/views/edit-category-panel", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Em.View.extend({
      classNameBindings: [':modal-tab', 'invisible'],
      invisible: Discourse.computed.propertyNotEqual('controller.selectedTab', 'tab'),

      templateName: function() {
        return "modal/edit-category-" + this.get('tab');
      }.property('tab')
    });
  });

Discourse.EditCategoryPanelView = require('discourse/views/edit-category-panel').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/edit-category-panel.js'] = "define(\"discourse/views/edit-category-panel\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Em.View.extend({\n      classNameBindings: [':modal-tab', 'invisible'],\n      invisible: Discourse.computed.propertyNotEqual('controller.selectedTab', 'tab'),\n\n      templateName: function() {\n        return \"modal/edit-category-\" + this.get('tab');\n      }.property('tab')\n    });\n  });";
define("discourse/views/edit-category", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.ModalBodyView.extend({
      templateName: 'modal/edit-category',

      _initializePanels: function() {
        this.set('panels', []);
      }.on('init')
    });
  });

Discourse.EditCategoryView = require('discourse/views/edit-category').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/edit-category.js'] = "define(\"discourse/views/edit-category\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.ModalBodyView.extend({\n      templateName: 'modal/edit-category',\n\n      _initializePanels: function() {\n        this.set('panels', []);\n      }.on('init')\n    });\n  });";
define("discourse/views/edit-topic-auto-close", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.ModalBodyView.extend({
      templateName: 'modal/auto_close',
      title: I18n.t('topic.auto_close_title')
    });
  });

Discourse.EditTopicAutoCloseView = require('discourse/views/edit-topic-auto-close').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/edit-topic-auto-close.js'] = "define(\"discourse/views/edit-topic-auto-close\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.ModalBodyView.extend({\n      templateName: 'modal/auto_close',\n      title: I18n.t('topic.auto_close_title')\n    });\n  });";
define("discourse/views/embedded-post", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.GroupedView.extend({
      templateName: 'embedded_post',
      classNames: ['reply'],

      _startTracking: function() {
        var post = this.get('content');
        Discourse.ScreenTrack.current().track(this.get('elementId'), post.get('post_number'));
      }.on('didInsertElement'),

      _stopTracking: function() {
        Discourse.ScreenTrack.current().stopTracking(this.get('elementId'));
      }.on('willDestroyElement')
    });
  });

Discourse.EmbeddedPostView = require('discourse/views/embedded-post').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/embedded-post.js'] = "define(\"discourse/views/embedded-post\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.GroupedView.extend({\n      templateName: 'embedded_post',\n      classNames: ['reply'],\n\n      _startTracking: function() {\n        var post = this.get('content');\n        Discourse.ScreenTrack.current().track(this.get('elementId'), post.get('post_number'));\n      }.on('didInsertElement'),\n\n      _stopTracking: function() {\n        Discourse.ScreenTrack.current().stopTracking(this.get('elementId'));\n      }.on('willDestroyElement')\n    });\n  });";
define("discourse/views/flag-topic-button", 
  ["discourse/views/button","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var ButtonView = __dependency1__["default"];

    __exports__["default"] = ButtonView.extend({
      classNames: ['flag-topic'],
      textKey: 'topic.flag_topic.title',
      helpKey: 'topic.flag_topic.help',

      click: function() {
        this.get('controller').send('showFlagTopic', this.get('controller.content'));
      },

      renderIcon: function(buffer) {
        buffer.push("<i class='fa fa-flag'></i>");
      }
    });
  });

Discourse.FlagTopicButtonView = require('discourse/views/flag-topic-button').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/flag-topic-button.js'] = "define(\"discourse/views/flag-topic-button\", \n  [\"discourse/views/button\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ButtonView = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = ButtonView.extend({\n      classNames: ['flag-topic'],\n      textKey: 'topic.flag_topic.title',\n      helpKey: 'topic.flag_topic.help',\n\n      click: function() {\n        this.get('controller').send('showFlagTopic', this.get('controller.content'));\n      },\n\n      renderIcon: function(buffer) {\n        buffer.push(\"\u003ci class='fa fa-flag'\u003e\u003c/i\u003e\");\n      }\n    });\n  });";
define("discourse/views/forgot-password", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.ModalBodyView.extend({
      templateName: 'modal/forgot_password',
      title: I18n.t('forgot_password.title'),
    });
  });

Discourse.ForgotPasswordView = require('discourse/views/forgot-password').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/forgot-password.js'] = "define(\"discourse/views/forgot-password\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.ModalBodyView.extend({\n      templateName: 'modal/forgot_password',\n      title: I18n.t('forgot_password.title'),\n    });\n  });";
define("discourse/views/group-index", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      Displays all posts within a group

      @class Discourse.GroupIndexView
      @extends Ember.Mixin
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Discourse.View.extend(Discourse.ScrollTop, Discourse.LoadMore, {
      eyelineSelector: '.user-stream .item',
    });
  });

Discourse.GroupIndexView = require('discourse/views/group-index').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/group-index.js'] = "define(\"discourse/views/group-index\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      Displays all posts within a group\n\n      @class Discourse.GroupIndexView\n      @extends Ember.Mixin\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Discourse.View.extend(Discourse.ScrollTop, Discourse.LoadMore, {\n      eyelineSelector: '.user-stream .item',\n    });\n  });";
define("discourse/views/header", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      This view handles rendering of the header of the site

      @class HeaderView
      @extends Discourse.View
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Discourse.View.extend({
      tagName: 'header',
      classNames: ['d-header', 'clearfix'],
      classNameBindings: ['editingTopic'],
      templateName: 'header',

      showDropdown: function($target) {
        var elementId = $target.data('dropdown') || $target.data('notifications'),
            $dropdown = $("#" + elementId),
            $li = $target.closest('li'),
            $ul = $target.closest('ul'),
            $html = $('html'),
            self = this;

        var controller = self.get('controller');
        if(controller && !controller.isDestroyed){
          controller.set('visibleDropdown', elementId);
        }
        // we need to ensure we are rendered,
        //  this optimises the speed of the initial render
        var render = $target.data('render');
        if(render){
          if(!this.get(render)){
            this.set(render, true);
            Em.run.next(this, function(){
              this.showDropdown.apply(self, [$target]);
            });
            return;
          }
        }

        var hideDropdown = function() {
          $dropdown.fadeOut('fast');
          $li.removeClass('active');
          $html.data('hide-dropdown', null);
          var controller = self.get('controller');
          if(controller && !controller.isDestroyed){
            controller.set('visibleDropdown', null);
          }
          return $html.off('click.d-dropdown');
        };

        // if a dropdown is active and the user clicks on it, close it
        if($li.hasClass('active')) { return hideDropdown(); }
        // otherwhise, mark it as active
        $li.addClass('active');
        // hide the other dropdowns
        $('li', $ul).not($li).removeClass('active');
        $('.d-dropdown').not($dropdown).fadeOut('fast');
        // fade it fast
        $dropdown.fadeIn('fast');
        // autofocus any text input field
        $dropdown.find('input[type=text]').focus().select();

        $html.on('click.d-dropdown', function(e) {
          return $(e.target).closest('.d-dropdown').length > 0 ? true : hideDropdown.apply(self);
        });

        $html.data('hide-dropdown', hideDropdown);

        return false;
      },

      showDropdownBySelector: function(selector) {
        this.showDropdown($(selector));
      },

      showNotifications: function() {
        this.get("controller").send("showNotifications", this);
      },

      examineDockHeader: function() {

        var headerView = this;

        // Check the dock after the current run loop. While rendering,
        // it's much slower to calculate `outlet.offset()`
        Em.run.next(function () {
          if (!headerView.docAt) {
            var outlet = $('#main-outlet');
            if (!(outlet && outlet.length === 1)) return;
            headerView.docAt = outlet.offset().top;
          }

          var offset = window.pageYOffset || $('html').scrollTop();
          if (offset >= headerView.docAt) {
            if (!headerView.dockedHeader) {
              $('body').addClass('docked');
              headerView.dockedHeader = true;
            }
          } else {
            if (headerView.dockedHeader) {
              $('body').removeClass('docked');
              headerView.dockedHeader = false;
            }
          }
        });

      },

      willDestroyElement: function() {
        $(window).unbind('scroll.discourse-dock');
        $(document).unbind('touchmove.discourse-dock');
        this.$('a.unread-private-messages, a.unread-notifications, a[data-notifications]').off('click.notifications');
        this.$('a[data-dropdown]').off('click.dropdown');
      },

      didInsertElement: function() {

        var self = this;

        this.$('a[data-dropdown]').on('click.dropdown', function(e) {
          self.showDropdown.apply(self, [$(e.currentTarget)]);
          return false;
        });
        this.$().on('click.notifications','a.unread-private-messages, a.unread-notifications, a[data-notifications]', function(e) {
          self.showNotifications(e);
          return false;
        });
        $(window).bind('scroll.discourse-dock', function() {
          self.examineDockHeader();
        });
        $(document).bind('touchmove.discourse-dock', function() {
          self.examineDockHeader();
        });
        self.examineDockHeader();

        // Delegate ESC to the composer
        $('body').on('keydown.header', function(e) {
          // Hide dropdowns
          if (e.which === 27) {
            self.$('li').removeClass('active');
            self.$('.d-dropdown').fadeOut('fast');
          }
          if (self.get('editingTopic')) {
            if (e.which === 13) {
              self.finishedEdit();
            }
            if (e.which === 27) {
              return self.cancelEdit();
            }
          }
        });
      }
    });
  });

Discourse.HeaderView = require('discourse/views/header').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/header.js'] = "define(\"discourse/views/header\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      This view handles rendering of the header of the site\n\n      @class HeaderView\n      @extends Discourse.View\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Discourse.View.extend({\n      tagName: 'header',\n      classNames: ['d-header', 'clearfix'],\n      classNameBindings: ['editingTopic'],\n      templateName: 'header',\n\n      showDropdown: function($target) {\n        var elementId = $target.data('dropdown') || $target.data('notifications'),\n            $dropdown = $(\"#\" + elementId),\n            $li = $target.closest('li'),\n            $ul = $target.closest('ul'),\n            $html = $('html'),\n            self = this;\n\n        var controller = self.get('controller');\n        if(controller \u0026\u0026 !controller.isDestroyed){\n          controller.set('visibleDropdown', elementId);\n        }\n        // we need to ensure we are rendered,\n        //  this optimises the speed of the initial render\n        var render = $target.data('render');\n        if(render){\n          if(!this.get(render)){\n            this.set(render, true);\n            Em.run.next(this, function(){\n              this.showDropdown.apply(self, [$target]);\n            });\n            return;\n          }\n        }\n\n        var hideDropdown = function() {\n          $dropdown.fadeOut('fast');\n          $li.removeClass('active');\n          $html.data('hide-dropdown', null);\n          var controller = self.get('controller');\n          if(controller \u0026\u0026 !controller.isDestroyed){\n            controller.set('visibleDropdown', null);\n          }\n          return $html.off('click.d-dropdown');\n        };\n\n        // if a dropdown is active and the user clicks on it, close it\n        if($li.hasClass('active')) { return hideDropdown(); }\n        // otherwhise, mark it as active\n        $li.addClass('active');\n        // hide the other dropdowns\n        $('li', $ul).not($li).removeClass('active');\n        $('.d-dropdown').not($dropdown).fadeOut('fast');\n        // fade it fast\n        $dropdown.fadeIn('fast');\n        // autofocus any text input field\n        $dropdown.find('input[type=text]').focus().select();\n\n        $html.on('click.d-dropdown', function(e) {\n          return $(e.target).closest('.d-dropdown').length \u003e 0 ? true : hideDropdown.apply(self);\n        });\n\n        $html.data('hide-dropdown', hideDropdown);\n\n        return false;\n      },\n\n      showDropdownBySelector: function(selector) {\n        this.showDropdown($(selector));\n      },\n\n      showNotifications: function() {\n        this.get(\"controller\").send(\"showNotifications\", this);\n      },\n\n      examineDockHeader: function() {\n\n        var headerView = this;\n\n        // Check the dock after the current run loop. While rendering,\n        // it's much slower to calculate `outlet.offset()`\n        Em.run.next(function () {\n          if (!headerView.docAt) {\n            var outlet = $('#main-outlet');\n            if (!(outlet \u0026\u0026 outlet.length === 1)) return;\n            headerView.docAt = outlet.offset().top;\n          }\n\n          var offset = window.pageYOffset || $('html').scrollTop();\n          if (offset \u003e= headerView.docAt) {\n            if (!headerView.dockedHeader) {\n              $('body').addClass('docked');\n              headerView.dockedHeader = true;\n            }\n          } else {\n            if (headerView.dockedHeader) {\n              $('body').removeClass('docked');\n              headerView.dockedHeader = false;\n            }\n          }\n        });\n\n      },\n\n      willDestroyElement: function() {\n        $(window).unbind('scroll.discourse-dock');\n        $(document).unbind('touchmove.discourse-dock');\n        this.$('a.unread-private-messages, a.unread-notifications, a[data-notifications]').off('click.notifications');\n        this.$('a[data-dropdown]').off('click.dropdown');\n      },\n\n      didInsertElement: function() {\n\n        var self = this;\n\n        this.$('a[data-dropdown]').on('click.dropdown', function(e) {\n          self.showDropdown.apply(self, [$(e.currentTarget)]);\n          return false;\n        });\n        this.$().on('click.notifications','a.unread-private-messages, a.unread-notifications, a[data-notifications]', function(e) {\n          self.showNotifications(e);\n          return false;\n        });\n        $(window).bind('scroll.discourse-dock', function() {\n          self.examineDockHeader();\n        });\n        $(document).bind('touchmove.discourse-dock', function() {\n          self.examineDockHeader();\n        });\n        self.examineDockHeader();\n\n        // Delegate ESC to the composer\n        $('body').on('keydown.header', function(e) {\n          // Hide dropdowns\n          if (e.which === 27) {\n            self.$('li').removeClass('active');\n            self.$('.d-dropdown').fadeOut('fast');\n          }\n          if (self.get('editingTopic')) {\n            if (e.which === 13) {\n              self.finishedEdit();\n            }\n            if (e.which === 27) {\n              return self.cancelEdit();\n            }\n          }\n        });\n      }\n    });\n  });";
define("discourse/views/hide-modal", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Em.View.extend({
      // No rendering!
      render: Em.K,

      _hideModal: function() {
        $('#discourse-modal').modal('hide');
      }.on('didInsertElement')
    });
  });

Discourse.HideModalView = require('discourse/views/hide-modal').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/hide-modal.js'] = "define(\"discourse/views/hide-modal\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Em.View.extend({\n      // No rendering!\n      render: Em.K,\n\n      _hideModal: function() {\n        $('#discourse-modal').modal('hide');\n      }.on('didInsertElement')\n    });\n  });";
define("discourse/views/history", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.ModalBodyView.extend({
      templateName: 'modal/history',
      title: I18n.t('history'),

      resizeModal: function(){
        var viewPortHeight = $(window).height();
        this.$(".modal-body").css("max-height", Math.floor(0.8 * viewPortHeight) + "px");
      }.on("didInsertElement")
    });
  });

Discourse.HistoryView = require('discourse/views/history').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/history.js'] = "define(\"discourse/views/history\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.ModalBodyView.extend({\n      templateName: 'modal/history',\n      title: I18n.t('history'),\n\n      resizeModal: function(){\n        var viewPortHeight = $(window).height();\n        this.$(\".modal-body\").css(\"max-height\", Math.floor(0.8 * viewPortHeight) + \"px\");\n      }.on(\"didInsertElement\")\n    });\n  });";
define("discourse/views/input-tip", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      This view handles rendering a tip when a field on a form is invalid

      @class InputTipView
      @extends Discourse.View
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Discourse.View.extend({
      classNameBindings: [':tip', 'good', 'bad'],

      shouldRerender: Discourse.View.renderIfChanged('validation'),
      bad: Em.computed.alias('validation.failed'),
      good: Em.computed.not('bad'),

      render: function(buffer) {
        var reason = this.get('validation.reason');
        if (reason) {
          var icon = this.get('good') ? 'fa-check' : 'fa-times';
          return buffer.push("<i class=\"fa " + icon + "\"></i> " + reason);
        }
      }
    });
  });

Discourse.InputTipView = require('discourse/views/input-tip').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/input-tip.js'] = "define(\"discourse/views/input-tip\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      This view handles rendering a tip when a field on a form is invalid\n\n      @class InputTipView\n      @extends Discourse.View\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Discourse.View.extend({\n      classNameBindings: [':tip', 'good', 'bad'],\n\n      shouldRerender: Discourse.View.renderIfChanged('validation'),\n      bad: Em.computed.alias('validation.failed'),\n      good: Em.computed.not('bad'),\n\n      render: function(buffer) {\n        var reason = this.get('validation.reason');\n        if (reason) {\n          var icon = this.get('good') ? 'fa-check' : 'fa-times';\n          return buffer.push(\"\u003ci class=\\\"fa \" + icon + \"\\\"\u003e\u003c/i\u003e \" + reason);\n        }\n      }\n    });\n  });";
define("discourse/views/invite-private", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.ModalBodyView.extend({
      templateName: 'modal/invite_private',
      title: I18n.t('topic.invite_private.title')
    });
  });

Discourse.InvitePrivateView = require('discourse/views/invite-private').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/invite-private.js'] = "define(\"discourse/views/invite-private\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.ModalBodyView.extend({\n      templateName: 'modal/invite_private',\n      title: I18n.t('topic.invite_private.title')\n    });\n  });";
define("discourse/views/invite-reply-button", 
  ["discourse/views/button","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var ButtonView = __dependency1__["default"];

    __exports__["default"] = ButtonView.extend({
      textKey: 'topic.invite_reply.title',
      helpKey: 'topic.invite_reply.help',
      attributeBindings: ['disabled'],
      disabled: Em.computed.or('controller.archived', 'controller.closed', 'controller.deleted'),

      renderIcon: function(buffer) {
        buffer.push("<i class='fa fa-users'></i>");
      },

      click: function() {
        return this.get('controller').send('showInvite');
      }
    });
  });

Discourse.InviteReplyButtonView = require('discourse/views/invite-reply-button').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/invite-reply-button.js'] = "define(\"discourse/views/invite-reply-button\", \n  [\"discourse/views/button\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ButtonView = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = ButtonView.extend({\n      textKey: 'topic.invite_reply.title',\n      helpKey: 'topic.invite_reply.help',\n      attributeBindings: ['disabled'],\n      disabled: Em.computed.or('controller.archived', 'controller.closed', 'controller.deleted'),\n\n      renderIcon: function(buffer) {\n        buffer.push(\"\u003ci class='fa fa-users'\u003e\u003c/i\u003e\");\n      },\n\n      click: function() {\n        return this.get('controller').send('showInvite');\n      }\n    });\n  });";
define("discourse/views/invite", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.ModalBodyView.extend({
      templateName: 'modal/invite',
      title: function() {
        if (this.get('controller.invitingToTopic')) {
          return I18n.t('topic.invite_reply.title');
        } else {
          return I18n.t('user.invited.create');
        }
      }.property('controller.invitingToTopic')
    });
  });

Discourse.InviteView = require('discourse/views/invite').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/invite.js'] = "define(\"discourse/views/invite\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.ModalBodyView.extend({\n      templateName: 'modal/invite',\n      title: function() {\n        if (this.get('controller.invitingToTopic')) {\n          return I18n.t('topic.invite_reply.title');\n        } else {\n          return I18n.t('user.invited.create');\n        }\n      }.property('controller.invitingToTopic')\n    });\n  });";
define("discourse/views/keyboard-shortcuts-help", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.ModalBodyView.extend({
      templateName: 'modal/keyboard_shortcuts_help',
      title: I18n.t('keyboard_shortcuts_help.title')
    });
  });

Discourse.KeyboardShortcutsHelpView = require('discourse/views/keyboard-shortcuts-help').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/keyboard-shortcuts-help.js'] = "define(\"discourse/views/keyboard-shortcuts-help\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.ModalBodyView.extend({\n      templateName: 'modal/keyboard_shortcuts_help',\n      title: I18n.t('keyboard_shortcuts_help.title')\n    });\n  });";
define("discourse/views/login-reply-button", 
  ["discourse/views/button","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var ButtonView = __dependency1__["default"];

    __exports__["default"] = ButtonView.extend({
      textKey: 'topic.login_reply',
      classNames: ['btn', 'btn-primary', 'create'],
      click: function() {
        this.get('controller').send('showLogin');
      },
      renderIcon: function(buffer) {
        buffer.push("<i class='fa fa-user'></i>");
      }
    });
  });

Discourse.LoginReplyButtonView = require('discourse/views/login-reply-button').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/login-reply-button.js'] = "define(\"discourse/views/login-reply-button\", \n  [\"discourse/views/button\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ButtonView = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = ButtonView.extend({\n      textKey: 'topic.login_reply',\n      classNames: ['btn', 'btn-primary', 'create'],\n      click: function() {\n        this.get('controller').send('showLogin');\n      },\n      renderIcon: function(buffer) {\n        buffer.push(\"\u003ci class='fa fa-user'\u003e\u003c/i\u003e\");\n      }\n    });\n  });";
define("discourse/views/login", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.ModalBodyView.extend({
      templateName: 'modal/login',
      title: I18n.t('login.title'),
      classNames: ['login-modal'],

      mouseMove: function(e) {
        this.set('controller.lastX', e.screenX);
        this.set('controller.lastY', e.screenY);
      },

      _setup: function() {
        var loginController = this.get('controller');

        // Get username and password from the browser's password manager,
        // if it filled the hidden static login form:
        loginController.set('loginName', $('#hidden-login-form input[name=username]').val());
        loginController.set('loginPassword', $('#hidden-login-form input[name=password]').val());

        Em.run.schedule('afterRender', function() {
          $('#login-account-password, #login-account-name').keydown(function(e) {
            if (e.keyCode === 13) {
              if (!loginController.get('loginDisabled')) {
                loginController.send('login');
              }
            }
          });
        });
      }.on('didInsertElement')
    });
  });

Discourse.LoginView = require('discourse/views/login').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/login.js'] = "define(\"discourse/views/login\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.ModalBodyView.extend({\n      templateName: 'modal/login',\n      title: I18n.t('login.title'),\n      classNames: ['login-modal'],\n\n      mouseMove: function(e) {\n        this.set('controller.lastX', e.screenX);\n        this.set('controller.lastY', e.screenY);\n      },\n\n      _setup: function() {\n        var loginController = this.get('controller');\n\n        // Get username and password from the browser's password manager,\n        // if it filled the hidden static login form:\n        loginController.set('loginName', $('#hidden-login-form input[name=username]').val());\n        loginController.set('loginPassword', $('#hidden-login-form input[name=password]').val());\n\n        Em.run.schedule('afterRender', function() {\n          $('#login-account-password, #login-account-name').keydown(function(e) {\n            if (e.keyCode === 13) {\n              if (!loginController.get('loginDisabled')) {\n                loginController.send('login');\n              }\n            }\n          });\n        });\n      }.on('didInsertElement')\n    });\n  });";
define("discourse/views/merge-topic", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.ModalBodyView.extend({
      templateName: 'modal/merge_topic',
      title: I18n.t('topic.merge_topic.title')
    });
  });

Discourse.MergeTopicView = require('discourse/views/merge-topic').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/merge-topic.js'] = "define(\"discourse/views/merge-topic\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.ModalBodyView.extend({\n      templateName: 'modal/merge_topic',\n      title: I18n.t('topic.merge_topic.title')\n    });\n  });";
define("discourse/views/modal", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.View.extend({
      elementId: 'discourse-modal',
      templateName: 'modal/modal',
      classNameBindings: [':modal', ':hidden', 'controller.modalClass']
    });
  });

Discourse.ModalView = require('discourse/views/modal').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/modal.js'] = "define(\"discourse/views/modal\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.View.extend({\n      elementId: 'discourse-modal',\n      templateName: 'modal/modal',\n      classNameBindings: [':modal', ':hidden', 'controller.modalClass']\n    });\n  });";
define("discourse/views/navigation-category", 
  ["discourse/mixins/add-category-class","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var AddCategoryClass = __dependency1__["default"];

    __exports__["default"] = Em.View.extend(AddCategoryClass, {
      categoryId: Em.computed.alias('controller.category.id'),
    });
  });

Discourse.NavigationCategoryView = require('discourse/views/navigation-category').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/navigation-category.js'] = "define(\"discourse/views/navigation-category\", \n  [\"discourse/mixins/add-category-class\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var AddCategoryClass = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Em.View.extend(AddCategoryClass, {\n      categoryId: Em.computed.alias('controller.category.id'),\n    });\n  });";
define("discourse/views/not-activated", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.ModalBodyView.extend({
      templateName: 'modal/not_activated',
      title: I18n.t('log_in')
    });
  });

Discourse.NotActivatedView = require('discourse/views/not-activated').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/not-activated.js'] = "define(\"discourse/views/not-activated\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.ModalBodyView.extend({\n      templateName: 'modal/not_activated',\n      title: I18n.t('log_in')\n    });\n  });";
define("discourse/views/option-boolean", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.GroupedView.extend({
      classNames: ['archetype-option'],
      composerControllerBinding: 'Discourse.router.composerController',
      templateName: "modal/option_boolean",

      _checkedChanged: function() {
        var metaData = this.get('parentView.metaData');
        metaData.set(this.get('content.key'), this.get('checked') ? 'true' : 'false');
        this.get('controller.controllers.composer').saveDraft();
      }.observes('checked')
    });
  });

Discourse.OptionBooleanView = require('discourse/views/option-boolean').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/option-boolean.js'] = "define(\"discourse/views/option-boolean\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.GroupedView.extend({\n      classNames: ['archetype-option'],\n      composerControllerBinding: 'Discourse.router.composerController',\n      templateName: \"modal/option_boolean\",\n\n      _checkedChanged: function() {\n        var metaData = this.get('parentView.metaData');\n        metaData.set(this.get('content.key'), this.get('checked') ? 'true' : 'false');\n        this.get('controller.controllers.composer').saveDraft();\n      }.observes('checked')\n    });\n  });";
define("discourse/views/pagedown-editor", 
  ["discourse/views/pagedown-preview","discourse/views/container","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    /*global assetPath:true */


    var PagedownPreviewView = __dependency1__["default"];
    var DiscourseContainerView = __dependency2__["default"];

    __exports__["default"] = DiscourseContainerView.extend({
      elementId: 'pagedown-editor',

      init: function() {
        this._super();

        $LAB.script(assetPath('defer/html-sanitizer-bundle'));

        // Add a button bar
        this.pushObject(Em.View.create({ elementId: 'wmd-button-bar' }));
        this.pushObject(Em.TextArea.create({ valueBinding: 'parentView.value', elementId: 'wmd-input' }));

        this.attachViewClass(PagedownPreviewView);
      },

      didInsertElement: function() {
        $('#wmd-input').data('init', true);
        this.set('editor', Discourse.Markdown.createEditor());
        this.get('editor').run();
      },

      observeValue: function() {
        var editor = this.get('editor');
        if (!editor) return;
        Ember.run.next(null, function() { editor.refreshPreview(); });
      }.observes('value')

    });
  });

Discourse.PagedownEditorView = require('discourse/views/pagedown-editor').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/pagedown-editor.js'] = "define(\"discourse/views/pagedown-editor\", \n  [\"discourse/views/pagedown-preview\",\"discourse/views/container\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    /*global assetPath:true */\n\n\n    var PagedownPreviewView = __dependency1__[\"default\"];\n    var DiscourseContainerView = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = DiscourseContainerView.extend({\n      elementId: 'pagedown-editor',\n\n      init: function() {\n        this._super();\n\n        $LAB.script(assetPath('defer/html-sanitizer-bundle'));\n\n        // Add a button bar\n        this.pushObject(Em.View.create({ elementId: 'wmd-button-bar' }));\n        this.pushObject(Em.TextArea.create({ valueBinding: 'parentView.value', elementId: 'wmd-input' }));\n\n        this.attachViewClass(PagedownPreviewView);\n      },\n\n      didInsertElement: function() {\n        $('#wmd-input').data('init', true);\n        this.set('editor', Discourse.Markdown.createEditor());\n        this.get('editor').run();\n      },\n\n      observeValue: function() {\n        var editor = this.get('editor');\n        if (!editor) return;\n        Ember.run.next(null, function() { editor.refreshPreview(); });\n      }.observes('value')\n\n    });\n  });";
define("discourse/views/pinned-button", 
  ["discourse/views/dropdown-button","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var DropdownButtonView = __dependency1__["default"];

    __exports__["default"] = DropdownButtonView.extend({
      descriptionKey: 'help',
      classNames: ['pinned-options'],
      title: '',
      longDescription: function(){
        var topic = this.get('topic');
        var globally = topic.get('pinned_globally') ? '_globally' : '';

        var key = 'topic_statuses.' + (topic.get('pinned') ? 'pinned' + globally : 'unpinned') + '.help';
        return I18n.t(key);
      }.property('topic.pinned'),

      topic: Em.computed.alias('controller.model'),
      target: Em.computed.alias('topic'),

      hidden: function(){
        var topic = this.get('topic');
        return topic.get('deleted') || (!topic.get('pinned') && !topic.get('unpinned'));
      }.property('topic.pinned', 'topic.deleted', 'topic.unpinned'),

      activeItem: function(){
        return this.get('topic.pinned') ? 'pinned' : 'unpinned';
      }.property('topic.pinned'),

      dropDownContent: function() {
        var globally = this.get('topic.pinned_globally') ? '_globally' : '';
        return [
          {id: 'pinned',
           title: I18n.t('topic_statuses.pinned' + globally + '.title'),
           description: I18n.t('topic_statuses.pinned' + globally + '.help'),
           styleClasses: 'fa fa-thumb-tack' },
          {id: 'unpinned',
           title: I18n.t('topic_statuses.unpinned.title'),
           description: I18n.t('topic_statuses.unpinned.help'),
           styleClasses: 'fa fa-thumb-tack unpinned' }
        ];
      }.property(),

      text: function() {
        var globally = this.get('topic.pinned_globally') ? '_globally' : '';
        var state = this.get('topic.pinned') ? 'pinned' + globally : 'unpinned';

        return '<span class="fa fa-thumb-tack' + (state === 'unpinned' ? ' unpinned' : "") +  '"></span> ' +
          I18n.t('topic_statuses.' + state + '.title') + "<span class='caret'></span>";
      }.property('topic.pinned', 'topic.unpinned'),

      clicked: function(id) {
        var topic = this.get('topic');
        if(id==='unpinned'){
          topic.clearPin();
        } else {
          topic.rePin();
        }
      }

    });
  });

Discourse.PinnedButtonView = require('discourse/views/pinned-button').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/pinned-button.js'] = "define(\"discourse/views/pinned-button\", \n  [\"discourse/views/dropdown-button\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DropdownButtonView = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = DropdownButtonView.extend({\n      descriptionKey: 'help',\n      classNames: ['pinned-options'],\n      title: '',\n      longDescription: function(){\n        var topic = this.get('topic');\n        var globally = topic.get('pinned_globally') ? '_globally' : '';\n\n        var key = 'topic_statuses.' + (topic.get('pinned') ? 'pinned' + globally : 'unpinned') + '.help';\n        return I18n.t(key);\n      }.property('topic.pinned'),\n\n      topic: Em.computed.alias('controller.model'),\n      target: Em.computed.alias('topic'),\n\n      hidden: function(){\n        var topic = this.get('topic');\n        return topic.get('deleted') || (!topic.get('pinned') \u0026\u0026 !topic.get('unpinned'));\n      }.property('topic.pinned', 'topic.deleted', 'topic.unpinned'),\n\n      activeItem: function(){\n        return this.get('topic.pinned') ? 'pinned' : 'unpinned';\n      }.property('topic.pinned'),\n\n      dropDownContent: function() {\n        var globally = this.get('topic.pinned_globally') ? '_globally' : '';\n        return [\n          {id: 'pinned',\n           title: I18n.t('topic_statuses.pinned' + globally + '.title'),\n           description: I18n.t('topic_statuses.pinned' + globally + '.help'),\n           styleClasses: 'fa fa-thumb-tack' },\n          {id: 'unpinned',\n           title: I18n.t('topic_statuses.unpinned.title'),\n           description: I18n.t('topic_statuses.unpinned.help'),\n           styleClasses: 'fa fa-thumb-tack unpinned' }\n        ];\n      }.property(),\n\n      text: function() {\n        var globally = this.get('topic.pinned_globally') ? '_globally' : '';\n        var state = this.get('topic.pinned') ? 'pinned' + globally : 'unpinned';\n\n        return '\u003cspan class=\"fa fa-thumb-tack' + (state === 'unpinned' ? ' unpinned' : \"\") +  '\"\u003e\u003c/span\u003e ' +\n          I18n.t('topic_statuses.' + state + '.title') + \"\u003cspan class='caret'\u003e\u003c/span\u003e\";\n      }.property('topic.pinned', 'topic.unpinned'),\n\n      clicked: function(id) {\n        var topic = this.get('topic');\n        if(id==='unpinned'){\n          topic.clearPin();\n        } else {\n          topic.rePin();\n        }\n      }\n\n    });\n  });";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  This view extends the functionality of InputTipView with these extra features:
    * it can be dismissed
    * it bounces when it's shown
    * it's absolutely positioned beside the input element, with the help of
      extra css you'll need to write to line it up correctly.

  @class PopupInputTipView
  @extends Discourse.View
  @namespace Discourse
  @module Discourse
**/

Discourse.PopupInputTipView = Discourse.View.extend({
  templateName: 'popup_input_tip',
  classNameBindings: [':popup-tip', 'good', 'bad', 'shownAt::hide'],
  animateAttribute: null,
  bouncePixels: 6,
  bounceDelay: 100,

  click: function() {
    this.set('shownAt', false);
  },

  good: function() {
    return !this.get('validation.failed');
  }.property('validation'),

  bad: function() {
    return this.get('validation.failed');
  }.property('validation'),

  bounce: function() {
    if( this.get('shownAt') ) {
      var $elem = this.$();
      if( !this.animateAttribute ) {
        this.animateAttribute = $elem.css('left') === 'auto' ? 'right' : 'left';
      }
      if( this.animateAttribute === 'left' ) {
        this.bounceLeft($elem);
      } else {
        this.bounceRight($elem);
      }
    }
  }.observes('shownAt'),

  bounceLeft: function($elem) {
    for( var i = 0; i < 5; i++ ) {
      $elem.animate({ left: '+=' + this.bouncePixels }, this.bounceDelay).animate({ left: '-=' + this.bouncePixels }, this.bounceDelay);
    }
  },

  bounceRight: function($elem) {
    for( var i = 0; i < 5; i++ ) {
      $elem.animate({ right: '-=' + this.bouncePixels }, this.bounceDelay).animate({ right: '+=' + this.bouncePixels }, this.bounceDelay);
    }
  }
});

Discourse.View.registerHelper('popupInputTip', Discourse.PopupInputTipView);


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/popup_input_tip_view.js'] = "/**\n  This view extends the functionality of InputTipView with these extra features:\n    * it can be dismissed\n    * it bounces when it's shown\n    * it's absolutely positioned beside the input element, with the help of\n      extra css you'll need to write to line it up correctly.\n\n  @class PopupInputTipView\n  @extends Discourse.View\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.PopupInputTipView = Discourse.View.extend({\n  templateName: 'popup_input_tip',\n  classNameBindings: [':popup-tip', 'good', 'bad', 'shownAt::hide'],\n  animateAttribute: null,\n  bouncePixels: 6,\n  bounceDelay: 100,\n\n  click: function() {\n    this.set('shownAt', false);\n  },\n\n  good: function() {\n    return !this.get('validation.failed');\n  }.property('validation'),\n\n  bad: function() {\n    return this.get('validation.failed');\n  }.property('validation'),\n\n  bounce: function() {\n    if( this.get('shownAt') ) {\n      var $elem = this.$();\n      if( !this.animateAttribute ) {\n        this.animateAttribute = $elem.css('left') === 'auto' ? 'right' : 'left';\n      }\n      if( this.animateAttribute === 'left' ) {\n        this.bounceLeft($elem);\n      } else {\n        this.bounceRight($elem);\n      }\n    }\n  }.observes('shownAt'),\n\n  bounceLeft: function($elem) {\n    for( var i = 0; i \u003c 5; i++ ) {\n      $elem.animate({ left: '+=' + this.bouncePixels }, this.bounceDelay).animate({ left: '-=' + this.bouncePixels }, this.bounceDelay);\n    }\n  },\n\n  bounceRight: function($elem) {\n    for( var i = 0; i \u003c 5; i++ ) {\n      $elem.animate({ right: '-=' + this.bouncePixels }, this.bounceDelay).animate({ right: '+=' + this.bouncePixels }, this.bounceDelay);\n    }\n  }\n});\n\nDiscourse.View.registerHelper('popupInputTip', Discourse.PopupInputTipView);\n";
define("discourse/views/post-menu", 
  ["exports"],
  function(__exports__) {
    "use strict";
    // Helper class for rendering a button
    var Button = function(action, label, icon, opts) {
      this.action = action;
      this.label = label;

      if (typeof icon === "object") {
        this.opts = icon;
      } else {
        this.icon = icon;
      }
      this.opts = this.opts || opts || {};
    };
    __exports__.Button = Button;
    Button.prototype.render = function(buffer) {
      var opts = this.opts;

      buffer.push("<button title=\"" + I18n.t(this.label) + "\"");
      if (opts.disabled) { buffer.push(" disabled"); }
      if (opts.className) { buffer.push(" class=\"" + opts.className + "\""); }
      if (opts.shareUrl) { buffer.push(" data-share-url=\"" + opts.shareUrl + "\""); }
      if (opts.postNumber) { buffer.push(" data-post-number=\"" + opts.postNumber + "\""); }
      buffer.push(" data-action=\"" + this.action + "\">");
      if (this.icon) { buffer.push("<i class=\"fa fa-" + this.icon + "\"></i>"); }
      if (opts.textLabel) { buffer.push(I18n.t(opts.textLabel)); }
      if (opts.innerHTML) { buffer.push(opts.innerHTML); }
      buffer.push("</button>");
    };

    var hiddenButtons;

    __exports__["default"] = Discourse.View.extend({
      tagName: 'section',
      classNames: ['post-menu-area', 'clearfix'],

      shouldRerender: Discourse.View.renderIfChanged(
        'post.deleted_at',
        'post.flagsAvailable.@each',
        'post.reply_count',
        'post.showRepliesBelow',
        'post.can_delete',
        'post.bookmarked',
        'post.shareUrl',
        'post.topic.deleted_at',
        'post.replies.length',
        'post.wiki',
        'collapsed'),

      _collapsedByDefault: function() {
        this.set('collapsed', true);
      }.on('init'),

      render: function(buffer) {
        var post = this.get('post');

        buffer.push("<nav class='post-controls'>");
        this.renderReplies(post, buffer);
        this.renderButtons(post, buffer);
        this.renderAdminPopup(post, buffer);
        buffer.push("</nav>");
      },

      // Delegate click actions
      click: function(e) {
        var $target = $(e.target),
            action = $target.data('action') || $target.parent().data('action');

        if (!action) return;
        var handler = this["click" + action.capitalize()];
        if (!handler) return;

        handler.call(this, this.get('post'));
      },

      // Replies Button
      renderReplies: function(post, buffer) {
        if (!post.get('showRepliesBelow')) return;

        var reply_count = post.get('reply_count');
        buffer.push("<button class='show-replies' data-action='replies'>");
        buffer.push("<span class='badge-posts'>" + reply_count + "</span>");
        buffer.push(I18n.t("post.has_replies", { count: reply_count }));

        var icon = (this.get('post.replies.length') > 0) ? 'fa-chevron-up' : 'fa-chevron-down';
        return buffer.push("<i class='fa " + icon + "'></i></button>");
      },

      renderButtons: function(post, buffer) {
        var self = this,
            allButtons = [],
            visibleButtons = [];

        if (typeof hiddenButtons === "undefined") {
          if (!Em.isEmpty(Discourse.SiteSettings.post_menu_hidden_items)) {
            hiddenButtons = Discourse.SiteSettings.post_menu_hidden_items.split('|');
          } else {
            hiddenButtons = [];
          }
        }

        var yours = post.get('yours');
        Discourse.SiteSettings.post_menu.split("|").forEach(function(i) {
          var creator = self["buttonFor" + i.replace(/\+/, '').capitalize()];
          if (creator) {
            var button = creator.call(self, post);
            if (button) {
              allButtons.push(button);
              if ((yours && button.opts.alwaysShowYours) ||
                  (post.get('wiki') && button.opts.alwaysShowWiki) ||
                  (hiddenButtons.indexOf(i) === -1)) {
                visibleButtons.push(button);
              }
            }
          }
        });

        // Only show ellipsis if there is more than one button hidden
        if (!this.get('collapsed') || (allButtons.length <= visibleButtons.length + 1)) {
          visibleButtons = allButtons;
        } else {
          visibleButtons.splice(visibleButtons.length - 1, 0, this.buttonForShowMoreActions(post));
        }

        buffer.push('<div class="actions">');
        visibleButtons.forEach(function (b) {
          b.render(buffer);
        });
        buffer.push("</div>");
      },

      clickReplies: function() {
        if (this.get('post.replies.length') > 0) {
          this.set('post.replies', []);
        } else {
          this.get('post').loadReplies();
        }
      },

      // Delete button
      buttonForDelete: function(post) {
        var label, icon;

        if (post.get('post_number') === 1) {
          // If it's the first post, the delete/undo actions are related to the topic
          var topic = post.get('topic');
          if (topic.get('deleted_at')) {
            if (!topic.get('details.can_recover')) { return; }
            label = "topic.actions.recover";
            icon = "undo";
          } else {
            if (!topic.get('details.can_delete')) { return; }
            label = "topic.actions.delete";
            icon = "trash-o";
          }

        } else {
          // The delete actions target the post iteself
          if (post.get('deleted_at') || post.get('user_deleted')) {
            if (!post.get('can_recover')) { return; }
            label = "post.controls.undelete";
            icon = "undo";
          } else {
            if (!post.get('can_delete')) { return; }
            label = "post.controls.delete";
            icon = "trash-o";
          }
        }
        var action = (icon === 'trash-o') ? 'delete' : 'recover';
        var opts;
        if (icon === "trash-o"){
          opts = {className: 'delete'};
        }
        return new Button(action, label, icon, opts);
      },

      clickRecover: function(post) {
        this.get('controller').send('recoverPost', post);
      },

      clickDelete: function(post) {
        this.get('controller').send('deletePost', post);
      },

      // Like button
      buttonForLike: function(post) {
        var likeAction = post.get('actionByName.like');
        if (!likeAction) { return; }

        var className = likeAction.get('acted') ? 'has-like' : 'like';
        if (likeAction.get('canToggle')) {
          var descKey = likeAction.get('acted') ? 'post.controls.undo_like' : 'post.controls.like';
          return new Button('like', descKey, 'heart', {className: className});
        } else if (likeAction.get('acted')) {
          return new Button('like', 'post.controls.has_liked', 'heart', {className: className, disabled: true});
        }
      },

      clickLike: function(post) {
        this.get('controller').send('toggleLike', post);
      },

      // Flag button
      buttonForFlag: function(post) {
        if (Em.isEmpty(post.get('flagsAvailable'))) return;
        return new Button('flag', 'post.controls.flag', 'flag');
      },

      clickFlag: function(post) {
        this.get('controller').send('showFlags', post);
      },

      // Edit button
      buttonForEdit: function(post) {
        if (!post.get('can_edit')) return;
        return new Button('edit', 'post.controls.edit', 'pencil', {
          alwaysShowYours: true,
          alwaysShowWiki: true
        });
      },

      clickEdit: function(post) {
        this.get('controller').send('editPost', post);
      },

      // Share button
      buttonForShare: function(post) {
        if (!Discourse.User.current()) return;
        var options = {
          shareUrl: post.get('shareUrl'),
          postNumber: post.get('post_number')
        };
        return new Button('share', 'post.controls.share', 'link', options);
      },

      // Reply button
      buttonForReply: function() {
        if (!this.get('controller.model.details.can_create_post')) return;
        var options = {className: 'create'};

        if(!Discourse.Mobile.mobileView) {
          options.textLabel = 'topic.reply.title';
        }

        return new Button('reply', 'post.controls.reply', 'reply', options);
      },

      clickReply: function(post) {
        this.get('controller').send('replyToPost', post);
      },

      // Bookmark button
      buttonForBookmark: function(post) {
        if (!Discourse.User.current()) return;

        var iconClass = 'read-icon',
            buttonClass = 'bookmark',
            tooltip = 'bookmarks.not_bookmarked';

        if (post.get('bookmarked')) {
          iconClass += ' bookmarked';
          buttonClass += ' bookmarked';
          tooltip = 'bookmarks.created';
        }

        return new Button('bookmark', tooltip, {className: buttonClass, innerHTML: "<div class='" + iconClass + "'>"});
      },

      clickBookmark: function(post) {
        this.get('controller').send('toggleBookmark', post);
      },

      buttonForAdmin: function() {
        if (!Discourse.User.currentProp('canManageTopic')) { return; }
        return new Button('admin', 'post.controls.admin', 'wrench');
      },

      renderAdminPopup: function(post, buffer) {
        if (!Discourse.User.currentProp('canManageTopic')) { return; }
        var wikiText = post.get('wiki') ? I18n.t('post.controls.unwiki') : I18n.t('post.controls.wiki');
        buffer.push('<div class="post-admin-menu"><h3>' + I18n.t('admin_title') + '</h3><ul><li class="btn btn-admin" data-action="toggleWiki"><i class="fa fa-pencil-square-o"></i>' + wikiText +'</li></ul></div>');
      },

      clickAdmin: function() {
        var $adminMenu = this.$('.post-admin-menu');
        this.set('adminMenu', $adminMenu);
        $adminMenu.show();
      },

      clickToggleWiki: function() {
        this.get('controller').send('toggleWiki', this.get('post'));
      },

      buttonForShowMoreActions: function() {
        return new Button('showMoreActions', 'show_more', 'ellipsis-h');
      },

      clickShowMoreActions: function() {
        this.set('collapsed', false);
      }

    });
  });

Discourse.PostMenuView = require('discourse/views/post-menu').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/post-menu.js'] = "define(\"discourse/views/post-menu\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    // Helper class for rendering a button\n    var Button = function(action, label, icon, opts) {\n      this.action = action;\n      this.label = label;\n\n      if (typeof icon === \"object\") {\n        this.opts = icon;\n      } else {\n        this.icon = icon;\n      }\n      this.opts = this.opts || opts || {};\n    };\n    __exports__.Button = Button;\n    Button.prototype.render = function(buffer) {\n      var opts = this.opts;\n\n      buffer.push(\"\u003cbutton title=\\\"\" + I18n.t(this.label) + \"\\\"\");\n      if (opts.disabled) { buffer.push(\" disabled\"); }\n      if (opts.className) { buffer.push(\" class=\\\"\" + opts.className + \"\\\"\"); }\n      if (opts.shareUrl) { buffer.push(\" data-share-url=\\\"\" + opts.shareUrl + \"\\\"\"); }\n      if (opts.postNumber) { buffer.push(\" data-post-number=\\\"\" + opts.postNumber + \"\\\"\"); }\n      buffer.push(\" data-action=\\\"\" + this.action + \"\\\"\u003e\");\n      if (this.icon) { buffer.push(\"\u003ci class=\\\"fa fa-\" + this.icon + \"\\\"\u003e\u003c/i\u003e\"); }\n      if (opts.textLabel) { buffer.push(I18n.t(opts.textLabel)); }\n      if (opts.innerHTML) { buffer.push(opts.innerHTML); }\n      buffer.push(\"\u003c/button\u003e\");\n    };\n\n    var hiddenButtons;\n\n    __exports__[\"default\"] = Discourse.View.extend({\n      tagName: 'section',\n      classNames: ['post-menu-area', 'clearfix'],\n\n      shouldRerender: Discourse.View.renderIfChanged(\n        'post.deleted_at',\n        'post.flagsAvailable.@each',\n        'post.reply_count',\n        'post.showRepliesBelow',\n        'post.can_delete',\n        'post.bookmarked',\n        'post.shareUrl',\n        'post.topic.deleted_at',\n        'post.replies.length',\n        'post.wiki',\n        'collapsed'),\n\n      _collapsedByDefault: function() {\n        this.set('collapsed', true);\n      }.on('init'),\n\n      render: function(buffer) {\n        var post = this.get('post');\n\n        buffer.push(\"\u003cnav class='post-controls'\u003e\");\n        this.renderReplies(post, buffer);\n        this.renderButtons(post, buffer);\n        this.renderAdminPopup(post, buffer);\n        buffer.push(\"\u003c/nav\u003e\");\n      },\n\n      // Delegate click actions\n      click: function(e) {\n        var $target = $(e.target),\n            action = $target.data('action') || $target.parent().data('action');\n\n        if (!action) return;\n        var handler = this[\"click\" + action.capitalize()];\n        if (!handler) return;\n\n        handler.call(this, this.get('post'));\n      },\n\n      // Replies Button\n      renderReplies: function(post, buffer) {\n        if (!post.get('showRepliesBelow')) return;\n\n        var reply_count = post.get('reply_count');\n        buffer.push(\"\u003cbutton class='show-replies' data-action='replies'\u003e\");\n        buffer.push(\"\u003cspan class='badge-posts'\u003e\" + reply_count + \"\u003c/span\u003e\");\n        buffer.push(I18n.t(\"post.has_replies\", { count: reply_count }));\n\n        var icon = (this.get('post.replies.length') \u003e 0) ? 'fa-chevron-up' : 'fa-chevron-down';\n        return buffer.push(\"\u003ci class='fa \" + icon + \"'\u003e\u003c/i\u003e\u003c/button\u003e\");\n      },\n\n      renderButtons: function(post, buffer) {\n        var self = this,\n            allButtons = [],\n            visibleButtons = [];\n\n        if (typeof hiddenButtons === \"undefined\") {\n          if (!Em.isEmpty(Discourse.SiteSettings.post_menu_hidden_items)) {\n            hiddenButtons = Discourse.SiteSettings.post_menu_hidden_items.split('|');\n          } else {\n            hiddenButtons = [];\n          }\n        }\n\n        var yours = post.get('yours');\n        Discourse.SiteSettings.post_menu.split(\"|\").forEach(function(i) {\n          var creator = self[\"buttonFor\" + i.replace(/\\+/, '').capitalize()];\n          if (creator) {\n            var button = creator.call(self, post);\n            if (button) {\n              allButtons.push(button);\n              if ((yours \u0026\u0026 button.opts.alwaysShowYours) ||\n                  (post.get('wiki') \u0026\u0026 button.opts.alwaysShowWiki) ||\n                  (hiddenButtons.indexOf(i) === -1)) {\n                visibleButtons.push(button);\n              }\n            }\n          }\n        });\n\n        // Only show ellipsis if there is more than one button hidden\n        if (!this.get('collapsed') || (allButtons.length \u003c= visibleButtons.length + 1)) {\n          visibleButtons = allButtons;\n        } else {\n          visibleButtons.splice(visibleButtons.length - 1, 0, this.buttonForShowMoreActions(post));\n        }\n\n        buffer.push('\u003cdiv class=\"actions\"\u003e');\n        visibleButtons.forEach(function (b) {\n          b.render(buffer);\n        });\n        buffer.push(\"\u003c/div\u003e\");\n      },\n\n      clickReplies: function() {\n        if (this.get('post.replies.length') \u003e 0) {\n          this.set('post.replies', []);\n        } else {\n          this.get('post').loadReplies();\n        }\n      },\n\n      // Delete button\n      buttonForDelete: function(post) {\n        var label, icon;\n\n        if (post.get('post_number') === 1) {\n          // If it's the first post, the delete/undo actions are related to the topic\n          var topic = post.get('topic');\n          if (topic.get('deleted_at')) {\n            if (!topic.get('details.can_recover')) { return; }\n            label = \"topic.actions.recover\";\n            icon = \"undo\";\n          } else {\n            if (!topic.get('details.can_delete')) { return; }\n            label = \"topic.actions.delete\";\n            icon = \"trash-o\";\n          }\n\n        } else {\n          // The delete actions target the post iteself\n          if (post.get('deleted_at') || post.get('user_deleted')) {\n            if (!post.get('can_recover')) { return; }\n            label = \"post.controls.undelete\";\n            icon = \"undo\";\n          } else {\n            if (!post.get('can_delete')) { return; }\n            label = \"post.controls.delete\";\n            icon = \"trash-o\";\n          }\n        }\n        var action = (icon === 'trash-o') ? 'delete' : 'recover';\n        var opts;\n        if (icon === \"trash-o\"){\n          opts = {className: 'delete'};\n        }\n        return new Button(action, label, icon, opts);\n      },\n\n      clickRecover: function(post) {\n        this.get('controller').send('recoverPost', post);\n      },\n\n      clickDelete: function(post) {\n        this.get('controller').send('deletePost', post);\n      },\n\n      // Like button\n      buttonForLike: function(post) {\n        var likeAction = post.get('actionByName.like');\n        if (!likeAction) { return; }\n\n        var className = likeAction.get('acted') ? 'has-like' : 'like';\n        if (likeAction.get('canToggle')) {\n          var descKey = likeAction.get('acted') ? 'post.controls.undo_like' : 'post.controls.like';\n          return new Button('like', descKey, 'heart', {className: className});\n        } else if (likeAction.get('acted')) {\n          return new Button('like', 'post.controls.has_liked', 'heart', {className: className, disabled: true});\n        }\n      },\n\n      clickLike: function(post) {\n        this.get('controller').send('toggleLike', post);\n      },\n\n      // Flag button\n      buttonForFlag: function(post) {\n        if (Em.isEmpty(post.get('flagsAvailable'))) return;\n        return new Button('flag', 'post.controls.flag', 'flag');\n      },\n\n      clickFlag: function(post) {\n        this.get('controller').send('showFlags', post);\n      },\n\n      // Edit button\n      buttonForEdit: function(post) {\n        if (!post.get('can_edit')) return;\n        return new Button('edit', 'post.controls.edit', 'pencil', {\n          alwaysShowYours: true,\n          alwaysShowWiki: true\n        });\n      },\n\n      clickEdit: function(post) {\n        this.get('controller').send('editPost', post);\n      },\n\n      // Share button\n      buttonForShare: function(post) {\n        if (!Discourse.User.current()) return;\n        var options = {\n          shareUrl: post.get('shareUrl'),\n          postNumber: post.get('post_number')\n        };\n        return new Button('share', 'post.controls.share', 'link', options);\n      },\n\n      // Reply button\n      buttonForReply: function() {\n        if (!this.get('controller.model.details.can_create_post')) return;\n        var options = {className: 'create'};\n\n        if(!Discourse.Mobile.mobileView) {\n          options.textLabel = 'topic.reply.title';\n        }\n\n        return new Button('reply', 'post.controls.reply', 'reply', options);\n      },\n\n      clickReply: function(post) {\n        this.get('controller').send('replyToPost', post);\n      },\n\n      // Bookmark button\n      buttonForBookmark: function(post) {\n        if (!Discourse.User.current()) return;\n\n        var iconClass = 'read-icon',\n            buttonClass = 'bookmark',\n            tooltip = 'bookmarks.not_bookmarked';\n\n        if (post.get('bookmarked')) {\n          iconClass += ' bookmarked';\n          buttonClass += ' bookmarked';\n          tooltip = 'bookmarks.created';\n        }\n\n        return new Button('bookmark', tooltip, {className: buttonClass, innerHTML: \"\u003cdiv class='\" + iconClass + \"'\u003e\"});\n      },\n\n      clickBookmark: function(post) {\n        this.get('controller').send('toggleBookmark', post);\n      },\n\n      buttonForAdmin: function() {\n        if (!Discourse.User.currentProp('canManageTopic')) { return; }\n        return new Button('admin', 'post.controls.admin', 'wrench');\n      },\n\n      renderAdminPopup: function(post, buffer) {\n        if (!Discourse.User.currentProp('canManageTopic')) { return; }\n        var wikiText = post.get('wiki') ? I18n.t('post.controls.unwiki') : I18n.t('post.controls.wiki');\n        buffer.push('\u003cdiv class=\"post-admin-menu\"\u003e\u003ch3\u003e' + I18n.t('admin_title') + '\u003c/h3\u003e\u003cul\u003e\u003cli class=\"btn btn-admin\" data-action=\"toggleWiki\"\u003e\u003ci class=\"fa fa-pencil-square-o\"\u003e\u003c/i\u003e' + wikiText +'\u003c/li\u003e\u003c/ul\u003e\u003c/div\u003e');\n      },\n\n      clickAdmin: function() {\n        var $adminMenu = this.$('.post-admin-menu');\n        this.set('adminMenu', $adminMenu);\n        $adminMenu.show();\n      },\n\n      clickToggleWiki: function() {\n        this.get('controller').send('toggleWiki', this.get('post'));\n      },\n\n      buttonForShowMoreActions: function() {\n        return new Button('showMoreActions', 'show_more', 'ellipsis-h');\n      },\n\n      clickShowMoreActions: function() {\n        this.set('collapsed', false);\n      }\n\n    });\n  });";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

var DAY = 60 * 50 * 1000;

Discourse.PostView = Discourse.GroupedView.extend(Ember.Evented, {
  classNames: ['topic-post', 'clearfix'],
  templateName: 'post',
  classNameBindings: ['postTypeClass',
                      'selected',
                      'post.hidden:post-hidden',
                      'post.deleted',
                      'groupNameClass'],
  postBinding: 'content',

  historyHeat: function() {
    var updatedAt = this.get('post.updated_at');
    if (!updatedAt) { return; }

    // Show heat on age
    var rightNow = new Date().getTime(),
        updatedAtDate = new Date(updatedAt).getTime();

    if (updatedAtDate > (rightNow - DAY * Discourse.SiteSettings.history_hours_low)) return 'heatmap-high';
    if (updatedAtDate > (rightNow - DAY * Discourse.SiteSettings.history_hours_medium)) return 'heatmap-med';
    if (updatedAtDate > (rightNow - DAY * Discourse.SiteSettings.history_hours_high)) return 'heatmap-low';
  }.property('post.updated_at'),

  postTypeClass: function() {
    return this.get('post.post_type') === Discourse.Site.currentProp('post_types.moderator_action') ? 'moderator' : 'regular';
  }.property('post.post_type'),

  groupNameClass: function() {
    var primaryGroupName = this.get('post.primary_group_name');
    if (primaryGroupName) {
      return "group-" + primaryGroupName;
    }
  }.property('post.primary_group_name'),

  showExpandButton: function() {
    if (this.get('controller.firstPostExpanded')) { return false; }

    var post = this.get('post');
    return post.get('post_number') === 1 && post.get('topic.expandable_first_post');
  }.property('post.post_number', 'controller.firstPostExpanded'),

  // If the cooked content changed, add the quote controls
  cookedChanged: function() {
    Em.run.scheduleOnce('afterRender', this, '_insertQuoteControls');
  }.observes('post.cooked'),

  mouseUp: function(e) {
    if (this.get('controller.multiSelect') && (e.metaKey || e.ctrlKey)) {
      this.get('controller').toggledSelectedPost(this.get('post'));
    }

    var $adminMenu = this.get('adminMenu');
    if ($adminMenu && !$(e.target).is($adminMenu) && $adminMenu.has($(e.target)).length === 0) {
      $adminMenu.hide();
      this.set('adminMenu', null);
    }
  },

  selected: function() {
    return this.get('controller').postSelected(this.get('post'));
  }.property('controller.selectedPostsCount'),

  canSelectReplies: function() {
    if (this.get('post.reply_count') === 0) { return false; }
    return !this.get('selected');
  }.property('post.reply_count', 'selected'),

  selectPostText: function() {
    return this.get('selected') ? I18n.t('topic.multi_select.selected', { count: this.get('controller.selectedPostsCount') }) : I18n.t('topic.multi_select.select');
  }.property('selected', 'controller.selectedPostsCount'),

  repliesShown: Em.computed.gt('post.replies.length', 0),

  _updateQuoteElements: function($aside, desc) {
    var navLink = "",
        quoteTitle = I18n.t("post.follow_quote"),
        postNumber = $aside.data('post');

    if (postNumber) {

      // If we have a topic reference
      var topicId, topic;
      if (topicId = $aside.data('topic')) {
        topic = this.get('controller.content');

        // If it's the same topic as ours, build the URL from the topic object
        if (topic && topic.get('id') === topicId) {
          navLink = "<a href='" + topic.urlForPostNumber(postNumber) + "' title='" + quoteTitle + "' class='back'></a>";
        } else {
          // Made up slug should be replaced with canonical URL
          navLink = "<a href='" + Discourse.getURL("/t/via-quote/") + topicId + "/" + postNumber + "' title='" + quoteTitle + "' class='quote-other-topic'></a>";
        }

      } else if (topic = this.get('controller.content')) {
        // assume the same topic
        navLink = "<a href='" + topic.urlForPostNumber(postNumber) + "' title='" + quoteTitle + "' class='back'></a>";
      }
    }
    // Only add the expand/contract control if it's not a full post
    var expandContract = "";
    if (!$aside.data('full')) {
      expandContract = "<i class='fa fa-" + desc + "' title='" + I18n.t("post.expand_collapse") + "'></i>";
      $aside.css('cursor', 'pointer');
    }
    $('.quote-controls', $aside).html(expandContract + navLink);
  },

  _toggleQuote: function($aside) {
    if (this.get('expanding')) { return; }
    this.set('expanding', true);

    $aside.data('expanded', !$aside.data('expanded'));

    var self = this,
        finished = function() {
          self.set('expanding', false);
        };

    if ($aside.data('expanded')) {
      this._updateQuoteElements($aside, 'chevron-up');
      // Show expanded quote
      var $blockQuote = $('blockquote', $aside);
      $aside.data('original-contents',$blockQuote.html());

      var originalText = $blockQuote.text().trim();
      $blockQuote.html(I18n.t("loading"));
      var topicId = this.get('post.topic_id');
      if ($aside.data('topic')) {
        topicId = $aside.data('topic');
      }

      var postId = parseInt($aside.data('post'), 10);
      topicId = parseInt(topicId, 10);

      Discourse.ajax("/posts/by_number/" + topicId + "/" + postId).then(function (result) {
        var parsed = $(result.cooked);
        parsed.replaceText(originalText, "<span class='highlighted'>" + originalText + "</span>");
        $blockQuote.showHtml(parsed, 'fast', finished);
      });
    } else {
      // Hide expanded quote
      this._updateQuoteElements($aside, 'chevron-down');
      $('blockquote', $aside).showHtml($aside.data('original-contents'), 'fast', finished);
    }
    return false;
  },

  // Show how many times links have been clicked on
  _showLinkCounts: function() {
    var self = this,
        link_counts = this.get('post.link_counts');

    if (!link_counts) return;

    link_counts.forEach(function(lc) {
      if (!lc.clicks || lc.clicks < 1) return;

      self.$(".cooked a[href]").each(function() {
        var link = $(this);
        if (!lc.internal && link.attr('href') === lc.url) {
          // don't display badge counts on category badge
          if (link.closest('.badge-category').length === 0 && ((link.closest(".onebox-result").length === 0 && link.closest('.onebox-body').length === 0) || link.hasClass("track-link"))) {
            link.append("<span class='badge badge-notification clicks' title='" +
                        I18n.t("topic_map.clicks", {count: lc.clicks}) +
                        "'>" + Discourse.Formatter.number(lc.clicks) + "</span>");
          }
        }
      });
    });
  },

  actions: {
    /**
      Toggle the replies this post is a reply to

      @method showReplyHistory
    **/
    toggleReplyHistory: function(post) {

      var replyHistory = post.get('replyHistory'),
          topicController = this.get('controller'),
          origScrollTop = $(window).scrollTop();


      if (replyHistory.length > 0) {
        var origHeight = this.$('.embedded-posts.top').height();

        replyHistory.clear();
        Em.run.next(function() {
          $(window).scrollTop(origScrollTop - origHeight);
        });
      } else {
        post.set('loadingReplyHistory', true);

        var self = this;
        topicController.get('postStream').findReplyHistory(post).then(function () {
          post.set('loadingReplyHistory', false);

          Em.run.next(function() {
            $(window).scrollTop(origScrollTop + self.$('.embedded-posts.top').height());
          });
        });
      }
    }
  },

  // Add the quote controls to a post
  _insertQuoteControls: function() {
    var self = this,
        $quotes = this.$('aside.quote');

    // Safety check - in some cases with cloackedView this seems to be `undefined`.
    if (Em.isEmpty($quotes)) { return; }

    $quotes.each(function(i, e) {
      var $aside = $(e);
      if ($aside.data('post')) {
        self._updateQuoteElements($aside, 'chevron-down');
        var $title = $('.title', $aside);

        // Unless it's a full quote, allow click to expand
        if (!($aside.data('full') || $title.data('has-quote-controls'))) {
          $title.on('click', function(e) {
            if ($(e.target).is('a')) return true;
            self._toggleQuote($aside);
          });
          $title.data('has-quote-controls', true);
        }
      }
    });
  },

  _destroyedPostView: function() {
    Discourse.ScreenTrack.current().stopTracking(this.get('elementId'));
    this._unbindExpandMentions();
  }.on('willDestroyElement'),

  _postViewInserted: function() {
    var $post = this.$(),
        post = this.get('post'),
        postNumber = post.get('post_number');

    this._showLinkCounts();

    // Track this post
    Discourse.ScreenTrack.current().track(this.$().prop('id'), postNumber);

    // Highlight the post if required
    if (postNumber > 1) {
      Discourse.PostView.considerHighlighting(this.get('controller'), postNumber);
    }

    // Add syntax highlighting
    Discourse.SyntaxHighlighting.apply($post);
    Discourse.Lightbox.apply($post);

    this.trigger('postViewInserted', $post);

    // Find all the quotes
    Em.run.scheduleOnce('afterRender', this, '_insertQuoteControls');

    this._applySearchHighlight();
    this._bindExpandMentions();
  }.on('didInsertElement'),

  _bindExpandMentions: function() {
    var self = this;
    this.$('.cooked').on('click.discourse-mention', 'a.mention', function(e) {
      var $target = $(e.target);
      self.appEvents.trigger('poster:expand', $target);
      self.get('controller').send('expandPostUsername', $target.text());
      return false;
    });
  },

  _unbindExpandMentions: function() {
    this.$('.cooked').off('click.discourse-mention');
  },

  _applySearchHighlight: function() {
    var highlight = this.get('controller.searchHighlight');
    var cooked = this.$('.cooked');

    if(!cooked){ return; }

    if(highlight && highlight.length > 2){
      if(this._highlighted){
         cooked.unhighlight();
      }
      cooked.highlight(highlight.split(/\s+/));
      this._highlighted = true;

    } else if(this._highlighted){
      cooked.unhighlight();
      this._highlighted = false;
    }
  }.observes('controller.searchHighlight', 'cooked')
});

Discourse.PostView.reopenClass({
  considerHighlighting: function(controller, postNumber) {
    var highlightNumber = controller.get('highlightOnInsert');

    // If we're meant to highlight a post
    if (highlightNumber === postNumber) {
      controller.set('highlightOnInsert', null);
      var $contents = $('#post_' + postNumber +' .topic-body'),
          origColor = $contents.data('orig-color') || $contents.css('backgroundColor');

      $contents.data("orig-color", origColor);
      $contents
        .addClass('highlighted')
        .stop()
        .animate({ backgroundColor: origColor }, 2500, 'swing', function(){
          $contents.removeClass('highlighted');
          $contents.css({'background-color': ''});
        });
    }
  }
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/post_view.js'] = "var DAY = 60 * 50 * 1000;\n\nDiscourse.PostView = Discourse.GroupedView.extend(Ember.Evented, {\n  classNames: ['topic-post', 'clearfix'],\n  templateName: 'post',\n  classNameBindings: ['postTypeClass',\n                      'selected',\n                      'post.hidden:post-hidden',\n                      'post.deleted',\n                      'groupNameClass'],\n  postBinding: 'content',\n\n  historyHeat: function() {\n    var updatedAt = this.get('post.updated_at');\n    if (!updatedAt) { return; }\n\n    // Show heat on age\n    var rightNow = new Date().getTime(),\n        updatedAtDate = new Date(updatedAt).getTime();\n\n    if (updatedAtDate \u003e (rightNow - DAY * Discourse.SiteSettings.history_hours_low)) return 'heatmap-high';\n    if (updatedAtDate \u003e (rightNow - DAY * Discourse.SiteSettings.history_hours_medium)) return 'heatmap-med';\n    if (updatedAtDate \u003e (rightNow - DAY * Discourse.SiteSettings.history_hours_high)) return 'heatmap-low';\n  }.property('post.updated_at'),\n\n  postTypeClass: function() {\n    return this.get('post.post_type') === Discourse.Site.currentProp('post_types.moderator_action') ? 'moderator' : 'regular';\n  }.property('post.post_type'),\n\n  groupNameClass: function() {\n    var primaryGroupName = this.get('post.primary_group_name');\n    if (primaryGroupName) {\n      return \"group-\" + primaryGroupName;\n    }\n  }.property('post.primary_group_name'),\n\n  showExpandButton: function() {\n    if (this.get('controller.firstPostExpanded')) { return false; }\n\n    var post = this.get('post');\n    return post.get('post_number') === 1 \u0026\u0026 post.get('topic.expandable_first_post');\n  }.property('post.post_number', 'controller.firstPostExpanded'),\n\n  // If the cooked content changed, add the quote controls\n  cookedChanged: function() {\n    Em.run.scheduleOnce('afterRender', this, '_insertQuoteControls');\n  }.observes('post.cooked'),\n\n  mouseUp: function(e) {\n    if (this.get('controller.multiSelect') \u0026\u0026 (e.metaKey || e.ctrlKey)) {\n      this.get('controller').toggledSelectedPost(this.get('post'));\n    }\n\n    var $adminMenu = this.get('adminMenu');\n    if ($adminMenu \u0026\u0026 !$(e.target).is($adminMenu) \u0026\u0026 $adminMenu.has($(e.target)).length === 0) {\n      $adminMenu.hide();\n      this.set('adminMenu', null);\n    }\n  },\n\n  selected: function() {\n    return this.get('controller').postSelected(this.get('post'));\n  }.property('controller.selectedPostsCount'),\n\n  canSelectReplies: function() {\n    if (this.get('post.reply_count') === 0) { return false; }\n    return !this.get('selected');\n  }.property('post.reply_count', 'selected'),\n\n  selectPostText: function() {\n    return this.get('selected') ? I18n.t('topic.multi_select.selected', { count: this.get('controller.selectedPostsCount') }) : I18n.t('topic.multi_select.select');\n  }.property('selected', 'controller.selectedPostsCount'),\n\n  repliesShown: Em.computed.gt('post.replies.length', 0),\n\n  _updateQuoteElements: function($aside, desc) {\n    var navLink = \"\",\n        quoteTitle = I18n.t(\"post.follow_quote\"),\n        postNumber = $aside.data('post');\n\n    if (postNumber) {\n\n      // If we have a topic reference\n      var topicId, topic;\n      if (topicId = $aside.data('topic')) {\n        topic = this.get('controller.content');\n\n        // If it's the same topic as ours, build the URL from the topic object\n        if (topic \u0026\u0026 topic.get('id') === topicId) {\n          navLink = \"\u003ca href='\" + topic.urlForPostNumber(postNumber) + \"' title='\" + quoteTitle + \"' class='back'\u003e\u003c/a\u003e\";\n        } else {\n          // Made up slug should be replaced with canonical URL\n          navLink = \"\u003ca href='\" + Discourse.getURL(\"/t/via-quote/\") + topicId + \"/\" + postNumber + \"' title='\" + quoteTitle + \"' class='quote-other-topic'\u003e\u003c/a\u003e\";\n        }\n\n      } else if (topic = this.get('controller.content')) {\n        // assume the same topic\n        navLink = \"\u003ca href='\" + topic.urlForPostNumber(postNumber) + \"' title='\" + quoteTitle + \"' class='back'\u003e\u003c/a\u003e\";\n      }\n    }\n    // Only add the expand/contract control if it's not a full post\n    var expandContract = \"\";\n    if (!$aside.data('full')) {\n      expandContract = \"\u003ci class='fa fa-\" + desc + \"' title='\" + I18n.t(\"post.expand_collapse\") + \"'\u003e\u003c/i\u003e\";\n      $aside.css('cursor', 'pointer');\n    }\n    $('.quote-controls', $aside).html(expandContract + navLink);\n  },\n\n  _toggleQuote: function($aside) {\n    if (this.get('expanding')) { return; }\n    this.set('expanding', true);\n\n    $aside.data('expanded', !$aside.data('expanded'));\n\n    var self = this,\n        finished = function() {\n          self.set('expanding', false);\n        };\n\n    if ($aside.data('expanded')) {\n      this._updateQuoteElements($aside, 'chevron-up');\n      // Show expanded quote\n      var $blockQuote = $('blockquote', $aside);\n      $aside.data('original-contents',$blockQuote.html());\n\n      var originalText = $blockQuote.text().trim();\n      $blockQuote.html(I18n.t(\"loading\"));\n      var topicId = this.get('post.topic_id');\n      if ($aside.data('topic')) {\n        topicId = $aside.data('topic');\n      }\n\n      var postId = parseInt($aside.data('post'), 10);\n      topicId = parseInt(topicId, 10);\n\n      Discourse.ajax(\"/posts/by_number/\" + topicId + \"/\" + postId).then(function (result) {\n        var parsed = $(result.cooked);\n        parsed.replaceText(originalText, \"\u003cspan class='highlighted'\u003e\" + originalText + \"\u003c/span\u003e\");\n        $blockQuote.showHtml(parsed, 'fast', finished);\n      });\n    } else {\n      // Hide expanded quote\n      this._updateQuoteElements($aside, 'chevron-down');\n      $('blockquote', $aside).showHtml($aside.data('original-contents'), 'fast', finished);\n    }\n    return false;\n  },\n\n  // Show how many times links have been clicked on\n  _showLinkCounts: function() {\n    var self = this,\n        link_counts = this.get('post.link_counts');\n\n    if (!link_counts) return;\n\n    link_counts.forEach(function(lc) {\n      if (!lc.clicks || lc.clicks \u003c 1) return;\n\n      self.$(\".cooked a[href]\").each(function() {\n        var link = $(this);\n        if (!lc.internal \u0026\u0026 link.attr('href') === lc.url) {\n          // don't display badge counts on category badge\n          if (link.closest('.badge-category').length === 0 \u0026\u0026 ((link.closest(\".onebox-result\").length === 0 \u0026\u0026 link.closest('.onebox-body').length === 0) || link.hasClass(\"track-link\"))) {\n            link.append(\"\u003cspan class='badge badge-notification clicks' title='\" +\n                        I18n.t(\"topic_map.clicks\", {count: lc.clicks}) +\n                        \"'\u003e\" + Discourse.Formatter.number(lc.clicks) + \"\u003c/span\u003e\");\n          }\n        }\n      });\n    });\n  },\n\n  actions: {\n    /**\n      Toggle the replies this post is a reply to\n\n      @method showReplyHistory\n    **/\n    toggleReplyHistory: function(post) {\n\n      var replyHistory = post.get('replyHistory'),\n          topicController = this.get('controller'),\n          origScrollTop = $(window).scrollTop();\n\n\n      if (replyHistory.length \u003e 0) {\n        var origHeight = this.$('.embedded-posts.top').height();\n\n        replyHistory.clear();\n        Em.run.next(function() {\n          $(window).scrollTop(origScrollTop - origHeight);\n        });\n      } else {\n        post.set('loadingReplyHistory', true);\n\n        var self = this;\n        topicController.get('postStream').findReplyHistory(post).then(function () {\n          post.set('loadingReplyHistory', false);\n\n          Em.run.next(function() {\n            $(window).scrollTop(origScrollTop + self.$('.embedded-posts.top').height());\n          });\n        });\n      }\n    }\n  },\n\n  // Add the quote controls to a post\n  _insertQuoteControls: function() {\n    var self = this,\n        $quotes = this.$('aside.quote');\n\n    // Safety check - in some cases with cloackedView this seems to be `undefined`.\n    if (Em.isEmpty($quotes)) { return; }\n\n    $quotes.each(function(i, e) {\n      var $aside = $(e);\n      if ($aside.data('post')) {\n        self._updateQuoteElements($aside, 'chevron-down');\n        var $title = $('.title', $aside);\n\n        // Unless it's a full quote, allow click to expand\n        if (!($aside.data('full') || $title.data('has-quote-controls'))) {\n          $title.on('click', function(e) {\n            if ($(e.target).is('a')) return true;\n            self._toggleQuote($aside);\n          });\n          $title.data('has-quote-controls', true);\n        }\n      }\n    });\n  },\n\n  _destroyedPostView: function() {\n    Discourse.ScreenTrack.current().stopTracking(this.get('elementId'));\n    this._unbindExpandMentions();\n  }.on('willDestroyElement'),\n\n  _postViewInserted: function() {\n    var $post = this.$(),\n        post = this.get('post'),\n        postNumber = post.get('post_number');\n\n    this._showLinkCounts();\n\n    // Track this post\n    Discourse.ScreenTrack.current().track(this.$().prop('id'), postNumber);\n\n    // Highlight the post if required\n    if (postNumber \u003e 1) {\n      Discourse.PostView.considerHighlighting(this.get('controller'), postNumber);\n    }\n\n    // Add syntax highlighting\n    Discourse.SyntaxHighlighting.apply($post);\n    Discourse.Lightbox.apply($post);\n\n    this.trigger('postViewInserted', $post);\n\n    // Find all the quotes\n    Em.run.scheduleOnce('afterRender', this, '_insertQuoteControls');\n\n    this._applySearchHighlight();\n    this._bindExpandMentions();\n  }.on('didInsertElement'),\n\n  _bindExpandMentions: function() {\n    var self = this;\n    this.$('.cooked').on('click.discourse-mention', 'a.mention', function(e) {\n      var $target = $(e.target);\n      self.appEvents.trigger('poster:expand', $target);\n      self.get('controller').send('expandPostUsername', $target.text());\n      return false;\n    });\n  },\n\n  _unbindExpandMentions: function() {\n    this.$('.cooked').off('click.discourse-mention');\n  },\n\n  _applySearchHighlight: function() {\n    var highlight = this.get('controller.searchHighlight');\n    var cooked = this.$('.cooked');\n\n    if(!cooked){ return; }\n\n    if(highlight \u0026\u0026 highlight.length \u003e 2){\n      if(this._highlighted){\n         cooked.unhighlight();\n      }\n      cooked.highlight(highlight.split(/\\s+/));\n      this._highlighted = true;\n\n    } else if(this._highlighted){\n      cooked.unhighlight();\n      this._highlighted = false;\n    }\n  }.observes('controller.searchHighlight', 'cooked')\n});\n\nDiscourse.PostView.reopenClass({\n  considerHighlighting: function(controller, postNumber) {\n    var highlightNumber = controller.get('highlightOnInsert');\n\n    // If we're meant to highlight a post\n    if (highlightNumber === postNumber) {\n      controller.set('highlightOnInsert', null);\n      var $contents = $('#post_' + postNumber +' .topic-body'),\n          origColor = $contents.data('orig-color') || $contents.css('backgroundColor');\n\n      $contents.data(\"orig-color\", origColor);\n      $contents\n        .addClass('highlighted')\n        .stop()\n        .animate({ backgroundColor: origColor }, 2500, 'swing', function(){\n          $contents.removeClass('highlighted');\n          $contents.css({'background-color': ''});\n        });\n    }\n  }\n});\n";
define("discourse/views/posters-column", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.CollectionView.extend({
      classNames: ['posters'],
      tagName: 'td',
      content: Em.computed.alias('posters'),
      itemViewClass: 'topic-list-poster'
    });
  });

Discourse.PostersColumnView = require('discourse/views/posters-column').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/posters-column.js'] = "define(\"discourse/views/posters-column\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.CollectionView.extend({\n      classNames: ['posters'],\n      tagName: 'td',\n      content: Em.computed.alias('posters'),\n      itemViewClass: 'topic-list-poster'\n    });\n  });";
define("discourse/views/preferences-about", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.View.extend({
      templateName: 'user/about',
      classNames: ['user-preferences'],

      _focusAbout: function() {
        var self = this;
        Ember.run.schedule('afterRender', function() {
          self.$('textarea').focus();
        });
      }.on('didInsertElement')
    });
  });

Discourse.PreferencesAboutView = require('discourse/views/preferences-about').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/preferences-about.js'] = "define(\"discourse/views/preferences-about\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.View.extend({\n      templateName: 'user/about',\n      classNames: ['user-preferences'],\n\n      _focusAbout: function() {\n        var self = this;\n        Ember.run.schedule('afterRender', function() {\n          self.$('textarea').focus();\n        });\n      }.on('didInsertElement')\n    });\n  });";
define("discourse/views/preferences-email", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Em.View.extend({
      templateName: 'user/email',
      classNames: ['user-preferences'],
      _focusField: function() {
        Em.run.schedule('afterRender', function() {
          $('#change_email').focus();
        });
      }.on('didInsertElement')
    });
  });

Discourse.PreferencesEmailView = require('discourse/views/preferences-email').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/preferences-email.js'] = "define(\"discourse/views/preferences-email\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Em.View.extend({\n      templateName: 'user/email',\n      classNames: ['user-preferences'],\n      _focusField: function() {\n        Em.run.schedule('afterRender', function() {\n          $('#change_email').focus();\n        });\n      }.on('didInsertElement')\n    });\n  });";
define("discourse/views/preferences-username", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.View.extend({
      templateName: 'user/username',
      classNames: ['user-preferences'],

      _focusUsername: function() {
        Em.run.schedule('afterRender', function() {
          $('#change_username').focus();
        });
      }.on('didInsertElement'),

      keyDown: function(e) {
        if (e.keyCode === 13) {
          if (!this.get('controller').get('saveDisabled')) {
            return this.get('controller').changeUsername();
          } else {
            e.preventDefault();
            return false;
          }
        }
      }
    });
  });

Discourse.PreferencesUsernameView = require('discourse/views/preferences-username').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/preferences-username.js'] = "define(\"discourse/views/preferences-username\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.View.extend({\n      templateName: 'user/username',\n      classNames: ['user-preferences'],\n\n      _focusUsername: function() {\n        Em.run.schedule('afterRender', function() {\n          $('#change_username').focus();\n        });\n      }.on('didInsertElement'),\n\n      keyDown: function(e) {\n        if (e.keyCode === 13) {\n          if (!this.get('controller').get('saveDisabled')) {\n            return this.get('controller').changeUsername();\n          } else {\n            e.preventDefault();\n            return false;\n          }\n        }\n      }\n    });\n  });";
define("discourse/views/preferences", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.View.extend({
      templateName: 'user/preferences',
      classNames: ['user-preferences']
    });
  });

Discourse.PreferencesView = require('discourse/views/preferences').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/preferences.js'] = "define(\"discourse/views/preferences\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.View.extend({\n      templateName: 'user/preferences',\n      classNames: ['user-preferences']\n    });\n  });";
define("discourse/views/quote-button", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      This view is used for rendering the pop-up quote button

      @class QuoteButtonView
      @extends Discourse.View
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Discourse.View.extend({
      classNames: ['quote-button'],
      classNameBindings: ['visible'],
      isMouseDown: false,
      isTouchInProgress: false,

      /**
        Determines whether the pop-up quote button should be visible.
        The button is visible whenever there is something in the buffer
        (ie. something has been selected)

        @property visible
      **/
      visible: Em.computed.notEmpty('controller.buffer'),

      /**
        Renders the pop-up quote button.

        @method render
      **/
      render: function(buffer) {
        buffer.push('<i class="fa fa-quote-right"></i>&nbsp;&nbsp;');
        buffer.push(I18n.t("post.quote_reply"));
      },

      /**
        Binds to the following global events:
          - `mousedown` to clear the quote button if they click elsewhere.
          - `mouseup` to trigger the display of the quote button.
          - `selectionchange` to make the selection work under iOS

        @method didInsertElement
      **/
      didInsertElement: function() {
        var controller = this.get('controller'),
            view = this;

        $(document)
          .on("mousedown.quote-button", function(e) {
            view.set('isMouseDown', true);

            var $target = $(e.target);
            // we don't want to deselect when we click on buttons that use it
            if ($target.hasClass('quote-button') ||
                $target.closest('.create').length ||
                $target.closest('.reply-new').length) return;

            // deselects only when the user left click
            // (allows anyone to `extend` their selection using shift+click)
            if (e.which === 1 && !e.shiftKey) controller.deselectText();
          })
          .on('mouseup.quote-button', function(e) {
            view.selectText(e.target, controller);
            view.set('isMouseDown', false);
          })
          .on('touchstart.quote-button', function(){
            view.set('isTouchInProgress', true);
          })
          .on('touchend.quote-button', function(){
            view.set('isTouchInProgress', false);
          })
          .on('selectionchange', function() {
            // there is no need to handle this event when the mouse is down
            // or if there a touch in progress
            if (view.get('isMouseDown') || view.get('isTouchInProgress')) return;
            // `selection.anchorNode` is used as a target
            view.selectText(window.getSelection().anchorNode, controller);
          });
      },

      /**
        Selects the text

        @method selectText
      **/
      selectText: function(target, controller) {
        var $target = $(target);
        // breaks if quoting has been disabled by the user
        if (!Discourse.User.currentProp('enable_quoting')) return;
        // retrieve the post id from the DOM
        var postId = $target.closest('.boxed').data('post-id');
        // select the text
        if (postId) controller.selectText(postId);
      },

      /**
        Unbinds from global `mouseup, mousedown, selectionchange` events

        @method willDestroyElement
      **/
      willDestroyElement: function() {
        $(document)
          .off("mousedown.quote-button")
          .off("mouseup.quote-button")
          .off("touchstart.quote-button")
          .off("touchend.quote-button")
          .off("selectionchange");
      },

      /**
        Quote the selected text when clicking on the quote button.

        @method click
      **/
      click: function(e) {
        e.stopPropagation();
        return this.get('controller').quoteText(e);
      }

    });
  });

Discourse.QuoteButtonView = require('discourse/views/quote-button').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/quote-button.js'] = "define(\"discourse/views/quote-button\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      This view is used for rendering the pop-up quote button\n\n      @class QuoteButtonView\n      @extends Discourse.View\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Discourse.View.extend({\n      classNames: ['quote-button'],\n      classNameBindings: ['visible'],\n      isMouseDown: false,\n      isTouchInProgress: false,\n\n      /**\n        Determines whether the pop-up quote button should be visible.\n        The button is visible whenever there is something in the buffer\n        (ie. something has been selected)\n\n        @property visible\n      **/\n      visible: Em.computed.notEmpty('controller.buffer'),\n\n      /**\n        Renders the pop-up quote button.\n\n        @method render\n      **/\n      render: function(buffer) {\n        buffer.push('\u003ci class=\"fa fa-quote-right\"\u003e\u003c/i\u003e\u0026nbsp;\u0026nbsp;');\n        buffer.push(I18n.t(\"post.quote_reply\"));\n      },\n\n      /**\n        Binds to the following global events:\n          - `mousedown` to clear the quote button if they click elsewhere.\n          - `mouseup` to trigger the display of the quote button.\n          - `selectionchange` to make the selection work under iOS\n\n        @method didInsertElement\n      **/\n      didInsertElement: function() {\n        var controller = this.get('controller'),\n            view = this;\n\n        $(document)\n          .on(\"mousedown.quote-button\", function(e) {\n            view.set('isMouseDown', true);\n\n            var $target = $(e.target);\n            // we don't want to deselect when we click on buttons that use it\n            if ($target.hasClass('quote-button') ||\n                $target.closest('.create').length ||\n                $target.closest('.reply-new').length) return;\n\n            // deselects only when the user left click\n            // (allows anyone to `extend` their selection using shift+click)\n            if (e.which === 1 \u0026\u0026 !e.shiftKey) controller.deselectText();\n          })\n          .on('mouseup.quote-button', function(e) {\n            view.selectText(e.target, controller);\n            view.set('isMouseDown', false);\n          })\n          .on('touchstart.quote-button', function(){\n            view.set('isTouchInProgress', true);\n          })\n          .on('touchend.quote-button', function(){\n            view.set('isTouchInProgress', false);\n          })\n          .on('selectionchange', function() {\n            // there is no need to handle this event when the mouse is down\n            // or if there a touch in progress\n            if (view.get('isMouseDown') || view.get('isTouchInProgress')) return;\n            // `selection.anchorNode` is used as a target\n            view.selectText(window.getSelection().anchorNode, controller);\n          });\n      },\n\n      /**\n        Selects the text\n\n        @method selectText\n      **/\n      selectText: function(target, controller) {\n        var $target = $(target);\n        // breaks if quoting has been disabled by the user\n        if (!Discourse.User.currentProp('enable_quoting')) return;\n        // retrieve the post id from the DOM\n        var postId = $target.closest('.boxed').data('post-id');\n        // select the text\n        if (postId) controller.selectText(postId);\n      },\n\n      /**\n        Unbinds from global `mouseup, mousedown, selectionchange` events\n\n        @method willDestroyElement\n      **/\n      willDestroyElement: function() {\n        $(document)\n          .off(\"mousedown.quote-button\")\n          .off(\"mouseup.quote-button\")\n          .off(\"touchstart.quote-button\")\n          .off(\"touchend.quote-button\")\n          .off(\"selectionchange\");\n      },\n\n      /**\n        Quote the selected text when clicking on the quote button.\n\n        @method click\n      **/\n      click: function(e) {\n        e.stopPropagation();\n        return this.get('controller').quoteText(e);\n      }\n\n    });\n  });";
define("discourse/views/replies", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      This view is used for rendering a list of replies below a post

      @class RepliesView
      @extends Ember.CollectionView
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Ember.CollectionView.extend({
      tagName: 'section',
      classNameBindings: [':embedded-posts', ':bottom', 'hidden'],
      itemViewClass: 'embedded-post',
      hidden: Em.computed.equal('content.length', 0)
    });
  });

Discourse.ReplysView = require('discourse/views/replies').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/replies.js'] = "define(\"discourse/views/replies\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      This view is used for rendering a list of replies below a post\n\n      @class RepliesView\n      @extends Ember.CollectionView\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Ember.CollectionView.extend({\n      tagName: 'section',\n      classNameBindings: [':embedded-posts', ':bottom', 'hidden'],\n      itemViewClass: 'embedded-post',\n      hidden: Em.computed.equal('content.length', 0)\n    });\n  });";
define("discourse/views/reply-button", 
  ["discourse/views/button","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var ButtonView = __dependency1__["default"];

    __exports__["default"] = ButtonView.extend({
      classNames: ['btn', 'btn-primary', 'create'],
      helpKey: 'topic.reply.help',

      text: function() {
        var archetypeCapitalized = this.get('controller.content.archetype').capitalize();
        var customTitle = this.get("parentView.replyButtonText" + archetypeCapitalized);
        if (customTitle) { return customTitle; }

        return I18n.t("topic.reply.title");
      }.property(),

      renderIcon: function(buffer) {
        buffer.push("<i class='fa fa-plus'></i>");
      },

      click: function() {
        this.get('controller').send('replyToPost');
      }
    });
  });

Discourse.ReplyButtonView = require('discourse/views/reply-button').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/reply-button.js'] = "define(\"discourse/views/reply-button\", \n  [\"discourse/views/button\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ButtonView = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = ButtonView.extend({\n      classNames: ['btn', 'btn-primary', 'create'],\n      helpKey: 'topic.reply.help',\n\n      text: function() {\n        var archetypeCapitalized = this.get('controller.content.archetype').capitalize();\n        var customTitle = this.get(\"parentView.replyButtonText\" + archetypeCapitalized);\n        if (customTitle) { return customTitle; }\n\n        return I18n.t(\"topic.reply.title\");\n      }.property(),\n\n      renderIcon: function(buffer) {\n        buffer.push(\"\u003ci class='fa fa-plus'\u003e\u003c/i\u003e\");\n      },\n\n      click: function() {\n        this.get('controller').send('replyToPost');\n      }\n    });\n  });";
define("discourse/views/reply-history", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      Lists previous posts in the history of a post.

      @class ReplyHistory
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Em.CollectionView.extend({
      tagName: 'section',
      classNameBindings: [':embedded-posts', ':top', ':topic-body', ':offset2', 'hidden'],
      itemViewClass: 'embedded-post',
      hidden: Em.computed.equal('content.length', 0),
      previousPost: true
    });
  });

Discourse.ReplyHistoryView = require('discourse/views/reply-history').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/reply-history.js'] = "define(\"discourse/views/reply-history\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      Lists previous posts in the history of a post.\n\n      @class ReplyHistory\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Em.CollectionView.extend({\n      tagName: 'section',\n      classNameBindings: [':embedded-posts', ':top', ':topic-body', ':offset2', 'hidden'],\n      itemViewClass: 'embedded-post',\n      hidden: Em.computed.equal('content.length', 0),\n      previousPost: true\n    });\n  });";
define("discourse/views/search-results-type", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.CollectionView.extend({
      tagName: 'ul',
      itemViewClass: Discourse.GroupedView.extend({
        tagName: 'li',
        classNameBindings: ['selected'],
        templateName: Discourse.computed.fmt('parentView.displayType', "search/%@_result")
      }),
      didInsertElement: function(){
        var term = this.get('controller.term');
        if(!_.isEmpty(term)) {
          this.$('.blurb').highlight(term.split(/\s+/), {className: 'search-highlight'});
          this.$('.topic-title').highlight(term.split(/\s+/), {className: 'search-highlight'} );
        }
      }
    });
  });

Discourse.SearchResultsTypeView = require('discourse/views/search-results-type').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/search-results-type.js'] = "define(\"discourse/views/search-results-type\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.CollectionView.extend({\n      tagName: 'ul',\n      itemViewClass: Discourse.GroupedView.extend({\n        tagName: 'li',\n        classNameBindings: ['selected'],\n        templateName: Discourse.computed.fmt('parentView.displayType', \"search/%@_result\")\n      }),\n      didInsertElement: function(){\n        var term = this.get('controller.term');\n        if(!_.isEmpty(term)) {\n          this.$('.blurb').highlight(term.split(/\\s+/), {className: 'search-highlight'});\n          this.$('.topic-title').highlight(term.split(/\\s+/), {className: 'search-highlight'} );\n        }\n      }\n    });\n  });";
define("discourse/views/search-text-field", 
  ["discourse/components/text-field","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    /**
      This is a text field that supports a dynamic placeholder based on search context.

      @class SearchTextField
      @extends Discourse.TextField
      @namespace Discourse
      @module Discourse
    **/


    var TextField = __dependency1__["default"];

    __exports__["default"] = TextField.extend({

      /**
        A dynamic placeholder for the search field based on our context

        @property placeholder
      **/
      placeholder: function() {

        if(this.get('searchContextEnabled')){
          return "";
        }

        return I18n.t('search.title');
      }.property('searchContextEnabled')
    });
  });

Discourse.SearchTextFieldView = require('discourse/views/search-text-field').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/search-text-field.js'] = "define(\"discourse/views/search-text-field\", \n  [\"discourse/components/text-field\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /**\n      This is a text field that supports a dynamic placeholder based on search context.\n\n      @class SearchTextField\n      @extends Discourse.TextField\n      @namespace Discourse\n      @module Discourse\n    **/\n\n\n    var TextField = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = TextField.extend({\n\n      /**\n        A dynamic placeholder for the search field based on our context\n\n        @property placeholder\n      **/\n      placeholder: function() {\n\n        if(this.get('searchContextEnabled')){\n          return \"\";\n        }\n\n        return I18n.t('search.title');\n      }.property('searchContextEnabled')\n    });\n  });";
define("discourse/views/search", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.View.extend({
      tagName: 'div',
      classNames: ['d-dropdown'],
      elementId: 'search-dropdown',
      templateName: 'search'
    });
  });

Discourse.SearchView = require('discourse/views/search').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/search.js'] = "define(\"discourse/views/search\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.View.extend({\n      tagName: 'div',\n      classNames: ['d-dropdown'],\n      elementId: 'search-dropdown',\n      templateName: 'search'\n    });\n  });";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  This view is used to handle the interface for multi selecting of posts.

  @class SelectedPostsView
  @extends Discourse.View
  @namespace Discourse
  @module Discourse
**/

Discourse.SelectedPostsView = Discourse.View.extend({
  elementId: 'selected-posts',
  templateName: 'selected_posts',
  topicBinding: 'controller.content',
  classNameBindings: ['customVisibility'],

  customVisibility: (function() {
    if (!this.get('controller.multiSelect')) return 'hidden';
  }).property('controller.multiSelect')

});




// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/selected_posts_view.js'] = "/**\n  This view is used to handle the interface for multi selecting of posts.\n\n  @class SelectedPostsView\n  @extends Discourse.View\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.SelectedPostsView = Discourse.View.extend({\n  elementId: 'selected-posts',\n  templateName: 'selected_posts',\n  topicBinding: 'controller.content',\n  classNameBindings: ['customVisibility'],\n\n  customVisibility: (function() {\n    if (!this.get('controller.multiSelect')) return 'hidden';\n  }).property('controller.multiSelect')\n\n});\n\n\n";
define("discourse/views/share-button", 
  ["discourse/views/button","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var ButtonView = __dependency1__["default"];

    __exports__["default"] = ButtonView.extend({
      classNames: ['share'],
      textKey: 'topic.share.title',
      helpKey: 'topic.share.help',
      'data-share-url': Em.computed.alias('topic.shareUrl'),
      topic: Em.computed.alias('controller.model'),

      renderIcon: function(buffer) {
        buffer.push("<i class='fa fa-link'></i>");
      }
    });
  });

Discourse.ShareButtonView = require('discourse/views/share-button').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/share-button.js'] = "define(\"discourse/views/share-button\", \n  [\"discourse/views/button\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ButtonView = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = ButtonView.extend({\n      classNames: ['share'],\n      textKey: 'topic.share.title',\n      helpKey: 'topic.share.help',\n      'data-share-url': Em.computed.alias('topic.shareUrl'),\n      topic: Em.computed.alias('controller.model'),\n\n      renderIcon: function(buffer) {\n        buffer.push(\"\u003ci class='fa fa-link'\u003e\u003c/i\u003e\");\n      }\n    });\n  });";
define("discourse/views/share-link", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      This view handles rendering of a link to share something on a
      third-party site.

      @class ShareLinkView
      @extends Discourse.View
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Ember.View.extend({
      templateName: 'share_link',
      tagName: 'div',
      classNameBindings: [':social-link']
    });
  });

Discourse.ShareLinkView = require('discourse/views/share-link').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/share-link.js'] = "define(\"discourse/views/share-link\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      This view handles rendering of a link to share something on a\n      third-party site.\n\n      @class ShareLinkView\n      @extends Discourse.View\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Ember.View.extend({\n      templateName: 'share_link',\n      tagName: 'div',\n      classNameBindings: [':social-link']\n    });\n  });";
define("discourse/views/share", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      This view is used for rendering the "share" interface for a post

      @class ShareView
      @extends Discourse.View
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Discourse.View.extend({
      templateName: 'share',
      elementId: 'share-link',
      classNameBindings: ['hasLink'],

      title: function() {
        if (this.get('controller.type') === 'topic') return I18n.t('share.topic');
        var postNumber = this.get('controller.postNumber');
        if (postNumber) {
          return I18n.t('share.post', {postNumber: this.get('controller.postNumber')});
        } else {
          return I18n.t('share.topic');
        }
      }.property('controller.type', 'controller.postNumber'),

      hasLink: function() {
        if (this.present('controller.link')) return 'visible';
        return null;
      }.property('controller.link'),

      linkChanged: function() {
        if (this.present('controller.link')) {
          var $linkInput = $('#share-link input');
          $linkInput.val(this.get('controller.link'));

          // Wait for the fade-in transition to finish before selecting the link:
          window.setTimeout(function() {
            $linkInput.select().focus();
          }, 160);
        }
      }.observes('controller.link'),

      didInsertElement: function() {
        var shareView = this,
            $html = $('html');

        $html.on('mousedown.outside-share-link', function(e) {
          // Use mousedown instead of click so this event is handled before routing occurs when a
          // link is clicked (which is a click event) while the share dialog is showing.
          if (shareView.$().has(e.target).length !== 0) { return; }

          shareView.get('controller').send('close');
          return true;
        });

        $html.on('click.discoure-share-link', '[data-share-url]', function(e) {
          // if they want to open in a new tab, let it so
          if (e.shiftKey || e.metaKey || e.ctrlKey || e.which === 2) { return true; }

          e.preventDefault();

          var $currentTarget = $(e.currentTarget),
              $currentTargetOffset = $currentTarget.offset(),
              $shareLink = $('#share-link'),
              url = $currentTarget.data('share-url'),
              postNumber = $currentTarget.data('post-number'),
              date = $currentTarget.children().data('time');

          // Relative urls
          if (url.indexOf("/") === 0) {
            url = window.location.protocol + "//" + window.location.host + url;
          }

          var shareLinkWidth = $shareLink.width();
          var x = $currentTargetOffset.left - (shareLinkWidth / 2);
          if (x < 25) {
            x = 25;
          }
          if (x + shareLinkWidth > $(window).width()) {
            x -= shareLinkWidth / 2;
          }

          var header = $('.d-header');
          var y = $currentTargetOffset.top - ($shareLink.height() + 20);
          if (y < header.offset().top + header.height()) {
            y = $currentTargetOffset.top + 10;
          }

          $shareLink.css({
            left: "" + x + "px",
            top: "" + y + "px"
          });

          shareView.set('controller.link', url);
          shareView.set('controller.postNumber', postNumber);
          shareView.set('controller.date', date);

          return false;
        });

        $html.on('keydown.share-view', function(e){
          if (e.keyCode === 27) {
            shareView.get('controller').send('close');
          }
        });
      },

      willDestroyElement: function() {
        $('html').off('click.discoure-share-link')
                 .off('mousedown.outside-share-link')
                 .off('keydown.share-view');
      }

    });
  });

Discourse.ShareView = require('discourse/views/share').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/share.js'] = "define(\"discourse/views/share\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      This view is used for rendering the \"share\" interface for a post\n\n      @class ShareView\n      @extends Discourse.View\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Discourse.View.extend({\n      templateName: 'share',\n      elementId: 'share-link',\n      classNameBindings: ['hasLink'],\n\n      title: function() {\n        if (this.get('controller.type') === 'topic') return I18n.t('share.topic');\n        var postNumber = this.get('controller.postNumber');\n        if (postNumber) {\n          return I18n.t('share.post', {postNumber: this.get('controller.postNumber')});\n        } else {\n          return I18n.t('share.topic');\n        }\n      }.property('controller.type', 'controller.postNumber'),\n\n      hasLink: function() {\n        if (this.present('controller.link')) return 'visible';\n        return null;\n      }.property('controller.link'),\n\n      linkChanged: function() {\n        if (this.present('controller.link')) {\n          var $linkInput = $('#share-link input');\n          $linkInput.val(this.get('controller.link'));\n\n          // Wait for the fade-in transition to finish before selecting the link:\n          window.setTimeout(function() {\n            $linkInput.select().focus();\n          }, 160);\n        }\n      }.observes('controller.link'),\n\n      didInsertElement: function() {\n        var shareView = this,\n            $html = $('html');\n\n        $html.on('mousedown.outside-share-link', function(e) {\n          // Use mousedown instead of click so this event is handled before routing occurs when a\n          // link is clicked (which is a click event) while the share dialog is showing.\n          if (shareView.$().has(e.target).length !== 0) { return; }\n\n          shareView.get('controller').send('close');\n          return true;\n        });\n\n        $html.on('click.discoure-share-link', '[data-share-url]', function(e) {\n          // if they want to open in a new tab, let it so\n          if (e.shiftKey || e.metaKey || e.ctrlKey || e.which === 2) { return true; }\n\n          e.preventDefault();\n\n          var $currentTarget = $(e.currentTarget),\n              $currentTargetOffset = $currentTarget.offset(),\n              $shareLink = $('#share-link'),\n              url = $currentTarget.data('share-url'),\n              postNumber = $currentTarget.data('post-number'),\n              date = $currentTarget.children().data('time');\n\n          // Relative urls\n          if (url.indexOf(\"/\") === 0) {\n            url = window.location.protocol + \"//\" + window.location.host + url;\n          }\n\n          var shareLinkWidth = $shareLink.width();\n          var x = $currentTargetOffset.left - (shareLinkWidth / 2);\n          if (x \u003c 25) {\n            x = 25;\n          }\n          if (x + shareLinkWidth \u003e $(window).width()) {\n            x -= shareLinkWidth / 2;\n          }\n\n          var header = $('.d-header');\n          var y = $currentTargetOffset.top - ($shareLink.height() + 20);\n          if (y \u003c header.offset().top + header.height()) {\n            y = $currentTargetOffset.top + 10;\n          }\n\n          $shareLink.css({\n            left: \"\" + x + \"px\",\n            top: \"\" + y + \"px\"\n          });\n\n          shareView.set('controller.link', url);\n          shareView.set('controller.postNumber', postNumber);\n          shareView.set('controller.date', date);\n\n          return false;\n        });\n\n        $html.on('keydown.share-view', function(e){\n          if (e.keyCode === 27) {\n            shareView.get('controller').send('close');\n          }\n        });\n      },\n\n      willDestroyElement: function() {\n        $('html').off('click.discoure-share-link')\n                 .off('mousedown.outside-share-link')\n                 .off('keydown.share-view');\n      }\n\n    });\n  });";
define("discourse/views/split-topic", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.ModalBodyView.extend(Discourse.SelectedPostsCount, {
      templateName: 'modal/split_topic',
      title: I18n.t('topic.split_topic.title')
    });
  });

Discourse.SplitTopicView = require('discourse/views/split-topic').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/split-topic.js'] = "define(\"discourse/views/split-topic\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.ModalBodyView.extend(Discourse.SelectedPostsCount, {\n      templateName: 'modal/split_topic',\n      title: I18n.t('topic.split_topic.title')\n    });\n  });";
define("discourse/views/star-button", 
  ["discourse/views/button","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var ButtonView = __dependency1__["default"];

    __exports__["default"] = ButtonView.extend({
      classNames: ['star'],
      textKey: 'starred.title',
      helpKeyBinding: 'controller.starTooltipKey',
      attributeBindings: ['disabled'],

      shouldRerender: Discourse.View.renderIfChanged('controller.starred'),

      click: function() {
        this.get('controller').send('toggleStar');
      },

      renderIcon: function(buffer) {
        buffer.push("<i class='fa fa-star " +
                     (this.get('controller.starred') ? ' starred' : '') +
                     "'></i>");
      }
    });
  });

Discourse.StarButtonView = require('discourse/views/star-button').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/star-button.js'] = "define(\"discourse/views/star-button\", \n  [\"discourse/views/button\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var ButtonView = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = ButtonView.extend({\n      classNames: ['star'],\n      textKey: 'starred.title',\n      helpKeyBinding: 'controller.starTooltipKey',\n      attributeBindings: ['disabled'],\n\n      shouldRerender: Discourse.View.renderIfChanged('controller.starred'),\n\n      click: function() {\n        this.get('controller').send('toggleStar');\n      },\n\n      renderIcon: function(buffer) {\n        buffer.push(\"\u003ci class='fa fa-star \" +\n                     (this.get('controller.starred') ? ' starred' : '') +\n                     \"'\u003e\u003c/i\u003e\");\n      }\n    });\n  });";
define("discourse/views/static", 
  ["exports"],
  function(__exports__) {
    "use strict";
    var readFaq = false;

    __exports__["default"] = Ember.View.extend(Discourse.ScrollTop, {
      _checkRead: function() {
        var path = this.get('controller.model.path');
        if(path === "faq" || path === "guidelines"){
          var $window = $(window),
              controller = this.get('controller');
          $window.on('scroll.faq', function(){
            if(!readFaq && ($window.scrollTop() + $window.height() > $(document).height() - 10)) {
              readFaq = true;
              controller.send('markFaqRead');
            }
          });
        }
      }.on('didInsertElement'),

      _stopChecking: function(){
        $(window).off('scroll.faq');
      }.on('willDestroyElement')
    });
  });

Discourse.StaticView = require('discourse/views/static').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/static.js'] = "define(\"discourse/views/static\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var readFaq = false;\n\n    __exports__[\"default\"] = Ember.View.extend(Discourse.ScrollTop, {\n      _checkRead: function() {\n        var path = this.get('controller.model.path');\n        if(path === \"faq\" || path === \"guidelines\"){\n          var $window = $(window),\n              controller = this.get('controller');\n          $window.on('scroll.faq', function(){\n            if(!readFaq \u0026\u0026 ($window.scrollTop() + $window.height() \u003e $(document).height() - 10)) {\n              readFaq = true;\n              controller.send('markFaqRead');\n            }\n          });\n        }\n      }.on('didInsertElement'),\n\n      _stopChecking: function(){\n        $(window).off('scroll.faq');\n      }.on('willDestroyElement')\n    });\n  });";
define("discourse/views/topic-admin-menu", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      This view is used for rendering the topic admin menu

      @class TopicAdminMenuView
      @extends Discourse.View
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Discourse.View.extend({

      willDestroyElement: function() {
        $('html').off('mouseup.discourse-topic-admin-menu');
      },

      didInsertElement: function() {
        var self = this;
        $('html').on('mouseup.discourse-topic-admin-menu', function(e) {
          var $target = $(e.target);
          if ($target.is('button') || self.$().has($target).length === 0) {
            self.get('controller').send('hide');
          }
        });
      }

    });
  });

Discourse.TopicAdminMenuView = require('discourse/views/topic-admin-menu').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/topic-admin-menu.js'] = "define(\"discourse/views/topic-admin-menu\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      This view is used for rendering the topic admin menu\n\n      @class TopicAdminMenuView\n      @extends Discourse.View\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Discourse.View.extend({\n\n      willDestroyElement: function() {\n        $('html').off('mouseup.discourse-topic-admin-menu');\n      },\n\n      didInsertElement: function() {\n        var self = this;\n        $('html').on('mouseup.discourse-topic-admin-menu', function(e) {\n          var $target = $(e.target);\n          if ($target.is('button') || self.$().has($target).length === 0) {\n            self.get('controller').send('hide');\n          }\n        });\n      }\n\n    });\n  });";
define("discourse/views/topic-closing", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      This view is used for rendering the notification that a topic will
      automatically close.

      @class TopicClosingView
      @extends Discourse.View
      @namespace Discourse
      @module Discourse
    **/

    __exports__["default"] = Discourse.View.extend({
      elementId: 'topic-closing-info',
      delayedRerender: null,

      shouldRerender: Discourse.View.renderIfChanged('topic.details.auto_close_at'),

      render: function(buffer) {
        if (!this.present('topic.details.auto_close_at')) return;

        var autoCloseAt = moment(this.get('topic.details.auto_close_at'));

        if (autoCloseAt < new Date()) return;

        var duration = moment.duration(autoCloseAt - moment());

        var timeLeftString, rerenderDelay, minutesLeft = duration.asMinutes();

        if (minutesLeft > 1410) {
          timeLeftString = I18n.t('in_n_days', {count: Math.round(duration.asDays())});
          if( minutesLeft > 2160 ) {
            rerenderDelay = 12 * 60 * 60000;
          } else {
            rerenderDelay = 60 * 60000;
          }
        } else if (minutesLeft > 90) {
          timeLeftString = I18n.t('in_n_hours', {count: Math.round(duration.asHours())});
          rerenderDelay = 30 * 60000;
        } else if (minutesLeft > 2) {
          timeLeftString = I18n.t('in_n_minutes', {count: Math.round(duration.asMinutes())});
          rerenderDelay = 60000;
        } else {
          timeLeftString = I18n.t('in_n_seconds', {count: Math.round(duration.asSeconds())});
          rerenderDelay = 1000;
        }

        buffer.push('<h3><i class="fa fa-clock-o"></i> ');
        buffer.push( I18n.t('topic.auto_close_notice', {timeLeft: timeLeftString}) );
        buffer.push('</h3>');

        // TODO Sam: concerned this can cause a heavy rerender loop
        this.set('delayedRerender', Em.run.later(this, this.rerender, rerenderDelay));
      },

      willDestroyElement: function() {
        if( this.delayedRerender ) {
          Em.run.cancel(this.get('delayedRerender'));
        }
      }
    });
  });

Discourse.TopicClosingView = require('discourse/views/topic-closing').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/topic-closing.js'] = "define(\"discourse/views/topic-closing\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      This view is used for rendering the notification that a topic will\n      automatically close.\n\n      @class TopicClosingView\n      @extends Discourse.View\n      @namespace Discourse\n      @module Discourse\n    **/\n\n    __exports__[\"default\"] = Discourse.View.extend({\n      elementId: 'topic-closing-info',\n      delayedRerender: null,\n\n      shouldRerender: Discourse.View.renderIfChanged('topic.details.auto_close_at'),\n\n      render: function(buffer) {\n        if (!this.present('topic.details.auto_close_at')) return;\n\n        var autoCloseAt = moment(this.get('topic.details.auto_close_at'));\n\n        if (autoCloseAt \u003c new Date()) return;\n\n        var duration = moment.duration(autoCloseAt - moment());\n\n        var timeLeftString, rerenderDelay, minutesLeft = duration.asMinutes();\n\n        if (minutesLeft \u003e 1410) {\n          timeLeftString = I18n.t('in_n_days', {count: Math.round(duration.asDays())});\n          if( minutesLeft \u003e 2160 ) {\n            rerenderDelay = 12 * 60 * 60000;\n          } else {\n            rerenderDelay = 60 * 60000;\n          }\n        } else if (minutesLeft \u003e 90) {\n          timeLeftString = I18n.t('in_n_hours', {count: Math.round(duration.asHours())});\n          rerenderDelay = 30 * 60000;\n        } else if (minutesLeft \u003e 2) {\n          timeLeftString = I18n.t('in_n_minutes', {count: Math.round(duration.asMinutes())});\n          rerenderDelay = 60000;\n        } else {\n          timeLeftString = I18n.t('in_n_seconds', {count: Math.round(duration.asSeconds())});\n          rerenderDelay = 1000;\n        }\n\n        buffer.push('\u003ch3\u003e\u003ci class=\"fa fa-clock-o\"\u003e\u003c/i\u003e ');\n        buffer.push( I18n.t('topic.auto_close_notice', {timeLeft: timeLeftString}) );\n        buffer.push('\u003c/h3\u003e');\n\n        // TODO Sam: concerned this can cause a heavy rerender loop\n        this.set('delayedRerender', Em.run.later(this, this.rerender, rerenderDelay));\n      },\n\n      willDestroyElement: function() {\n        if( this.delayedRerender ) {\n          Em.run.cancel(this.get('delayedRerender'));\n        }\n      }\n    });\n  });";
define("discourse/views/topic-entrance", 
  ["discourse/mixins/cleans-up","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var CleansUp = __dependency1__["default"];

    __exports__["default"] = Ember.View.extend(CleansUp, {
      elementId: 'topic-entrance',
      classNameBindings: ['visible::hidden'],
      visible: Em.computed.notEmpty('controller.model'),

      _positionChanged: function() {
        var pos = this.get('controller.position');
        if (!pos) { return; }

        var $self = this.$();

        // Move after we render so the height is correct
        Em.run.schedule('afterRender', function() {
          var width = $self.width(),
              height = $self.height();
          pos.left = (parseInt(pos.left) - (width / 2));
          pos.top = (parseInt(pos.top) - (height / 2));

          var windowWidth = $(window).width();
          if (pos.left + width > windowWidth) {
            pos.left = (windowWidth - width) - 5;
          }
          $self.css(pos);
        });

        var self = this;
        $('html').off('mousedown.topic-entrance').on('mousedown.topic-entrance', function(e) {
          var $target = $(e.target);
          if (($target.prop('id') === 'topic-entrance') || ($self.has($target).length !== 0)) {
            return;
          }
          self.cleanUp();
        });
      }.observes('controller.position'),

      _removed: function() {
        $('html').off('mousedown.topic-entrance');
      }.on('willDestroyElement'),

      cleanUp: function() {
        this.set('controller.model', null);
        $('html').off('mousedown.topic-entrance');
      },

      keyDown: function(e) {
        if (e.which === 27) {
          this.cleanUp();
        }
      }

    });
  });

Discourse.TopicEntranceView = require('discourse/views/topic-entrance').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/topic-entrance.js'] = "define(\"discourse/views/topic-entrance\", \n  [\"discourse/mixins/cleans-up\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var CleansUp = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.View.extend(CleansUp, {\n      elementId: 'topic-entrance',\n      classNameBindings: ['visible::hidden'],\n      visible: Em.computed.notEmpty('controller.model'),\n\n      _positionChanged: function() {\n        var pos = this.get('controller.position');\n        if (!pos) { return; }\n\n        var $self = this.$();\n\n        // Move after we render so the height is correct\n        Em.run.schedule('afterRender', function() {\n          var width = $self.width(),\n              height = $self.height();\n          pos.left = (parseInt(pos.left) - (width / 2));\n          pos.top = (parseInt(pos.top) - (height / 2));\n\n          var windowWidth = $(window).width();\n          if (pos.left + width \u003e windowWidth) {\n            pos.left = (windowWidth - width) - 5;\n          }\n          $self.css(pos);\n        });\n\n        var self = this;\n        $('html').off('mousedown.topic-entrance').on('mousedown.topic-entrance', function(e) {\n          var $target = $(e.target);\n          if (($target.prop('id') === 'topic-entrance') || ($self.has($target).length !== 0)) {\n            return;\n          }\n          self.cleanUp();\n        });\n      }.observes('controller.position'),\n\n      _removed: function() {\n        $('html').off('mousedown.topic-entrance');\n      }.on('willDestroyElement'),\n\n      cleanUp: function() {\n        this.set('controller.model', null);\n        $('html').off('mousedown.topic-entrance');\n      },\n\n      keyDown: function(e) {\n        if (e.which === 27) {\n          this.cleanUp();\n        }\n      }\n\n    });\n  });";
define("discourse/views/topic-footer-buttons", 
  ["discourse/views/login-reply-button","discourse/views/flag-topic-button","discourse/views/star-button","discourse/views/share-button","discourse/views/invite-reply-button","discourse/views/reply-button","discourse/views/pinned-button","discourse/views/topic-notifications-button","discourse/views/container","exports"],
  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __exports__) {
    "use strict";
    var LoginReplyButton = __dependency1__["default"];
    var FlagTopicButton = __dependency2__["default"];
    var StarButton = __dependency3__["default"];
    var ShareButton = __dependency4__["default"];
    var InviteReplyButton = __dependency5__["default"];
    var ReplyButton = __dependency6__["default"];
    var PinnedButton = __dependency7__["default"];
    var TopicNotificationsButton = __dependency8__["default"];
    var DiscourseContainerView = __dependency9__["default"];

    __exports__["default"] = DiscourseContainerView.extend({
      elementId: 'topic-footer-buttons',
      topicBinding: 'controller.content',

      init: function() {
        this._super();
        this.createButtons();
      },

      // Add the buttons below a topic
      createButtons: function() {
        var topic = this.get('topic');
        if (Discourse.User.current()) {
          if (!topic.get('isPrivateMessage')) {
            // We hide some controls from private messages
            if (this.get('topic.details.can_invite_to')) {
              this.attachViewClass(InviteReplyButton);
            }
            this.attachViewClass(StarButton);
            this.attachViewClass(ShareButton);
            if (this.get('topic.details.can_flag_topic')) {
              this.attachViewClass(FlagTopicButton);
            }
          }
          if (this.get('topic.details.can_create_post')) {
            this.attachViewClass(ReplyButton);
          }
          this.attachViewClass(PinnedButton);
          this.attachViewClass(TopicNotificationsButton);

          this.trigger('additionalButtons', this);
        } else {
          // If not logged in give them a login control
          this.attachViewClass(LoginReplyButton);
        }
      }
    });
  });

Discourse.TopicFooterButtonsView = require('discourse/views/topic-footer-buttons').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/topic-footer-buttons.js'] = "define(\"discourse/views/topic-footer-buttons\", \n  [\"discourse/views/login-reply-button\",\"discourse/views/flag-topic-button\",\"discourse/views/star-button\",\"discourse/views/share-button\",\"discourse/views/invite-reply-button\",\"discourse/views/reply-button\",\"discourse/views/pinned-button\",\"discourse/views/topic-notifications-button\",\"discourse/views/container\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __dependency9__, __exports__) {\n    \"use strict\";\n    var LoginReplyButton = __dependency1__[\"default\"];\n    var FlagTopicButton = __dependency2__[\"default\"];\n    var StarButton = __dependency3__[\"default\"];\n    var ShareButton = __dependency4__[\"default\"];\n    var InviteReplyButton = __dependency5__[\"default\"];\n    var ReplyButton = __dependency6__[\"default\"];\n    var PinnedButton = __dependency7__[\"default\"];\n    var TopicNotificationsButton = __dependency8__[\"default\"];\n    var DiscourseContainerView = __dependency9__[\"default\"];\n\n    __exports__[\"default\"] = DiscourseContainerView.extend({\n      elementId: 'topic-footer-buttons',\n      topicBinding: 'controller.content',\n\n      init: function() {\n        this._super();\n        this.createButtons();\n      },\n\n      // Add the buttons below a topic\n      createButtons: function() {\n        var topic = this.get('topic');\n        if (Discourse.User.current()) {\n          if (!topic.get('isPrivateMessage')) {\n            // We hide some controls from private messages\n            if (this.get('topic.details.can_invite_to')) {\n              this.attachViewClass(InviteReplyButton);\n            }\n            this.attachViewClass(StarButton);\n            this.attachViewClass(ShareButton);\n            if (this.get('topic.details.can_flag_topic')) {\n              this.attachViewClass(FlagTopicButton);\n            }\n          }\n          if (this.get('topic.details.can_create_post')) {\n            this.attachViewClass(ReplyButton);\n          }\n          this.attachViewClass(PinnedButton);\n          this.attachViewClass(TopicNotificationsButton);\n\n          this.trigger('additionalButtons', this);\n        } else {\n          // If not logged in give them a login control\n          this.attachViewClass(LoginReplyButton);\n        }\n      }\n    });\n  });";
define("discourse/views/topic-list-item", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.GroupedView.extend({
      tagName: 'tr',
      templateName: 'list/topic_list_item',
      classNameBindings: ['controller.checked', 'content.archived', ':topic-list-item', 'content.hasExcerpt:has-excerpt'],
      attributeBindings: ['data-topic-id'],
      'data-topic-id': Em.computed.alias('content.id'),

      highlight: function() {
        var $topic = this.$();
        var originalCol = $topic.css('backgroundColor');
        $topic
          .addClass('highlighted')
          .stop()
          .animate({ backgroundColor: originalCol }, 2500, 'swing', function(){
            $topic.removeClass('highlighted');
          });
      },

      _highlightIfNeeded: function() {
        var session = Discourse.Session.current();

        // highlight the last topic viewed
        if (session.get('lastTopicIdViewed') === this.get('content.id')) {
          session.set('lastTopicIdViewed', null);
          this.highlight();
        } else if (this.get('content.highlight')) {
          // highlight new topics that have been loaded from the server or the one we just created
          this.set('content.highlight', false);
          this.highlight();
        }
      }.on('didInsertElement')

    });
  });

Discourse.TopicListItemView = require('discourse/views/topic-list-item').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/topic-list-item.js'] = "define(\"discourse/views/topic-list-item\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.GroupedView.extend({\n      tagName: 'tr',\n      templateName: 'list/topic_list_item',\n      classNameBindings: ['controller.checked', 'content.archived', ':topic-list-item', 'content.hasExcerpt:has-excerpt'],\n      attributeBindings: ['data-topic-id'],\n      'data-topic-id': Em.computed.alias('content.id'),\n\n      highlight: function() {\n        var $topic = this.$();\n        var originalCol = $topic.css('backgroundColor');\n        $topic\n          .addClass('highlighted')\n          .stop()\n          .animate({ backgroundColor: originalCol }, 2500, 'swing', function(){\n            $topic.removeClass('highlighted');\n          });\n      },\n\n      _highlightIfNeeded: function() {\n        var session = Discourse.Session.current();\n\n        // highlight the last topic viewed\n        if (session.get('lastTopicIdViewed') === this.get('content.id')) {\n          session.set('lastTopicIdViewed', null);\n          this.highlight();\n        } else if (this.get('content.highlight')) {\n          // highlight new topics that have been loaded from the server or the one we just created\n          this.set('content.highlight', false);\n          this.highlight();\n        }\n      }.on('didInsertElement')\n\n    });\n  });";
define("discourse/views/topic-list-poster", 
  ["discourse/helpers/user-avatar","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var renderAvatar = __dependency1__.renderAvatar;

    __exports__["default"] = Ember.View.extend({
      tagName: 'a',
      attributeBindings: ['href'],
      classNameBindings: ['content.extras'],

      user: Em.computed.alias('content.user'),
      href: Em.computed.alias('user.path'),

      click: function(e) {
        var user = this.get('user');
        this.appEvents.trigger('poster:expand', $(e.target));
        this.get('controller').send('expandUser', user);
        return false;
      },

      render: function(buffer) {
        var av = renderAvatar(this.get('content'), {usernamePath: 'user.username', imageSize: 'small'});
        buffer.push(av);
      }
    });
  });

Discourse.TopicListPosterView = require('discourse/views/topic-list-poster').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/topic-list-poster.js'] = "define(\"discourse/views/topic-list-poster\", \n  [\"discourse/helpers/user-avatar\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var renderAvatar = __dependency1__.renderAvatar;\n\n    __exports__[\"default\"] = Ember.View.extend({\n      tagName: 'a',\n      attributeBindings: ['href'],\n      classNameBindings: ['content.extras'],\n\n      user: Em.computed.alias('content.user'),\n      href: Em.computed.alias('user.path'),\n\n      click: function(e) {\n        var user = this.get('user');\n        this.appEvents.trigger('poster:expand', $(e.target));\n        this.get('controller').send('expandUser', user);\n        return false;\n      },\n\n      render: function(buffer) {\n        var av = renderAvatar(this.get('content'), {usernamePath: 'user.username', imageSize: 'small'});\n        buffer.push(av);\n      }\n    });\n  });";
define("discourse/views/topic-map-container", 
  ["discourse/components/private-message-map","discourse/components/topic-map","discourse/components/toggle-summary","discourse/components/toggle-deleted","discourse/views/container","exports"],
  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __exports__) {
    "use strict";
    var PrivateMessageMapComponent = __dependency1__["default"];
    var TopicMapComponent = __dependency2__["default"];
    var ToggleSummaryComponent = __dependency3__["default"];
    var ToggleDeletedComponent = __dependency4__["default"];
    var DiscourseContainerView = __dependency5__["default"];

    __exports__["default"] = DiscourseContainerView.extend({
      classNameBindings: ['hidden', ':topic-map'],
      shouldRerender: Discourse.View.renderIfChanged('topic.posts_count'),

      hidden: function() {
        if (!this.get('post.firstPost')) return true;

        var topic = this.get('topic');
        if (topic.get('archetype') === 'private_message') return false;
        if (topic.get('archetype') !== 'regular') return true;
        return topic.get('posts_count') < 2;
      }.property(),

      init: function() {
        this._super();
        if (this.get('hidden')) return;

        this.attachViewWithArgs({ topic: this.get('topic') }, TopicMapComponent);
        this.trigger('appendMapInformation', this);
      },

      appendMapInformation: function(container) {
        var topic = this.get('topic');

        // If we have a summary capability
        if (topic.get('has_summary')) {
          container.attachViewWithArgs({
            topic: topic,
            filterBinding: 'controller.filter'
          }, ToggleSummaryComponent);
        }

        if (Discourse.User.currentProp('staff')) {
          // If we have deleted post filtering
          if (topic.get('has_deleted')) {
            container.attachViewWithArgs({
              topic: topic,
              filterBinding: 'controller.filter'
            }, ToggleDeletedComponent);
          }
        }

        // If we have a private message
        if (this.get('topic.isPrivateMessage')) {
          container.attachViewWithArgs({ topic: topic, showPrivateInviteAction: 'showPrivateInvite' }, PrivateMessageMapComponent);
        }
      }
    });
  });

Discourse.TopicMapContainerView = require('discourse/views/topic-map-container').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/topic-map-container.js'] = "define(\"discourse/views/topic-map-container\", \n  [\"discourse/components/private-message-map\",\"discourse/components/topic-map\",\"discourse/components/toggle-summary\",\"discourse/components/toggle-deleted\",\"discourse/views/container\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __exports__) {\n    \"use strict\";\n    var PrivateMessageMapComponent = __dependency1__[\"default\"];\n    var TopicMapComponent = __dependency2__[\"default\"];\n    var ToggleSummaryComponent = __dependency3__[\"default\"];\n    var ToggleDeletedComponent = __dependency4__[\"default\"];\n    var DiscourseContainerView = __dependency5__[\"default\"];\n\n    __exports__[\"default\"] = DiscourseContainerView.extend({\n      classNameBindings: ['hidden', ':topic-map'],\n      shouldRerender: Discourse.View.renderIfChanged('topic.posts_count'),\n\n      hidden: function() {\n        if (!this.get('post.firstPost')) return true;\n\n        var topic = this.get('topic');\n        if (topic.get('archetype') === 'private_message') return false;\n        if (topic.get('archetype') !== 'regular') return true;\n        return topic.get('posts_count') \u003c 2;\n      }.property(),\n\n      init: function() {\n        this._super();\n        if (this.get('hidden')) return;\n\n        this.attachViewWithArgs({ topic: this.get('topic') }, TopicMapComponent);\n        this.trigger('appendMapInformation', this);\n      },\n\n      appendMapInformation: function(container) {\n        var topic = this.get('topic');\n\n        // If we have a summary capability\n        if (topic.get('has_summary')) {\n          container.attachViewWithArgs({\n            topic: topic,\n            filterBinding: 'controller.filter'\n          }, ToggleSummaryComponent);\n        }\n\n        if (Discourse.User.currentProp('staff')) {\n          // If we have deleted post filtering\n          if (topic.get('has_deleted')) {\n            container.attachViewWithArgs({\n              topic: topic,\n              filterBinding: 'controller.filter'\n            }, ToggleDeletedComponent);\n          }\n        }\n\n        // If we have a private message\n        if (this.get('topic.isPrivateMessage')) {\n          container.attachViewWithArgs({ topic: topic, showPrivateInviteAction: 'showPrivateInvite' }, PrivateMessageMapComponent);\n        }\n      }\n    });\n  });";
define("discourse/views/topic-progress", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.View.extend({
      elementId: 'topic-progress-wrapper',
      docked: false,
      classNameBindings: ['docked'],

      _inserted: function() {
        // This get seems counter intuitive, but it's to trigger the observer on
        // the streamPercentage for this view. Otherwise the process bar does not
        // update.
        this.get('controller.streamPercentage');

        this.appEvents.on("composer:opened", this, '_dock')
                      .on("composer:resized", this, '_dock')
                      .on("composer:closed", this, '_dock')
                      .on("topic:scrolled", this, '_dock');

        // Reflows are expensive. Cache the jQuery selector
        // and the width when inserted into the DOM
        this._$topicProgress = this.$('#topic-progress');
        this._progressWidth = this._$topicProgress[0].offsetWidth;
      }.on('didInsertElement'),

      _unbindEvents: function() {
        this.appEvents.off("composer:opened", this, '_dock')
                      .off("composer:resized", this, '_dock')
                      .off("composer:closed", this, '_dock')
                      .off('topic:scrolled', this, '_dock');
      }.on('willDestroyElement'),

      _updateBar: function() {
        Em.run.scheduleOnce('afterRender', this, '_updateProgressBar');
      }.observes('controller.streamPercentage', 'postStream.stream.@each'),

      _updateProgressBar: function() {
        // speeds up stuff, bypass jquery slowness and extra checks
        var totalWidth = this._progressWidth,
            progressWidth = this.get('controller.streamPercentage') * totalWidth;

        this._$topicProgress.find('.bg')
          .css("border-right-width", (progressWidth === totalWidth) ? "0px" : "1px")
          .width(progressWidth);
      },

      _dock: function () {
        var maximumOffset = $('#topic-footer-buttons').offset(),
            composerHeight = $('#reply-control').height() || 0,
            $topicProgressWrapper = this.$(),
            style = $topicProgressWrapper.attr('style') || '',
            isDocked = false,
            offset = window.pageYOffset || $('html').scrollTop();

        if (maximumOffset) {
          var threshold = maximumOffset.top,
              windowHeight = $(window).height(),
              topicProgressHeight = $('#topic-progress').height();

          isDocked = offset >= threshold - windowHeight + topicProgressHeight + composerHeight;
        }

        if (composerHeight > 0) {
          if (isDocked) {
            if (style.indexOf('bottom') >= 0) {
              $topicProgressWrapper.css('bottom', '');
            }
          } else {
            var height = composerHeight + "px";
            if ($topicProgressWrapper.css('bottom') !== height) {
              $topicProgressWrapper.css('bottom', height);
            }
          }
        } else {
          if (style.indexOf('bottom') >= 0) {
            $topicProgressWrapper.css('bottom', '');
          }
        }
        this.set('docked', isDocked);
      },

      _focusWhenOpened: function() {

        // Don't focus on mobile or touch
        if (Discourse.Mobile.mobileView || this.capabilities.get('touch')) {
          return;
        }

        if (this.get('controller.expanded')) {
          var self = this;
          Em.run.schedule('afterRender', function() {
            self.$('input').focus();
          });
        }
      }.observes('controller.expanded'),

      click: function(e) {
        if ($(e.target).parents('#topic-progress').length) {
          this.get('controller').send('toggleExpansion');
        }
      },

      keyDown: function(e) {
        var controller = this.get('controller');
        if (controller.get('expanded')) {
          if (e.keyCode === 13) {
            controller.send('jumpPost');
          } else if (e.keyCode === 27) {
            controller.send('toggleExpansion');
          }
        }
      }

    });
  });

Discourse.TopicProgressView = require('discourse/views/topic-progress').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/topic-progress.js'] = "define(\"discourse/views/topic-progress\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.View.extend({\n      elementId: 'topic-progress-wrapper',\n      docked: false,\n      classNameBindings: ['docked'],\n\n      _inserted: function() {\n        // This get seems counter intuitive, but it's to trigger the observer on\n        // the streamPercentage for this view. Otherwise the process bar does not\n        // update.\n        this.get('controller.streamPercentage');\n\n        this.appEvents.on(\"composer:opened\", this, '_dock')\n                      .on(\"composer:resized\", this, '_dock')\n                      .on(\"composer:closed\", this, '_dock')\n                      .on(\"topic:scrolled\", this, '_dock');\n\n        // Reflows are expensive. Cache the jQuery selector\n        // and the width when inserted into the DOM\n        this._$topicProgress = this.$('#topic-progress');\n        this._progressWidth = this._$topicProgress[0].offsetWidth;\n      }.on('didInsertElement'),\n\n      _unbindEvents: function() {\n        this.appEvents.off(\"composer:opened\", this, '_dock')\n                      .off(\"composer:resized\", this, '_dock')\n                      .off(\"composer:closed\", this, '_dock')\n                      .off('topic:scrolled', this, '_dock');\n      }.on('willDestroyElement'),\n\n      _updateBar: function() {\n        Em.run.scheduleOnce('afterRender', this, '_updateProgressBar');\n      }.observes('controller.streamPercentage', 'postStream.stream.@each'),\n\n      _updateProgressBar: function() {\n        // speeds up stuff, bypass jquery slowness and extra checks\n        var totalWidth = this._progressWidth,\n            progressWidth = this.get('controller.streamPercentage') * totalWidth;\n\n        this._$topicProgress.find('.bg')\n          .css(\"border-right-width\", (progressWidth === totalWidth) ? \"0px\" : \"1px\")\n          .width(progressWidth);\n      },\n\n      _dock: function () {\n        var maximumOffset = $('#topic-footer-buttons').offset(),\n            composerHeight = $('#reply-control').height() || 0,\n            $topicProgressWrapper = this.$(),\n            style = $topicProgressWrapper.attr('style') || '',\n            isDocked = false,\n            offset = window.pageYOffset || $('html').scrollTop();\n\n        if (maximumOffset) {\n          var threshold = maximumOffset.top,\n              windowHeight = $(window).height(),\n              topicProgressHeight = $('#topic-progress').height();\n\n          isDocked = offset \u003e= threshold - windowHeight + topicProgressHeight + composerHeight;\n        }\n\n        if (composerHeight \u003e 0) {\n          if (isDocked) {\n            if (style.indexOf('bottom') \u003e= 0) {\n              $topicProgressWrapper.css('bottom', '');\n            }\n          } else {\n            var height = composerHeight + \"px\";\n            if ($topicProgressWrapper.css('bottom') !== height) {\n              $topicProgressWrapper.css('bottom', height);\n            }\n          }\n        } else {\n          if (style.indexOf('bottom') \u003e= 0) {\n            $topicProgressWrapper.css('bottom', '');\n          }\n        }\n        this.set('docked', isDocked);\n      },\n\n      _focusWhenOpened: function() {\n\n        // Don't focus on mobile or touch\n        if (Discourse.Mobile.mobileView || this.capabilities.get('touch')) {\n          return;\n        }\n\n        if (this.get('controller.expanded')) {\n          var self = this;\n          Em.run.schedule('afterRender', function() {\n            self.$('input').focus();\n          });\n        }\n      }.observes('controller.expanded'),\n\n      click: function(e) {\n        if ($(e.target).parents('#topic-progress').length) {\n          this.get('controller').send('toggleExpansion');\n        }\n      },\n\n      keyDown: function(e) {\n        var controller = this.get('controller');\n        if (controller.get('expanded')) {\n          if (e.keyCode === 13) {\n            controller.send('jumpPost');\n          } else if (e.keyCode === 27) {\n            controller.send('toggleExpansion');\n          }\n        }\n      }\n\n    });\n  });";
define("discourse/views/topic", 
  ["discourse/mixins/add-category-class","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var AddCategoryClass = __dependency1__["default"];

    __exports__["default"] = Discourse.View.extend(AddCategoryClass, Discourse.Scrolling, {
      templateName: 'topic',
      topicBinding: 'controller.model',
      userFiltersBinding: 'controller.userFilters',
      classNameBindings: ['controller.multiSelect:multi-select',
                          'topic.archetype',
                          'topic.category.read_restricted:read_restricted',
                          'topic.deleted:deleted-topic',
                          'topic.categoryClass'],
      menuVisible: true,
      SHORT_POST: 1200,

      categoryId: Em.computed.alias('topic.category.id'),

      postStream: Em.computed.alias('controller.postStream'),

      _updateTitle: function() {
        var title = this.get('topic.title');
        if (title) return Discourse.set('title', _.unescape(title));
      }.observes('topic.loaded', 'topic.title'),

      _composeChanged: function() {
        var composerController = Discourse.get('router.composerController');
        composerController.clearState();
        composerController.set('topic', this.get('topic'));
      }.observes('composer'),

      _enteredTopic: function() {
        // Ember is supposed to only call observers when values change but something
        // in our view set up is firing this observer with the same value. This check
        // prevents scrolled from being called twice.
        var enteredAt = this.get('controller.enteredAt');
        if (enteredAt && (this.get('lastEnteredAt') !== enteredAt)) {
          this.scrolled();
          this.set('lastEnteredAt', enteredAt);
        }
      }.observes('controller.enteredAt'),

      _inserted: function() {
        this.bindScrolling({name: 'topic-view'});

        var self = this;
        $(window).resize('resize.discourse-on-scroll', function() {
          self.scrolled();
        });

        this.$().on('mouseup.discourse-redirect', '.cooked a, a.track-link', function(e) {
          var $target = $(e.target);
          if ($target.hasClass('mention') || $target.parents('.expanded-embed').length) { return false; }
          return Discourse.ClickTrack.trackClick(e);
        });

      }.on('didInsertElement'),

      // This view is being removed. Shut down operations
      _destroyed: function() {
        this.unbindScrolling('topic-view');
        $(window).unbind('resize.discourse-on-scroll');

        // Unbind link tracking
        this.$().off('mouseup.discourse-redirect', '.cooked a, a.track-link');

        this.resetExamineDockCache();

        // this happens after route exit, stuff could have trickled in
        this.set('controller.controllers.header.showExtraInfo', false);

      }.on('willDestroyElement'),

      debounceLoadSuggested: Discourse.debounce(function(){
        if (this.get('isDestroyed') || this.get('isDestroying')) { return; }

        var incoming = this.get('topicTrackingState.newIncoming'),
            suggested = this.get('topic.details.suggested_topics'),
            topicId = this.get('topic.id');

        if(suggested) {
          var existing = _.invoke(suggested, 'get', 'id'),
              lookup = _.chain(incoming)
                        .last(Discourse.SiteSettings.suggested_topics)
                        .reverse()
                        .union(existing)
                        .uniq()
                        .without(topicId)
                        .first(Discourse.SiteSettings.suggested_topics)
                        .value();

          Discourse.TopicList.loadTopics(lookup, "").then(function(topics){
            suggested.clear();
            suggested.pushObjects(topics);
          });
        }
      }, 1000),

      hasNewSuggested: function(){
        this.debounceLoadSuggested();
      }.observes('topicTrackingState.incomingCount'),

      gotFocus: function(){
        if (Discourse.get('hasFocus')){
          this.scrolled();
        }
      }.observes("Discourse.hasFocus"),

      resetExamineDockCache: function() {
        this.set('docAt', false);
      },

      offset: 0,
      hasScrolled: Em.computed.gt("offset", 0),

      /**
        The user has scrolled the window, or it is finished rendering and ready for processing.

        @method scrolled
      **/
      scrolled: function(){

        if(this.isDestroyed || this.isDestroying) {
          return;
        }

        var offset = window.pageYOffset || $('html').scrollTop();
        if (!this.get('docAt')) {
          var title = $('#topic-title');
          if (title && title.length === 1) {
            this.set('docAt', title.offset().top);
          }
        }

        this.set("offset", offset);

        var headerController = this.get('controller.controllers.header'),
            topic = this.get('controller.model');
        if (this.get('docAt')) {
          headerController.set('showExtraInfo', offset >= this.get('docAt') || topic.get('postStream.firstPostNotLoaded'));
        } else {
          headerController.set('showExtraInfo', topic.get('postStream.firstPostNotLoaded'));
        }

        // Trigger a scrolled event
        this.appEvents.trigger('topic:scrolled', offset);
      },

      topicTrackingState: function() {
        return Discourse.TopicTrackingState.current();
      }.property(),

      browseMoreMessage: function() {
        var opts = { latestLink: "<a href=\"" + Discourse.getURL("/latest") + "\">" + I18n.t("topic.view_latest_topics") + "</a>" },
            category = this.get('controller.content.category');

        if(Em.get(category, 'id') === Discourse.Site.currentProp("uncategorized_category_id")) {
          category = null;
        }

        if (category) {
          opts.catLink = Discourse.HTML.categoryBadge(category, {showParent: true});
        } else {
          opts.catLink = "<a href=\"" + Discourse.getURL("/categories") + "\">" + I18n.t("topic.browse_all_categories") + "</a>";
        }

        var tracking = this.get('topicTrackingState'),
            unreadTopics = tracking.countUnread(),
            newTopics = tracking.countNew();

        if (newTopics + unreadTopics > 0) {
          var hasBoth = unreadTopics > 0 && newTopics > 0;

          return I18n.messageFormat("topic.read_more_MF", {
            "BOTH": hasBoth,
            "UNREAD": unreadTopics,
            "NEW": newTopics,
            "CATEGORY": category ? true : false,
            latestLink: opts.latestLink,
            catLink: opts.catLink
          });
        }
        else if (category) {
          return I18n.t("topic.read_more_in_category", opts);
        } else {
          return I18n.t("topic.read_more", opts);
        }
      }.property('topicTrackingState.messageCount')
    });
  });

Discourse.TopicView = require('discourse/views/topic').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/topic.js'] = "define(\"discourse/views/topic\", \n  [\"discourse/mixins/add-category-class\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var AddCategoryClass = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Discourse.View.extend(AddCategoryClass, Discourse.Scrolling, {\n      templateName: 'topic',\n      topicBinding: 'controller.model',\n      userFiltersBinding: 'controller.userFilters',\n      classNameBindings: ['controller.multiSelect:multi-select',\n                          'topic.archetype',\n                          'topic.category.read_restricted:read_restricted',\n                          'topic.deleted:deleted-topic',\n                          'topic.categoryClass'],\n      menuVisible: true,\n      SHORT_POST: 1200,\n\n      categoryId: Em.computed.alias('topic.category.id'),\n\n      postStream: Em.computed.alias('controller.postStream'),\n\n      _updateTitle: function() {\n        var title = this.get('topic.title');\n        if (title) return Discourse.set('title', _.unescape(title));\n      }.observes('topic.loaded', 'topic.title'),\n\n      _composeChanged: function() {\n        var composerController = Discourse.get('router.composerController');\n        composerController.clearState();\n        composerController.set('topic', this.get('topic'));\n      }.observes('composer'),\n\n      _enteredTopic: function() {\n        // Ember is supposed to only call observers when values change but something\n        // in our view set up is firing this observer with the same value. This check\n        // prevents scrolled from being called twice.\n        var enteredAt = this.get('controller.enteredAt');\n        if (enteredAt \u0026\u0026 (this.get('lastEnteredAt') !== enteredAt)) {\n          this.scrolled();\n          this.set('lastEnteredAt', enteredAt);\n        }\n      }.observes('controller.enteredAt'),\n\n      _inserted: function() {\n        this.bindScrolling({name: 'topic-view'});\n\n        var self = this;\n        $(window).resize('resize.discourse-on-scroll', function() {\n          self.scrolled();\n        });\n\n        this.$().on('mouseup.discourse-redirect', '.cooked a, a.track-link', function(e) {\n          var $target = $(e.target);\n          if ($target.hasClass('mention') || $target.parents('.expanded-embed').length) { return false; }\n          return Discourse.ClickTrack.trackClick(e);\n        });\n\n      }.on('didInsertElement'),\n\n      // This view is being removed. Shut down operations\n      _destroyed: function() {\n        this.unbindScrolling('topic-view');\n        $(window).unbind('resize.discourse-on-scroll');\n\n        // Unbind link tracking\n        this.$().off('mouseup.discourse-redirect', '.cooked a, a.track-link');\n\n        this.resetExamineDockCache();\n\n        // this happens after route exit, stuff could have trickled in\n        this.set('controller.controllers.header.showExtraInfo', false);\n\n      }.on('willDestroyElement'),\n\n      debounceLoadSuggested: Discourse.debounce(function(){\n        if (this.get('isDestroyed') || this.get('isDestroying')) { return; }\n\n        var incoming = this.get('topicTrackingState.newIncoming'),\n            suggested = this.get('topic.details.suggested_topics'),\n            topicId = this.get('topic.id');\n\n        if(suggested) {\n          var existing = _.invoke(suggested, 'get', 'id'),\n              lookup = _.chain(incoming)\n                        .last(Discourse.SiteSettings.suggested_topics)\n                        .reverse()\n                        .union(existing)\n                        .uniq()\n                        .without(topicId)\n                        .first(Discourse.SiteSettings.suggested_topics)\n                        .value();\n\n          Discourse.TopicList.loadTopics(lookup, \"\").then(function(topics){\n            suggested.clear();\n            suggested.pushObjects(topics);\n          });\n        }\n      }, 1000),\n\n      hasNewSuggested: function(){\n        this.debounceLoadSuggested();\n      }.observes('topicTrackingState.incomingCount'),\n\n      gotFocus: function(){\n        if (Discourse.get('hasFocus')){\n          this.scrolled();\n        }\n      }.observes(\"Discourse.hasFocus\"),\n\n      resetExamineDockCache: function() {\n        this.set('docAt', false);\n      },\n\n      offset: 0,\n      hasScrolled: Em.computed.gt(\"offset\", 0),\n\n      /**\n        The user has scrolled the window, or it is finished rendering and ready for processing.\n\n        @method scrolled\n      **/\n      scrolled: function(){\n\n        if(this.isDestroyed || this.isDestroying) {\n          return;\n        }\n\n        var offset = window.pageYOffset || $('html').scrollTop();\n        if (!this.get('docAt')) {\n          var title = $('#topic-title');\n          if (title \u0026\u0026 title.length === 1) {\n            this.set('docAt', title.offset().top);\n          }\n        }\n\n        this.set(\"offset\", offset);\n\n        var headerController = this.get('controller.controllers.header'),\n            topic = this.get('controller.model');\n        if (this.get('docAt')) {\n          headerController.set('showExtraInfo', offset \u003e= this.get('docAt') || topic.get('postStream.firstPostNotLoaded'));\n        } else {\n          headerController.set('showExtraInfo', topic.get('postStream.firstPostNotLoaded'));\n        }\n\n        // Trigger a scrolled event\n        this.appEvents.trigger('topic:scrolled', offset);\n      },\n\n      topicTrackingState: function() {\n        return Discourse.TopicTrackingState.current();\n      }.property(),\n\n      browseMoreMessage: function() {\n        var opts = { latestLink: \"\u003ca href=\\\"\" + Discourse.getURL(\"/latest\") + \"\\\"\u003e\" + I18n.t(\"topic.view_latest_topics\") + \"\u003c/a\u003e\" },\n            category = this.get('controller.content.category');\n\n        if(Em.get(category, 'id') === Discourse.Site.currentProp(\"uncategorized_category_id\")) {\n          category = null;\n        }\n\n        if (category) {\n          opts.catLink = Discourse.HTML.categoryBadge(category, {showParent: true});\n        } else {\n          opts.catLink = \"\u003ca href=\\\"\" + Discourse.getURL(\"/categories\") + \"\\\"\u003e\" + I18n.t(\"topic.browse_all_categories\") + \"\u003c/a\u003e\";\n        }\n\n        var tracking = this.get('topicTrackingState'),\n            unreadTopics = tracking.countUnread(),\n            newTopics = tracking.countNew();\n\n        if (newTopics + unreadTopics \u003e 0) {\n          var hasBoth = unreadTopics \u003e 0 \u0026\u0026 newTopics \u003e 0;\n\n          return I18n.messageFormat(\"topic.read_more_MF\", {\n            \"BOTH\": hasBoth,\n            \"UNREAD\": unreadTopics,\n            \"NEW\": newTopics,\n            \"CATEGORY\": category ? true : false,\n            latestLink: opts.latestLink,\n            catLink: opts.catLink\n          });\n        }\n        else if (category) {\n          return I18n.t(\"topic.read_more_in_category\", opts);\n        } else {\n          return I18n.t(\"topic.read_more\", opts);\n        }\n      }.property('topicTrackingState.messageCount')\n    });\n  });";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  Handles the view for the topic bulk actions modal

  @class TopicBulkActionsView
  @extends Discourse.ModalBodyView
  @namespace Discourse
  @module Discourse
**/

Discourse.TopicBulkActionsView = Discourse.ModalBodyView.extend({
  templateName: 'modal/topic_bulk_actions',
  title: I18n.t('topics.bulk.actions')
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/topic_bulk_actions_view.js'] = "/**\n  Handles the view for the topic bulk actions modal\n\n  @class TopicBulkActionsView\n  @extends Discourse.ModalBodyView\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.TopicBulkActionsView = Discourse.ModalBodyView.extend({\n  templateName: 'modal/topic_bulk_actions',\n  title: I18n.t('topics.bulk.actions')\n});\n";
define("discourse/views/unknown", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Em.View.extend({
      classNameBindings: [':container'],

      render: function(buffer) {
        buffer.push(this.get('controller.model'));
      }
    });
  });

Discourse.UnknownView = require('discourse/views/unknown').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/unknown.js'] = "define(\"discourse/views/unknown\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Em.View.extend({\n      classNameBindings: [':container'],\n\n      render: function(buffer) {\n        buffer.push(this.get('controller.model'));\n      }\n    });\n  });";
define("discourse/views/upload-selector", 
  ["exports"],
  function(__exports__) {
    "use strict";
    function uploadTranslate(key, options) {
      var opts = options || {};
      if (Discourse.Utilities.allowsAttachments()) { key += "_with_attachments"; }
      return I18n.t("upload_selector." + key, opts);
    }

    __exports__["default"] = Discourse.ModalBodyView.extend({
      templateName: 'modal/upload_selector',
      classNames: ['upload-selector'],

      title: function() { return uploadTranslate("title"); }.property(),
      uploadIcon: function() { return Discourse.Utilities.allowsAttachments() ? "fa-upload" : "fa-picture-o"; }.property(),

      tip: function() {
        var source = this.get("controller.local") ? "local" : "remote";
        var opts = { authorized_extensions: Discourse.Utilities.authorizedExtensions() };
        return uploadTranslate(source + "_tip", opts);
      }.property("controller.local"),

      hint: function() {
        // cf. http://stackoverflow.com/a/9851769/11983
        var isChrome = !!window.chrome && !(!!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0);
        var isFirefox = typeof InstallTrigger !== 'undefined';
        var isSupported = isChrome || isFirefox;

        // chrome is the only browser that support copy & paste of images.
        return I18n.t("upload_selector.hint" + (isSupported ? "_for_supported_browsers" : ""));
      }.property(),

      _selectOnInsert: function() {
        this.selectedChanged();
      }.on('didInsertElement'),

      selectedChanged: function() {
        var self = this;
        Em.run.next(function() {
          // *HACK* to select the proper radio button
          var value = self.get('controller.local') ? 'local' : 'remote';
          $('input:radio[name="upload"]').val([value]);
          // focus the input
          $('.inputs input:first').focus();
        });
      }.observes('controller.local'),

      actions: {
        upload: function() {
          if (this.get("controller.local")) {
            $('#reply-control').fileupload('add', { fileInput: $('#filename-input') });
          } else {
            var imageUrl = $('#fileurl-input').val();
            var imageLink = $('#link-input').val();
            var composerView = this.get('controller.composerView');
            if (this.get("controller.showMore") && imageLink.length > 3) {
              composerView.addMarkdown("[![](" + imageUrl +")](" + imageLink + ")");
            } else {
              composerView.addMarkdown(imageUrl);
            }
            this.get('controller').send('closeModal');
          }
        }
      }

    });
  });

Discourse.UploadSelectorView = require('discourse/views/upload-selector').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/upload-selector.js'] = "define(\"discourse/views/upload-selector\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    function uploadTranslate(key, options) {\n      var opts = options || {};\n      if (Discourse.Utilities.allowsAttachments()) { key += \"_with_attachments\"; }\n      return I18n.t(\"upload_selector.\" + key, opts);\n    }\n\n    __exports__[\"default\"] = Discourse.ModalBodyView.extend({\n      templateName: 'modal/upload_selector',\n      classNames: ['upload-selector'],\n\n      title: function() { return uploadTranslate(\"title\"); }.property(),\n      uploadIcon: function() { return Discourse.Utilities.allowsAttachments() ? \"fa-upload\" : \"fa-picture-o\"; }.property(),\n\n      tip: function() {\n        var source = this.get(\"controller.local\") ? \"local\" : \"remote\";\n        var opts = { authorized_extensions: Discourse.Utilities.authorizedExtensions() };\n        return uploadTranslate(source + \"_tip\", opts);\n      }.property(\"controller.local\"),\n\n      hint: function() {\n        // cf. http://stackoverflow.com/a/9851769/11983\n        var isChrome = !!window.chrome \u0026\u0026 !(!!window.opera || navigator.userAgent.indexOf(' OPR/') \u003e= 0);\n        var isFirefox = typeof InstallTrigger !== 'undefined';\n        var isSupported = isChrome || isFirefox;\n\n        // chrome is the only browser that support copy \u0026 paste of images.\n        return I18n.t(\"upload_selector.hint\" + (isSupported ? \"_for_supported_browsers\" : \"\"));\n      }.property(),\n\n      _selectOnInsert: function() {\n        this.selectedChanged();\n      }.on('didInsertElement'),\n\n      selectedChanged: function() {\n        var self = this;\n        Em.run.next(function() {\n          // *HACK* to select the proper radio button\n          var value = self.get('controller.local') ? 'local' : 'remote';\n          $('input:radio[name=\"upload\"]').val([value]);\n          // focus the input\n          $('.inputs input:first').focus();\n        });\n      }.observes('controller.local'),\n\n      actions: {\n        upload: function() {\n          if (this.get(\"controller.local\")) {\n            $('#reply-control').fileupload('add', { fileInput: $('#filename-input') });\n          } else {\n            var imageUrl = $('#fileurl-input').val();\n            var imageLink = $('#link-input').val();\n            var composerView = this.get('controller.composerView');\n            if (this.get(\"controller.showMore\") \u0026\u0026 imageLink.length \u003e 3) {\n              composerView.addMarkdown(\"[![](\" + imageUrl +\")](\" + imageLink + \")\");\n            } else {\n              composerView.addMarkdown(imageUrl);\n            }\n            this.get('controller').send('closeModal');\n          }\n        }\n      }\n\n    });\n  });";
define("discourse/views/user-expansion", 
  ["discourse/mixins/cleans-up","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var CleansUp = __dependency1__["default"];

    var clickOutsideEventName = "mousedown.outside-user-expansion";

    __exports__["default"] = Discourse.View.extend(CleansUp, {
      elementId: 'user-expansion',
      classNameBindings: ['controller.visible::hidden', 'controller.showBadges'],

      _setup: function() {
        var self = this;
        this.appEvents.on('poster:expand', this, '_posterExpand');

        $('html').off(clickOutsideEventName).on(clickOutsideEventName, function(e) {
          if (self.get('controller.visible')) {
            var $target = $(e.target);
            if ($target.closest('.trigger-expansion').length > 0) { return; }
            if (self.$().has(e.target).length !== 0) { return; }

            self.get('controller').close();
          }

          return true;
        });
      }.on('didInsertElement'),

      _posterExpand: function(target) {
        if (!target) { return; }
        var self = this,
            width = this.$().width();
        Em.run.schedule('afterRender', function() {
          if (target) {
            var position = target.offset();
            if (position) {
              position.left += target.width() + 10;

              var overage = ($(window).width() - 50) - (position.left + width);
              if (overage < 0) {
                position.left += overage;
                position.top += target.height() + 5;
              }
              self.$().css(position);
            }
          }
        });
      },

      cleanUp: function() {
        this.get('controller').close();
      },

      _removeEvents: function() {
        $('html').off(clickOutsideEventName);
        this.appEvents.off('poster:expand', this, '_posterExpand');
      }.on('willDestroyElement')

    });
  });

Discourse.UserExpansionView = require('discourse/views/user-expansion').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/user-expansion.js'] = "define(\"discourse/views/user-expansion\", \n  [\"discourse/mixins/cleans-up\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var CleansUp = __dependency1__[\"default\"];\n\n    var clickOutsideEventName = \"mousedown.outside-user-expansion\";\n\n    __exports__[\"default\"] = Discourse.View.extend(CleansUp, {\n      elementId: 'user-expansion',\n      classNameBindings: ['controller.visible::hidden', 'controller.showBadges'],\n\n      _setup: function() {\n        var self = this;\n        this.appEvents.on('poster:expand', this, '_posterExpand');\n\n        $('html').off(clickOutsideEventName).on(clickOutsideEventName, function(e) {\n          if (self.get('controller.visible')) {\n            var $target = $(e.target);\n            if ($target.closest('.trigger-expansion').length \u003e 0) { return; }\n            if (self.$().has(e.target).length !== 0) { return; }\n\n            self.get('controller').close();\n          }\n\n          return true;\n        });\n      }.on('didInsertElement'),\n\n      _posterExpand: function(target) {\n        if (!target) { return; }\n        var self = this,\n            width = this.$().width();\n        Em.run.schedule('afterRender', function() {\n          if (target) {\n            var position = target.offset();\n            if (position) {\n              position.left += target.width() + 10;\n\n              var overage = ($(window).width() - 50) - (position.left + width);\n              if (overage \u003c 0) {\n                position.left += overage;\n                position.top += target.height() + 5;\n              }\n              self.$().css(position);\n            }\n          }\n        });\n      },\n\n      cleanUp: function() {\n        this.get('controller').close();\n      },\n\n      _removeEvents: function() {\n        $('html').off(clickOutsideEventName);\n        this.appEvents.off('poster:expand', this, '_posterExpand');\n      }.on('willDestroyElement')\n\n    });\n  });";
define("discourse/views/user-invited", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.View.extend(Discourse.LoadMore, {
      classNames: ['paginated-topics-list'],
      eyelineSelector: '.paginated-topics-list .invite-list tr',
      templateName: 'user/invited'
    });
  });

Discourse.UserInvitedView = require('discourse/views/user-invited').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/user-invited.js'] = "define(\"discourse/views/user-invited\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.View.extend(Discourse.LoadMore, {\n      classNames: ['paginated-topics-list'],\n      eyelineSelector: '.paginated-topics-list .invite-list tr',\n      templateName: 'user/invited'\n    });\n  });";
define("discourse/views/user-posts", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.View.extend(Discourse.LoadMore, {
      loading: false,
      eyelineSelector: ".user-stream .item",
      classNames: ["user-stream"],

      actions: {
        loadMore: function() {
          var self = this;
          if (this.get("loading")) { return; }

          var postsStream = this.get("controller.model");
          postsStream.findItems().then(function () {
            self.set("loading", false);
            self.get("eyeline").flushRest();
          }).catch(function () { });
        }
      }
    });
  });

Discourse.UserPostsView = require('discourse/views/user-posts').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/user-posts.js'] = "define(\"discourse/views/user-posts\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.View.extend(Discourse.LoadMore, {\n      loading: false,\n      eyelineSelector: \".user-stream .item\",\n      classNames: [\"user-stream\"],\n\n      actions: {\n        loadMore: function() {\n          var self = this;\n          if (this.get(\"loading\")) { return; }\n\n          var postsStream = this.get(\"controller.model\");\n          postsStream.findItems().then(function () {\n            self.set(\"loading\", false);\n            self.get(\"eyeline\").flushRest();\n          }).catch(function () { });\n        }\n      }\n    });\n  });";
define("discourse/views/user-selector", 
  ["discourse/components/text-field","discourse/lib/user-search","exports"],
  function(__dependency1__, __dependency2__, __exports__) {
    "use strict";
    var TextField = __dependency1__["default"];
    var userSearch = __dependency2__["default"];

    var compiled;
    function templateFunction() {
      if (!compiled) {
        Handlebars.registerHelper("showMax", function(context, block) {
          var maxLength = parseInt(block.hash.max) || 3;
          if (context.length > maxLength){
            return context.slice(0, maxLength).join(", ") + ", +" + (context.length - maxLength);
          } else {
            return context.join(", ");
          }
        });

        compiled = Handlebars.compile(
          "<div class='autocomplete'>" +
            "<ul>" +
            "{{#each options.users}}" +
              "<li>" +
                  "<a href='#'>{{avatar this imageSize=\"tiny\"}} " +
                  "<span class='username'>{{this.username}}</span> " +
                  "<span class='name'>{{this.name}}</span></a>" +
              "</li>" +
            "{{/each}}" +
            "{{#if options.groups}}" +
              "{{#if options.users}}<hr>{{/if}}"+
                "{{#each options.groups}}" +
                  "<li>" +
                    "<a href=''><i class='icon-group'></i>" +
                      "<span class='username'>{{this.name}}</span> " +
                      "<span class='name'>{{showMax this.usernames max=3}}</span>" +
                    "</a>" +
                  "</li>" +
                "{{/each}}" +
              "{{/if}}" +
            "</ul>" +
          "</div>");
      }
      return compiled;
    }

    var UserSelector = TextField.extend({

      didInsertElement: function() {
        var userSelectorView = this,
            selected = [];

        function excludedUsernames() {
          var exclude = selected;
          if (userSelectorView.get('excludeCurrentUser')) {
            exclude = exclude.concat([Discourse.User.currentProp('username')]);
          }
          return exclude;
        }

        $(this.get('element')).val(this.get('usernames')).autocomplete({
          template: templateFunction(),

          disabled: this.get('disabled'),
          single: this.get('single'),
          allowAny: this.get('allowAny'),

          dataSource: function(term) {
            return userSearch({
              term: term,
              topicId: userSelectorView.get('topicId'),
              exclude: excludedUsernames(),
              include_groups: userSelectorView.get('include_groups')
            });
          },

          transformComplete: function(v) {
            if (v.username) {
              return v.username;
            } else {
              var excludes = excludedUsernames();
              return v.usernames.filter(function(item){
                    // include only, those not found in the exclude list
                    return excludes.indexOf(item) === -1;
                  });
            }
          },

          onChangeItems: function(items) {
            items = _.map(items, function(i) {
              if (i.username) {
                return i.username;
              } else {
                return i;
              }
            });
            userSelectorView.set('usernames', items.join(","));
            selected = items;
          },

          reverseTransform: function(i) {
            return { username: i };
          }

        });
      }

    });


    UserSelector.reopenClass({ templateFunction: templateFunction });

    __exports__["default"] = UserSelector;
  });

Discourse.UserSelectorView = require('discourse/views/user-selector').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/user-selector.js'] = "define(\"discourse/views/user-selector\", \n  [\"discourse/components/text-field\",\"discourse/lib/user-search\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var TextField = __dependency1__[\"default\"];\n    var userSearch = __dependency2__[\"default\"];\n\n    var compiled;\n    function templateFunction() {\n      if (!compiled) {\n        Handlebars.registerHelper(\"showMax\", function(context, block) {\n          var maxLength = parseInt(block.hash.max) || 3;\n          if (context.length \u003e maxLength){\n            return context.slice(0, maxLength).join(\", \") + \", +\" + (context.length - maxLength);\n          } else {\n            return context.join(\", \");\n          }\n        });\n\n        compiled = Handlebars.compile(\n          \"\u003cdiv class='autocomplete'\u003e\" +\n            \"\u003cul\u003e\" +\n            \"{{#each options.users}}\" +\n              \"\u003cli\u003e\" +\n                  \"\u003ca href='#'\u003e{{avatar this imageSize=\\\"tiny\\\"}} \" +\n                  \"\u003cspan class='username'\u003e{{this.username}}\u003c/span\u003e \" +\n                  \"\u003cspan class='name'\u003e{{this.name}}\u003c/span\u003e\u003c/a\u003e\" +\n              \"\u003c/li\u003e\" +\n            \"{{/each}}\" +\n            \"{{#if options.groups}}\" +\n              \"{{#if options.users}}\u003chr\u003e{{/if}}\"+\n                \"{{#each options.groups}}\" +\n                  \"\u003cli\u003e\" +\n                    \"\u003ca href=''\u003e\u003ci class='icon-group'\u003e\u003c/i\u003e\" +\n                      \"\u003cspan class='username'\u003e{{this.name}}\u003c/span\u003e \" +\n                      \"\u003cspan class='name'\u003e{{showMax this.usernames max=3}}\u003c/span\u003e\" +\n                    \"\u003c/a\u003e\" +\n                  \"\u003c/li\u003e\" +\n                \"{{/each}}\" +\n              \"{{/if}}\" +\n            \"\u003c/ul\u003e\" +\n          \"\u003c/div\u003e\");\n      }\n      return compiled;\n    }\n\n    var UserSelector = TextField.extend({\n\n      didInsertElement: function() {\n        var userSelectorView = this,\n            selected = [];\n\n        function excludedUsernames() {\n          var exclude = selected;\n          if (userSelectorView.get('excludeCurrentUser')) {\n            exclude = exclude.concat([Discourse.User.currentProp('username')]);\n          }\n          return exclude;\n        }\n\n        $(this.get('element')).val(this.get('usernames')).autocomplete({\n          template: templateFunction(),\n\n          disabled: this.get('disabled'),\n          single: this.get('single'),\n          allowAny: this.get('allowAny'),\n\n          dataSource: function(term) {\n            return userSearch({\n              term: term,\n              topicId: userSelectorView.get('topicId'),\n              exclude: excludedUsernames(),\n              include_groups: userSelectorView.get('include_groups')\n            });\n          },\n\n          transformComplete: function(v) {\n            if (v.username) {\n              return v.username;\n            } else {\n              var excludes = excludedUsernames();\n              return v.usernames.filter(function(item){\n                    // include only, those not found in the exclude list\n                    return excludes.indexOf(item) === -1;\n                  });\n            }\n          },\n\n          onChangeItems: function(items) {\n            items = _.map(items, function(i) {\n              if (i.username) {\n                return i.username;\n              } else {\n                return i;\n              }\n            });\n            userSelectorView.set('usernames', items.join(\",\"));\n            selected = items;\n          },\n\n          reverseTransform: function(i) {\n            return { username: i };\n          }\n\n        });\n      }\n\n    });\n\n\n    UserSelector.reopenClass({ templateFunction: templateFunction });\n\n    __exports__[\"default\"] = UserSelector;\n  });";
define("discourse/views/user-stream", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.View.extend(Discourse.LoadMore, {
      loading: false,
      eyelineSelector: '.user-stream .item',
      classNames: ['user-stream'],

      _scrollTopOnModelChange: function() {
        Em.run.schedule('afterRender', function() {
          $(document).scrollTop(0);
        });
      }.observes('controller.model.user.id'),

      actions: {
        loadMore: function() {
          var self = this;
          if (this.get('loading')) { return; }

          this.set('loading', true);
          var stream = this.get('controller.model');
          stream.findItems().then(function() {
            self.set('loading', false);
            self.get('eyeline').flushRest();
          });
        }
      }
    });
  });

Discourse.UserStreamView = require('discourse/views/user-stream').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/user-stream.js'] = "define(\"discourse/views/user-stream\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.View.extend(Discourse.LoadMore, {\n      loading: false,\n      eyelineSelector: '.user-stream .item',\n      classNames: ['user-stream'],\n\n      _scrollTopOnModelChange: function() {\n        Em.run.schedule('afterRender', function() {\n          $(document).scrollTop(0);\n        });\n      }.observes('controller.model.user.id'),\n\n      actions: {\n        loadMore: function() {\n          var self = this;\n          if (this.get('loading')) { return; }\n\n          this.set('loading', true);\n          var stream = this.get('controller.model');\n          stream.findItems().then(function() {\n            self.set('loading', false);\n            self.get('eyeline').flushRest();\n          });\n        }\n      }\n    });\n  });";
define("discourse/views/user-topics-list", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.View.extend(Discourse.LoadMore, {
      classNames: ['paginated-topics-list'],
      eyelineSelector: '.paginated-topics-list .topic-list tr',
      templateName: 'list/user_topics_list'
    });
  });

Discourse.UserTopicsListView = require('discourse/views/user-topics-list').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/user-topics-list.js'] = "define(\"discourse/views/user-topics-list\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.View.extend(Discourse.LoadMore, {\n      classNames: ['paginated-topics-list'],\n      eyelineSelector: '.paginated-topics-list .topic-list tr',\n      templateName: 'list/user_topics_list'\n    });\n  });";
define("discourse/views/user", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.View.extend(Discourse.ScrollTop, {
      templateName: 'user/user',
      userBinding: 'controller.content',

      updateTitle: function() {
        var username = this.get('user.username');
        if (username) {
          Discourse.set('title', "" + (I18n.t("user.profile")) + " - " + username);
        }
      }.observes('user.loaded', 'user.username')
    });
  });

Discourse.UserView = require('discourse/views/user').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/views/user.js'] = "define(\"discourse/views/user\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.View.extend(Discourse.ScrollTop, {\n      templateName: 'user/user',\n      userBinding: 'controller.content',\n\n      updateTitle: function() {\n        var username = this.get('user.username');\n        if (username) {\n          Discourse.set('title', \"\" + (I18n.t(\"user.profile\")) + \" - \" + username);\n        }\n      }.observes('user.loaded', 'user.username')\n    });\n  });";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

var safe = Handlebars.SafeString;

/**
  Produces a link to a route with support for i18n on the title

  @method titled-link-to
  @for Handlebars
**/
Handlebars.registerHelper('titled-link-to', function(name, object) {
  var options = [].slice.call(arguments, -1)[0];
  if (options.hash.titleKey) {
    options.hash.title = I18n.t(options.hash.titleKey);
  }
  if (arguments.length === 3) {
    return Ember.Handlebars.helpers['link-to'].call(this, name, object, options);
  } else {
    return Ember.Handlebars.helpers['link-to'].call(this, name, options);
  }
});

/**
  Bound avatar helper.

  @method bound-avatar
  @for Handlebars
**/
Em.Handlebars.helper('bound-avatar', function(user, size, uploadId) {
  if (Em.isEmpty(user)) {
    return new safe("<div class='avatar-placeholder'></div>");
  }
  var username = Em.get(user, 'username');

  if(arguments.length < 4){
    uploadId = Em.get(user, 'uploaded_avatar_id');
  }

  var avatarTemplate = Discourse.User.avatarTemplate(username, uploadId);

  return new safe(Discourse.Utilities.avatarImg({
    size: size,
    avatarTemplate: avatarTemplate
  }));
}, 'username', 'uploaded_avatar_id');

/*
 * Used when we only have a template
 */
Em.Handlebars.helper('bound-avatar-template', function(avatarTemplate, size) {
  return new safe(Discourse.Utilities.avatarImg({
    size: size,
    avatarTemplate: avatarTemplate
  }));
});

/**
  Nicely format a date without binding or returning HTML

  @method raw-date
  @for Handlebars
**/
Handlebars.registerHelper('raw-date', function(property, options) {
  var dt = new Date(Ember.Handlebars.get(this, property, options));
  return Discourse.Formatter.longDate(dt);
});

/**
  Nicely format a bound date without returning HTML

  @method bound-raw-date
  @for Handlebars
**/
Em.Handlebars.helper('bound-raw-date', function (date) {
  return Discourse.Formatter.longDateNoYear(new Date(date));
});

/**
  Live refreshing age helper

  @method age
  @for Handlebars
**/
Handlebars.registerHelper('age', function(property, options) {
  var dt = new Date(Ember.Handlebars.get(this, property, options));
  return new safe(Discourse.Formatter.autoUpdatingRelativeAge(dt));
});

/**
  Live refreshing age helper, with a tooltip showing the date and time

  @method age-with-tooltip
  @for Handlebars
**/
Handlebars.registerHelper('age-with-tooltip', function(property, options) {
  var dt = new Date(Ember.Handlebars.get(this, property, options));
  return new safe(Discourse.Formatter.autoUpdatingRelativeAge(dt, {title: true}));
});

/**
  Display logic for numbers.

  @method number
  @for Handlebars
**/
Handlebars.registerHelper('number', function(property, options) {

  var orig = parseInt(Ember.Handlebars.get(this, property, options), 10);
  if (isNaN(orig)) { orig = 0; }

  var title = orig;
  if (options.hash.numberKey) {
    title = I18n.t(options.hash.numberKey, { number: orig });
  }

  var classNames = 'number';
  if (options.hash['class']) {
    classNames += ' ' + Ember.Handlebars.get(this, options.hash['class'], options);
  }
  var result = "<span class='" + classNames + "'";

  // Round off the thousands to one decimal place
  var n = Discourse.Formatter.number(orig);
  if (n !== title) {
    result += " title='" + Handlebars.Utils.escapeExpression(title) + "'";
  }
  result += ">" + n + "</span>";

  return new safe(result);
});

/**
  Display logic for dates. It is unbound in Ember but will use jQuery to
  update the dates on a regular interval.

  @method date
  @for Handlebars
**/
Handlebars.registerHelper('date', function(property, options) {
  var leaveAgo;
  if (property.hash) {
    if (property.hash.leaveAgo) {
      leaveAgo = property.hash.leaveAgo === "true";
    }
    if (property.hash.path) {
      property = property.hash.path;
    }
  }

  var val = Ember.Handlebars.get(this, property, options);
  if (val) {
    var date = new Date(val);
    return new safe(Discourse.Formatter.autoUpdatingRelativeAge(date, {format: 'medium', title: true, leaveAgo: leaveAgo}));
  }
});

Em.Handlebars.helper('bound-date', function(dt) {
  return new safe(Discourse.Formatter.autoUpdatingRelativeAge(new Date(dt), {format: 'medium', title: true }));
});

/**
  Look for custom html content using `Discourse.HTML`. If none exists, look for a template
  to render with that name.

  @method custom-html
  @for Handlebars
**/
Handlebars.registerHelper('custom-html', function(name, contextString, options) {
  var html = Discourse.HTML.getCustomHTML(name);
  if (html) { return html; }

  var container = (options || contextString).data.keywords.controller.container;

  if (container.lookup('template:' + name)) {
    return Ember.Handlebars.helpers.partial.apply(this, arguments);
  }
});

Em.Handlebars.helper('human-size', function(size) {
  return new safe(I18n.toHumanSize(size));
});

/**
  Renders the domain for a link if it's not internal and has a title.

  @method link-domain
  @for Handlebars
**/
Handlebars.registerHelper('link-domain', function(property, options) {
  var link = Em.get(this, property, options);
  if (link) {
    var internal = Em.get(link, 'internal'),
        hasTitle = (!Em.isEmpty(Em.get(link, 'title')));
    if (hasTitle && !internal) {
      var domain = Em.get(link, 'domain');
      if (!Em.isEmpty(domain)) {
        var s = domain.split('.');
        domain = s[s.length-2] + "." + s[s.length-1];
        return new safe("<span class='domain'>" + domain + "</span>");
      }
    }
  }
});

/**
  Renders a font-awesome icon with an optional i18n string as hidden text for
  screen readers.

  @method icon
  @for Handlebars
**/
Handlebars.registerHelper('icon', function(icon, options) {
  var labelKey, html;
  if (options.hash) { labelKey = options.hash.label; }
  html = "<i class='fa fa-" + icon + "'";
  if (labelKey) { html += " aria-hidden='true'"; }
  html += "></i>";
  if (labelKey) {
    html += "<span class='sr-only'>" + I18n.t(labelKey) + "</span>";
  }
  return new safe(html);
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/helpers/application_helpers.js'] = "var safe = Handlebars.SafeString;\n\n/**\n  Produces a link to a route with support for i18n on the title\n\n  @method titled-link-to\n  @for Handlebars\n**/\nHandlebars.registerHelper('titled-link-to', function(name, object) {\n  var options = [].slice.call(arguments, -1)[0];\n  if (options.hash.titleKey) {\n    options.hash.title = I18n.t(options.hash.titleKey);\n  }\n  if (arguments.length === 3) {\n    return Ember.Handlebars.helpers['link-to'].call(this, name, object, options);\n  } else {\n    return Ember.Handlebars.helpers['link-to'].call(this, name, options);\n  }\n});\n\n/**\n  Bound avatar helper.\n\n  @method bound-avatar\n  @for Handlebars\n**/\nEm.Handlebars.helper('bound-avatar', function(user, size, uploadId) {\n  if (Em.isEmpty(user)) {\n    return new safe(\"\u003cdiv class='avatar-placeholder'\u003e\u003c/div\u003e\");\n  }\n  var username = Em.get(user, 'username');\n\n  if(arguments.length \u003c 4){\n    uploadId = Em.get(user, 'uploaded_avatar_id');\n  }\n\n  var avatarTemplate = Discourse.User.avatarTemplate(username, uploadId);\n\n  return new safe(Discourse.Utilities.avatarImg({\n    size: size,\n    avatarTemplate: avatarTemplate\n  }));\n}, 'username', 'uploaded_avatar_id');\n\n/*\n * Used when we only have a template\n */\nEm.Handlebars.helper('bound-avatar-template', function(avatarTemplate, size) {\n  return new safe(Discourse.Utilities.avatarImg({\n    size: size,\n    avatarTemplate: avatarTemplate\n  }));\n});\n\n/**\n  Nicely format a date without binding or returning HTML\n\n  @method raw-date\n  @for Handlebars\n**/\nHandlebars.registerHelper('raw-date', function(property, options) {\n  var dt = new Date(Ember.Handlebars.get(this, property, options));\n  return Discourse.Formatter.longDate(dt);\n});\n\n/**\n  Nicely format a bound date without returning HTML\n\n  @method bound-raw-date\n  @for Handlebars\n**/\nEm.Handlebars.helper('bound-raw-date', function (date) {\n  return Discourse.Formatter.longDateNoYear(new Date(date));\n});\n\n/**\n  Live refreshing age helper\n\n  @method age\n  @for Handlebars\n**/\nHandlebars.registerHelper('age', function(property, options) {\n  var dt = new Date(Ember.Handlebars.get(this, property, options));\n  return new safe(Discourse.Formatter.autoUpdatingRelativeAge(dt));\n});\n\n/**\n  Live refreshing age helper, with a tooltip showing the date and time\n\n  @method age-with-tooltip\n  @for Handlebars\n**/\nHandlebars.registerHelper('age-with-tooltip', function(property, options) {\n  var dt = new Date(Ember.Handlebars.get(this, property, options));\n  return new safe(Discourse.Formatter.autoUpdatingRelativeAge(dt, {title: true}));\n});\n\n/**\n  Display logic for numbers.\n\n  @method number\n  @for Handlebars\n**/\nHandlebars.registerHelper('number', function(property, options) {\n\n  var orig = parseInt(Ember.Handlebars.get(this, property, options), 10);\n  if (isNaN(orig)) { orig = 0; }\n\n  var title = orig;\n  if (options.hash.numberKey) {\n    title = I18n.t(options.hash.numberKey, { number: orig });\n  }\n\n  var classNames = 'number';\n  if (options.hash['class']) {\n    classNames += ' ' + Ember.Handlebars.get(this, options.hash['class'], options);\n  }\n  var result = \"\u003cspan class='\" + classNames + \"'\";\n\n  // Round off the thousands to one decimal place\n  var n = Discourse.Formatter.number(orig);\n  if (n !== title) {\n    result += \" title='\" + Handlebars.Utils.escapeExpression(title) + \"'\";\n  }\n  result += \"\u003e\" + n + \"\u003c/span\u003e\";\n\n  return new safe(result);\n});\n\n/**\n  Display logic for dates. It is unbound in Ember but will use jQuery to\n  update the dates on a regular interval.\n\n  @method date\n  @for Handlebars\n**/\nHandlebars.registerHelper('date', function(property, options) {\n  var leaveAgo;\n  if (property.hash) {\n    if (property.hash.leaveAgo) {\n      leaveAgo = property.hash.leaveAgo === \"true\";\n    }\n    if (property.hash.path) {\n      property = property.hash.path;\n    }\n  }\n\n  var val = Ember.Handlebars.get(this, property, options);\n  if (val) {\n    var date = new Date(val);\n    return new safe(Discourse.Formatter.autoUpdatingRelativeAge(date, {format: 'medium', title: true, leaveAgo: leaveAgo}));\n  }\n});\n\nEm.Handlebars.helper('bound-date', function(dt) {\n  return new safe(Discourse.Formatter.autoUpdatingRelativeAge(new Date(dt), {format: 'medium', title: true }));\n});\n\n/**\n  Look for custom html content using `Discourse.HTML`. If none exists, look for a template\n  to render with that name.\n\n  @method custom-html\n  @for Handlebars\n**/\nHandlebars.registerHelper('custom-html', function(name, contextString, options) {\n  var html = Discourse.HTML.getCustomHTML(name);\n  if (html) { return html; }\n\n  var container = (options || contextString).data.keywords.controller.container;\n\n  if (container.lookup('template:' + name)) {\n    return Ember.Handlebars.helpers.partial.apply(this, arguments);\n  }\n});\n\nEm.Handlebars.helper('human-size', function(size) {\n  return new safe(I18n.toHumanSize(size));\n});\n\n/**\n  Renders the domain for a link if it's not internal and has a title.\n\n  @method link-domain\n  @for Handlebars\n**/\nHandlebars.registerHelper('link-domain', function(property, options) {\n  var link = Em.get(this, property, options);\n  if (link) {\n    var internal = Em.get(link, 'internal'),\n        hasTitle = (!Em.isEmpty(Em.get(link, 'title')));\n    if (hasTitle \u0026\u0026 !internal) {\n      var domain = Em.get(link, 'domain');\n      if (!Em.isEmpty(domain)) {\n        var s = domain.split('.');\n        domain = s[s.length-2] + \".\" + s[s.length-1];\n        return new safe(\"\u003cspan class='domain'\u003e\" + domain + \"\u003c/span\u003e\");\n      }\n    }\n  }\n});\n\n/**\n  Renders a font-awesome icon with an optional i18n string as hidden text for\n  screen readers.\n\n  @method icon\n  @for Handlebars\n**/\nHandlebars.registerHelper('icon', function(icon, options) {\n  var labelKey, html;\n  if (options.hash) { labelKey = options.hash.label; }\n  html = \"\u003ci class='fa fa-\" + icon + \"'\";\n  if (labelKey) { html += \" aria-hidden='true'\"; }\n  html += \"\u003e\u003c/i\u003e\";\n  if (labelKey) {\n    html += \"\u003cspan class='sr-only'\u003e\" + I18n.t(labelKey) + \"\u003c/span\u003e\";\n  }\n  return new safe(html);\n});\n";
define("discourse/helpers/bound-category-link", 
  ["discourse/lib/html-builder"],
  function(__dependency1__) {
    "use strict";
    var categoryLinkHTML = __dependency1__.categoryLinkHTML;

    Em.Handlebars.helper('bound-category-link', categoryLinkHTML);
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/helpers/bound-category-link.js'] = "define(\"discourse/helpers/bound-category-link\", \n  [\"discourse/lib/html-builder\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var categoryLinkHTML = __dependency1__.categoryLinkHTML;\n\n    Em.Handlebars.helper('bound-category-link', categoryLinkHTML);\n  });";
define("discourse/helpers/category-badge", 
  ["discourse/lib/html-builder"],
  function(__dependency1__) {
    "use strict";
    var categoryLinkHTML = __dependency1__.categoryLinkHTML;

    Handlebars.registerHelper('category-badge', function(property, options) {
      options.hash.link = false;
      return categoryLinkHTML(Ember.Handlebars.get(this, property, options), options);
    });
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/helpers/category-badge.js'] = "define(\"discourse/helpers/category-badge\", \n  [\"discourse/lib/html-builder\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var categoryLinkHTML = __dependency1__.categoryLinkHTML;\n\n    Handlebars.registerHelper('category-badge', function(property, options) {\n      options.hash.link = false;\n      return categoryLinkHTML(Ember.Handlebars.get(this, property, options), options);\n    });\n  });";
define("discourse/helpers/category-link-raw", 
  ["discourse/lib/html-builder"],
  function(__dependency1__) {
    "use strict";
    var categoryLinkHTML = __dependency1__.categoryLinkHTML;

    Handlebars.registerHelper('category-link-raw', function(property, options) {
      return categoryLinkHTML(property, options);
    });
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/helpers/category-link-raw.js'] = "define(\"discourse/helpers/category-link-raw\", \n  [\"discourse/lib/html-builder\"],\n  function(__dependency1__) {\n    \"use strict\";\n    var categoryLinkHTML = __dependency1__.categoryLinkHTML;\n\n    Handlebars.registerHelper('category-link-raw', function(property, options) {\n      return categoryLinkHTML(property, options);\n    });\n  });";
define("discourse/helpers/category-link", 
  ["discourse/lib/html-builder","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var categoryLinkHTML = __dependency1__.categoryLinkHTML;

    __exports__["default"] = Handlebars.registerHelper('category-link', function(property, options) {
      return categoryLinkHTML(Ember.Handlebars.get(this, property, options), options);
    });
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/helpers/category-link.js'] = "define(\"discourse/helpers/category-link\", \n  [\"discourse/lib/html-builder\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var categoryLinkHTML = __dependency1__.categoryLinkHTML;\n\n    __exports__[\"default\"] = Handlebars.registerHelper('category-link', function(property, options) {\n      return categoryLinkHTML(Ember.Handlebars.get(this, property, options), options);\n    });\n  });";
define("discourse/helpers/grouped-each", 
  [],
  function() {
    "use strict";
    var DiscourseGroupedEach = function(context, path, options) {
      var self = this,
          normalized = Ember.Handlebars.normalizePath(context, path, options.data);

      this.context = context;
      this.path = path;
      this.options = options;
      this.template = options.fn;
      this.containingView = options.data.view;
      this.normalizedRoot = normalized.root;
      this.normalizedPath = normalized.path;
      this.content = this.lookupContent();
      this.destroyed = false;

      this.addContentObservers();
      this.addArrayObservers();

      this.containingView.on('willClearRender', function() {
        self.destroy();
      });
    };

    DiscourseGroupedEach.prototype = {
      contentWillChange: function() {
        this.removeArrayObservers();
      },

      contentDidChange: function() {
        this.content = this.lookupContent();
        this.addArrayObservers();
        this.rerenderContainingView();
      },

      contentArrayWillChange: Ember.K,

      contentArrayDidChange: function() {
        this.rerenderContainingView();
      },

      lookupContent: function() {
        return Ember.Handlebars.get(this.normalizedRoot, this.normalizedPath, this.options);
      },

      addArrayObservers: function() {
        if (!this.content) { return; }

        this.content.addArrayObserver(this, {
          willChange: 'contentArrayWillChange',
          didChange: 'contentArrayDidChange'
        });
      },

      removeArrayObservers: function() {
        if (!this.content) { return; }

        this.content.removeArrayObserver(this, {
          willChange: 'contentArrayWillChange',
          didChange: 'contentArrayDidChange'
        });
      },

      addContentObservers: function() {
        Ember.addBeforeObserver(this.normalizedRoot, this.normalizedPath, this, this.contentWillChange);
        Ember.addObserver(this.normalizedRoot, this.normalizedPath, this, this.contentDidChange);
      },

      removeContentObservers: function() {
        Ember.removeBeforeObserver(this.normalizedRoot, this.normalizedPath, this.contentWillChange);
        Ember.removeObserver(this.normalizedRoot, this.normalizedPath, this.contentDidChange);
      },

      render: function() {
        if (!this.content) { return; }

        var content = this.content,
            contentLength = Em.get(content, 'length'),
            data = this.options.data,
            template = this.template,
            keyword = this.options.hash.keyword;

        data.insideEach = true;
        for (var i = 0; i < contentLength; i++) {
          var row = content.objectAt(i);
          if (keyword) {
            data.keywords = data.keywords || {};
            data.keywords[keyword] = row;
          }
          template(row, { data: data });
        }
      },

      rerenderContainingView: function() {
        var self = this;
        Ember.run.scheduleOnce('render', this, function() {
          // It's possible it's been destroyed after we enqueued a re-render call.
          if (!self.destroyed) {
            self.containingView.rerender();
          }
        });
      },

      destroy: function() {
        this.removeContentObservers();
        if (this.content) {
          this.removeArrayObservers();
        }
        this.destroyed = true;
      }
    };

    function groupedEachHelper(path, options) {
      if (arguments.length === 4) {
        Ember.assert("If you pass more than one argument to the groupedEach helper, it must be in the form #groupedEach foo in bar", arguments[1] === "in");

        var keywordName = arguments[0];

        options = arguments[3];
        path = arguments[2];
        if (path === '') { path = "this"; }

        options.hash.keyword = keywordName;
      }

      if (arguments.length === 1) {
        options = path;
        path = 'this';
      }

      options.hash.dataSourceBinding = path;
      options.data.insideGroup = true;
      new DiscourseGroupedEach(this, path, options).render();
    }

    Ember.Handlebars.registerHelper('groupedEach', function() {
      Em.warn("The `groupedEach` helper is deprecated. Use `grouped-each` instead.");
      return groupedEachHelper.apply(this, Array.prototype.slice.apply(arguments));
    });

    Ember.Handlebars.registerHelper('grouped-each', groupedEachHelper);
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/helpers/grouped-each.js'] = "define(\"discourse/helpers/grouped-each\", \n  [],\n  function() {\n    \"use strict\";\n    var DiscourseGroupedEach = function(context, path, options) {\n      var self = this,\n          normalized = Ember.Handlebars.normalizePath(context, path, options.data);\n\n      this.context = context;\n      this.path = path;\n      this.options = options;\n      this.template = options.fn;\n      this.containingView = options.data.view;\n      this.normalizedRoot = normalized.root;\n      this.normalizedPath = normalized.path;\n      this.content = this.lookupContent();\n      this.destroyed = false;\n\n      this.addContentObservers();\n      this.addArrayObservers();\n\n      this.containingView.on('willClearRender', function() {\n        self.destroy();\n      });\n    };\n\n    DiscourseGroupedEach.prototype = {\n      contentWillChange: function() {\n        this.removeArrayObservers();\n      },\n\n      contentDidChange: function() {\n        this.content = this.lookupContent();\n        this.addArrayObservers();\n        this.rerenderContainingView();\n      },\n\n      contentArrayWillChange: Ember.K,\n\n      contentArrayDidChange: function() {\n        this.rerenderContainingView();\n      },\n\n      lookupContent: function() {\n        return Ember.Handlebars.get(this.normalizedRoot, this.normalizedPath, this.options);\n      },\n\n      addArrayObservers: function() {\n        if (!this.content) { return; }\n\n        this.content.addArrayObserver(this, {\n          willChange: 'contentArrayWillChange',\n          didChange: 'contentArrayDidChange'\n        });\n      },\n\n      removeArrayObservers: function() {\n        if (!this.content) { return; }\n\n        this.content.removeArrayObserver(this, {\n          willChange: 'contentArrayWillChange',\n          didChange: 'contentArrayDidChange'\n        });\n      },\n\n      addContentObservers: function() {\n        Ember.addBeforeObserver(this.normalizedRoot, this.normalizedPath, this, this.contentWillChange);\n        Ember.addObserver(this.normalizedRoot, this.normalizedPath, this, this.contentDidChange);\n      },\n\n      removeContentObservers: function() {\n        Ember.removeBeforeObserver(this.normalizedRoot, this.normalizedPath, this.contentWillChange);\n        Ember.removeObserver(this.normalizedRoot, this.normalizedPath, this.contentDidChange);\n      },\n\n      render: function() {\n        if (!this.content) { return; }\n\n        var content = this.content,\n            contentLength = Em.get(content, 'length'),\n            data = this.options.data,\n            template = this.template,\n            keyword = this.options.hash.keyword;\n\n        data.insideEach = true;\n        for (var i = 0; i \u003c contentLength; i++) {\n          var row = content.objectAt(i);\n          if (keyword) {\n            data.keywords = data.keywords || {};\n            data.keywords[keyword] = row;\n          }\n          template(row, { data: data });\n        }\n      },\n\n      rerenderContainingView: function() {\n        var self = this;\n        Ember.run.scheduleOnce('render', this, function() {\n          // It's possible it's been destroyed after we enqueued a re-render call.\n          if (!self.destroyed) {\n            self.containingView.rerender();\n          }\n        });\n      },\n\n      destroy: function() {\n        this.removeContentObservers();\n        if (this.content) {\n          this.removeArrayObservers();\n        }\n        this.destroyed = true;\n      }\n    };\n\n    function groupedEachHelper(path, options) {\n      if (arguments.length === 4) {\n        Ember.assert(\"If you pass more than one argument to the groupedEach helper, it must be in the form #groupedEach foo in bar\", arguments[1] === \"in\");\n\n        var keywordName = arguments[0];\n\n        options = arguments[3];\n        path = arguments[2];\n        if (path === '') { path = \"this\"; }\n\n        options.hash.keyword = keywordName;\n      }\n\n      if (arguments.length === 1) {\n        options = path;\n        path = 'this';\n      }\n\n      options.hash.dataSourceBinding = path;\n      options.data.insideGroup = true;\n      new DiscourseGroupedEach(this, path, options).render();\n    }\n\n    Ember.Handlebars.registerHelper('groupedEach', function() {\n      Em.warn(\"The `groupedEach` helper is deprecated. Use `grouped-each` instead.\");\n      return groupedEachHelper.apply(this, Array.prototype.slice.apply(arguments));\n    });\n\n    Ember.Handlebars.registerHelper('grouped-each', groupedEachHelper);\n  });";
define("discourse/helpers/plugin-outlet", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
       A plugin outlet is an extension point for templates where other templates can
       be inserted by plugins.

       ## Usage

       If you handlebars template has:

       ```handlebars
         {{plugin-outlet "evil-trout"}}
       ```

       Then any handlebars files you create in the `connectors/evil-trout` directory
       will automatically be appended. For example:

       plugins/hello/assets/javascripts/discourse/templates/connectors/evil-trout/hello.handlebars

       With the contents:

       ```handlebars
         <b>Hello World</b>
       ```

       Will insert <b>Hello World</b> at that point in the template.

       Optionally you can also define a view class for the outlet as:

       plugins/hello/assets/javascripts/discourse/views/connectors/evil-trout/hello.js.es6

       And it will be wired up automatically.

       ## The block form

       If you use the block form of the outlet, its contents will be displayed
       if no connectors are found. Example:

       ```handlebars
         {{#plugin-outlet "hello-world"}}
           Nobody says hello :'(
         {{/plugin-outlet}}
       ```
    **/


    var _connectorCache;

    function findOutlets(collection, callback) {
      Ember.keys(collection).forEach(function(i) {
        if (i.indexOf("/connectors/") !== -1) {
          var segments = i.split("/"),
              outletName = segments[segments.length-2],
              uniqueName = segments[segments.length-1];

          callback(outletName, i, uniqueName);
        }
      });
    }

    function buildConnectorCache() {
      _connectorCache = {};

      var uniqueViews = {};
      findOutlets(requirejs._eak_seen, function(outletName, idx, uniqueName) {
        _connectorCache[outletName] = _connectorCache[outletName] || [];

        var viewClass = require(idx, null, null, true).default;
        uniqueViews[uniqueName] = viewClass;
        _connectorCache[outletName].pushObject(viewClass);
      });

      findOutlets(Ember.TEMPLATES, function(outletName, idx, uniqueName) {
        _connectorCache[outletName] = _connectorCache[outletName] || [];

        var mixin = {templateName: idx.replace('javascripts/', '')},
            viewClass = uniqueViews[uniqueName];

        if (viewClass) {
          // We are going to add it back with the proper template
          _connectorCache[outletName].removeObject(viewClass);
        } else {
          viewClass = Em.View;
        }
        _connectorCache[outletName].pushObject(viewClass.extend(mixin));
      });

    }

    __exports__["default"] = function(connectionName, options) {
      if (!_connectorCache) { buildConnectorCache(); }

      var self = this;
      if (_connectorCache[connectionName]) {
        var view,
            childViews = _connectorCache[connectionName].map(function(vc) {
              return vc.create({ context: self });
            });

        // If there is more than one view, create a container. Otherwise
        // just shove it in.
        if (childViews.length > 1) {
          view = Ember.ContainerView.extend({
            childViews: childViews
          });
        } else {
          view = childViews[0];
        }
        delete options.fn;  // we don't need the default template since we have a connector
        return Ember.Handlebars.helpers.view.call(this, view, options);
      } else if (options.fn) {

        // If a block is passed, render its content.
        return Ember.Handlebars.helpers.view.call(this,
                  Ember.View.extend({
                    isVirtual: true,
                    tagName: '',
                    template: function() {
                      return options.hash.template;
                    }.property()
                  }),
                options);
      }
    }
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/helpers/plugin-outlet.js'] = "define(\"discourse/helpers/plugin-outlet\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n       A plugin outlet is an extension point for templates where other templates can\n       be inserted by plugins.\n\n       ## Usage\n\n       If you handlebars template has:\n\n       ```handlebars\n         {{plugin-outlet \"evil-trout\"}}\n       ```\n\n       Then any handlebars files you create in the `connectors/evil-trout` directory\n       will automatically be appended. For example:\n\n       plugins/hello/assets/javascripts/discourse/templates/connectors/evil-trout/hello.handlebars\n\n       With the contents:\n\n       ```handlebars\n         \u003cb\u003eHello World\u003c/b\u003e\n       ```\n\n       Will insert \u003cb\u003eHello World\u003c/b\u003e at that point in the template.\n\n       Optionally you can also define a view class for the outlet as:\n\n       plugins/hello/assets/javascripts/discourse/views/connectors/evil-trout/hello.js.es6\n\n       And it will be wired up automatically.\n\n       ## The block form\n\n       If you use the block form of the outlet, its contents will be displayed\n       if no connectors are found. Example:\n\n       ```handlebars\n         {{#plugin-outlet \"hello-world\"}}\n           Nobody says hello :'(\n         {{/plugin-outlet}}\n       ```\n    **/\n\n\n    var _connectorCache;\n\n    function findOutlets(collection, callback) {\n      Ember.keys(collection).forEach(function(i) {\n        if (i.indexOf(\"/connectors/\") !== -1) {\n          var segments = i.split(\"/\"),\n              outletName = segments[segments.length-2],\n              uniqueName = segments[segments.length-1];\n\n          callback(outletName, i, uniqueName);\n        }\n      });\n    }\n\n    function buildConnectorCache() {\n      _connectorCache = {};\n\n      var uniqueViews = {};\n      findOutlets(requirejs._eak_seen, function(outletName, idx, uniqueName) {\n        _connectorCache[outletName] = _connectorCache[outletName] || [];\n\n        var viewClass = require(idx, null, null, true).default;\n        uniqueViews[uniqueName] = viewClass;\n        _connectorCache[outletName].pushObject(viewClass);\n      });\n\n      findOutlets(Ember.TEMPLATES, function(outletName, idx, uniqueName) {\n        _connectorCache[outletName] = _connectorCache[outletName] || [];\n\n        var mixin = {templateName: idx.replace('javascripts/', '')},\n            viewClass = uniqueViews[uniqueName];\n\n        if (viewClass) {\n          // We are going to add it back with the proper template\n          _connectorCache[outletName].removeObject(viewClass);\n        } else {\n          viewClass = Em.View;\n        }\n        _connectorCache[outletName].pushObject(viewClass.extend(mixin));\n      });\n\n    }\n\n    __exports__[\"default\"] = function(connectionName, options) {\n      if (!_connectorCache) { buildConnectorCache(); }\n\n      var self = this;\n      if (_connectorCache[connectionName]) {\n        var view,\n            childViews = _connectorCache[connectionName].map(function(vc) {\n              return vc.create({ context: self });\n            });\n\n        // If there is more than one view, create a container. Otherwise\n        // just shove it in.\n        if (childViews.length \u003e 1) {\n          view = Ember.ContainerView.extend({\n            childViews: childViews\n          });\n        } else {\n          view = childViews[0];\n        }\n        delete options.fn;  // we don't need the default template since we have a connector\n        return Ember.Handlebars.helpers.view.call(this, view, options);\n      } else if (options.fn) {\n\n        // If a block is passed, render its content.\n        return Ember.Handlebars.helpers.view.call(this,\n                  Ember.View.extend({\n                    isVirtual: true,\n                    tagName: '',\n                    template: function() {\n                      return options.hash.template;\n                    }.property()\n                  }),\n                options);\n      }\n    }\n  });";
define("discourse/helpers/shorten-text", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Handlebars.registerHelper('shorten-text', function(property, options) {
      return Ember.Handlebars.get(this, property, options).substring(0,35);
    });
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/helpers/shorten-text.js'] = "define(\"discourse/helpers/shorten-text\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Handlebars.registerHelper('shorten-text', function(property, options) {\n      return Ember.Handlebars.get(this, property, options).substring(0,35);\n    });\n  });";
define("discourse/helpers/shorten-url", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Handlebars.registerHelper('shorten-url', function(property, options) {
      var url = Ember.Handlebars.get(this, property, options),
          matches = url.match(/\//g);

      if (matches && matches.length === 3) {
        url = url.replace(/\/$/, '');
      }
      url = url.replace(/^https?:\/\//, '');
      url = url.replace(/^www\./, '');
      return url.substring(0, 80);
    });
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/helpers/shorten-url.js'] = "define(\"discourse/helpers/shorten-url\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Handlebars.registerHelper('shorten-url', function(property, options) {\n      var url = Ember.Handlebars.get(this, property, options),\n          matches = url.match(/\\//g);\n\n      if (matches \u0026\u0026 matches.length === 3) {\n        url = url.replace(/\\/$/, '');\n      }\n      url = url.replace(/^https?:\\/\\//, '');\n      url = url.replace(/^www\\./, '');\n      return url.substring(0, 80);\n    });\n  });";
define("discourse/helpers/topic-link", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Handlebars.registerHelper('topic-link', function(property, options) {
      var topic = Ember.Handlebars.get(this, property, options),
          title = topic.get('fancy_title');

      return new Handlebars.SafeString("<a href='" + topic.get('lastUnreadUrl') + "' class='title'>" + title + "</a>");
    });
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/helpers/topic-link.js'] = "define(\"discourse/helpers/topic-link\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Handlebars.registerHelper('topic-link', function(property, options) {\n      var topic = Ember.Handlebars.get(this, property, options),\n          title = topic.get('fancy_title');\n\n      return new Handlebars.SafeString(\"\u003ca href='\" + topic.get('lastUnreadUrl') + \"' class='title'\u003e\" + title + \"\u003c/a\u003e\");\n    });\n  });";
Ember.TEMPLATES["about"] = Ember.Handlebars.compile("<div class='container'>\n    <section class='about'>\n      <h2>{{i18n about.title title=title}}</h2>\n      <p>{{description}}</p>\n    </section>\n  \n    {{#if admins}}\n      <section class='about admins'>\n        <h3>{{i18n about.our_admins}}</h3>\n  \n        {{#each admins}}\n          {{user-small user=this}}\n        {{/each}}\n        <div class='clearfix'></div>\n  \n      </section>\n    {{/if}}\n  \n    {{#if moderators}}\n      <section class='about moderators'>\n        <h3>{{i18n about.our_moderators}}</h3>\n  \n        <div class='users'>\n          {{#each moderators}}\n            {{user-small user=this}}\n          {{/each}}\n        </div>\n        <div class='clearfix'></div>\n      </section>\n    {{/if}}\n  \n    <section class='about stats'>\n      <h3>{{i18n about.stats}}</h3>\n  \n      <table class='table'>\n        <tr>\n          <th>&nbsp;</th>\n          <th>{{i18n about.stat.all_time}}</th>\n          <th>{{i18n about.stat.last_7_days}}</th>\n        <tr>\n          <td class='title'>{{i18n about.topic_count}}</td>\n          <td>{{number stats.topic_count}}</td>\n          <td>{{number stats.topics_7_days}}</td>\n        </tr>\n        <tr>\n          <td>{{i18n about.post_count}}</td>\n          <td>{{number stats.post_count}}</td>\n          <td>{{number stats.posts_7_days}}</td>\n        </tr>\n        <tr>\n          <td>{{i18n about.user_count}}</td>\n          <td>{{number stats.user_count}}</td>\n          <td>{{number stats.users_7_days}}</td>\n        </tr>\n        <tr>\n          <td>{{i18n about.like_count}}</td>\n          <td>{{number stats.like_count}}</td>\n          <td>{{number stats.likes_7_days}}</td>\n        </tr>\n      </table>\n      </table>\n    </section>\n  \n  </div>");
Ember.TEMPLATES["additional_composer_buttons"] = Ember.Handlebars.compile("{{!-- THIS IS AN EMPTY TEMPLATE THAT NEEDS TO BE OVERWRITTEN --}}");
Ember.TEMPLATES["application"] = Ember.Handlebars.compile("{{render \"header\"}}\n  \n  <div id='main-outlet' {{bind-attr class=backgroundClass}}>\n    {{outlet}}\n    {{render \"user-expansion\"}}\n  </div>\n  \n  {{render \"modal\"}}\n  {{render \"topic-entrance\"}}\n  {{render \"composer\"}}");
Ember.TEMPLATES["badges/index"] = Ember.Handlebars.compile("<div class='container badges'>\n    <h1>{{i18n badges.title}}</h1>\n  \n    <table class='badges-listing'>\n      <tbody>\n        {{#each badgeGroups}}\n          <tr class='title'>\n            <td colspan=4><h3>{{this.badgeGrouping.displayName}}</h3></td>\n          </tr>\n          {{#each this.badges}}\n            <tr>\n              <td class='granted'>{{#if this.has_badge}}<i class='fa fa-check'></i>{{/if}}</td>\n              <td class='badge'>{{user-badge badge=this}}</td>\n              <td class='description'>{{{displayDescriptionHtml}}}</td>\n              <td class='grant-count'><span title=\"{{i18n badges.granted count=grant_count}}\">{{grant_count}}</span></td>\n            </tr>\n          {{/each}}\n        {{/each}}\n      </tbody>\n    </table>\n  </div>");
Ember.TEMPLATES["badges/show"] = Ember.Handlebars.compile("<div class='container show-badge'>\n    <h1>\n      {{#link-to 'badges.index'}}{{i18n badges.title}}{{/link-to}}\n      <i class='fa fa-angle-right'></i>\n      {{displayName}}\n    </h1>\n  \n    <table class='badges-listing'>\n      <tbody>\n        <tr>\n          <td class='badge'>{{user-badge badge=this}}</td>\n          <td class='description'>{{displayDescription}}</td>\n          <td class='grant-count'>{{i18n badges.granted count=grant_count}}</td>\n          <td class='info'>{{i18n badges.allow_title}} {{{view.allowTitle}}}<br>{{i18n badges.multiple_grant}} {{{view.multipleGrant}}}\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  \n    {{#if userBadges}}\n      <div class={{unbound layoutClass}}>\n      {{#each userBadges}}\n          <div class=\"badge-user\">\n            {{#link-to 'user' user classNames=\"badge-info\"}}\n                {{avatar user imageSize=\"large\"}}\n                <div class=\"details\">\n                  <span class=\"username\">{{user.username}}</span>\n                  {{date granted_at}}\n                </div>\n            {{/link-to}}\n  \n            {{#if post_number}}\n              <a class=\"post-link\" href=\"{{unbound topic.url}}/{{unbound post_number}}\">{{topic.title}}</a>\n            {{/if}}\n          </div>\n        {{/each}}\n      </div>\n      {{#if canLoadMore}}\n        <div class='spinner'>{{i18n loading}}</div>\n      {{/if}}\n    {{else}}\n      {{#unless userBadgesLoaded}}\n        <div class='spinner'>{{i18n loading}}</div>\n      {{/unless}}\n    {{/if}}\n  </div>");
Ember.TEMPLATES["category_notification_dropdown"] = Ember.Handlebars.compile("<div>\n  <button class='btn standard dropdown-toggle' data-toggle='dropdown'>\n    <i {{bind-attr class=view.icon}}></i>\n    <span class='caret'></span>\n  </button>\n  \n  \n  <ul class='notification-dropdown-menu'>\n    {{#each level in view.dropDownContent}}\n      <li data-id=\"{{level.id}}\">\n        <a {{action setNotification level.id}} href=\"#\">\n          <span class=\"title\"><i {{bind-attr class=level.styleClasses}}></i>&nbsp;{{level.title}}</span><span>{{level.description}}</span>\n        </a>\n      </li>\n    {{/each}}\n  </ul>\n  </div>");
Ember.TEMPLATES["choose_topic"] = Ember.Handlebars.compile("<label for='choose-topic-title'>{{i18n choose_topic.title.search}}</label>\n  \n  {{text-field value=view.topicTitle placeholderKey=\"choose_topic.title.placeholder\" id=\"choose-topic-title\"}}\n  \n  {{#if view.loading}}\n    <p>{{i18n loading}}</p>\n  {{else}}\n    {{#if view.noResults}}\n      <p>{{i18n choose_topic.none_found}}</p>\n    {{else}}\n      {{#each view.topics}}\n        <div class='controls'>\n          <label class='radio'>\n          <input type='radio' id=\"choose-topic-{{unbound id}}\" name='choose_topic_id' {{action chooseTopic this target=\"view\"}}>{{title}}\n          </label>\n        </div>\n      {{/each}}\n      </ul>\n    {{/if}}\n  {{/if}}");
Ember.TEMPLATES["components/admin-group-selector"] = Ember.Handlebars.compile("<input type=\"text\">");
Ember.TEMPLATES["components/auto-close-form"] = Ember.Handlebars.compile("<div class=\"auto-close-fields\">\n    <div>\n      <i class=\"fa fa-clock-o\"></i>\n      {{label}}\n      {{text-field value=autoCloseTime}}\n      {{i18n composer.auto_close_units}}\n    </div>\n    <div class=\"examples\">\n      {{i18n composer.auto_close_examples}}\n    </div>\n  </div>");
Ember.TEMPLATES["components/avatar-uploader"] = Ember.Handlebars.compile("<input type=\"file\" accept=\"image/*\" style=\"display:none\" />\n  <button class=\"btn\" {{action selectFile}} {{bind-attr disabled=\"uploading\"}} title=\"{{i18n user.change_avatar.upload_title}}\">\n    <i class=\"fa fa-picture-o\"></i>&nbsp;{{uploadButtonText}}\n  </button>\n  {{#if uploading}}\n    <span>{{i18n upload_selector.uploading}} {{view.uploadProgress}}%</span>\n  {{/if}}\n  {{#if imageIsNotASquare}}\n    <div class=\"warning\">{{i18n user.change_avatar.image_is_not_a_square}}</div>\n  {{/if}}");
Ember.TEMPLATES["components/basic-topic-list"] = Ember.Handlebars.compile("{{#if loaded}}\n    {{#if topics}}\n      <table class=\"topic-list\">\n        <thead>\n          <tr>\n            <th class=\"default\">{{i18n topic.title}}</th>\n            {{#unless controller.hideCategory}}\n              <th class=\"category\">{{i18n category_title}}</th>\n            {{/unless}}\n            <th class=\"num posts\">{{i18n posts}}</th>\n            {{#if controller.showParticipants}}\n              <th class=\"posters\">{{i18n users}}</th>\n            {{/if}}\n            <th class=\"num views\">{{i18n views}}</th>\n            <th class=\"num activity\">{{i18n activity}}</th>\n          </tr>\n        </thead>\n  \n        <tbody>\n          {{#grouped-each topic in topics}}\n            <tr {{bind-attr class=\"archived\"}}>\n              <td class='main-link'>\n                {{topic-status topic=topic}}\n                <a class='title' href=\"{{unbound topic.lastUnreadUrl}}\">{{{unbound topic.fancy_title}}}</a>\n                {{topic-post-badges unread=unread\n                                    newPosts=topic.new_posts\n                                    unseen=topic.unseen\n                                    url=topic.lastUnreadUrl}}\n              </td>\n  \n              {{#unless controller.hideCategory}}\n                <td class=\"category\">\n                  {{category-link topic.category showParent=true}}\n                </td>\n              {{/unless}}\n  \n              {{posts-count-column topic=topic class=\"num\" action=\"clickedPosts\"}}\n  \n              {{#if controller.showParticipants}}\n                <td class='participants'>\n                  {{#each topic.participants}}\n                    <a href=\"{{user.path}}\" class=\"{{extras}}\">{{avatar this usernamePath=\"user.username\" imageSize=\"small\"}}</a>\n                  {{/each}}\n                </td>\n              {{/if}}\n  \n              <td {{bind-attr class=\":num :views topic.viewsHeat\"}}>\n                {{number topic.views numberKey=\"views_long\"}}\n              </td>\n  \n              {{activity-column topic=topic class=\"num\"}}\n            </tr>\n          {{/grouped-each}}\n        </tbody>\n  \n      </table>\n    {{else}}\n      <div class='alert alert-info'>\n        {{i18n choose_topic.none_found}}\n      </div>\n    {{/if}}\n  {{else}}\n    <div class='spinner'>\n      {{i18n loading}}\n    </div>\n  {{/if}}");
Ember.TEMPLATES["components/bread-crumbs"] = Ember.Handlebars.compile("{{category-drop category=firstCategory categories=parentCategories}}\n  \n  {{#if childCategories}}\n    {{category-drop category=secondCategory parentCategory=firstCategory categories=childCategories subCategory=\"true\" noSubcategories=noSubcategories}}\n  {{/if}}\n  \n  <div class='clear'></div>");
Ember.TEMPLATES["components/category-drop"] = Ember.Handlebars.compile("{{#if category}}\n    <a href=\"#\" {{action expand}} class=\"badge-category\" {{bind-attr style=\"badgeStyle\"}}>\n      {{#if category.read_restricted}}\n        <i class='fa fa-group'></i>\n      {{/if}}\n      {{category.name}}\n    </a>\n  {{else}}\n    {{#if noSubcategories}}\n      <a href='#' {{action expand}} class='badge-category home' {{bind-attr style=\"badgeStyle\"}}>{{i18n categories.no_subcategory}}</a>\n    {{else}}\n      <a href='#' {{action expand}} class='badge-category home' {{bind-attr style=\"badgeStyle\"}}>{{allCategoriesLabel}}</a>\n    {{/if}}\n  {{/if}}\n  \n  {{#if categories}}\n    <a href='#' {{action expand}} {{bind-attr class=\"dropdownButtonClass\" style=\"badgeStyle\"}}><i {{bind-attr class=\"iconClass\"}}></i></a>\n    <section {{bind-attr class=\"expanded::hidden :category-dropdown-menu\"}} class='chooser'>\n      <div class='cat'><a {{bind-attr href=allCategoriesUrl}} data-drop-close=\"true\" class='badge-category home'>{{allCategoriesLabel}}</a></div>\n      {{#if subCategory}}\n      <div class='cat'><a {{bind-attr href=noCategoriesUrl}} data-drop-close=\"true\" class='badge-category home'>{{i18n categories.no_subcategory}}</a></div>\n      {{/if}}\n      {{#each categories}}<div class='cat'>{{category-link this allowUncategorized=true}}</div>{{/each}}\n    </section>\n  {{/if}}");
Ember.TEMPLATES["components/category-group"] = Ember.Handlebars.compile("<input class='category-group' type='text'>");
Ember.TEMPLATES["components/color-input"] = Ember.Handlebars.compile("{{text-field class=\"hex-input\" value=hexValue maxlength=\"6\"}}");
Ember.TEMPLATES["components/discourse-banner"] = Ember.Handlebars.compile("{{#if visible}}\n    <div class=\"row\">\n      <div id=\"banner\" {{bind-attr class=\"overlay\"}}>\n        <div id=\"banner-content\">\n          <div class=\"close\" {{action dismiss}}><i class=\"fa fa-times\" title=\"{{i18n banner.close}}\"></i></div>\n          {{{banner.html}}}\n        </div>\n      </div>\n    </div>\n  {{/if}}");
Ember.TEMPLATES["components/edit-category-tab"] = Ember.Handlebars.compile("<a href {{action select}}>{{title}}</a>");
Ember.TEMPLATES["components/group-selector"] = Ember.Handlebars.compile("<input class='ember-text-field group-names' type=\"text\" {{bind-attr placeholder=\"placeholder\"}} name=\"groups\">");
Ember.TEMPLATES["components/groups-list"] = Ember.Handlebars.compile("{{#if groups}}\n    {{i18n groups.title count=groups.length}}:\n    {{#each groups}}\n      {{#link-to 'group' this class=\"group-link\"}}{{name}}{{/link-to}}\n    {{/each}}\n  {{/if}}");
Ember.TEMPLATES["components/home-logo"] = Ember.Handlebars.compile("<a href=\"{{unbound linkUrl}}\" data-auto-route=\"true\">\n    {{#if showSmallLogo}}\n      {{#if smallLogoUrl}}\n        <img class=\"logo-small\" src=\"{{unbound smallLogoUrl}}\" width=\"33\" height=\"33\">\n      {{else}}\n        <i class=\"fa fa-home\"></i>\n      {{/if}}\n    {{else}}\n      {{#if showMobileLogo}}\n        <img id=\"site-logo\" class=\"logo-big\" src=\"{{unbound mobileBigLogoUrl}}\" alt=\"{{unbound title}}\">\n      {{else}}\n        {{#if bigLogoUrl}}\n          <img id=\"site-logo\" class=\"logo-big\" src=\"{{unbound bigLogoUrl}}\" alt=\"{{unbound title}}\">\n        {{else}}\n          <h2 id=\"site-text-logo\" class=\"text-logo\">{{unbound title}}</h2>\n        {{/if}}\n      {{/if}}\n    {{/if}}\n  </a>");
Ember.TEMPLATES["components/image-uploader"] = Ember.Handlebars.compile("<input type=\"file\" accept=\"image/*\" style=\"display:none\" />\n  <div class=\"uploaded-image-preview\" class=\"input-xxlarge\" {{bind-attr style=\"backgroundStyle\"}}>\n    <div class=\"image-upload-controls\">\n    <button {{action selectFile}} class=\"btn pad-left no-text\"><i class=\"fa fa-picture-o\"></i></button>\n    {{#if backgroundStyle}}\n      <button {{action trash}} class=\"btn btn-danger pad-left no-text\"><i class=\"fa fa-trash-o\"></i></button>\n    {{/if}}\n    <span {{bind-attr class=\":btn uploading::hidden\"}}>{{i18n upload_selector.uploading}} {{uploadProgress}}%</span>\n    </div>\n  </div>");
Ember.TEMPLATES["components/ip-lookup"] = Ember.Handlebars.compile("{{#if ip}}\n    <button class=\"btn\" {{action lookup}}>\n      <span class=\"fa fa-globe\"></span>&nbsp;{{i18n admin.user.ip_lookup}}\n    </button>\n  {{/if}}\n  {{#if show}}\n    <div class=\"location-box\">\n      <h4>{{i18n ip_lookup.title}}</h4>\n      <dl>\n        {{#if location}}\n          {{#if location.hostname}}\n            <dt>{{i18n ip_lookup.hostname}}</dt>\n            <dd>{{location.hostname}}</dd>\n          {{/if}}\n  \n          <dt>{{i18n ip_lookup.location}}</dt>\n          <dd>\n            {{#if location.loc}}\n              <a href=\"https://maps.google.com/maps?q={{unbound location.loc}}\" target=\"_blank\">{{location.loc}}</a><br>\n              {{city}}\n            {{else}}\n              {{i18n ip_lookup.location_not_found}}\n            {{/if}}\n          </dd>\n  \n          {{#if location.org}}\n            <dt>{{i18n ip_lookup.organisation}}</dt>\n            <dd>{{location.org}}</dd>\n          {{/if}}\n  \n          {{#if location.phone}}\n            <dt>{{i18n ip_lookup.phone}}</dt>\n            <dd>{{location.phone}}</dd>\n          {{/if}}\n        {{else}}\n          <div class=\"spinner\">{{i18n loading}}</div>\n        {{/if}}\n  \n        <dt>{{i18n ip_lookup.other_accounts}}</dt>\n        <dd>\n          {{#if other_accounts_loading}}\n            <div class=\"spinner\">{{i18n loading}}</div>\n          {{else}}\n            {{#each other_accounts}}\n              {{#link-to \"adminUser\" this}}{{avatar this usernamePath=\"user.username\" imageSize=\"small\"}}{{/link-to}}\n            {{else}}\n              {{i18n ip_lookup.no_other_accounts}}\n            {{/each}}\n          {{/if}}\n        <dd>\n      </dl>\n      <button class=\"btn close\" {{action hide}}>{{i18n close}}</button>\n    </div>\n  {{/if}}");
Ember.TEMPLATES["components/list-setting"] = Ember.Handlebars.compile("<div class=\"input-setting-list\">\n      <input type=\"text\" value=\"{{unbound settingValue}}\">\n  </div>");
Ember.TEMPLATES["components/login-buttons"] = Ember.Handlebars.compile("{{#each buttons}}\n    <button {{bind-attr class=\":btn :btn-social name\"}} {{action externalLogin this}}>{{title}}</button>\n  {{/each}}");
Ember.TEMPLATES["components/preference-checkbox"] = Ember.Handlebars.compile("<label class='checkbox-label'>\n    {{input type=\"checkbox\" checked=checked}}\n    {{label}}\n  </label>");
Ember.TEMPLATES["components/private-message-map"] = Ember.Handlebars.compile("<h3><i class='fa fa-envelope'></i> {{i18n private_message_info.title}}</h3>\n  <div class='participants clearfix'>\n    {{#grouped-each details.allowed_groups}}\n      <div class='user group'>\n        \#{{unbound name}}\n      </div>\n    {{/grouped-each}}\n    {{#grouped-each details.allowed_users}}\n      <div class='user'>\n        {{#link-to 'user' this}}\n          {{avatar this imageSize=\"small\"}}\n        {{/link-to}}\n        {{#link-to 'user' this}}\n          {{unbound username}}\n        {{/link-to}}\n        {{#if details.can_remove_allowed_users}}\n          <a class='remove-invited' {{action removeAllowedUser this}}><i class=\"fa fa-times\"></i></a>\n        {{/if}}\n      </div>\n    {{/grouped-each}}\n  </div>\n  {{#if details.can_invite_to}}\n    <div class='controls'>\n      <button class='btn' {{action showPrivateInvite}}>{{i18n private_message_info.invite}}</button>\n    </div>\n  {{/if}}");
Ember.TEMPLATES["components/screened-ip-address-form"] = Ember.Handlebars.compile("<b>{{i18n admin.logs.screened_ips.form.label}}</b>\n  {{text-field value=ip_address disabled=formSubmitted class=\"ip-address-input\" placeholderKey=\"admin.logs.screened_ips.form.ip_address\" autocorrect=\"off\" autocapitalize=\"off\"}}\n  {{combo-box content=actionNames value=actionName}}\n  <button class=\"btn btn-small\" {{action submit target=\"view\"}} {{bind-attr disabled=\"formSubmitted\"}}>{{i18n admin.logs.screened_ips.form.add}}</button>");
Ember.TEMPLATES["components/sortable-heading"] = Ember.Handlebars.compile("{{yield}}\n  <i {{bind-attr class=\"iconSortClass\"}}></i>");
Ember.TEMPLATES["components/toggle-deleted"] = Ember.Handlebars.compile("{{#if postStream.show_deleted}}\n    <p>{{i18n deleted_filter.disabled_description}}</p>\n    <button class='btn btn-danger' {{action toggleDeleted}}>{{i18n deleted_filter.enable}}</button>\n  {{else}}\n    <p>{{i18n deleted_filter.enabled_description}}</p>\n    <button class='btn btn-danger' {{action toggleDeleted}}>{{i18n deleted_filter.disable}}</button>\n  {{/if}}");
Ember.TEMPLATES["components/toggle-summary"] = Ember.Handlebars.compile("{{#if postStream.summary}}\n    <p>{{{i18n summary.enabled_description}}}</p>\n    <button class='btn btn-primary' {{action toggleSummary}}>{{i18n summary.disable}}</button>\n  {{else}}\n    {{#if topic.estimatedReadingTime}}\n      <p>{{{i18n summary.description_time count=\"topic.posts_count\" readingTime=\"topic.estimatedReadingTime\"}}}</p>\n    {{else}}\n      <p>{{{i18n summary.description count=\"topic.posts_count\"}}}</p>\n    {{/if}}\n  \n    <button class='btn btn-primary' {{action toggleSummary}}>{{i18n summary.enable}}</button>\n  {{/if}}");
Ember.TEMPLATES["components/top-period-buttons"] = Ember.Handlebars.compile("{{#each period.availablePeriods}}\n    {{top-title-button period=this}}\n  {{/each}}");
Ember.TEMPLATES["components/top-period-chooser"] = Ember.Handlebars.compile("{{top-title period=period}}\n  <button><i class='fa fa-caret-down'></i></button>\n  \n  <div id='period-popup' {{bind-attr class=\"showPeriods::hidden\"}}>\n    <ul>\n      {{#each period.availablePeriods}}\n        <li><a {{bind-attr href=\"showMoreUrl\"}}>{{top-title tagName=\"span\" period=this}}</a></li>\n      {{/each}}\n    </ul>\n  </div>\n  <div class='clearfix'></div>");
Ember.TEMPLATES["components/topic-map"] = Ember.Handlebars.compile("<nav class='buttons'>\n    <button class='btn' {{action toggleMap}} title=\"{{i18n topic.toggle_information}}\">\n      <i {{bind-attr class=\":fa toggleMapClass\"}}></i>\n    </button>\n  </nav>\n  \n  <section {{bind-attr class=\":map mapCollapsed\"}}>\n    <ul class=\"clearfix\">\n      <li>\n        <a href='{{unbound topic.url}}'>\n        <h4>{{i18n created_lowercase}}</h4>\n        {{avatar details.created_by imageSize=\"tiny\"}}\n        {{date topic.created_at}}\n        </a>\n      </li>\n      <li>\n        <a {{bind-attr href=\"topic.lastPostUrl\"}}>\n        <h4>{{i18n last_post_lowercase}}</h4>\n        {{avatar details.last_poster imageSize=\"tiny\"}}\n        {{date topic.last_posted_at}}\n        </a>\n      </li>\n      <li>\n        {{posts-count-column topic=topic tagName=\"span\"}}\n        <h4>{{i18n posts_lowercase}}</h4>\n      </li>\n      <li class='secondary'>\n        {{number topic.views class=topic.viewsHeat}}\n        <h4>{{i18n views_lowercase}}</h4>\n      </li>\n      <li class='secondary'>\n        {{number topic.participant_count}}\n        <h4>{{i18n users_lowercase}}</h4>\n      </li>\n      {{#if topic.like_count}}\n        <li class='secondary'>\n          {{number topic.like_count}}\n          <h4>{{i18n likes_lowercase}}</h4>\n        </li>\n      {{/if}}\n      {{#if details.links.length}}\n        <li class='secondary'>\n          {{number details.links.length}}\n          <h4>{{i18n links_lowercase}}</h4>\n        </li>\n      {{/if}}\n      {{#if showPosterAvatar}}\n        <li {{bind-attr class=\":avatars mapCollapsed::hidden\"}}>\n          {{#grouped-each participant in details.fewParticipants}}{{topic-participant participant=participant}}{{/grouped-each}}\n        </li>\n      {{/if}}\n    </ul>\n  </section>\n  \n  {{#unless mapCollapsed}}\n    <section class='avatars clearfix'>\n      {{#grouped-each participant in details.participants}}{{topic-participant participant=participant}}{{/grouped-each}}\n    </section>\n  \n    {{#if infoLinks}}\n      <section class='links'>\n  \n          <table class='topic-links'>\n            {{#grouped-each infoLinks}}\n              <tr>\n              <td>\n                <span class='badge badge-notification clicks' title='{{i18n topic_map.clicks count=clicks}}'>{{clicks}}</span>\n              </td>\n              <td>\n                <a href=\"{{unbound url}}\" target=\"_blank\" class='topic-link track-link' data-user-id=\"{{unbound user_id}}\" data-ignore-post-id=\"true\" title=\"{{unbound url}}\">\n                  {{#if title}}{{title}}{{else}}{{shorten-url url}}{{/if}}\n                </a>\n                {{link-domain this}}\n              </td>\n              </tr>\n            {{/grouped-each}}\n          </table>\n  \n          {{#if showAllLinksControls}}\n            <div class='link-summary'>\n              <a href='#' {{action showAllLinks}}>{{i18n topic_map.links_shown totalLinks=\"details.links.length\"}}</a>\n            </div>\n          {{/if}}\n  \n      </section>\n    {{/if}}\n  {{/unless}}");
Ember.TEMPLATES["components/topic-participant"] = Ember.Handlebars.compile("<a href='#' {{bind-attr class=\":poster toggled\"}} {{action toggle}} title=\"{{unbound participant.username}}\">\n    {{#if showPostCount}}\n      <span class='post-count'>{{unbound participant.post_count}}</span>\n    {{/if}}\n    {{avatar participant imageSize=\"medium\"}}\n  </a>");
Ember.TEMPLATES["components/user-badge"] = Ember.Handlebars.compile("{{#link-to 'badges.show' badge}}\n    <span {{bind-attr class=\":user-badge badge.badgeTypeClassName\" data-badge-name=\"badge.name\" title=\"badge.displayDescription\"}}>\n      {{#if isIcon}}\n        <i {{bind-attr class=\":fa badge.icon\"}}></i>\n      {{else}}\n        <img {{bind-attr src=\"badge.icon\"}}>\n      {{/if}}\n      {{badge.displayName}}\n      {{#if showGrantCount}}\n        <span class=\"count\">(&times;&nbsp;{{count}})</span>\n      {{/if}}\n    </span>\n  {{/link-to}}");
Ember.TEMPLATES["components/user-small"] = Ember.Handlebars.compile("{{#link-to 'user' user.username}}\n    {{avatar user imageSize=\"tiny\"}}\n    {{user.username}}\n  {{/link-to}}");
Ember.TEMPLATES["composer"] = Ember.Handlebars.compile("<div class='spinner'>{{i18n composer.uploading}}</div>\n  \n  <div class='contents'>\n  \n    {{render \"composer-messages\"}}\n  \n    <div class='control'>\n      <a href='#' class='toggler' {{action toggle bubbles=false}} title='{{i18n composer.toggler}}'></a>\n  \n      {{#if model.viewOpen}}\n        <div class='control-row reply-area'>\n          {{plugin-outlet \"composer-open\"}}\n  \n          <div class='reply-to'>\n            {{{model.actionTitle}}}:\n            {{#if canEdit}}\n              {{#if showEditReason}}\n                <div class=\"edit-reason-input\">\n                  {{text-field value=editReason tabindex=\"7\" id=\"edit-reason\" maxlength=\"255\" placeholderKey=\"composer.edit_reason_placeholder\"}}\n                </div>\n              {{else}}\n                <a {{action displayEditReason}} class=\"display-edit-reason\">{{i18n composer.show_edit_reason}}</a>\n              {{/if}}\n            {{/if}}\n          </div>\n  \n          {{#if model.canEditTitle}}\n            <div class='form-element clearfix'>\n              {{#if model.creatingPrivateMessage}}\n                {{user-selector topicId=controller.controllers.topic.model.id\n                                excludeCurrentUser=\"true\"\n                                id=\"private-message-users\"\n                                include_groups=\"true\"\n                                class=\"span8\"\n                                placeholderKey=\"composer.users_placeholder\"\n                                tabindex=\"1\"\n                                usernames=model.targetUsernames}}\n              {{/if}}\n  \n              <div class=\"title-input\">\n                {{text-field value=model.title tabindex=\"2\" id=\"reply-title\" maxLength=maxTitleLength placeholderKey=\"composer.title_placeholder\"}}\n                {{popupInputTip validation=view.titleValidation shownAt=view.showTitleTip}}\n              </div>\n  \n              {{#unless model.privateMessage}}\n                <div class=\"category-input\">\n                  {{category-chooser valueAttribute=\"id\" value=model.categoryId scopedCategoryId=scopedCategoryId tabindex=\"3\"}}\n                  {{popupInputTip validation=view.categoryValidation shownAt=view.showCategoryTip}}\n                </div>\n                {{#if model.archetype.hasOptions}}\n                  <button class='btn' {{action showOptions}}>{{i18n topic.options}}</button>\n                {{/if}}\n                {{render \"additionalComposerButtons\" model}}\n              {{/unless}}\n            </div>\n          {{/if}}\n  \n          <div class='wmd-controls'>\n            <div class='textarea-wrapper'>\n              <div class='wmd-button-bar' id='wmd-button-bar'></div>\n              <div id='wmd-preview-scroller'></div>\n              {{composer-text-area tabindex=\"4\" value=model.reply}}\n              {{popupInputTip validation=view.replyValidation shownAt=view.showReplyTip}}\n            </div>\n            <!-- keep the classes here in sync with post.js.handlebars -->\n            <div class='preview-wrapper regular'>\n              <div id='wmd-preview' {{bind-attr class=\"hidePreview:hidden :cooked\"}}></div>\n            </div>\n            <div class=\"composer-bottom-right\">\n              <a href=\"#\" {{action togglePreview}} class='toggle-preview'>{{{model.toggleText}}}</a>\n              <div id=\"file-uploading\" {{bind-attr class=\"view.isUploading::hidden\"}}>\n                {{i18n upload_selector.uploading}} {{view.uploadProgress}}% <a id=\"cancel-file-upload\">{{i18n cancel}}</a>\n              </div>\n              {{#if Discourse.Mobile.mobileView}}\n                <a {{bind-attr class=\":mobile-file-upload view.isUploading:hidden\"}}>{{i18n upload}}</a>\n                <input type=\"file\" id=\"mobile-uploader\" />\n              {{/if}}\n              <div id='draft-status'>{{model.draftStatus}}</div>\n            </div>\n          </div>\n  \n          {{#if currentUser}}\n            <div class='submit-panel'>\n              <button {{action save}} tabindex=\"5\" {{bind-attr class=\":btn :btn-primary :create disableSubmit:disabled\"}} title=\"{{i18n composer.title}}\">{{model.saveText}}</button>\n              <a href='#' {{action cancel}} class='cancel' tabindex=\"6\">{{i18n cancel}}</a>\n            </div>\n          {{/if}}\n  \n        </div>\n      {{else}}\n        <div class='row'>\n          <div class='span24'>\n            <div class='saving-text'>\n              {{#if model.createdPost}}\n                {{i18n composer.saved}} <a class='permalink' href=\"{{unbound createdPost.url}}\" {{action viewNewReply}}>{{i18n composer.view_new_post}}</a>\n              {{else}}\n                {{i18n composer.saving}}\n              {{/if}}\n            </div>\n            <div class='draft-text'>\n              {{i18n composer.saved_draft}}\n            </div>\n          </div>\n        </div>\n      {{/if}}\n  \n    </div>\n  </div>");
Ember.TEMPLATES["composer/education"] = Ember.Handlebars.compile("<a href='#' {{action closeMessage this}} class='close'><i class='fa fa-times-circle'></i></a>\n  {{{body}}}");
Ember.TEMPLATES["composer/similar_topics"] = Ember.Handlebars.compile("<a href='#' {{action closeMessage this}} class='close'><i class='fa fa-times-circle'></i></a>\n  <h3>{{i18n composer.similar_topics}}</h3>\n  \n  <ul class='topics'>\n    {{#each similarTopics}}\n      <li>{{topic-link this}} <span class='posts-count'>({{{i18n topic.filters.n_posts count=\"posts_count\"}}})</span></li>\n    {{/each}}\n  </ul>");
Ember.TEMPLATES["discovery"] = Ember.Handlebars.compile("<div class='container'>\n    {{custom-html \"top\"}}\n    {{Discourse.globalNotice}}\n    {{discourse-banner user=currentUser banner=Discourse.banner}}\n  </div>\n  \n  <div class='list-controls'>\n    <div class=\"container\">\n      {{outlet navigation-bar}}\n    </div>\n  </div>\n  \n  <div {{bind-attr class=\"loadingSpinner::hidden\"}}>\n    <div class='spinner'>{{i18n loading}}</div>\n  </div>\n  \n  \n  <div {{bind-attr class=\":container :list-container loadingSpinner:hidden\"}}>\n    <div class=\"row\">\n      <div class=\"full-width\">\n        <div id='header-list-area'>\n          {{outlet header-list-container}}\n        </div>\n      </div>\n    </div>\n  \n    <div class=\"row\">\n      <div class=\"full-width\">\n        <div id='list-area'>\n          {{outlet list-container}}\n        </div>\n      </div>\n    </div>\n  </div>");
Ember.TEMPLATES["discovery/categories"] = Ember.Handlebars.compile("{{#if categories}}\n    <div class='contents'>\n      <table class='topic-list categories'>\n        <thead>\n          <tr>\n            <th class='category'>{{i18n categories.category}}</th>\n            <th class='latest'>{{i18n categories.latest}}</th>\n            <th class='stats topics'>{{i18n categories.topics}}</th>\n          </tr>\n        </thead>\n        <tbody>\n          {{#each categories}}\n          <tr data-category_id='{{unbound id}}' {{bind-attr class=\"description_excerpt:has-description:no-description logo_url:has-logo:no-logo\"}}>\n            <td class='category' style=\"border-color: \#{{unbound color}}\">\n              <div>\n                <div class=\"pull-left\">\n                  {{category-title-link category=this}}\n                  {{#if unreadTopics}}\n                    <a href={{unbound unreadUrl}} class='badge new-posts badge-notification' title='{{i18n topic.unread_topics count=\"unreadTopics\"}}'>{{i18n filters.unread.lower_title_with_count count=\"unreadTopics\"}}</a>\n                  {{/if}}\n                  {{#if newTopics}}\n                    <a href={{unbound newUrl}} class='badge new-posts badge-notification' title='{{i18n topic.new_topics count=\"newTopics\"}}'>{{i18n filters.new.lower_title_with_count count=\"newTopics\"}}</a>\n                  {{/if}}\n                </div>\n                <div class=\"clearfix\"></div>\n              </div>\n              {{#if description_excerpt}}\n                <div class=\"category-description\">\n                  {{{description_excerpt}}}\n                </div>\n              {{/if}}\n              {{#if subcategories}}\n                <div class='subcategories'>\n                  {{#each subcategories}}\n                    {{category-link this showParent=true onlyStripe=true}}\n                    {{#if unreadTopics}}\n                      <a href={{unbound unreadUrl}} class='badge new-posts badge-notification' title='{{i18n topic.unread_topics count=\"unreadTopics\"}}'>{{unbound unreadTopics}}</a>\n                    {{/if}}\n                    {{#if newTopics}}\n                      <a href={{unbound newUrl}} class='badge new-posts badge-notification' title='{{i18n topic.new_topics count=\"newTopics\"}}'>{{unbound newTopics}}</a>\n                    {{/if}}\n                  {{/each}}\n                </div>\n              {{/if}}\n            </td>\n            <td {{bind-attr class=\"archived :latest\"}}>\n              {{#each featuredTopics}}\n                <div class=\"featured-topic\">\n                  {{topic-status topic=this}}\n                  <a class='title' href=\"{{unbound lastUnreadUrl}}\">{{{unbound fancy_title}}}</a>\n                  {{topic-post-badges unread=totalUnread unseen=unseen url=lastUnreadUrl}}\n  \n                  {{#if controller.latestTopicOnly}}\n                    <div class='last-user-info'>\n                      {{i18n categories.latest_by}} <a href=\"{{{unbound lastPosterUrl}}}\">{{unbound last_poster.username}}</a>\n                      <a href=\"{{unbound lastPostUrl}}\">{{age last_posted_at}}</a>\n                    </div>\n                  {{else}}\n                    &nbsp;\n                    <a href=\"{{unbound lastPostUrl}}\" class=\"last-posted-at\">{{age last_posted_at}}</a>\n                  {{/if}}\n                </div>\n              {{/each}}\n            </td>\n            <td class='stats' {{bind-attr title=\"topicStatsTitle\"}}>\n              <table class=\"categoryStats\">\n                <tbody>\n                {{#each topicCountStats}}\n                  <tr>\n                    <td class=\"value\">{{value}}</td>\n                    <td class=\"unit\"> / {{unit}}</td>\n                  </tr>\n                {{/each}}\n                </tbody>\n              </table>\n            </td>\n          </tr>\n          {{/each}}\n        </tbody>\n      </table>\n    </div>\n    <footer class='topic-list-bottom'></footer>\n  {{/if}}");
Ember.TEMPLATES["discovery/topics"] = Ember.Handlebars.compile("{{#if redirectedReason}}\n    <div class=\"alert alert-info\">{{redirectedReason}}</div>\n  {{/if}}\n  \n  {{#if showDismissAtTop}}\n    <div class=\"row\">\n      {{#if showDismissRead}}\n        <button title=\"{{i18n topics.bulk.dismiss_topics_tooltip}}\" id='dismiss-topics-top' class='btn dismiss-read' {{action dismissRead \"topics\"}}>{{i18n topics.bulk.dismiss_topics}}</button>\n        <button title=\"{{i18n topics.bulk.dismiss_posts_tooltip}}\" id='dismiss-posts-top' class='btn dismiss-read' {{action dismissRead \"posts\"}}>{{i18n topics.bulk.dismiss_posts}}</button>\n      {{/if}}\n      {{#if showResetNew}}\n        <button id='dismiss-new-top' class='btn dismiss-read' {{action resetNew}}>{{i18n topics.bulk.dismiss_new}}</button>\n      {{/if}}\n    </div>\n  {{/if}}\n  \n  {{#if selected}}\n    <div id='bulk-select'>\n      <button class='btn no-text' {{action showBulkActions}}><i class=\"fa fa-wrench\"></i></button>\n    </div>\n  {{/if}}\n  \n  <div class='contents'>\n    {{#if top}}\n      <div class='top-lists'>\n        {{top-period-chooser period=period}}\n      </div>\n    {{/if}}\n    {{#if showTable}}\n      <table class='topic-list'>\n        <thead>\n        <tr>\n          {{#if currentUser}}\n          <th>\n            {{#if canBulkSelect}}\n            <button class='btn bulk-select' {{action toggleBulkSelect}} title=\"{{i18n topics.bulk.toggle}}\"><i class='fa fa-list'></i></button>\n            {{/if}}\n          </th>\n          {{/if}}\n          {{#sortable-heading sortBy=\"default\" action=\"changeSort\" order=order ascending=ascending}}\n            {{i18n topic.title}}\n          {{/sortable-heading}}\n          {{#unless controller.hideCategory}}\n            {{#sortable-heading sortBy=\"category\" action=\"changeSort\" order=order ascending=ascending}}\n              {{i18n category_title}}\n            {{/sortable-heading}}\n          {{/unless}}\n          {{#sortable-heading sortBy=\"posters\" action=\"changeSort\" order=order ascending=ascending}}\n            {{i18n users}}\n          {{/sortable-heading}}\n          {{#sortable-heading sortBy=\"posts\" number=true action=\"changeSort\" order=order ascending=ascending}}\n            {{i18n posts}}\n          {{/sortable-heading}}\n          {{#sortable-heading sortBy=\"views\" number=true action=\"changeSort\" order=order ascending=ascending}}\n            {{i18n views}}\n          {{/sortable-heading}}\n          {{#sortable-heading sortBy=\"activity\" number=true action=\"changeSort\" order=order ascending=ascending}}\n            {{i18n activity}}\n          {{/sortable-heading}}\n        </tr>\n        </thead>\n  \n        {{#if topicTrackingState.hasIncoming}}\n          <tbody>\n            <tr>\n              <td colspan=\"9\">\n                <div class='alert alert-info clickable' {{action showInserted}}>\n                  {{countI18n topic_count_ suffix=topicTrackingState.filter count=topicTrackingState.incomingCount}}\n                  {{i18n click_to_show}}\n                </div>\n              </td>\n            </tr>\n          </tbody>\n        {{/if}}\n  \n        <tbody>\n          {{each topics itemController=\"topic-list-item\" itemView=\"topic-list-item\"}}\n        </tbody>\n  \n      </table>\n    {{/if}}\n  </div>\n  \n  <footer class='topic-list-bottom'>\n    {{#if loadingMore}}\n      <div class='topics-loading'>{{i18n topic.loading_more}}</div>\n    {{/if}}\n    {{#if allLoaded}}\n      {{#if showDismissRead}}\n        <button title=\"{{i18n topics.bulk.dismiss_topics_tooltip}}\" id='dismiss-topics' class='btn dismiss-read' {{action dismissRead \"topics\"}}>{{i18n topics.bulk.dismiss_topics}}</button>\n        <button title=\"{{i18n topics.bulk.dismiss_posts_tooltip}}\" id='dismiss-posts' class='btn dismiss-read' {{action dismissRead \"posts\"}}>{{i18n topics.bulk.dismiss_posts}}</button>\n      {{/if}}\n      {{#if showResetNew}}\n        <button id='dismiss-new' class='btn dismiss-read' {{action resetNew}}>{{i18n topics.bulk.dismiss_new}}</button>\n      {{/if}}\n  \n      {{#if latest}}\n        <div class=\"education\">\n          {{{footerEducation}}}\n        </div>\n        <h3>\n          {{footerMessage}}\n          {{#if can_create_topic}}<a href='#' {{action createTopic}}>{{i18n topic.suggest_create_topic}}</a>{{/if}}\n        </h3>\n      {{else}}\n        {{#if top}}\n          <h3>\n            {{#link-to \"discovery.categories\"}}{{i18n topic.browse_all_categories}}{{/link-to}}, {{#link-to 'discovery.latest'}}{{i18n topic.view_latest_topics}}{{/link-to}} {{i18n or}} {{i18n filters.top.other_periods}}\n          {{top-period-buttons period=period}}\n        {{else}}\n          <div class=\"education\">\n              {{{footerEducation}}}\n          </div>\n          <h3>\n            {{footerMessage}}{{#link-to \"discovery.categories\"}} {{i18n topic.browse_all_categories}}{{/link-to}} {{i18n or}} {{#link-to 'discovery.latest'}}{{i18n topic.view_latest_topics}}{{/link-to}}\n          </h3>\n        {{/if}}\n      {{/if}}\n    {{/if}}\n  </footer>");
Ember.TEMPLATES["embedded_post"] = Ember.Handlebars.compile("<div class='row'>\n    <div class='topic-avatar'>\n      <div class='contents'>\n        <div>\n          {{poster-avatar action=\"expandPostUser\" post=this classNames=\"main-avatar\"}}\n        </div>\n      </div>\n    </div>\n    <div class='topic-body'>\n      <div class=\"topic-meta-data\">\n        {{poster-name post=this expandAction=\"expandPostUser\"}}\n        {{#if view.parentView.previousPost}}<a href='{{unbound url}}' class=\"post-info arrow\" title=\"{{i18n topic.jump_reply_up}}\"><i class='fa fa-arrow-up'></i></a>{{/if}}\n        <div class='post-info post-date'>{{age-with-tooltip created_at}}</div>\n      </div>\n      {{{unbound cooked}}}\n      {{#unless view.parentView.previousPost}}<a href='{{unbound url}}' class=\"arrow\" title=\"{{i18n topic.jump_reply_down}}\"><i class='fa fa-arrow-down'></i></a>{{/unless}}\n    </div>\n  </div>");
Ember.TEMPLATES["exception"] = Ember.Handlebars.compile("<div class=\"container\">\n    <div class=\"error-page\">\n      <div class=\"face\">:(</div>\n      <div class=\"reason\">{{reason}}</div>\n      <div class=\"url\">\n        {{i18n errors.prev_page}} <a {{bind-attr href=requestUrl}} data-auto-route=\"true\">{{requestUrl}}</a>\n      </div>\n      <div class=\"desc\">\n        {{#if networkFixed}}\n          <i class=\"fa fa-check-circle\"></i>\n        {{/if}}\n  \n        {{desc}}\n      </div>\n      <div class=\"buttons\">\n        {{#each buttonData in enabledButtons}}\n          <button class=\"btn {{unbound buttonData.classes}}\" {{action buttonData.action}}>{{boundI18n buttonData.key}}</button>\n        {{/each}}\n        {{#if loading}}\n          <i class=\"fa fa-spin fa-spinner\"></i>\n        {{/if}}\n      </div>\n    </div>\n  </div>");
Ember.TEMPLATES["group"] = Ember.Handlebars.compile("<div class=\"container\">\n      <section class='user-navigation'>\n        <ul class='action-list nav-stacked'>\n          <li {{bind-attr class=\"showingIndex:active\"}}>\n            {{#link-to 'group.index' model}}{{i18n groups.posts}}\n            <span class='count'>({{counts.posts}})</span>\n            <span class='fa fa-chevron-right'></span>{{/link-to}}\n          </li>\n        <li {{bind-attr class=\"showingMembers:active\"}}>\n          {{#link-to 'group.members' model}}{{i18n groups.members}}\n          <span class='count'>({{counts.members}})</span>\n          <span class='fa fa-chevron-right'></span>{{/link-to}}\n        </li>\n      </ul>\n    </section>\n  \n      <section class='user-main'>\n        <section class='about group'>\n          <div class='details'>\n            <h1>{{name}}</h1>\n          </div>\n        </section>\n  \n        {{outlet}}\n      </section>\n  </div>");
Ember.TEMPLATES["group/index"] = Ember.Handlebars.compile("<div class='user-stream'>\n    {{#each model itemController=\"group/post\"}}\n      <div class='item'>\n        <div class='clearfix info'>\n          {{#link-to 'user' user class=\"avatar-link\"}}<div class='avatar-wrapper'>{{avatar user imageSize=\"large\" extraClasses=\"actor\" ignoreTitle=\"true\"}}</div>{{/link-to}}\n          <span class='time'>{{date path=\"created_at\" leaveAgo=\"true\"}}</span>\n          <span class=\"title\">\n            <a href=\"{{unbound url}}\">{{unbound title}}</a>\n          </span>\n          {{#if byName}}\n            <span class=\"name\">\n              {{unbound byName}}\n            </span>\n          {{/if}}\n        </div>\n        <p class='excerpt'>\n        {{{unbound cooked}}}\n        </p>\n      </div>\n    {{/each}}\n  </div>");
Ember.TEMPLATES["group/members"] = Ember.Handlebars.compile("{{#if model}}\n    <table class='group-members'>\n      <tr>\n        <th colspan=\"3\" class=\"seen\">{{i18n last_seen}}</th>\n      </tr>\n    {{#each model}}\n    <tr>\n        <td class='avatar'>\n          {{avatar this imageSize=\"large\"}}\n        </td>\n        <td>\n          <h3>{{#link-to 'user' this}}{{username}}{{/link-to}}</h3>\n          <p>{{name}}</p>\n        </td>\n        <td>\n          <span class='last-seen-at'>{{bound-date last_seen_at}}</span>\n        </td>\n      </tr>\n      </div>\n    {{/each}}\n  </table>\n  {{/if}}");
Ember.TEMPLATES["header"] = Ember.Handlebars.compile("<div class='container'>\n    <div class='contents clearfix'>\n  \n      {{home-logo minimized=showExtraInfo}}\n  \n      {{#if showExtraInfo}}\n        <div class=\"extra-info-wrapper\">\n          <div class=\"extra-info\">\n            {{#if showStarButton}}\n              <a {{bind-attr class=\":star topic.starred:starred\"}} {{action toggleStar}} href='#' {{bind-attr title=\"topic.starTooltip\"}}></a>\n            {{/if}}\n            <h1>\n              {{#if topic.isPrivateMessage}}\n                <span class=\"private-message-glyph\">{{icon envelope}}</span>\n              {{/if}}\n              {{#if topic.category.parentCategory}}\n                {{bound-category-link topic.category.parentCategory}}\n              {{/if}}\n              {{bound-category-link topic.category}}\n              {{#if topic.details.loaded}}\n                {{topic-status topic=topic}}\n                <a class='topic-link' href='{{unbound topic.url}}' {{action jumpToTopPost}}>{{{topic.fancy_title}}}</a>\n              {{else}}\n                {{#if topic.errorLoading}}\n                  {{topic.errorTitle}}\n                {{else}}\n                  {{i18n topic.loading}}\n                {{/if}}\n              {{/if}}\n            </h1>\n          </div>\n        </div>\n      {{/if}}\n  \n      <div class='panel clearfix'>\n        {{#unless showExtraInfo}}\n          <div class='current-username'>\n            {{#if currentUser}}\n              <span class='username'><a {{bind-attr href=\"currentUser.path\"}}>{{currentUser.displayName}}</a></span>\n            {{/if}}\n          </div>\n        {{/unless}}\n        {{#unless currentUser}}\n          {{#if showSignUpButton}}\n          <button {{action showCreateAccount}} class='btn btn-primary btn-small sign-up-button'>\n            {{i18n sign_up}}\n          </button>\n          {{/if}}\n          <button {{action showLogin}} class='btn btn-primary btn-small login-button'>\n            {{icon user}} {{i18n log_in}}\n          </button>\n        {{/unless}}\n        <ul class='icons clearfix' role='navigation'>\n          {{#if currentUser}}\n            <li class='notifications'>\n              <a class='icon' href=\"#\" {{action showNotifications target=\"view\"}} data-notifications=\"notifications-dropdown\" id='user-notifications' title='{{i18n notifications.title}}'>\n                {{icon comment label=\"notifications.title\"}}\n              </a>\n              {{#if currentUser.unread_notifications}}\n                <a href='#' class='badge-notification unread-notifications'>{{currentUser.unread_notifications}}</a>\n              {{/if}}\n              {{#if currentUser.unread_private_messages}}\n                <a href='#' class='badge-notification unread-private-messages'>{{currentUser.unread_private_messages}}</a>\n              {{/if}}\n            </li>\n          {{/if}}\n          <li>\n            {{#if Discourse.loginRequired}}\n              <a id='search-button' class='icon expand' href='#' aria-hidden=\"true\" {{action showLogin}}>\n                {{icon search}}\n              </a>\n            {{else}}\n              <a id='search-button'\n                 class='icon expand'\n                 href='#'\n                 data-dropdown=\"search-dropdown\"\n                 title='{{i18n search.title}}'>\n                 {{icon search label=\"search.title\"}}\n              </a>\n            {{/if}}\n          </li>\n          <li class='categories dropdown'>\n            {{#if Discourse.loginRequired}}\n              <a class='icon'\n                 href=\"#\"\n                 aria-hidden=\"true\"\n                 {{action showLogin}}>\n                 {{icon bars}}\n              </a>\n            {{else}}\n              <a class='icon'\n                 data-dropdown=\"site-map-dropdown\"\n                 data-render=\"renderSiteMap\"\n                 href=\"#\"\n                 title='{{i18n site_map}}'\n                 id=\"site-map\">\n                 {{icon bars label=\"site_map\"}}\n              </a>\n            {{/if}}\n            {{#if currentUser.site_flagged_posts_count}}\n              <a href='/admin/flags/active' title='{{i18n notifications.total_flagged}}' class='badge-notification flagged-posts'>{{currentUser.site_flagged_posts_count}}</a>\n            {{/if}}\n          </li>\n          {{#if currentUser}}\n            <li class='current-user dropdown'>\n              <a class='icon'\n                 data-dropdown=\"user-dropdown\"\n                 data-render=\"renderUserDropdown\"\n                 href=\"#\"\n                 title='{{i18n user.avatar.title}}'\n                 id=\"current-user\">\n                   {{bound-avatar currentUser \"medium\"}}\n              </a>\n            </li>\n          {{/if}}\n        </ul>\n  \n        {{render \"search\"}}\n  \n        {{render \"notifications\" notifications}}\n  \n        {{#if view.renderSiteMap}}\n          {{render \"siteMap\"}}\n        {{/if}}\n  \n        {{render \"userDropdown\"}}\n  \n      </div>\n    </div>\n  </div>");
Ember.TEMPLATES["list/topic_list_item"] = Ember.Handlebars.compile("{{#if bulkSelectEnabled}}\n    <td class='star'>\n      {{input type=\"checkbox\" checked=checked}}\n    </td>\n  {{else}}\n    {{#if canStar}}\n      <td class='star'>\n        <a {{bind-attr class=\":star :fa :fa-star starred:starred\"}} {{action toggleStar}} href='#' {{bind-attr title=\"starTooltip\"}}></a>\n      </td>\n    {{/if}}\n  {{/if}}\n  \n  <td class='main-link clearfix' {{bind-attr colspan=\"titleColSpan\"}}>\n    {{topic-status topic=this.model}}\n    {{topic-link this}}\n    {{topic-post-badges unread=unread newPosts=displayNewPosts unseen=unseen url=lastUnreadUrl}}\n  \n    {{#if hasExcerpt}}\n      <div class=\"topic-excerpt\">\n        {{{excerpt}}}\n        {{#if excerptTruncated}}\n          {{#unless canClearPin}}<a href=\"{{url}}\">{{i18n read_more}}</a>{{/unless}}\n        {{/if}}\n        {{#if canClearPin}}\n          <a href=\"#\" {{action clearPin this}} title=\"{{i18n topic.clear_pin.help}}\">{{i18n topic.clear_pin.title}}</a>\n        {{/if}}\n      </div>\n    {{/if}}\n  </td>\n  \n  {{#unless hideCategory}}\n  <td class='category'>{{bound-category-link category showParent=true}}</td>\n  {{/unless}}\n  \n  {{view 'posters-column' posters=posters}}\n  \n  {{posts-count-column topic=model class=\"num\" action=\"showTopicEntrance\"}}\n  <td {{bind-attr class=\":num :views viewsHeat\"}}>{{number views numberKey=\"views_long\"}}</td>\n  \n  {{activity-column topic=model class=\"num\"}}");
Ember.TEMPLATES["list/user_topics_list"] = Ember.Handlebars.compile("{{basic-topic-list topicList=model\n                     hideCategory=hideCategory\n                     showParticipants=showParticipants\n                     postsAction=\"showTopicEntrance\"}}");
Ember.TEMPLATES["mobile/components/basic-topic-list"] = Ember.Handlebars.compile("{{#if loaded}}\n    {{#if topics}}\n      <table class=\"topic-list\">\n        {{#grouped-each topic in topics}}\n          <tr {{bind-attr class=\"archived\"}}>\n            <td>\n              <div class='main-link clearfix'>\n                {{topic-status topic=this}}\n                {{topic-link this}}\n                {{topic-post-badges unread=unread\n                                    newPosts=topic.new_posts\n                                    unseen=topic.unseen\n                                    url=topic.lastUnreadUrl}}\n  \n                {{#if hasExcerpt}}\n                  <div class=\"topic-excerpt\">\n                    {{excerpt}}\n                    {{#if excerptTruncated}}\n                      {{#unless canClearPin}}<a href=\"{{url}}\">{{i18n read_more}}</a>{{/unless}}\n                    {{/if}}\n                    {{#if canClearPin}}\n                      <a href=\"#\" {{action clearPin this}} title=\"{{i18n topic.clear_pin.help}}\">{{i18n topic.clear_pin.title}}</a>\n                    {{/if}}\n                  </div>\n              {{/if}}\n              </div>\n              <div class=\"topic-item-stats clearfix\">\n                <div class=\"pull-right\">\n                  {{posts-count-column topic=topic tagName=\"div\" class=\"num posts\"}}\n                  {{activity-column topic=topic tagName=\"div\" class=\"num activity last\"}}\n                </div>\n                {{#unless controller.hideCategory}}\n                  <div class='category'>\n                    {{category-link category showParent=true}}\n                  </div>\n                {{/unless}}\n                {{#if controller.showParticipants}}\n                  <div class='participants'>\n                    {{#each topic.participants}}\n                      <a href=\"{{user.path}}\" class=\"{{extras}}\">{{avatar this usernamePath=\"user.username\" imageSize=\"small\"}}</a>\n                    {{/each}}\n                  </div>\n                {{/if}}\n                <div class=\"clearfix\"></div>\n              </div>\n            </td>\n          </tr>\n        {{/grouped-each}}\n      </table>\n    {{else}}\n      <div class='alert alert-info'>\n        {{i18n choose_topic.none_found}}\n      </div>\n    {{/if}}\n  {{else}}\n    <div class='spinner'>{{i18n loading}}</div>\n  {{/if}}");
Ember.TEMPLATES["mobile/discovery/categories"] = Ember.Handlebars.compile("{{#each categories}}\n    <div class='category-list-item'>\n      <table class='topic-list'>\n        <tr>\n          <th class=\"main-link\">\n            {{category-link this allowUncategorized=true}}\n          </th>\n        </tr>\n  \n        {{#if description_excerpt}}\n          <tr class=\"category-description\">\n            <td colspan=\"3\">\n              {{{description_excerpt}}}\n            </td>\n          </tr>\n        {{/if}}\n  \n        {{#each topics}}\n          <tr {{bind-attr class=\"archived :category-topic-link\"}}>\n            <td class='main-link'>\n              <div class='topic-inset'>\n                {{topic-status topic=this}}\n                {{topic-link this}}\n  \n                {{topic-post-badges unread=unread newPosts=new_posts unseen=unseen url=lastUnreadUrl}}\n                {{#if hasExcerpt}}\n                  <div class=\"topic-excerpt\">\n                    {{{excerpt}}}\n                    {{#if excerptTruncated}}\n                      {{#unless canClearPin}}<a href=\"{{url}}\">{{i18n read_more}}</a>{{/unless}}\n                    {{/if}}\n                    {{#if canClearPin}}\n                      <a href=\"#\" {{action clearPin this}} title=\"{{unbound i18n topic.clear_pin.help}}\">{{i18n topic.clear_pin.title}}</a>\n                    {{/if}}\n                  </div>\n                {{/if}}\n              </div>\n            </td>\n            <td class='num posts'>{{number posts_count}}</td>\n            <td class='num age'><span class=\"{{cold-age-class created_at}}\" title='{{raw-date created_at}}'>{{{age created_at}}}</span></td>\n          </tr>\n  \n        {{/each}}\n        {{#if subcategories}}\n          <tr>\n            <td>\n              <div class='subcategories'>\n                {{#each subcategory in subcategories}}\n                  {{category-link subcategory showParent=true}}\n                {{/each}}\n              </div>\n            </td>\n          </tr>\n        {{/if}}\n  \n      </table>\n      <footer class=\"clearfix\">\n        <figure title=\"{{i18n year_desc}}\">{{number topics_year}} <figcaption>{{i18n category.this_year}}</figcaption></figure>\n        <figure title=\"{{i18n month_desc}}\">{{number topics_month}} <figcaption>{{i18n month}}</figcaption></figure>\n        <figure title=\"{{i18n week_desc}}\">{{number topics_week}} <figcaption>{{i18n week}}</figcaption></figure>\n  \n        {{#if controller.canEdit}}\n          <a href='#' {{action editCategory this}} class='btn btn-small'>{{i18n category.edit}}</a>\n        {{/if}}\n  \n      </footer>\n    </div>\n  {{/each}}");
Ember.TEMPLATES["mobile/discovery/topics"] = Ember.Handlebars.compile("<div class='contents'>\n    {{#if showTable}}\n      {{#if top}}\n        <div class='top-lists'>\n          {{top-period-chooser period=period}}\n        </div>\n      {{/if}}\n      <table class='topic-list'>\n        {{#if topicTrackingState.hasIncoming}}\n          <tbody>\n            <tr>\n              <td>\n                <div class='alert alert-info' {{action showInserted}}>\n                  {{countI18n topic_count_ suffix=topicTrackingState.filter count=topicTrackingState.incomingCount}}\n                  {{i18n click_to_show}}\n                </div>\n              </td>\n            </tr>\n          </tbody>\n        {{/if}}\n        {{collection contentBinding=\"topics\" tagName=\"tbody\" itemView=\"topic-list-item\"}}\n      </table>\n    {{/if}}\n  </div>\n  \n  <footer class='topic-list-bottom'>\n    {{#if loadingMore}}\n      <div class='topics-loading'>{{i18n topic.loading_more}}</div>\n    {{/if}}\n    {{#if allLoaded}}\n      {{#if showDismissRead}}\n        <button title=\"{{i18n topics.bulk.dismiss_topics_tooltip}}\" id='dismiss-topics' class='btn dismiss-read' {{action dismissRead \"topics\"}}>{{i18n topics.bulk.dismiss_topics}}</button>\n        <button title=\"{{i18n topics.bulk.dismiss_posts_tooltip}}\" id='dismiss-posts' class='btn dismiss-read' {{action dismissRead \"posts\"}}>{{i18n topics.bulk.dismiss_posts}}</button>\n      {{/if}}\n      {{#if showResetNew}}\n        <button id='dismiss-new' class='btn dismiss-read' {{action resetNew}}>{{i18n topics.bulk.dismiss_new}}</button>\n      {{/if}}\n  \n      {{#if latest}}\n        <div class=\"education\">\n          {{{footerEducation}}}\n        </div>\n        <h3>\n          {{footerMessage}}\n          {{#if can_create_topic}}<a href='#' {{action createTopic}}>{{i18n topic.suggest_create_topic}}</a>{{/if}}\n        </h3>\n      {{else}}\n        {{#if top}}\n          <h3>\n            {{#link-to \"discovery.categories\"}}{{i18n topic.browse_all_categories}}{{/link-to}}, {{#link-to 'discovery.latest'}}{{i18n topic.view_latest_topics}}{{/link-to}} {{i18n or}} {{i18n filters.top.other_periods}}\n            <br/>\n            {{top-period-buttons period=period}}\n          </h3>\n        {{else}}\n          <div class=\"education\">\n              {{{footerEducation}}}\n          </div>\n          <h3>\n            {{footerMessage}}{{#link-to \"discovery.categories\"}} {{i18n topic.browse_all_categories}}{{/link-to}} {{i18n or}} {{#link-to 'discovery.latest'}}{{i18n topic.view_latest_topics}}{{/link-to}}\n          </h3>\n        {{/if}}\n      {{/if}}\n    {{/if}}\n  </footer>");
Ember.TEMPLATES["mobile/list/topic_list_item"] = Ember.Handlebars.compile("<td>\n  <div class='main-link clearfix'>\n    {{topic-status topic=this}}\n    {{topic-link this}}\n    {{topic-post-badges unread=unread\n                        newPosts=displayNewPosts\n                        unseen=unseen\n                        url=lastUnreadUrl}}\n  \n    {{#if hasExcerpt}}\n      <div class=\"topic-excerpt\">\n        {{{excerpt}}}\n        {{#if excerptTruncated}}\n          {{#unless canClearPin}}<a href=\"{{url}}\">{{i18n read_more}}</a>{{/unless}}\n        {{/if}}\n        {{#if canClearPin}}\n          <a href=\"#\" {{action clearPin this}} title=\"{{i18n topic.clear_pin.help}}\">{{i18n topic.clear_pin.title}}</a>\n        {{/if}}\n      </div>\n    {{/if}}\n  </div>\n  \n  <div class=\"topic-item-stats clearfix\">\n    {{#unless controller.hideCategory}}\n      <div class='category'>\n        {{category-link category showParent=true}}\n      </div>\n    {{/unless}}\n  \n    <div class=\"pull-right\">\n      {{posts-count-column topic=this tagName=\"div\" class=\"num posts\"}}\n      <div class='num activity last'>\n        <a href=\"{{lastPostUrl}}\" title='{{i18n last_post}}: {{{raw-date bumped_at}}}'>{{last_poster_username}}</a>\n        {{activity-column topic=this tagName=\"span\" class=\"age\"}}\n      </div>\n    </div>\n    <div class=\"clearfix\"></div>\n  </div>\n  </td>");
Ember.TEMPLATES["mobile/modal/login"] = Ember.Handlebars.compile("<div class=\"modal-body\">\n    {{#if hasAtLeastOneLoginButton}}\n      <div id=\"login-buttons\">\n        {{#each Discourse.LoginMethod.all}}\n          <button class=\"btn btn-social {{unbound name}}\" {{action externalLogin this}}>{{unbound title}}</button>\n        {{/each}}\n      </div>\n      <div class=\"clearfix\"></div>\n    {{/if}}\n    {{#if Discourse.SiteSettings.enable_local_logins}}\n      {{#if hasAtLeastOneLoginButton}}\n        <h3 style=\"text-align:center;\">{{i18n login.or}}</h3>\n      {{/if}}\n      <form id='login-form' method='post'>\n        <div>\n          <table>\n            <tr>\n              <td>\n                <label for='login-account-name'>{{i18n login.username}}&nbsp;</label>\n              </td>\n              <td>\n                {{text-field value=loginName placeholderKey=\"login.email_placeholder\" id=\"login-account-name\" autocorrect=\"off\" autocapitalize=\"off\"}}\n              </td>\n            </tr>\n            <tr>\n              <td>\n                  <label for='login-account-password'>{{i18n login.password}}&nbsp;</label>\n              </td>\n              <td>\n                  {{text-field value=loginPassword type=\"password\" id=\"login-account-password\"}} &nbsp;\n              </td>\n            </tr>\n            <tr>\n              <td></td>\n              <td>\n                <a id=\"forgot-password-link\" {{action showForgotPassword}}>{{i18n forgot_password.action}}</a>\n              </td>\n            </tr>\n          </table>\n        </div>\n      </form>\n    {{/if}}\n    {{authMessage}}\n    <div id='login-alert' {{bind-attr class=\"alertClass\"}}>{{alert}}</div>\n  </div>\n  <div class=\"modal-footer\">\n    {{#if authenticate}}\n      {{i18n login.authenticating}}\n    {{/if}}\n    {{#if Discourse.SiteSettings.enable_local_logins}}\n      <button class='btn btn-large btn-primary'\n        {{bind-attr disabled=\"loginDisabled\"}}\n        {{action login}}>\n          <i class=\"fa fa-unlock\"></i>&nbsp;{{loginButtonText}}\n      </button>\n  \n      {{#unless Discourse.SiteSettings.invite_only}}\n        <button class=\"btn btn-large\" id=\"new-account-link\" {{action showCreateAccount}}>\n          {{i18n create_account.title}}\n        </button>\n      {{/unless}}\n    {{/if}}\n  </div>");
Ember.TEMPLATES["modal/archetype_options"] = Ember.Handlebars.compile("<div class=\"modal-body\">\n    <form>\n     {{view Discourse.ArchetypeOptionsView archetypeBinding=\"view.archetype\"}}\n    </form>\n  </div>\n  <div class=\"modal-footer\">\n    <button class='btn btn-primary' {{action closeModal}}>{{i18n post.archetypes.save}}</button>\n  </div>");
Ember.TEMPLATES["modal/auto_close"] = Ember.Handlebars.compile("<form {{action saveAutoClose on=\"submit\"}}>\n    <div class=\"modal-body\">\n      {{auto-close-form autoCloseTime=auto_close_time autoCloseValid=auto_close_valid}}\n    </div>\n    <div class=\"modal-footer\">\n      <button class='btn btn-primary' type='submit' {{bind-attr disabled=\"auto_close_invalid\"}}>{{i18n topic.auto_close_save}}</button>\n      <a {{action closeModal}}>{{i18n cancel}}</a>\n      <button class='btn pull-right' {{action removeAutoClose}}>{{i18n topic.auto_close_remove}}</button>\n    </div>\n  </form>");
Ember.TEMPLATES["modal/avatar_selector"] = Ember.Handlebars.compile("<div class=\"modal-body\">\n    <div>\n      <div>\n        <input type=\"radio\" id=\"system-avatar\" name=\"avatar\" value=\"system\" {{action useSystem}}>\n        <label class=\"radio\" for=\"system-avatar\">{{bound-avatar controller \"large\" system_avatar_upload_id}} {{{i18n user.change_avatar.letter_based}}}</label>\n      </div>\n      <div>\n        <input type=\"radio\" id=\"gravatar\" name=\"avatar\" value=\"gravatar\" {{action useGravatar}}>\n        <label class=\"radio\" for=\"gravatar\">{{bound-avatar controller \"large\" gravatar_avatar_upload_id}} {{{i18n user.change_avatar.gravatar}}} {{email}}</label>\n        <button href {{action refreshGravatar}} title=\"{{i18n user.change_avatar.refresh_gravatar_title}}\" {{bind-attr enabled=\"view.gravatarRefreshEnabled\"}} class=\"btn no-text\"><i class=\"fa fa-refresh\"></i></button>\n      </div>\n      <div>\n        <input type=\"radio\" id=\"uploaded_avatar\" name=\"avatar\" value=\"uploaded\" {{action useUploadedAvatar}}>\n        <label class=\"radio\" for=\"uploaded_avatar\">\n          {{#if view.hasUploadedAvatar}}\n            {{#if view.uploadedAvatarTemplate}}\n              {{bound-avatar-template view.uploadedAvatarTemplate \"large\"}}\n            {{else}}\n              {{bound-avatar controller \"large\" custom_avatar_upload_id}} {{i18n user.change_avatar.uploaded_avatar}}\n            {{/if}}\n          {{else}}\n            {{i18n user.change_avatar.uploaded_avatar_empty}}\n          {{/if}}\n        </label>\n        {{avatar-uploader username=username\n                          uploadedAvatarTemplate=view.uploadedAvatarTemplate\n                          custom_avatar_upload_id=controller.custom_avatar_upload_id}}\n      </div>\n    </div>\n  </div>\n  \n  <div class=\"modal-footer\">\n    <button class=\"btn btn-primary\" {{action saveAvatarSelection}} {{bind-attr disabled=\"view.saveDisabled\"}}>{{i18n save}}</button>\n    <a {{action closeModal}}>{{i18n cancel}}</a>\n  </div>");
Ember.TEMPLATES["modal/bulk_actions_buttons"] = Ember.Handlebars.compile("<button class='btn' {{action showChangeCategory}}>{{i18n topics.bulk.change_category}}</button>\n  <button class='btn' {{action deleteTopics}}>{{i18n topics.bulk.delete}}</button>\n  <button class='btn' {{action closeTopics}}>{{i18n topics.bulk.close_topics}}</button>\n  <button class='btn' {{action showNotificationLevel}}>{{i18n topics.bulk.notification_level}}</button>\n  <button class='btn' {{action resetRead}}>{{i18n topics.bulk.reset_read}}</button>");
Ember.TEMPLATES["modal/bulk_change_category"] = Ember.Handlebars.compile("<p>Choose the new category for the topics:</p>\n  \n  <p>{{category-chooser value=newCategoryId}}</p>\n  \n  {{#if loading}}\n    <div class='loading'>{{i18n loading}}</div>\n  {{else}}\n    <button class='btn' {{action changeCategory}}>Change Category</button>\n  {{/if}}");
Ember.TEMPLATES["modal/bulk_notification_level"] = Ember.Handlebars.compile("{{#each level in notificationLevels}}\n    <div class='controls'>\n      <label class='radio'>\n        {{radio-button value=level.id name=\"notification_level\" selection=controller.notificationLevelId}} <strong>{{unbound level.name}}</strong>\n        <div class='description'>{{{unbound level.description}}}</div>\n      </label>\n    </div>\n  {{/each}}\n  \n  <button class='btn' {{bind-attr disabled=\"disabled\"}} {{action changeNotificationLevel}}>{{i18n topics.bulk.notification_level}}</button>");
Ember.TEMPLATES["modal/change_owner"] = Ember.Handlebars.compile("<div class=\"modal-body\">\n    {{{i18n topic.change_owner.instructions count=\"selectedPostsCount\" old_user=\"selectedPostsUsername\"}}}\n    <p>\n        {{{i18n topic.change_owner.instructions_warn}}}\n    </p>\n  \n    <form>\n        <label>{{i18n topic.change_owner.label}}</label>\n      {{user-selector single=true usernames=new_user include_groups=\"false\" placeholderKey=\"topic.change_owner.placeholder\"}}\n    </form>\n  \n  </div>\n  \n  <div class=\"modal-footer\">\n      <button class='btn btn-primary' {{bind-attr disabled=\"buttonDisabled\"}} {{action changeOwnershipOfPosts}}>{{buttonTitle}}</button>\n  </div>");
Ember.TEMPLATES["modal/create_account"] = Ember.Handlebars.compile("{{#unless complete}}\n    <div class=\"modal-body\">\n      {{#unless hasAuthOptions}}\n        {{login-buttons action=\"externalLogin\"}}\n      {{/unless}}\n  \n      {{#if showCreateForm}}\n        <div>\n          <form>\n          <table>\n          <tr class=\"input\">\n              <td style=\"width:80px\" class=\"label\"><label for='new-account-name'>{{i18n user.name.title}}</label></td>\n              <td style=\"width:496px\">\n              {{text-field value=accountName id=\"new-account-name\" autofocus=\"autofocus\"}}\n              &nbsp;{{input-tip validation=nameValidation}}\n              </td>\n          </tr>\n          <tr class=\"instructions\">\n            <td></td>\n            <td><label>{{i18n user.name.instructions}}</label></td>\n          </tr>\n  \n          <tr class=\"input\">\n                <td class=\"label\"><label for='new-account-email'>{{i18n user.email.title}}</label></td>\n                <td>\n                {{input type=\"email\" value=accountEmail id=\"new-account-email\" disabled=emailValidated}}\n                &nbsp;{{input-tip validation=emailValidation}}\n                </td>\n          </tr>\n          <tr class=\"instructions\">\n            <td></td>\n            <td><label>{{i18n user.email.instructions}}</label></td>\n          </tr>\n  \n          <tr class=\"input\">\n                <td class=\"label\"><label for='new-account-username'>{{i18n user.username.title}}</label></td>\n                <td>\n                {{input value=accountUsername id=\"new-account-username\" maxlength=Discourse.SiteSettings.max_username_length}}\n                &nbsp;{{input-tip validation=usernameValidation id=\"username-validation\"}}\n                </td>\n          </tr>\n          <tr class=\"instructions\">\n            <td></td>\n            <td><label>{{i18n user.username.instructions}}</label></td>\n          </tr>\n  \n          {{#if passwordRequired}}\n          <tr class=\"input\">\n              <td class=\"label\"><label for='new-account-password'>{{i18n user.password.title}}</label></td>\n              <td>\n              {{password-field value=accountPassword type=\"password\" id=\"new-account-password\" capsLockOn=capsLockOn}}\n              &nbsp;{{input-tip validation=passwordValidation}}\n              </td>\n          </tr>\n          <tr class=\"instructions\">\n            <td></td>\n            <td>\n              <label>{{passwordInstructions}}</label>\n              <div {{bind-attr class=\":caps-lock-warning capsLockOn::invisible\"}}><i class=\"fa fa-exclamation-triangle\"></i> {{i18n login.caps_lock_warning}}</div>\n            </td>\n          </tr>\n          {{/if}}\n  \n          <tr class=\"password-confirmation\">\n              <td><label for='new-account-password-confirmation'>{{i18n user.password_confirmation.title}}</label></td>\n              <td>\n              {{input type=\"password\" value=accountPasswordConfirm id=\"new-account-confirmation\"}}\n              {{input value=accountChallenge id=\"new-account-challenge\"}}\n              </td>\n          </tr>\n  \n          </table>\n          </form>\n        </div>\n      {{/if}}\n    </div>\n  \n    {{#if showCreateForm}}\n      <div class=\"modal-footer\">\n        {{#if tosAcceptRequired}}\n          <div class=\"tos-agree\">\n            {{input type=\"checkbox\" checked=tosAccepted}}\n            {{custom-html \"tos_signup_form_message\"}}\n          </div>\n        {{/if}}\n        <button class='btn btn-large btn-primary' {{bind-attr disabled=\"submitDisabled\"}} {{action createAccount}}>{{i18n create_account.title}}</button>\n        {{#if formSubmitted}}\n          &nbsp; <i class='fa fa-spinner fa-spin'></i>\n        {{else}}\n          <button class=\"btn btn-large\" id=\"login-link\" {{action showLogin}}>\n            {{i18n log_in}}\n          </button>\n        {{/if}}\n      </div>\n    {{/if}}\n  {{/unless}}");
Ember.TEMPLATES["modal/edit-category-general"] = Ember.Handlebars.compile("<form>\n    <section class='field'>\n      <label>{{i18n category.name}}</label>\n      {{text-field value=name placeholderKey=\"category.name_placeholder\" maxlength=\"50\"}}\n    </section>\n  \n    {{#if canSelectParentCategory}}\n      <section class='field'>\n        {{#if subCategories}}\n          <label>{{i18n categories.subcategories}}</label>\n          {{#each subCategories}}\n            {{category-badge this}}\n          {{/each}}\n        {{else}}\n          <label>{{i18n category.parent}}</label>\n          {{category-chooser valueAttribute=\"id\" value=parent_category_id categories=parentCategories rootNone=true}}\n        {{/if}}\n      </section>\n    {{/if}}\n  \n    {{#if showDescription}}\n      <section class='field'>\n        <label>{{i18n category.description}}</label>\n  \n        {{#if description}}\n          {{description}}\n        {{else}}\n          {{i18n category.no_description}}\n        {{/if}}\n        {{#if topic_url}}\n          <br/>\n          <button class=\"btn btn-small\" {{action showCategoryTopic}}><i class=\"fa fa-pencil\"></i>{{i18n category.change_in_category_topic}}</button>\n        {{/if}}\n      </section>\n    {{/if}}\n  \n    <section class='field'>\n      <label>{{i18n category.badge_colors}}</label>\n      <div class=\"category-color-editor\">\n        {{{categoryBadgePreview}}}\n  \n        <div class='input-prepend input-append' style=\"margin-top: 10px;\">\n          <span class='color-title'>{{i18n category.background_color}}:</span>\n          <span class='add-on'>#</span>{{text-field value=color placeholderKey=\"category.color_placeholder\" maxlength=\"6\"}}\n          {{color-picker colors=backgroundColors usedColors=usedBackgroundColors value=color}}\n        </div>\n  \n        <div class='input-prepend input-append'>\n          <span class='color-title'>{{i18n category.foreground_color}}:</span>\n          <span class='add-on'>#</span>{{text-field value=text_color placeholderKey=\"category.color_placeholder\" maxlength=\"6\"}}\n          {{color-picker colors=foregroundColors value=text_color}}\n        </div>\n      </div>\n    </section>\n  </form>");
Ember.TEMPLATES["modal/edit-category-images"] = Ember.Handlebars.compile("<section class='field'>\n    <label>{{i18n category.logo}}</label>\n    {{image-uploader uploadUrl=categoryUploadUrl imageUrl=logo_url type=\"logo\"}}\n  </section>\n  \n  <section class='field'>\n    <label>{{i18n category.background_image}}</label>\n    {{image-uploader uploadUrl=categoryUploadUrl imageUrl=background_url type=\"background\"}}\n  </section>");
Ember.TEMPLATES["modal/edit-category-security"] = Ember.Handlebars.compile("<section class='field'>\n    <ul class='permission-list'>\n      {{#each permissions}}\n        <li>\n          <span class=\"name\"><span class=\"badge-group\">{{group_name}}</span></span>\n          {{{i18n \"category.can\"}}}\n          <span class=\"permission\">{{permission.description}}</span>\n          {{#if controller.editingPermissions}}\n            <a {{action removePermission this}}><i class=\"fa fa-times-circle\"></i></a>\n          {{/if}}\n        </li>\n      {{/each}}\n    </ul>\n    {{#if controller.editingPermissions}}\n      {{view Ember.Select content=availableGroups value=selectedGroup}}\n      {{view Ember.Select class=\"permission-selector\" optionValuePath=\"content.id\" optionLabelPath=\"content.description\" content=availablePermissions value=selectedPermission}}\n      <button {{action addPermission selectedGroup selectedPermission}} class=\"btn btn-small\">{{i18n category.add_permission}}</button>\n    {{else}}\n      <button {{action editPermissions}} class=\"btn btn-small\">{{i18n category.edit_permissions}}</button>\n    {{/if}}\n  </section>");
Ember.TEMPLATES["modal/edit-category-settings"] = Ember.Handlebars.compile("<section class='field'>\n    <div class=\"auto-close-fields\">\n      <div>\n        <i class=\"fa fa-clock-o\"></i>\n        {{i18n category.auto_close_label}}\n        {{text-field value=auto_close_hours}}\n        {{i18n category.auto_close_units}}\n      </div>\n    </div>\n  </section>\n  \n  <section class='field'>\n    <div class=\"allow-badges\">\n      <div>\n        {{input type=\"checkbox\" checked=allow_badges}}\n        {{i18n category.allow_badges_label}}\n      </div>\n    </div>\n  </section>\n  \n  <section class='field'>\n    <div class=\"email-in-fields\">\n      {{#if emailInEnabled}}\n        <div>\n          <i class=\"fa fa-envelope-o\"></i>\n          {{i18n category.email_in}}\n          {{text-field value=email_in}}\n        </div>\n        <div>\n          <label class=\"checkbox-label\">\n            {{input type=\"checkbox\" checked=email_in_allow_strangers}}\n            {{i18n category.email_in_allow_strangers}}\n          </label>\n        </div>\n      {{else}}\n        {{i18n category.email_in_disabled}}\n        <a href=\"/admin/site_settings/category/email\">{{i18n category.email_in_disabled_click}}</a>\n      {{/if}}\n    </div>\n  </section>\n  \n  <section class='field'>\n    {{#if showPositionInput}}\n      <label>{{i18n category.position}}</label>\n      {{text-field value=position class=\"position-input\"}}\n    {{else}}\n      {{i18n category.position_disabled}}\n      <a href=\"/admin/site_settings/category/basic\">{{i18n category.position_disabled_click}}</a>\n    {{/if}}\n  </section>");
Ember.TEMPLATES["modal/edit-category"] = Ember.Handlebars.compile("<div {{bind-attr class=\"loading:invisible\"}}>\n    <ul class=\"nav nav-pills\">\n      {{edit-category-tab selectedTab=selectedTab tab=\"general\"}}\n      {{#unless isUncategorizedCategory}}\n        {{edit-category-tab selectedTab=selectedTab tab=\"security\"}}\n      {{/unless}}\n      {{edit-category-tab selectedTab=selectedTab tab=\"settings\"}}\n      {{edit-category-tab selectedTab=selectedTab tab=\"images\"}}\n    </ul>\n  \n    <div class=\"modal-body\">\n      {{#each tab in view.panels}}\n        {{view 'edit-category-panel' tab=tab}}\n      {{/each}}\n    </div>\n  \n    <div class=\"modal-footer\">\n      <button class='btn btn-primary' {{bind-attr disabled=\"disabled\"}} {{action saveCategory}}>{{buttonTitle}}</button>\n      {{#if can_delete}}\n        <button class='btn btn-danger pull-right' {{bind-attr disabled=\"deleteDisabled\"}} {{action deleteCategory}}><i class=\"fa fa-trash-o\"></i>{{deleteButtonTitle}}</button>\n      {{else}}\n        <div class=\"cannot_delete_reason\">\n          {{{cannot_delete_reason}}}\n        </div>\n      {{/if}}\n    </div>\n  </div>");
Ember.TEMPLATES["modal/flag"] = Ember.Handlebars.compile("<div class=\"modal-body flag-modal\">\n  \n    <form>\n      {{#each flagsAvailable itemController=\"flag-action-type\"}}\n        <div class='controls'>\n          <label class='radio'>\n            <input type='radio' id=\"radio_{{unbound name_key}}\" {{action changePostActionType this}} name='post_action_type_index'> <strong>{{formattedName}}</strong>\n            {{#if showDescription}}\n              <div class='description'>{{{description}}}</div>\n            {{/if}}\n          </label>\n          {{#if showMessageInput}}\n            {{textarea name=\"message\" class=\"flag-message\" placeholder=customPlaceholder value=message}}\n            <div {{bind-attr class=\":custom-message-length customMessageLengthClasses\"}}>{{customMessageLength}}</div>\n          {{/if}}\n        </div>\n      {{else}}\n        {{i18n flagging.cant}}\n      {{/each}}\n    </form>\n  \n  </div>\n  <div class=\"modal-footer\">\n    <button class='btn btn-primary' {{action createFlag}} {{bind-attr disabled=\"submitDisabled\"}} title=\"{{i18n flagging.submit_tooltip}}\">{{{submitText}}}</button>\n  \n    {{#if canTakeAction}}\n      <button class='btn btn-danger' {{action takeAction}} {{bind-attr disabled=\"submitDisabled\"}} title=\"{{i18n flagging.take_action_tooltip}}\"><i class=\"fa fa-gavel\"></i>{{i18n flagging.take_action}}</button>\n    {{/if}}\n  \n    {{#if canDeleteSpammer}}\n      <button class=\"btn btn-danger\" {{action deleteSpammer userDetails}} {{bind-attr disabled=\"submitDisabled\"}} title=\"{{i18n flagging.delete_spammer}}\"><i class=\"fa fa-exclamation-triangle\"></i> {{i18n flagging.delete_spammer}}</button>\n    {{/if}}\n  </div>");
Ember.TEMPLATES["modal/forgot_password"] = Ember.Handlebars.compile("<form>\n      <div class=\"modal-body\">\n        <label for='username-or-email'>{{i18n forgot_password.invite}}</label>\n        {{text-field value=accountEmailOrUsername placeholderKey=\"login.email_placeholder\" id=\"username-or-email\" autocorrect=\"off\" autocapitalize=\"off\"}}\n      </div>\n      <div class=\"modal-footer\">\n        <button class='btn btn-large btn-primary' {{bind-attr disabled=\"submitDisabled\"}} {{action submit}}>{{i18n forgot_password.reset}}</button>\n      </div>\n  </form>");
Ember.TEMPLATES["modal/history"] = Ember.Handlebars.compile("<div class=\"modal-body\">\n    <div>\n      <div id=\"revision-controls\">\n        <button title=\"{{i18n post.revisions.controls.first}}\" {{bind-attr class=\":btn :standard displayGoToFirst::invisible\" disabled=loading}} {{action loadFirstVersion}}><i class=\"fa fa-fast-backward\"></i></button>\n        <button title=\"{{i18n post.revisions.controls.previous}}\" {{bind-attr class=\":btn :standard displayGoToPrevious::invisible\" disabled=loading}} {{action loadPreviousVersion}}><i class=\"fa fa-backward\"></i></button>\n        <div id=\"revision-numbers\" {{bind-attr class=\"displayRevisions::invisible\"}}>{{{boundI18n revisionsTextKey previousBinding=\"previousVersion\" currentBinding=\"version\" totalBinding=\"revisions_count\"}}}</div>\n        <button title=\"{{i18n post.revisions.controls.next}}\" {{bind-attr class=\":btn :standard displayGoToNext::invisible\" disabled=loading}} {{action loadNextVersion}}><i class=\"fa fa-forward\"></i></button>\n        <button title=\"{{i18n post.revisions.controls.last}}\" {{bind-attr class=\":btn :standard displayGoToLast::invisible\" disabled=loading}} {{action loadLastVersion}}><i class=\"fa fa-fast-forward\"></i></button>\n      </div>\n      {{#if loading}}<div id='revision-loading'><i class='fa fa-spinner fa-spin'></i>{{i18n loading}}</div>{{/if}}\n      <div id=\"display-modes\">\n        <button {{bind-attr class=\":btn displayingInline:btn-primary:standard\"}} title=\"{{i18n post.revisions.displays.inline.title}}\" {{action displayInline}}>{{{i18n post.revisions.displays.inline.button}}}</button>\n        {{#unless Discourse.Mobile.mobileView}}\n          <button {{bind-attr class=\":btn displayingSideBySide:btn-primary:standard\"}} title=\"{{i18n post.revisions.displays.side_by_side.title}}\" {{action displaySideBySide}}>{{{i18n post.revisions.displays.side_by_side.button}}}</button>\n          <button {{bind-attr class=\":btn displayingSideBySideMarkdown:btn-primary:standard\"}} title=\"{{i18n post.revisions.displays.side_by_side_markdown.title}}\" {{action displaySideBySideMarkdown}}>{{{i18n post.revisions.displays.side_by_side_markdown.button}}}</button>\n        {{/unless}}\n      </div>\n    </div>\n    <div id=\"revision-details\">\n      {{i18n post.revisions.details.edited_by}} {{#link-to 'user' username}}{{bound-avatar-template content.avatar_template \"small\"}} {{username}}{{/link-to}} <span class=\"date\">{{bound-date created_at}}</span> {{#if edit_reason}} &mdash; <span class=\"edit-reason\">{{edit_reason}}</span>{{/if}}\n    </div>\n    <div id=\"revisions\">\n      {{#if title_changes}}\n        <div class=\"row\">\n          <h2>{{{title_diff}}}</h2>\n        </div>\n      {{/if}}\n      {{#if category_changes}}\n        <div class=\"row\">\n          {{{category_diff}}}\n        </div>\n      {{/if}}\n      {{#if user_changes}}\n        <div class=\"row\">\n          {{bound-avatar-template user_changes.previous.avatar_template \"small\"}} {{user_changes.previous.username}} → {{bound-avatar-template user_changes.current.avatar_template \"small\"}} {{user_changes.current.username}}\n        </div>\n      {{/if}}\n      {{#if wiki_changes}}\n        <div class=\"row\">\n          {{{wiki_diff}}}\n        </div>\n      {{/if}}\n      {{{body_diff}}}\n    </div>\n  </div>");
Ember.TEMPLATES["modal/invite"] = Ember.Handlebars.compile("<div class=\"modal-body invite-modal\">\n    {{#if error}}\n      <div class=\"alert alert-error\">\n        <button class=\"close\" data-dismiss=\"alert\">×</button>\n        {{i18n topic.invite_reply.error}}\n      </div>\n    {{/if}}\n  \n    {{#if finished}}\n      {{{successMessage}}}\n    {{else}}\n  \n      <label>{{inviteInstructions}}</label>\n      {{text-field value=email placeholderKey=\"topic.invite_reply.email_placeholder\"}}\n  \n      {{#if isAdmin}}\n        <label>{{{groupInstructions}}}</label>\n        {{group-selector includeAuto=false groupFinder=groupFinder groupNames=groupNames placeholderKey=\"topic.invite_private.group_name\"}}\n      {{/if}}\n    {{/if}}\n  </div>\n  <div class=\"modal-footer\">\n    {{#if finished}}\n      <button class='btn btn-primary' {{action closeModal}}>{{i18n close}}</button>\n    {{else}}\n      <button class='btn btn-primary' {{bind-attr disabled=\"disabled\"}} {{action createInvite}}><i class=\"fa fa-envelope\"></i>{{buttonTitle}}</button>\n    {{/if}}\n  \n  </div>");
Ember.TEMPLATES["modal/invite_private"] = Ember.Handlebars.compile("<div class=\"modal-body\">\n    {{#if error}}\n      <div class=\"alert alert-error\">\n        <button class=\"close\" data-dismiss=\"alert\">×</button>\n        {{i18n topic.invite_private.error}}\n      </div>\n    {{/if}}\n  \n    {{#if finished}}\n      {{i18n topic.invite_private.success}}\n    {{else}}\n      <label>{{i18n topic.invite_private.email_or_username}}</label>\n      {{user-selector single=true allowAny=true usernames=emailOrUsername include_groups=\"true\" placeholderKey=\"topic.invite_private.email_or_username_placeholder\"}}\n    {{/if}}\n  </div>\n  <div class=\"modal-footer\">\n    {{#if finished}}\n      <button class='btn btn-primary' {{action closeModal}}>{{i18n close}}</button>\n    {{else}}\n      <button class='btn btn-primary' {{bind-attr disabled=\"disabled\"}} {{action invite}}>{{buttonTitle}}</button>\n    {{/if}}\n  \n  </div>");
Ember.TEMPLATES["modal/keyboard_shortcuts_help"] = Ember.Handlebars.compile("<div id=\"keyboard-shortcuts-help\" class=\"modal-body\">\n    <div class=\"row\">\n      <div class=\"span6\">\n        <h4>{{i18n keyboard_shortcuts_help.jump_to.title}}</h4>\n        <ul>\n          <li>{{{i18n keyboard_shortcuts_help.jump_to.home}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.jump_to.latest}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.jump_to.new}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.jump_to.unread}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.jump_to.starred}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.jump_to.categories}}}</li>\n        </ul>\n        <h4>{{i18n keyboard_shortcuts_help.navigation.title}}</h4>\n        <ul>\n          <li>{{{i18n keyboard_shortcuts_help.navigation.back}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.navigation.jump}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.navigation.up_down}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.navigation.open}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.navigation.next_prev}}}</li>\n        </ul>\n      </div>\n      <div class=\"span6\">\n        <h4>{{i18n keyboard_shortcuts_help.application.title}}</h4>\n        <ul>\n          <li>{{{i18n keyboard_shortcuts_help.application.create}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.application.notifications}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.application.site_map_menu}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.application.user_profile_menu}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.application.show_incoming_updated_topics}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.application.search}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.application.help}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.application.dismiss_new_posts}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.application.dismiss_topics}}}</li>\n        </ul>\n      </div>\n      <div class=\"span6\">\n        <h4>{{i18n keyboard_shortcuts_help.actions.title}}</h4>\n        <ul>\n          <li>{{{i18n keyboard_shortcuts_help.actions.star}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.actions.share_topic}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.actions.share_post}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.actions.reply_as_new_topic}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.actions.reply_topic}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.actions.reply_post}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.actions.quote_post}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.actions.like}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.actions.flag}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.actions.bookmark}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.actions.edit}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.actions.delete}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.actions.mark_muted}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.actions.mark_regular}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.actions.mark_tracking}}}</li>\n          <li>{{{i18n keyboard_shortcuts_help.actions.mark_watching}}}</li>\n        </ul>\n      </div>\n    </div>\n  </div>");
Ember.TEMPLATES["modal/login"] = Ember.Handlebars.compile("<div class=\"modal-body\">\n    {{login-buttons action=\"externalLogin\"}}\n    {{#if canLoginLocal}}\n      <form id='login-form' method='post'>\n        <div>\n          <table>\n            <tr>\n              <td>\n                <label for='login-account-name'>{{i18n login.username}}&nbsp;</label>\n              </td>\n              <td>\n                {{text-field value=loginName placeholderKey=\"login.email_placeholder\" id=\"login-account-name\" autocorrect=\"off\" autocapitalize=\"off\" autofocus=\"autofocus\"}}\n              </td>\n              <td></td>\n            </tr>\n            <tr>\n              <td>\n                  <label for='login-account-password'>{{i18n login.password}}&nbsp;</label>\n              </td>\n              <td>\n                  {{password-field value=loginPassword type=\"password\" id=\"login-account-password\" capsLockOn=capsLockOn}} &nbsp;\n              </td>\n              <td>\n                <a id=\"forgot-password-link\" {{action showForgotPassword}}>{{i18n forgot_password.action}}</a>\n              </td>\n            </tr>\n            <tr>\n              <td></td>\n              <td><div {{bind-attr class=\":caps-lock-warning capsLockOn::invisible\"}}><i class=\"fa fa-exclamation-triangle\"></i> {{i18n login.caps_lock_warning}}</div></td>\n              <td></td>\n            </tr>\n          </table>\n        </div>\n      </form>\n    {{/if}}\n    {{authMessage}}\n    <div id='login-alert' {{bind-attr class=\"alertClass\"}}>{{alert}}</div>\n  </div>\n  <div class=\"modal-footer\">\n    {{#if canLoginLocal}}\n      <button class=\"btn btn-large btn-primary\"\n        {{bind-attr disabled=\"loginDisabled\"}}\n        {{action login}}>\n          <i class=\"fa fa-unlock\"></i>&nbsp;{{loginButtonText}}\n      </button>\n  \n      {{#if showSignupLink}}\n        &nbsp;\n        <button class=\"btn btn-large\" id=\"new-account-link\" {{action createAccount}}>\n          {{i18n create_account.title}}\n        </button>\n      {{/if}}\n    {{/if}}\n  \n    {{#if authenticate}}\n      &nbsp; {{i18n login.authenticating}}\n    {{/if}}\n  \n    {{#if showSpinner}}\n      &nbsp; <i class='fa fa-spinner fa-spin'></i>\n    {{/if}}\n  </div>");
Ember.TEMPLATES["modal/merge_topic"] = Ember.Handlebars.compile("<div id='move-selected' class=\"modal-body\">\n    {{#if error}}\n      <div class=\"alert alert-error\">\n        <button class=\"close\" data-dismiss=\"alert\">×</button>\n      </div>\n    {{/if}}\n  \n    <p>{{{i18n topic.merge_topic.instructions count=\"selectedPostsCount\"}}}</p>\n  \n    <form>\n      {{choose-topic selectedTopicId=selectedTopicId}}\n    </form>\n  </div>\n  \n  <div class=\"modal-footer\">\n    <button class='btn btn-primary' {{bind-attr disabled=\"buttonDisabled\"}} {{action movePostsToExistingTopic}}><i class=\"fa fa-sign-out\"></i>{{buttonTitle}}</button>\n  </div>");
Ember.TEMPLATES["modal/modal"] = Ember.Handlebars.compile("<div class=\"modal-outer-container\">\n    <div class=\"modal-middle-container\">\n      <div class=\"modal-inner-container\">\n  \n        <div class=\"modal-header\">\n          <a class=\"close\" {{action closeModal}}><i class='fa fa-times'></i></a>\n          <h3>{{title}}</h3>\n          <div class=\"clearfix\"></div>\n        </div>\n        <div id='modal-alert'></div>\n  \n        {{outlet modalBody}}\n  \n        {{#each errors}}\n          <div class=\"alert alert-error\">\n            <button class=\"close\" data-dismiss=\"alert\">×</button>\n            {{this}}\n          </div>\n        {{/each}}\n  \n      </div>\n    </div>\n  </div>");
Ember.TEMPLATES["modal/not_activated"] = Ember.Handlebars.compile("<div class=\"modal-body\">\n    {{#if emailSent}}\n      {{{i18n login.sent_activation_email_again currentEmail=\"currentEmail\"}}}\n    {{else}}\n      {{{i18n login.not_activated sentTo=\"sentTo\"}}}\n      <a href=\"#\" {{action \"sendActivationEmail\"}}>{{i18n login.resend_activation_email}}</a>\n    {{/if}}\n  </div>\n  <div class=\"modal-footer\">\n    <button class='btn btn-primary' {{action closeModal}}>{{i18n close}}</button>\n  </div>");
Ember.TEMPLATES["modal/option_boolean"] = Ember.Handlebars.compile("<label>\n    {{view Ember.Checkbox checkedBinding=\"view.checked\"}}\n    {{title}}\n  </label>\n  \n  {{description}}");
Ember.TEMPLATES["modal/split_topic"] = Ember.Handlebars.compile("<div id='move-selected' class=\"modal-body\">\n    {{#if error}}\n      <div class=\"alert alert-error\">\n        <button class=\"close\" data-dismiss=\"alert\">×</button>\n      </div>\n    {{/if}}\n  \n    {{{i18n topic.split_topic.instructions count=\"selectedPostsCount\"}}}\n  \n    <form>\n      <label>{{i18n topic.split_topic.topic_name}}</label>\n      {{text-field value=topicName placeholderKey=\"composer.title_placeholder\" elementId='split-topic-name'}}\n  \n      <label>{{i18n categories.category}}</label>\n      {{category-chooser value=categoryId}}\n    </form>\n  \n  </div>\n  \n  <div class=\"modal-footer\">\n    <button class='btn btn-primary' {{bind-attr disabled=\"buttonDisabled\"}} {{action movePostsToNewTopic}}><i class='fa fa-sign-out'></i>{{buttonTitle}}</button>\n  </div>");
Ember.TEMPLATES["modal/topic_bulk_actions"] = Ember.Handlebars.compile("<div class='modal-body'>\n  \n    <p>{{{i18n topics.bulk.selected count=length}}}</p>\n  \n    {{outlet bulkOutlet}}\n  \n  </div>");
Ember.TEMPLATES["modal/upload_selector"] = Ember.Handlebars.compile("<div class=\"modal-body\">\n    {{#if allowLocal}}\n      <div class=\"radios\">\n        <input type=\"radio\" id=\"local\" value=\"local\" name=\"upload\" {{action useLocal}}>\n        <label class=\"radio\" for=\"local\">{{i18n upload_selector.from_my_computer}}</label>\n        {{#if local}}\n          <div class=\"inputs\">\n            <input type=\"file\" id=\"filename-input\"><br>\n            <span class=\"description\">{{unbound view.tip}}</span>\n          </div>\n        {{/if}}\n      </div>\n    {{/if}}\n    <div class=\"radios\">\n      <input type=\"radio\" id=\"remote\" value=\"remote\" name=\"upload\" {{action useRemote}}>\n      <label class=\"radio\" for=\"remote\">{{i18n upload_selector.from_the_web}}</label>\n      {{#if remote}}\n        <div class=\"inputs\">\n          <input type=\"text\" id=\"fileurl-input\" placeholder=\"http://example.com/image.png\"><br>\n          <span class=\"description\">{{unbound view.tip}}</span>\n        </div>\n      {{/if}}\n    </div>\n    {{#if showMore}}\n      <div class=\"radios\">\n        <div class=\"inputs\">\n          <input type=\"text\" id=\"link-input\" placeholder=\"http://example.com\"><br>\n          <span class=\"description\">{{i18n upload_selector.image_link}}</span>\n        </div>\n      </div>\n    {{/if}}\n    <div class=\"radios\">\n      <div class=\"inputs\">\n        <p class=\"hint\">{{unbound view.hint}}</p>\n      </div>\n    </div>\n  </div>\n  \n  <div class=\"modal-footer\">\n    <button class=\"btn btn-primary\" {{action upload target=\"view\"}}>\n      <span class='add-upload'><i {{bind-attr class=\":fa view.uploadIcon\"}}></i><i class='fa fa-plus'></i></span>\n      {{i18n upload}}\n    </button>\n    <a {{action closeModal}}>{{i18n cancel}}</a>\n    {{#if remote}}<a {{action toggleShowMore}} class=\"pull-right\">{{i18n show_more}}</a>{{/if}}\n  </div>");
Ember.TEMPLATES["navigation/categories"] = Ember.Handlebars.compile("{{bread-crumbs categories=categories}}\n  \n  <ul class=\"nav nav-pills\" id='navigation-bar'>\n    {{#each navItem in navItems}}\n      {{navigation-item content=navItem filterMode=filterMode}}\n    {{/each}}\n    {{custom-html \"extraNavItem\"}}\n  </ul>\n  \n  {{#if canCreateCategory}}\n    <button class='btn btn-default' {{action createCategory}}><i class='fa fa-plus'></i>{{i18n category.create}}</button>\n  {{/if}}\n  {{#if canCreateTopic}}\n    <button id=\"create-topic\" class='btn btn-default' {{action createTopic}}><i class='fa fa-plus'></i>{{i18n topic.create}}</button>\n  {{/if}}");
Ember.TEMPLATES["navigation/category"] = Ember.Handlebars.compile("{{bread-crumbs categories=categories\n                 category=category\n                 noSubcategories=noSubcategories\n                 hideSubcategories=showingSubcategoryList}}\n  \n  <ul class=\"nav nav-pills\" id='navigation-bar'>\n    {{#each navItem in navItems}}\n      {{navigation-item content=navItem filterMode=filterMode}}\n    {{/each}}\n    {{custom-html \"extraNavItem\"}}\n  </ul>\n  \n  {{#if canChangeCategoryNotificationLevel}}\n    {{view 'category-notifications-button' category=category}}\n  {{/if}}\n  \n  {{#if canCreateTopic}}\n    <button id=\"create-topic\" class='btn btn-default' {{action createTopic}}><i class='fa fa-plus'></i>{{i18n topic.create}}</button>\n  {{/if}}\n  \n  {{#if canEditCategory}}\n    <button class='btn btn-default' {{action editCategory category}}><i class=\"fa fa-wrench\"></i> {{i18n category.edit_long}}</button>\n  {{/if}}\n  \n  <section class='category-heading'>\n    {{#if category.logo_url}}\n      <img {{bind-attr src=category.logo_url}} class=\"category-logo\">\n      {{#if category.description}}\n        <p>{{category.description}}</p>\n      {{/if}}\n    {{/if}}\n  </section>");
Ember.TEMPLATES["navigation/default"] = Ember.Handlebars.compile("{{bread-crumbs categories=categories}}\n  \n  <ul class=\"nav nav-pills\" id='navigation-bar'>\n    {{#each navItem in navItems}}\n      {{navigation-item content=navItem filterMode=filterMode}}\n    {{/each}}\n    {{custom-html \"extraNavItem\"}}\n  </ul>\n  \n  {{#if canCreateTopic}}\n    <button id=\"create-topic\" class='btn btn-default' {{action createTopic}}><i class='fa fa-plus'></i>{{i18n topic.create}}</button>\n  {{/if}}");
Ember.TEMPLATES["notifications"] = Ember.Handlebars.compile("<section class=\"d-dropdown\" id=\"notifications-dropdown\">\n    {{#unless loadingNotifications}}\n      {{#if content}}\n        <ul>\n          {{#each itemController=\"notification\"}}\n            {{notification-item notification=this scope=scope}}\n          {{/each}}\n          <li class=\"read last\">\n            <a {{bind-attr href=\"currentUser.path\"}}>{{i18n notifications.more}} &hellip;</a>\n          </li>\n        </ul>\n      {{else}}\n        <div class=\"none\">{{i18n notifications.none}}</div>\n      {{/if}}\n    {{else}}\n      <div class='loading'><i class='fa fa-spinner fa-spin'></i></div>\n    {{/unless}}\n  </section>");
Ember.TEMPLATES["popup_input_tip"] = Ember.Handlebars.compile("<span class=\"close\"><i class=\"fa fa-times-circle\"></i></span>\n  {{view.validation.reason}}");
Ember.TEMPLATES["post"] = Ember.Handlebars.compile("{{post-gap post=this postStream=controller.postStream before=\"true\"}}\n  \n  <div class='row'>\n    {{view 'reply-history' content=replyHistory}}\n  </div>\n  \n  <article class='boxed' {{bind-attr id=\"postElementId\"}} {{bind-attr data-post-id=\"id\"}} data-user-id=\"{{unbound user_id}}\">\n    <div class='row'>\n      {{#if showUserReplyTab}}\n        <a href='#' {{action toggleReplyHistory this target=\"view\"}} class='reply-to-tab'>\n          {{#if loadingReplyHistory}}\n            {{i18n loading}}\n          {{else}}\n            <i class=\"fa fa-mail-forward\"></i>&nbsp;\n            {{avatar reply_to_user imageSize=\"tiny\"}}\n            {{reply_to_user.username}}\n          {{/if}}\n        </a>\n      {{/if}}\n      <div class='topic-avatar'>\n        {{#unless userDeleted}}\n          <div {{bind-attr class=\":contents byTopicCreator:topic-creator\"}}>\n            {{poster-avatar action=\"expandPostUser\" post=this classNames=\"main-avatar\"}}\n          </div>\n        {{else}}\n          <div class=\"contents\">\n            <i class=\"fa fa-trash-o deleted-user-avatar\"></i>\n          </div>\n        {{/unless}}\n        {{#if wiki}}\n          <div {{action editPost this}} class=\"wiki\" title=\"{{i18n post.wiki.about}}\"><i class=\"fa fa-pencil-square-o fa-3x\"></i></div>\n        {{/if}}\n        {{#if via_email}}\n          <div title=\"{{i18n post.via_email}}\" class=\"via-email\"><i class=\"fa fa-envelope-o fa-2x\"></i></div>\n        {{/if}}\n      </div>\n  \n      <div class='topic-body'>\n        <div class='topic-meta-data'>\n          {{poster-name post=this expandAction=\"expandPostUser\"}}\n          <div class='post-info'>\n            <a class='post-date' {{bind-attr href=\"shareUrl\" data-share-url=\"shareUrl\" data-post-number=\"post_number\"}}>{{age-with-tooltip created_at}}</a>\n          </div>\n          {{#if hasHistory}}\n            <div class='post-info edits'>\n              {{#if can_view_edit_history}}\n                <a href='#' class=\"{{unbound view.historyHeat}}\" {{action showHistory this}} title=\"{{i18n post.last_edited_on}} {{raw-date updated_at}}\">\n                  {{editCount}}\n                  <i class='fa fa-pencil'></i>\n                </a>\n              {{else}}\n                <span class=\"{{unbound view.historyHeat}}\" title=\"{{i18n post.last_edited_on}} {{raw-date updated_at}}\">\n                  {{editCount}}\n                  <i class='fa fa-pencil'></i>\n                </span>\n              {{/if}}\n            </div>\n          {{/if}}\n          <div {{bind-attr class=\":read-state read\"}} title=\"{{i18n post.unread}}\"><i class='fa fa-circle'></i></div>\n        </div>\n  \n        <div {{bind-attr class=\":select-posts controller.multiSelect::hidden\"}}>\n          <button {{action toggledSelectedPostReplies this}} {{bind-attr class=\"view.canSelectReplies::hidden\"}}>{{i18n topic.multi_select.select_replies}}</button>\n          <button {{action toggledSelectedPost this}} class=\"select-post\">{{view.selectPostText}}</button>\n        </div>\n  \n        <!-- keep the classes here in sync with composer.js.handlebars -->\n        <div {{bind-attr class=\"showUserReplyTab:avoid-tab view.repliesShown::bottom-round :contents :regular view.extraClass\"}}>\n          <div class='cooked'>\n            {{{cooked}}}\n          </div>\n          {{#if cooked_hidden}}\n            <a href {{action expandHidden this}}>{{i18n post.show_hidden}}</a>\n          {{/if}}\n          {{#if view.showExpandButton}}\n            {{#if controller.loadingExpanded}}\n              <button class=\"btn expand-post\" disabled>{{i18n loading}}</button>\n            {{else}}\n              <button {{action expandFirstPost this}} class='btn expand-post'>{{i18n post.show_full}}&hellip;</button>\n            {{/if}}\n          {{/if}}\n          {{view 'post-menu' post=this adminMenu=view.adminMenu}}\n        </div>\n        {{view 'replies' content=replies}}\n        {{discourse-action-history post=this}}\n        {{view 'topic-map-container' post=this topic=controller.model}}\n      </div>\n  \n      {{post-gutter post=this\n                    links=internalLinks\n                    canReplyAsNewTopic=topic.details.can_reply_as_new_topic\n                    newTopicAction=\"replyAsNewTopic\"}}\n    </div>\n  \n  </article>\n  \n  {{post-gap post=this postStream=controller.postStream before=\"false\"}}");
Ember.TEMPLATES["quote"] = Ember.Handlebars.compile("<aside class='quote' {{#params}}data-{{key}}=\"{{value}}\" {{/params}}>\n    <div class='title'>\n      <div class='quote-controls'></div>\n    {{{avatarImg}}}\n    {{username}}\n    </div>\n    <blockquote>{{{quote}}}</blockquote>\n  </aside>");
Ember.TEMPLATES["search"] = Ember.Handlebars.compile("{{view 'search-text-field' value=term searchContextEnabled=searchContextEnabled searchContext=searchContext id=\"search-term\"}}\n  {{#if searchContext}}\n  <div class='search-context'>\n    <label>\n    {{input type=\"checkbox\" name=\"searchContext\" checked=searchContextEnabled}} {{searchContextDescription}}\n    </label>\n  </div>\n  {{/if}}\n  {{#if loading}}\n    <div class='searching'></div>\n  {{else}}\n    {{#unless noResults}}\n      {{#each resultType in content.resultTypes}}\n        <ul>\n          <li class='heading row'>\n            {{resultType.name}}\n          </li>\n          {{view 'search-results-type' type=resultType.type displayType=resultType.displayType content=resultType.results}}\n        </ul>\n          <div class='no-results'>\n              {{#if resultType.more}}\n                  <a href='#' class='filter' {{action moreOfType resultType.type bubbles=false}}>{{i18n show_more}}</a>\n              {{else}}\n                  {{#if showCancelFilter}}\n                      <a href='#' class='filter' {{action cancelType bubbles=false}}><i class='fa fa-times-circle'></i></a>\n                  {{/if}}\n              {{/if}}\n          </div>\n      {{/each}}\n    {{else}}\n      <div class='no-results'>\n        {{i18n search.no_results}}\n      </div>\n    {{/unless}}\n  {{/if}}");
Ember.TEMPLATES["search/category_result"] = Ember.Handlebars.compile("<a href='{{unbound url}}'>\n    {{category-badge this}}\n  </a>");
Ember.TEMPLATES["search/post_result"] = Ember.Handlebars.compile("<a class='search-link' href='{{unbound url}}'>\n    <span class='topic'>\n      {{i18n search.post_format post_number=post_number username=username}}\n    </span>\n    {{#unless Discourse.Mobile.mobileView}}\n    <span class='blurb'>\n    {{{unbound blurb}}}\n    </span>\n    {{/unless}}\n  </a>");
Ember.TEMPLATES["search/topic_result"] = Ember.Handlebars.compile("<a class='search-link' href='{{unbound url}}'>\n    <span class='topic'>\n      {{topic-status topic=topic disableActions=true}}<span class='topic-title'>{{unbound topic.title}}</span>{{category-badge topic.category}}\n    </span>\n    {{#unless Discourse.Mobile.mobileView}}\n    <span class='blurb'>\n    {{{unbound blurb}}}\n    </span>\n    {{/unless}}\n  </a>");
Ember.TEMPLATES["search/user_result"] = Ember.Handlebars.compile("<a href='{{unbound path}}'>\n    {{avatar this imageSize=\"small\"}}\n    {{unbound username}}\n  </a>");
Ember.TEMPLATES["selected_posts"] = Ember.Handlebars.compile("<p>{{countI18n topic.multi_select.description countBinding=\"selectedPostsCount\"}}</p>\n  \n  {{#if canSelectAll}}\n    <p><a href='#' {{action selectAll}}>{{i18n topic.multi_select.select_all}}</a></p>\n  {{/if}}\n  \n  {{#if canDeselectAll}}\n    <p><a href='#' {{action deselectAll}}>{{i18n topic.multi_select.deselect_all}}</a></p>\n  {{/if}}\n  \n  {{#if canDeleteSelected}}\n    <button class='btn' {{action deleteSelected}}><i class='fa fa-trash-o'></i> {{i18n topic.multi_select.delete}}</button>\n  {{/if}}\n  \n  {{#if canSplitTopic}}\n    <button class='btn' {{action splitTopic}}><i class='fa fa-sign-out'></i> {{i18n topic.split_topic.action}}</button>\n  {{/if}}\n  {{#if canMergeTopic}}\n    <button class='btn' {{action mergeTopic}}><i class='fa fa-sign-out'></i> {{i18n topic.merge_topic.action}}</button>\n  {{/if}}\n  {{#if canChangeOwner}}\n    <button class='btn' {{action changeOwner}}><i class='fa fa-user'></i> {{i18n topic.change_owner.action}}</button>\n  {{/if}}\n  \n  <p class='cancel'><a href='#' {{action toggleMultiSelect}}>{{i18n topic.multi_select.cancel}}</a></p>");
Ember.TEMPLATES["share"] = Ember.Handlebars.compile("<h3>{{view.title}}</h3>\n  \n  {{#if date}}\n    <span class=\"date\">{{bound-raw-date date}}</span>\n  {{/if}}\n  \n  <div><input type='text' readonly /></div>\n  \n  {{each shareLinks itemView='share-link'}}\n  \n  <div class='link'>\n    <a href='#' {{action close}} title='{{i18n share.close}}'><i class=\"fa fa-times-circle\"></i></a>\n  </div>");
Ember.TEMPLATES["share_link"] = Ember.Handlebars.compile("{{#if openInPopup}}\n    <a href=\"#\" {{action sharePopup target href}} {{bind-attr title=\"title\"}}><i {{bind-attr class=\":fa iconClass\"}}></i></a>\n  {{else}}\n    <a {{bind-attr href=\"href\"}} {{bind-attr title=\"title\"}} target=\"_blank\"><i {{bind-attr class=\":fa iconClass\"}}></i></a>\n  {{/if}}");
Ember.TEMPLATES["site_map"] = Ember.Handlebars.compile("<section class=\"d-dropdown\" id=\"site-map-dropdown\">\n    <ul class=\"location-links\">\n      {{#if showAdminLinks}}\n        <li>\n          <a href=\"/admin\" class=\"admin-link\"><i class='fa fa-wrench'></i>{{i18n admin_title}}</a>\n        </li>\n        <li>\n          <a href=\"/admin/flags/active\" class=\"flagged-posts-link\">\n            <i class='fa fa-flag'></i>{{i18n flags_title}}\n            {{#if flaggedPostsCount}}\n              <span title='{{i18n notifications.total_flagged}}' class='badge-notification flagged-posts'>{{flaggedPostsCount}}</span>\n            {{/if}}\n          </a>\n        </li>\n      {{/if}}\n      <li>\n        <a href=\"/latest\" title=\"{{i18n filters.latest.help}}\" class=\"latest-topics-link\">{{i18n filters.latest.title}}</a>\n      </li>\n      {{#if showBadgesLink}}\n        <li>\n          <a href=\"{{unbound badgesUrl}}\" class=\"badge-link\">{{i18n badges.title}}</a>\n        </li>\n      {{/if}}\n      {{#if showKeyboardShortcuts}}\n        <li><a href=\"#\" {{action keyboardShortcuts}} class=\"keyboard-shortcuts-link\">{{i18n keyboard_shortcuts_help.title}}</a>\n      {{/if}}\n      <li>\n        <a href=\"{{unbound faqUrl}}\" class=\"faq-link\">{{i18n faq}}</a>\n      </li>\n      <li>\n        {{#link-to 'about'}}{{i18n about.simple_title}}{{/link-to}}\n      </li>\n      {{#if showMobileToggle}}\n        <li><a href=\"#\" class=\"mobile-toggle-link\" {{action toggleMobileView}}>{{boundI18n mobileViewLinkTextKey}}</a></li>\n      {{/if}}\n    </ul>\n  \n    {{#if categories}}\n      <ul class=\"category-links\">\n        <li class=\"heading\" title=\"{{i18n filters.categories.help}}\">\n          {{#link-to \"discovery.categories\"}}{{i18n filters.categories.title}}{{/link-to}}\n        </li>\n  \n        {{#each categories itemController='site-map-category'}}\n          <li class=\"category\">\n            {{category-link this allowUncategorized=true showParent=true}}\n  \n            {{#if unreadTotal}}\n              <a href={{unbound url}} class='badge badge-notification'>{{unreadTotal}}</a>\n            {{/if}}\n  \n            {{#if showTopicCount}}\n              <b class=\"topics-count\">{{unbound topic_count}}</b>\n            {{/if}}\n          </li>\n        {{/each}}\n      </ul>\n    {{/if}}\n  </section>");
Ember.TEMPLATES["static"] = Ember.Handlebars.compile("<div class='container'>\n    <div class='contents clearfix body-page'>\n      {{{html}}}\n  \n      {{#if showLoginButton}}\n        <button class=\"btn btn-primary\" {{action showLogin}}><i class=\"fa fa-user\"></i>{{i18n log_in}}</button>\n      {{/if}}\n    </div>\n  </div>");
Ember.TEMPLATES["topic-entrance"] = Ember.Handlebars.compile("<button {{action enterTop}} class='btn full no-text jump-top'>\n    <i class='fa fa-caret-up'></i> {{{topDate}}}\n  </button>\n  <button {{action enterBottom}} class='btn full no-text jump-bottom'>\n    {{{bottomDate}}} <i class='fa fa-caret-down'></i>\n  </button>");
Ember.TEMPLATES["topic-progress"] = Ember.Handlebars.compile("{{#if expanded}}\n    <nav id='topic-progress-expanded'>\n      <button {{action jumpTop}} {{bind-attr disabled=jumpTopDisabled}} class='btn full no-text'>\n        <i class=\"fa fa-caret-up\"></i>\n        {{i18n topic.progress.go_top}}\n      </button>\n      <div class='jump-form'>\n        {{input value=toPostIndex}} <button {{action jumpPost}} class='btn'>{{i18n topic.progress.go}}</button>\n      </div>\n      <button {{action jumpBottom}} {{bind-attr disabled=jumpBottomDisabled}} class='btn full no-text jump-bottom'>\n        {{i18n topic.progress.go_bottom}}\n        <i class=\"fa fa-caret-down\"></i>\n      </button>\n    </nav>\n  {{/if}}\n  <nav id='topic-progress' title=\"{{i18n topic.progress.title}}\" {{bind-attr class=\"hideProgress:hidden\"}}>\n    <div class='nums'>\n      <h4>{{progressPosition}}</h4><span {{bind-attr class=\"hugeNumberOfPosts:hidden\"}}> <span>/</span> <h4>{{postStream.filteredPostsCount}}</h4></span>\n    </div>\n    <i {{bind-attr class=\":fa expanded::fa-sort\"}}></i>\n    <div class='bg'>&nbsp;</div>\n  </nav>");
Ember.TEMPLATES["topic"] = Ember.Handlebars.compile("<div class='container'>\n    {{custom-html \"top\"}}\n    {{Discourse.globalNotice}}\n    {{discourse-banner user=currentUser banner=Discourse.banner overlay=view.hasScrolled}}\n  </div>\n  \n  {{#if postStream.loaded}}\n  \n    {{#if postStream.firstPostPresent}}\n      <div id='topic-title'>\n        <div class='container'>\n          <div class='inner'>\n  \n            {{#if showStarButton}}\n              <a {{bind-attr class=\":star starred:starred\"}} {{action toggleStar}} href='#' {{bind-attr title=\"starTooltip\"}}></a>\n            {{/if}}\n  \n            {{#if editingTopic}}\n              {{#if isPrivateMessage}}\n                <span class=\"private-message-glyph\">{{icon envelope}}</span>\n              {{else}}\n                {{category-chooser valueAttribute=\"id\" value=newCategoryId source=category_id}}\n              {{/if}}\n              {{text-field id='edit-title' value=newTitle maxLength=maxTitleLength}}\n  \n              <button class='btn btn-primary btn-small no-text' {{action finishedEditingTopic}}><i class='fa fa-check'></i></button>\n              <button class='btn btn-small no-text' {{action cancelEditingTopic}}><i class='fa fa-times'></i></button>\n            {{else}}\n              <h1>\n                <span class=\"private-message-glyph\"><i class='fa fa-envelope'></i></span>\n                {{#unless isPrivateMessage}}\n                  {{#if category.parentCategory}}\n                    {{bound-category-link category.parentCategory}}\n                  {{/if}}\n                  {{bound-category-link category}}\n                {{/unless}}\n                {{#if details.loaded}}\n                  {{topic-status topic=model}}\n                  <a href='{{unbound url}}' {{action jumpTop}}>\n                    {{#if topicSaving}}\n                      {{fancy_title}}\n                    {{else}}\n                      {{{fancy_title}}}\n                    {{/if}}\n                  </a>\n                {{/if}}\n  \n  \n                {{#if details.can_edit}}\n                  <a href='#' {{action editTopic}} class='edit-topic' title='{{i18n edit}}'><i class=\"fa fa-pencil\"></i></a>\n                {{/if}}\n              </h1>\n            {{/if}}\n            {{plugin-outlet \"topic-title\"}}\n          </div>\n        </div>\n      </div>\n    {{/if}}\n  \n    <div class=\"container posts\">\n  \n      {{view Discourse.SelectedPostsView}}\n  \n      <div class=\"row\">\n        <section class=\"topic-area\" id='topic' data-topic-id='{{unbound id}}'>\n          <div class='posts-wrapper'>\n  \n            {{render 'topic-progress'}}\n  \n            {{#if postStream.loadingAbove}}\n              <div class='spinner'>{{i18n loading}}</div>\n            {{/if}}\n  \n            {{#unless postStream.loadingFilter}}\n              {{cloaked-collection cloakView=\"post\"\n                                   idProperty=\"post_number\"\n                                   defaultHeight=\"200\"\n                                   content=postStream.posts\n                                   slackRatio=\"15\"\n                                   loadingHTML=controller.loadingHTML\n                                   preservesContext=\"true\"\n                                   uncloakDefault=\"true\"\n                                   offsetFixedTop=\"header\"\n                                   offsetFixedBottom=\"#reply-control\"}}\n            {{/unless}}\n  \n            {{#if postStream.loadingBelow}}\n              <div class='spinner'>{{i18n loading}}</div>\n            {{/if}}\n          </div>\n          <div id='topic-bottom'></div>\n  \n          {{#if postStream.loadingFilter}}\n            <div class='spinner small'>{{i18n loading}}</div>\n          {{else}}\n            {{#if postStream.loadedAllPosts}}\n  \n              {{view 'topic-closing' topic=model}}\n              {{view 'topic-footer-buttons' topic=model}}\n  \n              {{#if details.suggested_topics.length}}\n                <div id='suggested-topics'>\n                  <h3>{{i18n suggested_topics.title}}</h3>\n                  <div class='topics'>\n                    {{basic-topic-list topics=details.suggested_topics postsAction=\"showTopicEntrance\"}}\n                  </div>\n                  <h3>{{{view.browseMoreMessage}}}</h3>\n                </div>\n              {{/if}}\n            {{/if}}\n          {{/if}}\n  \n  \n        </section>\n      </div>\n  \n    </div>\n  \n  {{else}}\n    {{#if hasError}}\n      <div class='container'>\n      {{#if notFoundHtml}}\n        {{{notFoundHtml}}}\n      {{else}}\n        <div class=\"topic-error\">\n          {{message}}\n          {{#if noRetry}}\n            {{#unless currentUser}}\n                <button {{action showLogin}} class='btn btn-primary topic-retry'><i class=\"fa fa-user\"></i>{{i18n log_in}}</button>\n            {{/unless}}\n          {{else}}\n            <button class=\"btn btn-primary topic-retry\" {{action retryLoading}}>{{i18n errors.buttons.again}}</button>\n          {{/if}}\n        </div>\n        {{#if retrying}}\n          <div class='spinner'>{{i18n loading}}</div>\n        {{/if}}\n      {{/if}}\n      </div>\n    {{else}}\n      <div class='container'>\n        <div class='spinner'>{{i18n loading}}</div>\n      </div>\n    {{/if}}\n  {{/if}}\n  \n  {{render \"share\"}}\n  \n  {{#if currentUser.enable_quoting}}\n    {{render \"quote-button\"}}\n  {{/if}}\n  \n  {{#if currentUser.canManageTopic}}\n    {{render \"topicAdminMenu\" content}}\n  {{/if}}");
Ember.TEMPLATES["topic_admin_menu"] = Ember.Handlebars.compile("{{#if menuVisible}}\n    <div class=\"topic-admin-menu\">\n      <h3>{{i18n admin_title}}</h3>\n  \n      <ul>\n          <li>\n            <button {{action toggleMultiSelect}} class='btn btn-admin'><i class='fa fa-tasks'></i> {{i18n topic.actions.multi_select}}</button>\n          </li>\n  \n        {{#if details.can_delete}}\n          <li>\n            <button {{action deleteTopic}} class='btn btn-admin btn-danger'><i class='fa fa-trash-o'></i> {{i18n topic.actions.delete}}</button>\n          </li>\n        {{/if}}\n  \n        {{#if showRecover}}\n          <li>\n            <button {{action recoverTopic}} class='btn btn-admin'><i class='fa fa-undo'></i> {{i18n topic.actions.recover}}</button>\n          </li>\n        {{/if}}\n  \n        <li>\n          {{#if closed}}\n            <button {{action toggleClosed}} class='btn btn-admin'><i class='fa fa-unlock'></i> {{i18n topic.actions.open}}</button>\n          {{else}}\n            <button {{action toggleClosed}} class='btn btn-admin'><i class='fa fa-lock'></i> {{i18n topic.actions.close}}</button>\n            <button {{action showAutoClose}} class='btn btn-admin'><i class='fa fa-clock-o'></i> {{i18n topic.actions.auto_close}}</button>\n          {{/if}}\n        </li>\n  \n        {{#unless isPrivateMessage}}\n            <li>\n              {{#if isBanner}}\n                <button {{action removeBanner}} class='btn btn-admin'><i class='fa fa-bullhorn'></i> {{i18n topic.actions.remove_banner}}</button>\n              {{else}}\n                {{#if visible}}\n                  <button {{action makeBanner}} class='btn btn-admin'><i class='fa fa-bullhorn'></i> {{i18n topic.actions.make_banner}}</button>\n                {{/if}}\n              {{/if}}\n            </li>\n  \n            <li>\n              {{#if pinned_at}}\n                <button {{action togglePinned}} class='btn btn-admin'><i class='fa fa-thumb-tack'></i> {{i18n topic.actions.unpin}}</button>\n              {{else}}\n                {{#if visible}}\n                  <button {{action togglePinned}} class='btn btn-admin'><i class='fa fa-thumb-tack'></i> {{i18n topic.actions.pin}}</button>\n                  <button {{action togglePinnedGlobally}} class='btn btn-admin'><i class='fa fa-thumb-tack'></i> {{i18n topic.actions.pin_globally}}</button>\n                {{/if}}\n              {{/if}}\n            </li>\n        {{/unless}}\n  \n        <li>\n          {{#if archived}}\n            <button {{action toggleArchived}} class='btn btn-admin'><i class='fa fa-folder'></i> {{i18n topic.actions.unarchive}}</button>\n          {{else}}\n            <button {{action toggleArchived}} class='btn btn-admin'><i class='fa fa-folder'></i> {{i18n topic.actions.archive}}</button>\n          {{/if}}\n        </li>\n  \n        <li>\n          {{#if visible}}\n            <button {{action toggleVisibility}} class='btn btn-admin'><i class='fa fa-eye-slash'></i> {{i18n topic.actions.invisible}}</button>\n          {{else}}\n            <button {{action toggleVisibility}} class='btn btn-admin'><i class='fa fa-eye'></i> {{i18n topic.actions.visible}}</button>\n          {{/if}}\n        </li>\n          \n      </ul>\n    </div>\n  {{else}}\n    <button class='btn no-text' id='show-topic-admin' {{action show}}><i class='fa fa-wrench'></i></button>\n  {{/if}}");
Ember.TEMPLATES["user-expansion"] = Ember.Handlebars.compile("{{#if username}}\n    {{#link-to 'user' user}}{{bound-avatar avatar \"huge\"}}{{/link-to}}\n  \n    <div class=\"names\">\n      <h1 {{bind-attr class=\"staff new_user\"}}>\n        {{#link-to 'user' user}}{{username}}{{/link-to}}\n      </h1>\n      {{#if showName}}\n        <h2>{{#link-to 'user' user}}{{name}}{{/link-to}}</h2>\n      {{/if}}\n    </div>\n  \n    {{#if showBadges}}\n      <div class=\"badge-section\">\n        {{#each user.featured_user_badges}}\n          {{user-badge badge=badge}}\n        {{/each}}\n        {{#if showMoreBadges}}\n          {{#link-to 'user.badges' user class=\"btn more-user-badges\"}}\n            {{i18n badges.more_badges count=moreBadgesCount}}\n          {{/link-to}}\n        {{/if}}\n      </div>\n    {{/if}}\n  \n    {{#if user}}\n      <div class=\"metadata\">\n        {{#if user.location}}<h3><i class=\"fa fa-map-marker\"></i> {{user.location}}</h3>{{/if}}\n        <h3>{{i18n last_post}} {{date path=\"user.last_posted_at\" leaveAgo=\"true\"}}</h3>\n        <h3>{{i18n joined}} {{date path=\"user.created_at\" leaveAgo=\"true\"}}</h3>\n        {{groups-list groups=user.custom_groups}}\n      </div>\n  \n      <div class='bottom'>\n        {{#if user.bio_cooked}}<div class='bio'>{{{user.bio_cooked}}}</div>{{/if}}\n  \n        {{#if user.can_send_private_message_to_user}}\n          <button class='btn btn-primary' {{action composePrivateMessage user}}><i class='fa fa-envelope'></i>{{i18n user.private_message}}</button>\n        {{/if}}\n  \n        {{#link-to 'user' user class=\"btn\"}}<i class='fa fa-user'></i>{{i18n user.profile}}{{/link-to}}\n  \n        {{#if showFilter}}\n          <button class='btn' {{action togglePosts user}}><i class='fa fa-filter'></i>{{i18n topic.filter_to username=\"username\" post_count=\"participant.post_count\"}}</button>\n        {{/if}}\n  \n        {{#if hasUserFilters}}\n          <button class='btn' {{action cancelFilter}}><i class='fa fa-times'></i>{{i18n topic.filters.cancel}}</button>\n        {{/if}}\n  \n      </div>\n    {{else}}\n      <p class='loading'>{{i18n loading}}</p>\n    {{/if}}\n  {{/if}}");
Ember.TEMPLATES["user/about"] = Ember.Handlebars.compile("<form class=\"form-horizontal\">\n  \n    <div class=\"control-group\">\n      <div class=\"controls\">\n        <h3>{{i18n user.change_about.title}}</h3>\n      </div>\n    </div>\n  \n    {{#if error}}\n      <div class=\"control-group\">\n        <div class=\"instructions\">\n          <div class='alert alert-error'>{{i18n user.change_about.error}}</div>\n        </div>\n      </div>\n    {{/if}}\n  \n    <div class=\"control-group\">\n      <label class=\"control-label\">{{i18n user.bio}}</label>\n      <div class=\"controls\">\n        {{pagedown-editor value=bio_raw}}\n      </div>\n    </div>\n  \n    <div class=\"control-group\">\n      <div class=\"controls\">\n          <button {{action changeAbout}} {{bind-attr disabled=\"saveDisabled\"}} class=\"btn btn-primary\">{{saveButtonText}}</button>\n          {{#if saved}}{{i18n saved}}{{/if}}\n      </div>\n    </div>\n  \n  </form>");
Ember.TEMPLATES["user/activity"] = Ember.Handlebars.compile("{{outlet activity}}");
Ember.TEMPLATES["user/badge-title"] = Ember.Handlebars.compile("<section class='user-content'>\n    <form class=\"form-horizontal\">\n  \n      <div class=\"control-group\">\n        <div class=\"controls\">\n          <h3>{{i18n badges.select_badge_for_title}}</h3>\n        </div>\n      </div>\n  \n      <div class=\"control-group\">\n        <label class=\"control-label\"></label>\n        <div class=\"controls\">\n          {{combo-box valueAttribute=\"id\" value=selectedUserBadgeId nameProperty=\"badge.displayName\" content=selectableUserBadges}}\n        </div>\n      </div>\n  \n      <div class=\"control-group\">\n        <div class=\"controls\">\n          <button class=\"btn btn-primary\" {{bind-attr disabled=disableSave}} {{action save}}>{{savingStatus}}</button>\n          {{#if saved}}{{i18n saved}}{{/if}}\n        </div>\n      </div>\n  \n    </form>\n  </section>");
Ember.TEMPLATES["user/badges"] = Ember.Handlebars.compile("<section class='user-content user-badges-list'>\n    {{#each}}\n      {{user-badge badge=badge count=count}}\n    {{/each}}\n  </section>");
Ember.TEMPLATES["user/email"] = Ember.Handlebars.compile("<section class='user-content'>\n    <form class=\"form-horizontal\">\n  \n      <div class=\"control-group\">\n        <div class=\"controls\">\n          <h3>{{i18n user.change_email.title}}</h3>\n        </div>\n      </div>\n  \n      {{#if success}}\n          <div class=\"control-group\">\n            <div class=\"instructions\">\n              <p>{{i18n user.change_email.success}}</p>\n            </div>\n          </div>\n      {{else}}\n        {{#if error}}\n          <div class=\"control-group\">\n            <div class=\"instructions\">\n              <div class='alert alert-error'>{{i18n user.change_email.error}}</div>\n            </div>\n          </div>\n        {{/if}}\n  \n        <div class=\"control-group\">\n          <label class=\"control-label\">{{i18n user.email.title}}</label>\n          <div class=\"controls\">\n            {{text-field value=newEmail id=\"change_email\" classNames=\"input-xxlarge\"}}\n          </div>\n          <div class='instructions'>\n            {{#if taken}}\n              {{i18n user.change_email.taken}}\n            {{else}}\n              {{i18n user.email.instructions}}\n            {{/if}}\n  \n          </div>\n        </div>\n  \n        <div class=\"control-group\">\n          <div class=\"controls\">\n              <button {{action changeEmail}} {{bind-attr disabled=\"saveDisabled\"}} class=\"btn btn-primary\">{{saveButtonText}}</button>\n          </div>\n        </div>\n      {{/if}}\n  \n    </form>\n  </section>");
Ember.TEMPLATES["user/invited"] = Ember.Handlebars.compile("{{#if canInviteToForum}}\n    <section class='user-content'>\n  \n      <h2>{{i18n user.invited.title}}</h2>\n  \n      <div class=\"pull-right\">\n        <button {{action showInvite}} class='btn'>{{i18n user.invited.create}}</button>\n        {{#if canBulkInvite}}\n          {{resumable-upload target=\"/invites/upload\" success=\"uploadSuccess\" error=\"uploadError\" uploadText=uploadText}}\n        {{/if}}\n      </div>\n  \n      {{#if showSearch}}\n        <form>\n          {{text-field value=searchTerm placeholderKey=\"user.invited.search\"}}\n        </form>\n      {{/if}}\n  \n      {{#if model.invites}}\n        <table class='table invite-list'>\n          <tr>\n            <th>{{i18n user.invited.user}}</th>\n            <th>{{i18n user.invited.redeemed_at}}</th>\n            {{#if can_see_invite_details}}\n              <th>{{i18n user.last_seen}}</th>\n              <th>{{i18n user.invited.topics_entered}}</th>\n              <th>{{i18n user.invited.posts_read_count}}</th>\n              <th>{{i18n user.invited.time_read}}</th>\n              <th>{{i18n user.invited.days_visited}}</th>\n            {{/if}}\n          </tr>\n          {{#each invite in model.invites}}\n            <tr>\n              {{#if invite.user}}\n                <td>\n                  {{#link-to 'user' invite.user}}{{avatar invite.user imageSize=\"tiny\"}}{{/link-to}}\n                  {{#link-to 'user' invite.user}}{{invite.user.username}}{{/link-to}}\n                </td>\n                <td>{{date invite.redeemed_at}}</td>\n                {{#if can_see_invite_details}}\n                  <td>{{date invite.user.last_seen_at}}</td>\n                  <td>{{number invite.user.topics_entered}}</td>\n                  <td>{{number invite.user.posts_read_count}}</td>\n                  <td>{{{unbound invite.user.time_read}}}</td>\n                  <td><span title=\"{{i18n user.invited.days_visited}}\">{{{unbound invite.user.days_visited}}}</span>\n                      /\n                    <span title=\"{{i18n user.invited.account_age_days}}\">{{{unbound invite.user.days_since_created}}}</span></td>\n                {{/if}}\n              {{else}}\n                <td>{{unbound invite.email}}</td>\n                <td colspan='6'>\n                  {{#if invite.expired}}\n                    {{i18n user.invited.expired}}\n                  {{/if}}\n                  {{#if invite.rescinded}}\n                    {{i18n user.invited.rescinded}}\n                  {{else}}\n                    <button class='btn' {{action rescind invite}}><i class=\"fa fa-times\"></i>{{i18n user.invited.rescind}}</button>\n                  {{/if}}\n                </td>\n              {{/if}}\n            </tr>\n          {{/each}}\n        </table>\n        {{#if invitesLoading}}\n          <div class='spinner'>{{i18n loading}}</div>\n        {{/if}}\n  \n      {{else}}\n        {{#if canBulkInvite}}\n          {{{i18n user.invited.bulk_invite.none}}}\n        {{else}}\n          {{i18n user.invited.none}}\n        {{/if}}\n      {{/if}}\n  \n    </section>\n  {{/if}}");
Ember.TEMPLATES["user/posts"] = Ember.Handlebars.compile("{{#each model.content}}\n    <div {{bind-attr class=\":item hidden deleted moderator_action\"}}>\n      <div class=\"clearfix info\">\n        <a href=\"{{unbound usernameUrl}}\" class=\"avatar-link\">\n          <div class=\"avatar-wrapper\">\n            {{avatar this imageSize=\"large\" extraClasses=\"actor\" ignoreTitle=\"true\"}}\n          </div>\n        </a>\n        <span class=\"time\">\n          {{date path=\"created_at\" leaveAgo=\"true\"}}\n        </span>\n        <span class=\"title\">\n          <a href=\"{{unbound url}}\">{{unbound topic_title}}</a>\n          {{category-link category}}\n        </span>\n        <span class=\"type\">\n          {{descriptionHtml}}\n        </span>\n        {{#if deleted}}\n          <span class=\"delete-info\">\n            <i class=\"fa fa-trash-o\"></i> {{avatar deleted_by imageSize=\"tiny\" extraClasses=\"actor\" ignoreTitle=\"true\"}} {{date path=\"deleted_at\" leaveAgo=\"true\"}}\n          </span>\n        {{/if}}\n      </div>\n      <p class=\"excerpt\">\n        {{{excerpt}}}\n      </p>\n    </div>\n  {{/each}}\n  {{#if loading}}\n    <div class='spinner'>{{i18n loading}}</div>\n  {{/if}}");
Ember.TEMPLATES["user/preferences"] = Ember.Handlebars.compile("<section class='user-content'>\n  \n    <form class=\"form-horizontal\">\n  \n      <div class=\"control-group save-button\" id='save-button-top'>\n        <div class=\"controls\">\n          {{partial 'user/preferences/saveButton'}}\n        </div>\n      </div>\n  \n      <div class=\"control-group pref-username\">\n        <label class=\"control-label\">{{i18n user.username.title}}</label>\n        <div class=\"controls\">\n          <span class='static'>{{username}}</span>\n          {{#if can_edit_username}}\n            {{#link-to \"preferences.username\" class=\"btn btn-small pad-left no-text\"}}<i class=\"fa fa-pencil\"></i>{{/link-to}}\n          {{/if}}\n        </div>\n        <div class='instructions'>\n          {{{i18n user.username.short_instructions username=\"username\"}}}\n        </div>\n      </div>\n  \n      {{#if canEditName}}\n        <div class=\"control-group pref-name\">\n          <label class=\"control-label\">{{i18n user.name.title}}</label>\n          <div class=\"controls\">\n            {{#if can_edit_name}}\n              {{text-field value=newNameInput classNames=\"input-xxlarge\"}}\n            {{else}}\n              <span class='static'>{{name}}</span>\n            {{/if}}\n          </div>\n          <div class='instructions'>\n            {{i18n user.name.instructions}}\n          </div>\n        </div>\n      {{/if}}\n  \n      {{#if canSelectTitle}}\n        <div class=\"control-group pref-title\">\n          <label class=\"control-label\">{{i18n user.title.title}}</label>\n          <div class=\"controls\">\n            <span class=\"static\">{{title}}</span>\n            {{#link-to \"preferences.badgeTitle\" class=\"btn btn-small pad-left no-text\"}}<i class=\"fa fa-pencil\"></i>{{/link-to}}\n          </div>\n        </div>\n      {{/if}}\n  \n      <div class=\"control-group pref-email\">\n        <label class=\"control-label\">{{i18n user.email.title}}</label>\n        <div class=\"controls\">\n          <span class='static'>{{email}}</span>\n          {{#if can_edit_email}}\n            {{#link-to \"preferences.email\" class=\"btn btn-small pad-left no-text\"}}<i class=\"fa fa-pencil\"></i>{{/link-to}}\n          {{/if}}\n        </div>\n        <div class='instructions'>\n          {{i18n user.email.instructions}}\n        </div>\n      </div>\n  \n      {{#if canChangePassword}}\n      <div class=\"control-group pref-password\">\n        <label class=\"control-label\">{{i18n user.password.title}}</label>\n        <div class=\"controls\">\n          <a href=\"#\" {{action changePassword}} class='btn'><i class=\"fa fa-envelope\"></i>\n            {{#if no_password}}\n              {{i18n user.change_password.set_password}}\n            {{else}}\n              {{i18n user.change_password.action}}\n            {{/if}}\n          </a>\n          {{passwordProgress}}\n        </div>\n      </div>\n      {{/if}}\n  \n      <div class=\"control-group pref-avatar\">\n        <label class=\"control-label\">{{i18n user.avatar.title}}</label>\n        <div class=\"controls\">\n          {{bound-avatar model \"large\"}}\n          {{#if allowAvatarUpload}}\n            <button {{action showAvatarSelector}} class=\"btn pad-left no-text\"><i class=\"fa fa-pencil\"></i></button>\n          {{else}} {{#unless ssoOverridesAvatar}}\n            <a href=\"//gravatar.com/emails\" target=\"_blank\" title=\"{{i18n user.change_avatar.gravatar_title}}\" class=\"btn no-text\"><i class=\"fa fa-pencil\"></i></a>\n          {{/unless}} {{/if}}\n        </div>\n      </div>\n  \n      {{#if Discourse.SiteSettings.allow_profile_backgrounds}}\n      <div class=\"control-group pref-profile-bg\">\n        <label class=\"control-label\">{{i18n user.change_profile_background.title}}</label>\n        <div class=\"controls\">\n          {{image-uploader uploadUrl=imageUploadUrl\n                           imageUrl=profile_background\n                           instantDelete=\"true\"\n                           type=\"profile_background\"}}\n        </div>\n      </div>\n      {{/if}}\n  \n      {{#if allowUserLocale}}\n        <div class=\"control-group pref-locale\">\n          <label class=\"control-label\">{{i18n user.locale.title}}</label>\n          <div class=\"controls\">\n            {{combo-box valueAttribute=\"value\" content=availableLocales value=locale none=\"user.locale.default\"}}\n          </div>\n          <div class='instructions'>\n            {{i18n user.locale.instructions}}\n          </div>\n        </div>\n      {{/if}}\n  \n      <div class=\"control-group pref-bio\">\n        <label class=\"control-label\">{{i18n user.bio}}</label>\n        <div class=\"controls bio-composer\">\n          {{pagedown-editor value=bio_raw}}\n        </div>\n      </div>\n  \n      <div class=\"control-group pref-location\">\n        <label class=\"control-label\">{{i18n user.location}}</label>\n        <div class=\"controls\">\n          {{input type=\"text\" value=location class=\"input-xxlarge\"}}\n        </div>\n      </div>\n  \n      <div class=\"control-group pref-website\">\n        <label class=\"control-label\">{{i18n user.website}}</label>\n        <div class=\"controls\">\n          {{input type=\"text\" value=website class=\"input-xxlarge\"}}\n        </div>\n      </div>\n  \n      <div class=\"control-group pref-email-settings\">\n        <label class=\"control-label\">{{i18n user.email_settings}}</label>\n        {{preference-checkbox labelKey=\"user.email_digests.title\" checked=email_digests}}\n        {{#if email_digests}}\n          <div class='controls controls-dropdown'>\n            {{combo-box valueAttribute=\"value\" content=digestFrequencies value=digest_after_days}}\n          </div>\n        {{/if}}\n        {{preference-checkbox labelKey=\"user.email_private_messages\" checked=email_private_messages}}\n        {{preference-checkbox labelKey=\"user.email_direct\" checked=email_direct}}\n        {{preference-checkbox labelKey=\"user.mailing_list_mode\" checked=mailing_list_mode}}\n        {{preference-checkbox labelKey=\"user.email_always\" checked=email_always}}\n  \n        <div class='instructions'>\n          {{i18n user.email.frequency}}\n        </div>\n      </div>\n  \n      <div class=\"control-group other\">\n        <label class=\"control-label\">{{i18n user.other_settings}}</label>\n        <div class=\"controls controls-dropdown\">\n          <label>{{i18n user.auto_track_topics}}</label>\n          {{combo-box valueAttribute=\"value\" content=autoTrackDurations value=auto_track_topics_after_msecs}}\n        </div>\n  \n        <div class=\"controls controls-dropdown\">\n          <label>{{i18n user.new_topic_duration.label}}</label>\n          {{combo-box valueAttribute=\"value\" content=considerNewTopicOptions value=new_topic_duration_minutes}}\n        </div>\n  \n        {{preference-checkbox labelKey=\"user.external_links_in_new_tab\" checked=external_links_in_new_tab}}\n        {{preference-checkbox labelKey=\"user.enable_quoting\" checked=enable_quoting}}\n        {{preference-checkbox labelKey=\"user.dynamic_favicon\" checked=dynamic_favicon}}\n        {{preference-checkbox labelKey=\"user.disable_jump_reply\" checked=disable_jump_reply}}\n        {{#unless Discourse.SiteSettings.edit_history_visible_to_public}}\n          {{preference-checkbox labelKey=\"user.edit_history_public\" checked=edit_history_public}}\n        {{/unless}}\n        {{plugin-outlet \"user_custom_preferences\"}}\n      </div>\n  \n      <div class=\"control-group category\">\n        <label class=\"control-label\">{{i18n user.categories_settings}}</label>\n        <div class=\"controls category-controls\">\n          <label>{{i18n user.watched_categories}}</label>\n          {{category-group categories=watchedCategories blacklist=selectedCategories}}\n        </div>\n        <div class=\"instructions\">{{i18n user.watched_categories_instructions}}</div>\n        <div class=\"controls category-controls\">\n          <label>{{i18n user.tracked_categories}}</label>\n          {{category-group categories=trackedCategories blacklist=selectedCategories}}\n        </div>\n        <div class=\"instructions\">{{i18n user.tracked_categories_instructions}}</div>\n        <div class=\"controls category-controls\">\n          <label>{{i18n user.muted_categories}}</label>\n          {{category-group categories=mutedCategories blacklist=selectedCategories}}\n        </div>\n        <div class=\"instructions\">{{i18n user.muted_categories_instructions}}</div>\n      </div>\n  \n      <div class=\"control-group\">\n        <div class=\"controls\">\n          {{partial 'user/preferences/saveButton'}}\n        </div>\n      </div>\n  \n      {{#if canDeleteAccount}}\n        <div class=\"control-group delete-account\">\n          <hr/>\n          <div class=\"controls\">\n              <button {{action delete}} {{bind-attr disabled=\"deleteDisabled\"}} class=\"btn btn-danger\"><i class=\"fa fa-trash-o\"></i> {{i18n user.delete_account}}</button>\n          </div>\n        </div>\n      {{/if}}\n  \n    </form>\n  </section>");
Ember.TEMPLATES["user/preferences/_save_button"] = Ember.Handlebars.compile("<button {{action save}} {{bind-attr disabled=\"saveDisabled\"}} class=\"btn btn-primary\">{{saveButtonText}}</button>\n  {{#if saved}}{{i18n saved}}{{/if}}");
Ember.TEMPLATES["user/stream"] = Ember.Handlebars.compile("{{#grouped-each model.content}}\n    <div {{bind-attr class=\":item hidden deleted moderator_action\"}}>\n      <div class='clearfix info'>\n        <a href=\"{{unbound userUrl}}\" class='avatar-link'><div class='avatar-wrapper'>{{avatar this imageSize=\"large\" extraClasses=\"actor\" ignoreTitle=\"true\"}}</div></a>\n        <span class='time'>{{date path=\"created_at\" leaveAgo=\"true\"}}</span>\n        <span class=\"title\">\n          <a href=\"{{unbound postUrl}}\">{{unbound title}}</a>\n          {{category-link category}}\n        </span>\n        <span class=\"type\">{{unbound descriptionHtml}}</span>\n      </div>\n      <p class='excerpt'>{{{unbound excerpt}}}</p>\n      {{#grouped-each children}}\n        <div class='child-actions'>\n          <i class=\"icon {{unbound icon}}\"></i>\n          {{#grouped-each items}}\n            {{#if bookmarkType}}\n              <button class=\"btn btn-default remove-bookmark\" {{action removeBookmark this}}>\n                <i class=\"fa fa-times\"></i>\n                {{i18n \"bookmarks.remove\"}}\n              </button>\n            {{/if}}\n            <a href=\"{{unbound userUrl}}\" class='avatar-link'><div class='avatar-wrapper'>{{avatar this imageSize=\"tiny\" extraClasses=\"actor\" ignoreTitle=\"true\"}}</div></a>\n            {{#if edit_reason}} &mdash; <span class=\"edit-reason\">{{unbound edit_reason}}</span>{{/if}}\n          {{/grouped-each}}\n        </div>\n      {{/grouped-each}}\n    </div>\n  {{/grouped-each}}\n  {{#if loading}}\n    <div class='spinner'>{{i18n loading}}</div>\n  {{/if}}");
Ember.TEMPLATES["user/user"] = Ember.Handlebars.compile("<div class='container'>\n    {{custom-html \"top\"}}\n    {{Discourse.globalNotice}}\n  </div>\n  \n  {{#unless loading}}\n    <div class=\"container\">\n  \n      <section class='user-navigation'>\n  \n        <ul class='action-list nav-stacked'>\n          {{activity-filter count=statsCountNonPM user=model userActionType=userActionType indexStream=indexStream}}\n          {{#each stat in statsExcludingPms}}\n            {{activity-filter content=stat user=model userActionType=userActionType indexStream=indexStream}}\n          {{/each}}\n          {{#if showBadges}}\n            {{#link-to 'user.badges' tagName=\"li\"}}\n              {{#link-to 'user.badges'}}\n                <i class='glyph fa fa-certificate'></i>\n                {{i18n badges.title}}\n                <span class='count'>({{badge_count}})</span>\n                <span class='fa fa-chevron-right'></span>\n              {{/link-to}}\n            {{/link-to}}\n          {{/if}}\n        </ul>\n  \n        {{#if canSeePrivateMessages}}\n          <h3><i class='fa fa-envelope'></i> {{i18n user.private_messages}}</h3>\n          <ul class='action-list nav-stacked'>\n            <li {{bind-attr class=\":noGlyph privateMessagesActive:active\"}}>\n              {{#link-to 'userPrivateMessages.index' model}}\n                {{i18n user.messages.all}}\n                {{#if hasPMs}}<span class='count'>({{private_messages_stats.all}})</span>{{/if}}\n                <span class='fa fa-chevron-right'></span>\n              {{/link-to}}\n            </li>\n            <li {{bind-attr class=\":noGlyph privateMessagesMineActive:active\"}}>\n              {{#link-to 'userPrivateMessages.mine' model}}\n                {{i18n user.messages.mine}}\n                {{#if hasStartedPMs}}<span class='count'>({{private_messages_stats.mine}})</span>{{/if}}\n                <span class='fa fa-chevron-right'></span>\n              {{/link-to}}\n            </li>\n            <li {{bind-attr class=\":noGlyph privateMessagesUnreadActive:active\"}}>\n              {{#link-to 'userPrivateMessages.unread' model}}\n                {{i18n user.messages.unread}}\n                {{#if hasUnreadPMs}}<span class='badge-notification unread-private-messages'>{{private_messages_stats.unread}}</span>{{/if}}\n                <span class='fa fa-chevron-right'></span>\n              {{/link-to}}\n            </li>\n          </ul>\n        {{/if}}\n  \n      </section>\n  \n      <section class='user-main'>\n        <section {{bind-attr class=\"collapsedInfo :about\"}} {{bind-attr style=\"profileBackground\"}}>\n  \n          <div class='details'>\n            <div class='primary'>\n              <div class='staff-counters'>\n                {{#if number_of_flags_given}}\n                  <div><span class=\"pill helpful-flags\">{{number_of_flags_given}}</span>&nbsp;{{i18n user.staff_counters.flags_given}}</div>\n                {{/if}}\n                {{#if number_of_flagged_posts}}\n                  <div>\n                    {{#link-to 'user.flaggedPosts' this}}\n                      <span class=\"pill flagged-posts\">{{number_of_flagged_posts}}</span>&nbsp;{{i18n user.staff_counters.flagged_posts}}\n                    {{/link-to}}\n                  </div>\n                {{/if}}\n                {{#if number_of_deleted_posts}}\n                  <div>\n                    {{#link-to 'user.deletedPosts' this}}\n                      <span class=\"pill deleted-posts\">{{number_of_deleted_posts}}</span>&nbsp;{{i18n user.staff_counters.deleted_posts}}\n                    {{/link-to}}\n                  </div>\n                {{/if}}\n                {{#if number_of_suspensions}}\n                  <div><span class=\"pill suspensions\">{{number_of_suspensions}}</span>&nbsp;{{i18n user.staff_counters.suspensions}}</div>\n                {{/if}}\n              </div>\n  \n              {{bound-avatar model \"huge\"}}\n  \n              <div class=\"primary-textual\">\n                <h1>{{username}} {{{statusIcon}}}</h1>\n                <h2>{{name}}</h2>\n  \n                <div class='bio'>{{{bio_cooked}}}</div>\n  \n                {{groups-list groups=custom_groups}}\n  \n                {{plugin-outlet \"user-profile-primary\"}}\n  \n                {{#if isSuspended}}\n                  <div class='suspended'>\n                    <i class='fa fa-ban'></i>\n                    <b>{{i18n user.suspended_notice date=\"suspendedTillDate\"}}</b><br/>\n                    <b>{{i18n user.suspended_reason}}</b> {{suspend_reason}}\n                  </div>\n                {{/if}}\n              </div>\n            </div>\n  \n            <div class='secondary'>\n              <dl>\n                {{#if location}}\n                  <dd><i class=\"fa fa-map-marker\"></i> {{location}}</dd>\n                {{/if}}\n                {{#if websiteName}}\n                  <dt>{{i18n user.website}}</dt>\n                  <dd>\n                    {{#if linkWebsite}}\n                      <a {{bind-attr href=\"website\"}} rel=\"nofollow\" target=\"_blank\">{{websiteName}}</a>\n                    {{else}}\n                      <span {{bind-attr title=\"website\"}}>{{websiteName}}</span>\n                    {{/if}}\n                  </dd>\n                {{/if}}\n                {{#if created_at}}\n                  <dt>{{i18n user.created}}</dt><dd>{{bound-date created_at}}</dd>\n                {{/if}}\n                {{#if last_posted_at}}\n                  <dt>{{i18n user.last_posted}}</dt><dd>{{bound-date last_posted_at}}</dd>\n                {{/if}}\n                {{#if last_seen_at}}\n                  <dt>{{i18n user.last_seen}}</dt><dd>{{bound-date last_seen_at}}</dd>\n                {{/if}}\n                {{#if invited_by}}\n                  <dt>{{i18n user.invited_by}}</dt><dd>{{#link-to 'user' invited_by}}{{invited_by.username}}{{/link-to}}</dd>\n                {{/if}}\n                {{#if email}}\n                  <dt>{{i18n user.email.title}}</dt><dd {{bind-attr title=\"email\"}}>{{email}}</dd>\n                {{/if}}\n                <dt>{{i18n user.trust_level}}</dt><dd>{{trustLevel.name}}</dd>\n              </dl>\n              {{plugin-outlet \"user-profile-secondary\"}}\n            </div>\n  \n            <div style='clear: both'></div>\n          </div>\n  \n          <section class='controls'>\n            {{#if can_send_private_message_to_user}}\n              <button class='btn btn-primary' {{action composePrivateMessage}}>\n                <i class='fa fa-envelope'></i>\n                {{i18n user.private_message}}\n              </button>\n            {{/if}}\n  \n            {{#if viewingSelf}}\n              <button {{action \"logout\"}} class='btn btn-danger right'><i class='fa fa-sign-out'></i>{{i18n user.log_out}}</button>\n            {{/if}}\n  \n            {{#if currentUser.staff}}\n              <a {{bind-attr href=\"adminPath\"}} class='btn right'><i class=\"fa fa-wrench\"></i>{{i18n admin.user.show_admin_profile}}</a>\n            {{/if}}\n  \n            {{#if can_edit}}\n              {{#link-to 'preferences' class=\"btn right\"}}<i class='fa fa-cog'></i>{{i18n user.preferences}}{{/link-to}}\n            {{/if}}\n  \n            {{#if canInviteToForum}}\n              {{#link-to 'user.invited' class=\"btn right\"}}<i class='fa fa-envelope-o'></i>{{i18n user.invited.title}}{{/link-to}}\n            {{/if}}\n  \n          </section>\n        </section>\n  \n        {{outlet userOutlet}}\n      </section>\n  \n    </div>\n  {{/unless}}");
Ember.TEMPLATES["user/username"] = Ember.Handlebars.compile("<section class='user-content'>\n    <form class=\"form-horizontal\">\n  \n      <div class=\"control-group\">\n        <div class=\"controls\">\n          <h3>{{i18n user.change_username.title}}</h3>\n        </div>\n      </div>\n  \n      {{#if error}}\n        <div class=\"control-group\">\n          <div class=\"instructions\">\n            <div class='alert alert-error'>{{i18n user.change_username.error}}</div>\n          </div>\n        </div>\n      {{/if}}\n  \n      <div class=\"control-group\">\n        <label class=\"control-label\">{{i18n user.username.title}}</label>\n        <div class=\"controls\">\n          {{text-field value=newUsername id=\"change_username\" classNames=\"input-xxlarge\" maxlengthBinding=\"Discourse.SiteSettings.max_username_length\"}}\n        </div>\n        <div class='instructions'>\n          {{#if taken}}\n            {{i18n user.change_username.taken}}\n          {{/if}}\n          <span>{{ errorMessage }}</span>\n        </div>\n      </div>\n  \n      <div class=\"control-group\">\n        <div class=\"controls\">\n            <button {{action changeUsername}} {{bind-attr disabled=\"saveDisabled\"}} class=\"btn btn-primary\">{{saveButtonText}}</button>\n            {{#if saved}}{{i18n saved}}{{/if}}\n        </div>\n      </div>\n  \n    </form>\n  </section>");
Ember.TEMPLATES["user_dropdown"] = Ember.Handlebars.compile("<section class='d-dropdown' id='user-dropdown'>\n    <ul class='user-dropdown-links'>\n      <li>{{#link-to 'user' currentUser class=\"user-activity-link\" }}{{i18n user.profile}}{{/link-to}}</li>\n      <li>\n      {{#link-to 'userPrivateMessages.index' currentUser class='user-messages-link'}}\n        {{#if currentUser.unread_private_messages}}<span class=\"badge-notification unread-private-messages\">{{currentUser.unread_private_messages}}</span>{{/if}}{{i18n user.unread_message_count}}\n      {{/link-to}}\n      </li>\n      <li>{{#link-to 'userActivity.bookmarks' currentUser}}{{i18n user.bookmarks}}{{/link-to}}</li>\n      <li>{{#link-to 'preferences' currentUser}}{{i18n user.preferences}}{{/link-to}}</li>\n      <li><button {{action \"logout\"}} class='btn btn-danger right logout'><i class='fa fa-sign-out'></i>{{i18n user.log_out}}</button></li>\n    </ul>\n  </section>");
define("discourse/routes/about", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.Route.extend({
      model: function() {
        return Discourse.ajax("/about.json").then(function(result) {
          return result.about;
        });
      },

      setupController: function(controller, model) {
        controller.set('model', model);
        Discourse.set('title', I18n.t('about.simple_title'));
      }
    });
  });

Discourse.AboutRoute = require('discourse/routes/about').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/about.js'] = "define(\"discourse/routes/about\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.Route.extend({\n      model: function() {\n        return Discourse.ajax(\"/about.json\").then(function(result) {\n          return result.about;\n        });\n      },\n\n      setupController: function(controller, model) {\n        controller.set('model', model);\n        Discourse.set('title', I18n.t('about.simple_title'));\n      }\n    });\n  });";
define("discourse/routes/application", 
  ["exports"],
  function(__exports__) {
    "use strict";
    var ApplicationRoute = Em.Route.extend({

      actions: {
        showTopicEntrance: function(data) {
          this.controllerFor('topic-entrance').send('show', data);
        },

        composePrivateMessage: function(user) {
          var self = this;
          this.transitionTo('userActivity', user).then(function () {
            self.controllerFor('user-activity').send('composePrivateMessage');
          });
        },

        expandUser: function(user) {
          this.controllerFor('user-expansion').show(user.get('username'), user.get('uploaded_avatar_id'));
          return true;
        },

        error: function(err, transition) {
          if (err.status === 404) {
            // 404
            this.intermediateTransitionTo('unknown');
            return;
          }

          var exceptionController = this.controllerFor('exception'),
              errorString = err.toString();
          if (err.statusText) {
            errorString = err.statusText;
          }
          var c = window.console;
          if (c && c.error) {
            c.error(errorString);
          }
          exceptionController.setProperties({ lastTransition: transition, thrown: err });

          this.intermediateTransitionTo('exception');
        },

        showLogin: function() {
          var self = this;

          if (Discourse.get("isReadOnly")) {
            bootbox.alert(I18n.t("read_only_mode.login_disabled"));
          } else {
            if(Discourse.SiteSettings.enable_sso) {
              var returnPath = encodeURIComponent(window.location.pathname);
              window.location = Discourse.getURL('/session/sso?return_path=' + returnPath);
            } else {
              this.send('autoLogin', 'login', function(){
                Discourse.Route.showModal(self, 'login');
                self.controllerFor('login').resetForm();
              });
            }
          }
        },

        showCreateAccount: function() {
          var self = this;

          self.send('autoLogin', 'createAccount', function(){
            Discourse.Route.showModal(self, 'createAccount');
          });
        },

        autoLogin: function(modal, onFail){
          var methods = Em.get('Discourse.LoginMethod.all');
          if (!Discourse.SiteSettings.enable_local_logins &&
              methods.length === 1) {
                Discourse.Route.showModal(this, modal);
                this.controllerFor('login').send('externalLogin', methods[0]);
          } else {
            onFail();
          }
        },

        showForgotPassword: function() {
          Discourse.Route.showModal(this, 'forgotPassword');
        },

        showNotActivated: function(props) {
          Discourse.Route.showModal(this, 'notActivated');
          this.controllerFor('notActivated').setProperties(props);
        },

        showUploadSelector: function(composerView) {
          Discourse.Route.showModal(this, 'uploadSelector');
          this.controllerFor('upload-selector').setProperties({ composerView: composerView });
        },

        showKeyboardShortcutsHelp: function() {
          Discourse.Route.showModal(this, 'keyboardShortcutsHelp');
        },


        /**
          Close the current modal, and destroy its state.

          @method closeModal
        **/
        closeModal: function() {
          this.render('hide-modal', {into: 'modal', outlet: 'modalBody'});
        },

        /**
          Hide the modal, but keep it with all its state so that it can be shown again later.
          This is useful if you want to prompt for confirmation. hideModal, ask "Are you sure?",
          user clicks "No", showModal. If user clicks "Yes", be sure to call closeModal.

          @method hideModal
        **/
        hideModal: function() {
          $('#discourse-modal').modal('hide');
        },

        /**
          Show the modal. Useful after calling hideModal.

          @method showModal
        **/
        showModal: function() {
          $('#discourse-modal').modal('show');
        },

        editCategory: function(category) {
          var router = this;

          if (category.get('isUncategorizedCategory')) {
            Discourse.Route.showModal(router, 'editCategory', category);
            router.controllerFor('editCategory').set('selectedTab', 'general');
          } else {
            Discourse.Category.reloadById(category.get('id')).then(function (c) {
              Discourse.Site.current().updateCategory(c);
              Discourse.Route.showModal(router, 'editCategory', c);
              router.controllerFor('editCategory').set('selectedTab', 'general');
            });
          }
        },

        /**
          Deletes a user and all posts and topics created by that user.

          @method deleteSpammer
        **/
        deleteSpammer: function (user) {
          this.send('closeModal');
          user.deleteAsSpammer(function() { window.location.reload(); });
        }
      },

      activate: function() {
        this._super();
        Em.run.next(function() {
          // Support for callbacks once the application has activated
          ApplicationRoute.trigger('activate');
        });
      }

    });

    RSVP.EventTarget.mixin(ApplicationRoute);
    __exports__["default"] = ApplicationRoute;
  });

Discourse.ApplicationRoute = require('discourse/routes/application').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/application.js'] = "define(\"discourse/routes/application\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var ApplicationRoute = Em.Route.extend({\n\n      actions: {\n        showTopicEntrance: function(data) {\n          this.controllerFor('topic-entrance').send('show', data);\n        },\n\n        composePrivateMessage: function(user) {\n          var self = this;\n          this.transitionTo('userActivity', user).then(function () {\n            self.controllerFor('user-activity').send('composePrivateMessage');\n          });\n        },\n\n        expandUser: function(user) {\n          this.controllerFor('user-expansion').show(user.get('username'), user.get('uploaded_avatar_id'));\n          return true;\n        },\n\n        error: function(err, transition) {\n          if (err.status === 404) {\n            // 404\n            this.intermediateTransitionTo('unknown');\n            return;\n          }\n\n          var exceptionController = this.controllerFor('exception'),\n              errorString = err.toString();\n          if (err.statusText) {\n            errorString = err.statusText;\n          }\n          var c = window.console;\n          if (c \u0026\u0026 c.error) {\n            c.error(errorString);\n          }\n          exceptionController.setProperties({ lastTransition: transition, thrown: err });\n\n          this.intermediateTransitionTo('exception');\n        },\n\n        showLogin: function() {\n          var self = this;\n\n          if (Discourse.get(\"isReadOnly\")) {\n            bootbox.alert(I18n.t(\"read_only_mode.login_disabled\"));\n          } else {\n            if(Discourse.SiteSettings.enable_sso) {\n              var returnPath = encodeURIComponent(window.location.pathname);\n              window.location = Discourse.getURL('/session/sso?return_path=' + returnPath);\n            } else {\n              this.send('autoLogin', 'login', function(){\n                Discourse.Route.showModal(self, 'login');\n                self.controllerFor('login').resetForm();\n              });\n            }\n          }\n        },\n\n        showCreateAccount: function() {\n          var self = this;\n\n          self.send('autoLogin', 'createAccount', function(){\n            Discourse.Route.showModal(self, 'createAccount');\n          });\n        },\n\n        autoLogin: function(modal, onFail){\n          var methods = Em.get('Discourse.LoginMethod.all');\n          if (!Discourse.SiteSettings.enable_local_logins \u0026\u0026\n              methods.length === 1) {\n                Discourse.Route.showModal(this, modal);\n                this.controllerFor('login').send('externalLogin', methods[0]);\n          } else {\n            onFail();\n          }\n        },\n\n        showForgotPassword: function() {\n          Discourse.Route.showModal(this, 'forgotPassword');\n        },\n\n        showNotActivated: function(props) {\n          Discourse.Route.showModal(this, 'notActivated');\n          this.controllerFor('notActivated').setProperties(props);\n        },\n\n        showUploadSelector: function(composerView) {\n          Discourse.Route.showModal(this, 'uploadSelector');\n          this.controllerFor('upload-selector').setProperties({ composerView: composerView });\n        },\n\n        showKeyboardShortcutsHelp: function() {\n          Discourse.Route.showModal(this, 'keyboardShortcutsHelp');\n        },\n\n\n        /**\n          Close the current modal, and destroy its state.\n\n          @method closeModal\n        **/\n        closeModal: function() {\n          this.render('hide-modal', {into: 'modal', outlet: 'modalBody'});\n        },\n\n        /**\n          Hide the modal, but keep it with all its state so that it can be shown again later.\n          This is useful if you want to prompt for confirmation. hideModal, ask \"Are you sure?\",\n          user clicks \"No\", showModal. If user clicks \"Yes\", be sure to call closeModal.\n\n          @method hideModal\n        **/\n        hideModal: function() {\n          $('#discourse-modal').modal('hide');\n        },\n\n        /**\n          Show the modal. Useful after calling hideModal.\n\n          @method showModal\n        **/\n        showModal: function() {\n          $('#discourse-modal').modal('show');\n        },\n\n        editCategory: function(category) {\n          var router = this;\n\n          if (category.get('isUncategorizedCategory')) {\n            Discourse.Route.showModal(router, 'editCategory', category);\n            router.controllerFor('editCategory').set('selectedTab', 'general');\n          } else {\n            Discourse.Category.reloadById(category.get('id')).then(function (c) {\n              Discourse.Site.current().updateCategory(c);\n              Discourse.Route.showModal(router, 'editCategory', c);\n              router.controllerFor('editCategory').set('selectedTab', 'general');\n            });\n          }\n        },\n\n        /**\n          Deletes a user and all posts and topics created by that user.\n\n          @method deleteSpammer\n        **/\n        deleteSpammer: function (user) {\n          this.send('closeModal');\n          user.deleteAsSpammer(function() { window.location.reload(); });\n        }\n      },\n\n      activate: function() {\n        this._super();\n        Em.run.next(function() {\n          // Support for callbacks once the application has activated\n          ApplicationRoute.trigger('activate');\n        });\n      }\n\n    });\n\n    RSVP.EventTarget.mixin(ApplicationRoute);\n    __exports__[\"default\"] = ApplicationRoute;\n  });";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  Builds the routes for the application

  @method buildRoutes
  @for Discourse.ApplicationRoute
**/

Discourse.Route.buildRoutes(function() {
  var router = this;

  // Error page
  this.route('exception', { path: '/exception' });

  this.resource('about', { path: '/about' });

  // Topic routes
  this.resource('topic', { path: '/t/:slug/:id' }, function() {
    this.route('fromParams', { path: '/' });
    this.route('fromParamsNear', { path: '/:nearPost' });
  });

  this.resource('discovery', { path: '/' }, function() {
    router = this;

    // top
    this.route('top');
    this.route('topCategory', { path: '/category/:slug/l/top' });
    this.route('topCategoryNone', { path: '/category/:slug/none/l/top' });
    this.route('topCategory', { path: '/category/:parentSlug/:slug/l/top' });

    // top by periods
    Discourse.Site.currentProp('periods').forEach(function(period) {
      var top = 'top' + period.capitalize();
      router.route(top, { path: '/top/' + period });
      router.route(top + 'Category', { path: '/category/:slug/l/top/' + period });
      router.route(top + 'CategoryNone', { path: '/category/:slug/none/l/top/' + period });
      router.route(top + 'Category', { path: '/category/:parentSlug/:slug/l/top/' + period });
    });

    // filters
    Discourse.Site.currentProp('filters').forEach(function(filter) {
      router.route(filter, { path: '/' + filter });
      router.route(filter + 'Category', { path: '/category/:slug/l/' + filter });
      router.route(filter + 'CategoryNone', { path: '/category/:slug/none/l/' + filter });
      router.route(filter + 'Category', { path: '/category/:parentSlug/:slug/l/' + filter });
    });

    this.route('categories');

    // default filter for a category
    this.route('parentCategory', { path: '/category/:slug' });
    this.route('categoryNone', { path: '/category/:slug/none' });
    this.route('category', { path: '/category/:parentSlug/:slug' });

    // homepage
    this.route(Discourse.Utilities.defaultHomepage(), { path: '/' });
  });

  this.resource('group', { path: '/groups/:name' }, function() {
    this.route('members');
  });

  // User routes
  this.resource('user', { path: '/users/:username' }, function() {
    this.resource('userActivity', { path: '/activity' }, function() {
      router = this;
      _.map(Discourse.UserAction.TYPES, function (id, userAction) {
        router.route(userAction, { path: userAction.replace('_', '-') });
      });
    });

    this.route('badges');
    this.route('flaggedPosts', { path: '/flagged-posts' });
    this.route('deletedPosts', { path: '/deleted-posts' });

    this.resource('userPrivateMessages', { path: '/private-messages' }, function() {
      this.route('mine');
      this.route('unread');
    });

    this.resource('preferences', function() {
      this.route('username');
      this.route('email');
      this.route('about', { path: '/about-me' });
      this.route('badgeTitle', { path: '/badge_title' });
    });

    this.route('invited');
  });

  this.route('signup', {path: '/signup'});
  this.route('login', {path: '/login'});
  this.route('faq', {path: '/faq'});
  this.route('tos', {path: '/tos'});
  this.route('privacy', {path: '/privacy'});
  this.route('guidelines', {path: '/guidelines'});

  this.resource('badges', function() {
    this.route('show', {path: '/:id/:slug'});
  });
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/application_routes.js'] = "/**\n  Builds the routes for the application\n\n  @method buildRoutes\n  @for Discourse.ApplicationRoute\n**/\n\nDiscourse.Route.buildRoutes(function() {\n  var router = this;\n\n  // Error page\n  this.route('exception', { path: '/exception' });\n\n  this.resource('about', { path: '/about' });\n\n  // Topic routes\n  this.resource('topic', { path: '/t/:slug/:id' }, function() {\n    this.route('fromParams', { path: '/' });\n    this.route('fromParamsNear', { path: '/:nearPost' });\n  });\n\n  this.resource('discovery', { path: '/' }, function() {\n    router = this;\n\n    // top\n    this.route('top');\n    this.route('topCategory', { path: '/category/:slug/l/top' });\n    this.route('topCategoryNone', { path: '/category/:slug/none/l/top' });\n    this.route('topCategory', { path: '/category/:parentSlug/:slug/l/top' });\n\n    // top by periods\n    Discourse.Site.currentProp('periods').forEach(function(period) {\n      var top = 'top' + period.capitalize();\n      router.route(top, { path: '/top/' + period });\n      router.route(top + 'Category', { path: '/category/:slug/l/top/' + period });\n      router.route(top + 'CategoryNone', { path: '/category/:slug/none/l/top/' + period });\n      router.route(top + 'Category', { path: '/category/:parentSlug/:slug/l/top/' + period });\n    });\n\n    // filters\n    Discourse.Site.currentProp('filters').forEach(function(filter) {\n      router.route(filter, { path: '/' + filter });\n      router.route(filter + 'Category', { path: '/category/:slug/l/' + filter });\n      router.route(filter + 'CategoryNone', { path: '/category/:slug/none/l/' + filter });\n      router.route(filter + 'Category', { path: '/category/:parentSlug/:slug/l/' + filter });\n    });\n\n    this.route('categories');\n\n    // default filter for a category\n    this.route('parentCategory', { path: '/category/:slug' });\n    this.route('categoryNone', { path: '/category/:slug/none' });\n    this.route('category', { path: '/category/:parentSlug/:slug' });\n\n    // homepage\n    this.route(Discourse.Utilities.defaultHomepage(), { path: '/' });\n  });\n\n  this.resource('group', { path: '/groups/:name' }, function() {\n    this.route('members');\n  });\n\n  // User routes\n  this.resource('user', { path: '/users/:username' }, function() {\n    this.resource('userActivity', { path: '/activity' }, function() {\n      router = this;\n      _.map(Discourse.UserAction.TYPES, function (id, userAction) {\n        router.route(userAction, { path: userAction.replace('_', '-') });\n      });\n    });\n\n    this.route('badges');\n    this.route('flaggedPosts', { path: '/flagged-posts' });\n    this.route('deletedPosts', { path: '/deleted-posts' });\n\n    this.resource('userPrivateMessages', { path: '/private-messages' }, function() {\n      this.route('mine');\n      this.route('unread');\n    });\n\n    this.resource('preferences', function() {\n      this.route('username');\n      this.route('email');\n      this.route('about', { path: '/about-me' });\n      this.route('badgeTitle', { path: '/badge_title' });\n    });\n\n    this.route('invited');\n  });\n\n  this.route('signup', {path: '/signup'});\n  this.route('login', {path: '/login'});\n  this.route('faq', {path: '/faq'});\n  this.route('tos', {path: '/tos'});\n  this.route('privacy', {path: '/privacy'});\n  this.route('guidelines', {path: '/guidelines'});\n\n  this.resource('badges', function() {\n    this.route('show', {path: '/:id/:slug'});\n  });\n});\n";
define("discourse/routes/badges-index", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.Route.extend({

      model: function() {
        if (PreloadStore.get('badges')) {
          return PreloadStore.getAndRemove('badges').then(function(json) {
            return Discourse.Badge.createFromJson(json);
          });
        } else {
          return Discourse.Badge.findAll({onlyListable: true});
        }
      },

      setupController: function(controller, model) {
        controller.set('model', model);
        Discourse.set('title', I18n.t('badges.title'));
      }
    });
  });

Discourse.BadgesIndexRoute = require('discourse/routes/badges-index').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/badges-index.js'] = "define(\"discourse/routes/badges-index\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.Route.extend({\n\n      model: function() {\n        if (PreloadStore.get('badges')) {\n          return PreloadStore.getAndRemove('badges').then(function(json) {\n            return Discourse.Badge.createFromJson(json);\n          });\n        } else {\n          return Discourse.Badge.findAll({onlyListable: true});\n        }\n      },\n\n      setupController: function(controller, model) {\n        controller.set('model', model);\n        Discourse.set('title', I18n.t('badges.title'));\n      }\n    });\n  });";
define("discourse/routes/badges-show", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Ember.Route.extend({
      serialize: function(model) {
        return {id: model.get('id'), slug: model.get('name').replace(/[^A-Za-z0-9_]+/g, '-').toLowerCase()};
      },

      model: function(params) {
        if (PreloadStore.get('badge')) {
          return PreloadStore.getAndRemove('badge').then(function(json) {
            return Discourse.Badge.createFromJson(json);
          });
        } else {
          return Discourse.Badge.findById(params.id);
        }
      },

      setupController: function(controller, model) {
        Discourse.UserBadge.findByBadgeId(model.get('id')).then(function(userBadges) {
          controller.set('userBadges', userBadges);
          controller.set('userBadgesLoaded', true);
        });
        controller.set('model', model);
        Discourse.set('title', model.get('displayName'));
      }
    });
  });

Discourse.BadgesShowRoute = require('discourse/routes/badges-show').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/badges-show.js'] = "define(\"discourse/routes/badges-show\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Route.extend({\n      serialize: function(model) {\n        return {id: model.get('id'), slug: model.get('name').replace(/[^A-Za-z0-9_]+/g, '-').toLowerCase()};\n      },\n\n      model: function(params) {\n        if (PreloadStore.get('badge')) {\n          return PreloadStore.getAndRemove('badge').then(function(json) {\n            return Discourse.Badge.createFromJson(json);\n          });\n        } else {\n          return Discourse.Badge.findById(params.id);\n        }\n      },\n\n      setupController: function(controller, model) {\n        Discourse.UserBadge.findByBadgeId(model.get('id')).then(function(userBadges) {\n          controller.set('userBadges', userBadges);\n          controller.set('userBadgesLoaded', true);\n        });\n        controller.set('model', model);\n        Discourse.set('title', model.get('displayName'));\n      }\n    });\n  });";
define("discourse/routes/build-category-route", 
  ["discourse/routes/build-topic-route","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    // A helper function to create a category route with parameters
    var queryParams = __dependency1__.queryParams;
    var filterQueryParams = __dependency1__.filterQueryParams;

    __exports__["default"] = function(filter, params) {
      return Discourse.Route.extend({
        queryParams: queryParams,

        model: function(modelParams) {
          return Discourse.Category.findBySlug(modelParams.slug, modelParams.parentSlug);
        },

        afterModel: function(model, transaction) {
          if (!model) {
            this.replaceWith('/404');
            return;
          }

          this._setupNavigation(model);
          return Em.RSVP.all([this._createSubcategoryList(model),
                              this._retrieveTopicList(model, transaction)]);
        },

        _setupNavigation: function(model) {
          var noSubcategories = params && !!params.no_subcategories,
              filterMode = "category/" + Discourse.Category.slugFor(model) + (noSubcategories ? "/none" : "") + "/l/" + filter;

          this.controllerFor('navigation/category').setProperties({
            category: model,
            filterMode: filterMode,
            noSubcategories: params && params.no_subcategories,
            canEditCategory: model.get('can_edit'),
            canChangeCategoryNotificationLevel: Discourse.User.current()
          });
        },

        _createSubcategoryList: function(model) {
          this._categoryList = null;
          if (Em.isNone(model.get('parentCategory')) && Discourse.SiteSettings.show_subcategory_list) {
            var self = this;
            return Discourse.CategoryList.listForParent(model).then(function(list) {
              self._categoryList = list;
            });
          }

          // If we're not loading a subcategory list just resolve
          return Em.RSVP.resolve();
        },

        _retrieveTopicList: function(model, transaction) {
          var listFilter = "category/" + Discourse.Category.slugFor(model) + "/l/" + filter,
              self = this;

          var findOpts = filterQueryParams(transaction.queryParams, params);

          return Discourse.TopicList.list(listFilter, findOpts).then(function(list) {
            // If all the categories are the same, we can hide them
            var hideCategory = !list.get('topics').find(function (t) { return t.get('category') !== model; });
            list.set('hideCategory', hideCategory);
            self.set('topics', list);
          });
        },

        setupController: function(controller, model) {
          var topics = this.get('topics'),
              periods = this.controllerFor('discovery').get('periods'),
              periodId = topics.get('for_period') || (filter.indexOf('/') > 0 ? filter.split('/')[1] : ''),
              filterText = I18n.t('filters.' + filter.replace('/', '.') + '.title', {count: 0});

          Discourse.set('title', I18n.t('filters.with_category', { filter: filterText, category: model.get('name') }));

          this.controllerFor('navigation/category').set('canCreateTopic', topics.get('can_create_topic'));
          this.controllerFor('discovery/topics').setProperties({
            model: topics,
            category: model,
            period: periods.findBy('id', periodId),
            selected: [],
            noSubcategories: params && !!params.no_subcategories
          });

          this.controllerFor('search').set('searchContext', model.get('searchContext'));
          this.set('topics', null);

          this.openTopicDraft(topics);
        },

        renderTemplate: function() {
          this.render('navigation/category', { outlet: 'navigation-bar' });

          if (this._categoryList) {
            this.render('discovery/categories', { outlet: 'header-list-container', model: this._categoryList });
          }
          this.render('discovery/topics', { controller: 'discovery/topics', outlet: 'list-container' });
        },

        deactivate: function() {
          this._super();
          this.controllerFor('search').set('searchContext', null);
        },

        actions: {
          setNotification: function(notification_level){
            this.currentModel.setNotification(notification_level);
          }
        }
      });
    }
  });

Discourse.BuildCategoryRouteRoute = require('discourse/routes/build-category-route').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/build-category-route.js'] = "define(\"discourse/routes/build-category-route\", \n  [\"discourse/routes/build-topic-route\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    // A helper function to create a category route with parameters\n    var queryParams = __dependency1__.queryParams;\n    var filterQueryParams = __dependency1__.filterQueryParams;\n\n    __exports__[\"default\"] = function(filter, params) {\n      return Discourse.Route.extend({\n        queryParams: queryParams,\n\n        model: function(modelParams) {\n          return Discourse.Category.findBySlug(modelParams.slug, modelParams.parentSlug);\n        },\n\n        afterModel: function(model, transaction) {\n          if (!model) {\n            this.replaceWith('/404');\n            return;\n          }\n\n          this._setupNavigation(model);\n          return Em.RSVP.all([this._createSubcategoryList(model),\n                              this._retrieveTopicList(model, transaction)]);\n        },\n\n        _setupNavigation: function(model) {\n          var noSubcategories = params \u0026\u0026 !!params.no_subcategories,\n              filterMode = \"category/\" + Discourse.Category.slugFor(model) + (noSubcategories ? \"/none\" : \"\") + \"/l/\" + filter;\n\n          this.controllerFor('navigation/category').setProperties({\n            category: model,\n            filterMode: filterMode,\n            noSubcategories: params \u0026\u0026 params.no_subcategories,\n            canEditCategory: model.get('can_edit'),\n            canChangeCategoryNotificationLevel: Discourse.User.current()\n          });\n        },\n\n        _createSubcategoryList: function(model) {\n          this._categoryList = null;\n          if (Em.isNone(model.get('parentCategory')) \u0026\u0026 Discourse.SiteSettings.show_subcategory_list) {\n            var self = this;\n            return Discourse.CategoryList.listForParent(model).then(function(list) {\n              self._categoryList = list;\n            });\n          }\n\n          // If we're not loading a subcategory list just resolve\n          return Em.RSVP.resolve();\n        },\n\n        _retrieveTopicList: function(model, transaction) {\n          var listFilter = \"category/\" + Discourse.Category.slugFor(model) + \"/l/\" + filter,\n              self = this;\n\n          var findOpts = filterQueryParams(transaction.queryParams, params);\n\n          return Discourse.TopicList.list(listFilter, findOpts).then(function(list) {\n            // If all the categories are the same, we can hide them\n            var hideCategory = !list.get('topics').find(function (t) { return t.get('category') !== model; });\n            list.set('hideCategory', hideCategory);\n            self.set('topics', list);\n          });\n        },\n\n        setupController: function(controller, model) {\n          var topics = this.get('topics'),\n              periods = this.controllerFor('discovery').get('periods'),\n              periodId = topics.get('for_period') || (filter.indexOf('/') \u003e 0 ? filter.split('/')[1] : ''),\n              filterText = I18n.t('filters.' + filter.replace('/', '.') + '.title', {count: 0});\n\n          Discourse.set('title', I18n.t('filters.with_category', { filter: filterText, category: model.get('name') }));\n\n          this.controllerFor('navigation/category').set('canCreateTopic', topics.get('can_create_topic'));\n          this.controllerFor('discovery/topics').setProperties({\n            model: topics,\n            category: model,\n            period: periods.findBy('id', periodId),\n            selected: [],\n            noSubcategories: params \u0026\u0026 !!params.no_subcategories\n          });\n\n          this.controllerFor('search').set('searchContext', model.get('searchContext'));\n          this.set('topics', null);\n\n          this.openTopicDraft(topics);\n        },\n\n        renderTemplate: function() {\n          this.render('navigation/category', { outlet: 'navigation-bar' });\n\n          if (this._categoryList) {\n            this.render('discovery/categories', { outlet: 'header-list-container', model: this._categoryList });\n          }\n          this.render('discovery/topics', { controller: 'discovery/topics', outlet: 'list-container' });\n        },\n\n        deactivate: function() {\n          this._super();\n          this.controllerFor('search').set('searchContext', null);\n        },\n\n        actions: {\n          setNotification: function(notification_level){\n            this.currentModel.setNotification(notification_level);\n          }\n        }\n      });\n    }\n  });";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
@module Discourse
*/


var get = Ember.get, set = Ember.set;
var popstateFired = false;
var supportsHistoryState = window.history && 'state' in window.history;

var popstateCallbacks = [];

/**
  `Ember.DiscourseLocation` implements the location API using the browser's
  `history.pushState` API.

  @class DiscourseLocation
  @namespace Discourse
  @extends Ember.Object
*/
Ember.DiscourseLocation = Ember.Object.extend({

  init: function() {
    set(this, 'location', get(this, 'location') || window.location);
    this.initState();
  },

  /**
    @private

    Used to set state on first call to setURL

    @method initState
  */
  initState: function() {
    set(this, 'history', get(this, 'history') || window.history);

    var url = this.formatURL(this.getURL()),
        loc = get(this, 'location');

    if (loc && loc.hash) {
      url += loc.hash;
    }

    this.replaceState(url);
  },

  /**
    Will be pre-pended to path upon state change

    @property rootURL
    @default '/'
  */
  rootURL: '/',

  /**
    @private

    Returns the current `location.pathname` without rootURL

    @method getURL
  */
  getURL: function() {
    var rootURL = (Discourse.BaseUri === undefined ? "/" : Discourse.BaseUri),
        location = get(this, 'location'),
        url = location.pathname;

    rootURL = rootURL.replace(/\/$/, '');
    url = url.replace(rootURL, '');

    if (Ember.FEATURES.isEnabled("query-params-new")) {
      var search = location.search || '';
      url += search;
    }

    return url;
  },

  /**
    @private

    Uses `history.pushState` to update the url without a page reload.

    @method setURL
    @param path {String}
  */
  setURL: function(path) {
    var state = this.getState();
    path = this.formatURL(path);

    if (state && state.path !== path) {
      this.pushState(path);
    }
  },

  /**
    @private

    Uses `history.replaceState` to update the url without a page reload
    or history modification.

    @method replaceURL
    @param path {String}
  */
  replaceURL: function(path) {
    var state = this.getState();
    path = this.formatURL(path);

    if (state && state.path !== path) {
      this.replaceState(path);
    }
  },

  /**
   @private

   Get the current `history.state`
   Polyfill checks for native browser support and falls back to retrieving
   from a private _historyState variable

   @method getState
  */
  getState: function() {
    return supportsHistoryState ? get(this, 'history').state : this._historyState;
  },

  /**
   @private

   Pushes a new state

   @method pushState
   @param path {String}
  */
  pushState: function(path) {
    var state = { path: path };

    // store state if browser doesn't support `history.state`
    if (!supportsHistoryState) {
      this._historyState = state;
    } else {
      get(this, 'history').pushState(state, null, path);
    }

    // used for webkit workaround
    this._previousURL = this.getURL();
  },

  /**
   @private

   Replaces the current state

   @method replaceState
   @param path {String}
  */
  replaceState: function(path) {
    var state = { path: path };

    // store state if browser doesn't support `history.state`
    if (!supportsHistoryState) {
      this._historyState = state;
    } else {
      get(this, 'history').replaceState(state, null, path);
    }

    // used for webkit workaround
    this._previousURL = this.getURL();
  },

  /**
    @private

    Register a callback to be invoked whenever the browser
    history changes, including using forward and back buttons.

    @method onUpdateURL
    @param callback {Function}
  */
  onUpdateURL: function(callback) {
    var guid = Ember.guidFor(this),
        self = this;

    Ember.$(window).on('popstate.ember-location-'+guid, function() {
      // Ignore initial page load popstate event in Chrome
      if (!popstateFired) {
        popstateFired = true;
        if (self.getURL() === self._previousURL) { return; }
      }
      var url = self.getURL();
      popstateCallbacks.forEach(function(cb) {
        cb(url);
      });
      callback(url);
    });
  },

  /**
    @private

    Used when using `{{action}}` helper.  The url is always appended to the rootURL.

    @method formatURL
    @param url {String}
  */
  formatURL: function(url) {
    var rootURL = get(this, 'rootURL');

    if (url !== '') {
      rootURL = rootURL.replace(/\/$/, '');
    }

    return rootURL + url;
  },

  willDestroy: function() {
    var guid = Ember.guidFor(this);

    Ember.$(window).off('popstate.ember-location-'+guid);
  }

});

/**
  Since we're using pushState/replaceState let's add extra hooks to cloakedView to
  eject itself when the popState occurs. This results in better back button
  behavior.
**/
Ember.CloakedCollectionView.reopen({
  _watchForPopState: function() {
    var self = this,
        cb = function() {
               // Sam: This is a hack, but a very important one
               // Due to the way we use replace state the back button works strangely
               //
               // If you visit a topic from the front page, scroll a bit around and then hit back
               // you notice that first the page scrolls a bit (within the topic) and then it goes back
               // this transition is jarring and adds uneeded rendering costs.
               //
               // To repro comment the hack out and wack a debugger statement here and in
               // topic_route deactivate
               $('.posts,#topic-title').hide();
               self.cleanUp();
               self.set('controller.postStream.loaded', false);
             };
    this.set('_callback', cb);
    popstateCallbacks.addObject(cb);
  }.on('didInsertElement'),

  _disbandWatcher: function() {
    popstateCallbacks.removeObject(this.get('_callback'));
    this.set('_callback', null);
  }.on('willDestroyElement')
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/discourse_location.js'] = "/**\n@module Discourse\n*/\n\n\nvar get = Ember.get, set = Ember.set;\nvar popstateFired = false;\nvar supportsHistoryState = window.history \u0026\u0026 'state' in window.history;\n\nvar popstateCallbacks = [];\n\n/**\n  `Ember.DiscourseLocation` implements the location API using the browser's\n  `history.pushState` API.\n\n  @class DiscourseLocation\n  @namespace Discourse\n  @extends Ember.Object\n*/\nEmber.DiscourseLocation = Ember.Object.extend({\n\n  init: function() {\n    set(this, 'location', get(this, 'location') || window.location);\n    this.initState();\n  },\n\n  /**\n    @private\n\n    Used to set state on first call to setURL\n\n    @method initState\n  */\n  initState: function() {\n    set(this, 'history', get(this, 'history') || window.history);\n\n    var url = this.formatURL(this.getURL()),\n        loc = get(this, 'location');\n\n    if (loc \u0026\u0026 loc.hash) {\n      url += loc.hash;\n    }\n\n    this.replaceState(url);\n  },\n\n  /**\n    Will be pre-pended to path upon state change\n\n    @property rootURL\n    @default '/'\n  */\n  rootURL: '/',\n\n  /**\n    @private\n\n    Returns the current `location.pathname` without rootURL\n\n    @method getURL\n  */\n  getURL: function() {\n    var rootURL = (Discourse.BaseUri === undefined ? \"/\" : Discourse.BaseUri),\n        location = get(this, 'location'),\n        url = location.pathname;\n\n    rootURL = rootURL.replace(/\\/$/, '');\n    url = url.replace(rootURL, '');\n\n    if (Ember.FEATURES.isEnabled(\"query-params-new\")) {\n      var search = location.search || '';\n      url += search;\n    }\n\n    return url;\n  },\n\n  /**\n    @private\n\n    Uses `history.pushState` to update the url without a page reload.\n\n    @method setURL\n    @param path {String}\n  */\n  setURL: function(path) {\n    var state = this.getState();\n    path = this.formatURL(path);\n\n    if (state \u0026\u0026 state.path !== path) {\n      this.pushState(path);\n    }\n  },\n\n  /**\n    @private\n\n    Uses `history.replaceState` to update the url without a page reload\n    or history modification.\n\n    @method replaceURL\n    @param path {String}\n  */\n  replaceURL: function(path) {\n    var state = this.getState();\n    path = this.formatURL(path);\n\n    if (state \u0026\u0026 state.path !== path) {\n      this.replaceState(path);\n    }\n  },\n\n  /**\n   @private\n\n   Get the current `history.state`\n   Polyfill checks for native browser support and falls back to retrieving\n   from a private _historyState variable\n\n   @method getState\n  */\n  getState: function() {\n    return supportsHistoryState ? get(this, 'history').state : this._historyState;\n  },\n\n  /**\n   @private\n\n   Pushes a new state\n\n   @method pushState\n   @param path {String}\n  */\n  pushState: function(path) {\n    var state = { path: path };\n\n    // store state if browser doesn't support `history.state`\n    if (!supportsHistoryState) {\n      this._historyState = state;\n    } else {\n      get(this, 'history').pushState(state, null, path);\n    }\n\n    // used for webkit workaround\n    this._previousURL = this.getURL();\n  },\n\n  /**\n   @private\n\n   Replaces the current state\n\n   @method replaceState\n   @param path {String}\n  */\n  replaceState: function(path) {\n    var state = { path: path };\n\n    // store state if browser doesn't support `history.state`\n    if (!supportsHistoryState) {\n      this._historyState = state;\n    } else {\n      get(this, 'history').replaceState(state, null, path);\n    }\n\n    // used for webkit workaround\n    this._previousURL = this.getURL();\n  },\n\n  /**\n    @private\n\n    Register a callback to be invoked whenever the browser\n    history changes, including using forward and back buttons.\n\n    @method onUpdateURL\n    @param callback {Function}\n  */\n  onUpdateURL: function(callback) {\n    var guid = Ember.guidFor(this),\n        self = this;\n\n    Ember.$(window).on('popstate.ember-location-'+guid, function() {\n      // Ignore initial page load popstate event in Chrome\n      if (!popstateFired) {\n        popstateFired = true;\n        if (self.getURL() === self._previousURL) { return; }\n      }\n      var url = self.getURL();\n      popstateCallbacks.forEach(function(cb) {\n        cb(url);\n      });\n      callback(url);\n    });\n  },\n\n  /**\n    @private\n\n    Used when using `{{action}}` helper.  The url is always appended to the rootURL.\n\n    @method formatURL\n    @param url {String}\n  */\n  formatURL: function(url) {\n    var rootURL = get(this, 'rootURL');\n\n    if (url !== '') {\n      rootURL = rootURL.replace(/\\/$/, '');\n    }\n\n    return rootURL + url;\n  },\n\n  willDestroy: function() {\n    var guid = Ember.guidFor(this);\n\n    Ember.$(window).off('popstate.ember-location-'+guid);\n  }\n\n});\n\n/**\n  Since we're using pushState/replaceState let's add extra hooks to cloakedView to\n  eject itself when the popState occurs. This results in better back button\n  behavior.\n**/\nEmber.CloakedCollectionView.reopen({\n  _watchForPopState: function() {\n    var self = this,\n        cb = function() {\n               // Sam: This is a hack, but a very important one\n               // Due to the way we use replace state the back button works strangely\n               //\n               // If you visit a topic from the front page, scroll a bit around and then hit back\n               // you notice that first the page scrolls a bit (within the topic) and then it goes back\n               // this transition is jarring and adds uneeded rendering costs.\n               //\n               // To repro comment the hack out and wack a debugger statement here and in\n               // topic_route deactivate\n               $('.posts,#topic-title').hide();\n               self.cleanUp();\n               self.set('controller.postStream.loaded', false);\n             };\n    this.set('_callback', cb);\n    popstateCallbacks.addObject(cb);\n  }.on('didInsertElement'),\n\n  _disbandWatcher: function() {\n    popstateCallbacks.removeObject(this.get('_callback'));\n    this.set('_callback', null);\n  }.on('willDestroyElement')\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  The route for handling the "Categories" view

  @class DiscoveryCategoriesRoute
  @extends Discourse.Route
  @namespace Discourse
  @module Discourse
**/

Discourse.DiscoveryCategoriesRoute = Discourse.Route.extend(Discourse.OpenComposer, {
  renderTemplate: function() {
    this.render('navigation/categories', { outlet: 'navigation-bar' });
    this.render('discovery/categories', { outlet: 'list-container' });
  },

  beforeModel: function() {
    this.controllerFor('navigation/categories').set('filterMode', 'categories');
  },

  model: function() {
    // TODO: Remove this and ensure server side does not supply `topic_list`
    // if default page is categories
    PreloadStore.remove("topic_list");

    return Discourse.CategoryList.list('categories').then(function(list) {
      var tracking = Discourse.TopicTrackingState.current();
      if (tracking) {
        tracking.sync(list, 'categories');
        tracking.trackIncoming('categories');
      }
      return list;
    });
  },

  setupController: function(controller, model) {
    controller.set('model', model);
    Discourse.set('title', I18n.t('filters.categories.title'));

    // Only show either the Create Category or Create Topic button
    this.controllerFor('navigation/categories').set('canCreateCategory', model.get('can_create_category'));
    this.controllerFor('navigation/categories').set('canCreateTopic', model.get('can_create_topic') && !model.get('can_create_category'));

    this.openTopicDraft(model);

  },

  actions: {
    createCategory: function() {
      Discourse.Route.showModal(this, 'editCategory', Discourse.Category.create({
        color: 'AB9364', text_color: 'FFFFFF', group_permissions: [{group_name: 'everyone', permission_type: 1}],
        available_groups: Discourse.Site.current().group_names,
        allow_badges: true
      }));
      this.controllerFor('editCategory').set('selectedTab', 'general');
    },

    createTopic: function() {
      this.openComposer(this.controllerFor('discovery/categories'));
    }
  }
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/discovery_categories_route.js'] = "/**\n  The route for handling the \"Categories\" view\n\n  @class DiscoveryCategoriesRoute\n  @extends Discourse.Route\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.DiscoveryCategoriesRoute = Discourse.Route.extend(Discourse.OpenComposer, {\n  renderTemplate: function() {\n    this.render('navigation/categories', { outlet: 'navigation-bar' });\n    this.render('discovery/categories', { outlet: 'list-container' });\n  },\n\n  beforeModel: function() {\n    this.controllerFor('navigation/categories').set('filterMode', 'categories');\n  },\n\n  model: function() {\n    // TODO: Remove this and ensure server side does not supply `topic_list`\n    // if default page is categories\n    PreloadStore.remove(\"topic_list\");\n\n    return Discourse.CategoryList.list('categories').then(function(list) {\n      var tracking = Discourse.TopicTrackingState.current();\n      if (tracking) {\n        tracking.sync(list, 'categories');\n        tracking.trackIncoming('categories');\n      }\n      return list;\n    });\n  },\n\n  setupController: function(controller, model) {\n    controller.set('model', model);\n    Discourse.set('title', I18n.t('filters.categories.title'));\n\n    // Only show either the Create Category or Create Topic button\n    this.controllerFor('navigation/categories').set('canCreateCategory', model.get('can_create_category'));\n    this.controllerFor('navigation/categories').set('canCreateTopic', model.get('can_create_topic') \u0026\u0026 !model.get('can_create_category'));\n\n    this.openTopicDraft(model);\n\n  },\n\n  actions: {\n    createCategory: function() {\n      Discourse.Route.showModal(this, 'editCategory', Discourse.Category.create({\n        color: 'AB9364', text_color: 'FFFFFF', group_permissions: [{group_name: 'everyone', permission_type: 1}],\n        available_groups: Discourse.Site.current().group_names,\n        allow_badges: true\n      }));\n      this.controllerFor('editCategory').set('selectedTab', 'general');\n    },\n\n    createTopic: function() {\n      this.openComposer(this.controllerFor('discovery/categories'));\n    }\n  }\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  The parent route for all discovery routes. Handles the logic for showing
  the loading spinners.

  @class DiscoveryRoute
  @extends Discourse.Route
  @namespace Discourse
  @module Discourse
**/

Discourse.DiscoveryRoute = Discourse.Route.extend(Discourse.ScrollTop, Discourse.OpenComposer, {

  redirect: function() { Discourse.redirectIfLoginRequired(this); },

  beforeModel: function(transition) {
    if (transition.targetName.indexOf("discovery.top") === -1 &&
        Discourse.User.currentProp("should_be_redirected_to_top")) {
      Discourse.User.currentProp("should_be_redirected_to_top", false);
      this.replaceWith("discovery.top");
    }
  },

  actions: {
    loading: function() {
      var controller = this.controllerFor('discovery');

      // If we're already loading don't do anything
      if (controller.get('loading')) { return; }

      controller.set('loading', true);
      controller.set('scheduledSpinner', Ember.run.later(controller, function() {
        this.set('loadingSpinner', true);
      },500));
    },

    loadingComplete: function() {
      var controller = this.controllerFor('discovery');
      Ember.run.cancel(controller.get('scheduledSpinner'));
      controller.setProperties({ loading: false, loadingSpinner: false });
      if (!Discourse.Session.currentProp('topicListScrollPosition')) {
        this._scrollTop();
      }
    },

    didTransition: function() {
      this.send('loadingComplete');
    },

    // clear a pinned topic
    clearPin: function(topic) {
      topic.clearPin();
    },

    createTopic: function() {
      this.openComposer(this.controllerFor('discovery/topics'));
    },

    changeBulkTemplate: function(w) {
      var controllerName = w.replace('modal/', ''),
          factory = this.container.lookupFactory('controller:' + controllerName);

      this.render(w, {into: 'topicBulkActions', outlet: 'bulkOutlet', controller: factory ? controllerName : 'topic-bulk-actions'});
    },

    showBulkActions: function() {
      var selected = this.controllerFor('discovery/topics').get('selected');
      Discourse.Route.showModal(this, 'topicBulkActions', selected);
      this.send('changeBulkTemplate', 'modal/bulk_actions_buttons');
    }
  }

});



// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/discovery_route.js'] = "/**\n  The parent route for all discovery routes. Handles the logic for showing\n  the loading spinners.\n\n  @class DiscoveryRoute\n  @extends Discourse.Route\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.DiscoveryRoute = Discourse.Route.extend(Discourse.ScrollTop, Discourse.OpenComposer, {\n\n  redirect: function() { Discourse.redirectIfLoginRequired(this); },\n\n  beforeModel: function(transition) {\n    if (transition.targetName.indexOf(\"discovery.top\") === -1 \u0026\u0026\n        Discourse.User.currentProp(\"should_be_redirected_to_top\")) {\n      Discourse.User.currentProp(\"should_be_redirected_to_top\", false);\n      this.replaceWith(\"discovery.top\");\n    }\n  },\n\n  actions: {\n    loading: function() {\n      var controller = this.controllerFor('discovery');\n\n      // If we're already loading don't do anything\n      if (controller.get('loading')) { return; }\n\n      controller.set('loading', true);\n      controller.set('scheduledSpinner', Ember.run.later(controller, function() {\n        this.set('loadingSpinner', true);\n      },500));\n    },\n\n    loadingComplete: function() {\n      var controller = this.controllerFor('discovery');\n      Ember.run.cancel(controller.get('scheduledSpinner'));\n      controller.setProperties({ loading: false, loadingSpinner: false });\n      if (!Discourse.Session.currentProp('topicListScrollPosition')) {\n        this._scrollTop();\n      }\n    },\n\n    didTransition: function() {\n      this.send('loadingComplete');\n    },\n\n    // clear a pinned topic\n    clearPin: function(topic) {\n      topic.clearPin();\n    },\n\n    createTopic: function() {\n      this.openComposer(this.controllerFor('discovery/topics'));\n    },\n\n    changeBulkTemplate: function(w) {\n      var controllerName = w.replace('modal/', ''),\n          factory = this.container.lookupFactory('controller:' + controllerName);\n\n      this.render(w, {into: 'topicBulkActions', outlet: 'bulkOutlet', controller: factory ? controllerName : 'topic-bulk-actions'});\n    },\n\n    showBulkActions: function() {\n      var selected = this.controllerFor('discovery/topics').get('selected');\n      Discourse.Route.showModal(this, 'topicBulkActions', selected);\n      this.send('changeBulkTemplate', 'modal/bulk_actions_buttons');\n    }\n  }\n\n});\n\n";
define("discourse/routes/exception", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.Route.extend({
      serialize: function() {
        return "";
      }
    });
  });

Discourse.ExceptionRoute = require('discourse/routes/exception').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/exception.js'] = "define(\"discourse/routes/exception\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.Route.extend({\n      serialize: function() {\n        return \"\";\n      }\n    });\n  });";
define("discourse/routes/faq", 
  ["discourse/lib/static-route-builder","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var staticRouteBuilder = __dependency1__["default"];

    __exports__["default"] = staticRouteBuilder('faq');
  });

Discourse.FaqRoute = require('discourse/routes/faq').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/faq.js'] = "define(\"discourse/routes/faq\", \n  [\"discourse/lib/static-route-builder\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var staticRouteBuilder = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = staticRouteBuilder('faq');\n  });";
define("discourse/routes/group-index", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.Route.extend({
      model: function() {
        return this.modelFor('group').findPosts();
      },

      setupController: function(controller, model) {
        controller.set('model', model);
        this.controllerFor('group').set('showing', 'index');
      }
    });
  });

Discourse.GroupIndexRoute = require('discourse/routes/group-index').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/group-index.js'] = "define(\"discourse/routes/group-index\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.Route.extend({\n      model: function() {\n        return this.modelFor('group').findPosts();\n      },\n\n      setupController: function(controller, model) {\n        controller.set('model', model);\n        this.controllerFor('group').set('showing', 'index');\n      }\n    });\n  });";
define("discourse/routes/group-members", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.Route.extend({
      model: function() {
        return this.modelFor('group');
      },

      afterModel: function(model) {
        var self = this;
        return model.findMembers().then(function(result) {
          self.set('_members', result);
        });
      },

      setupController: function(controller) {
        controller.set('model', this.get('_members'));
        this.controllerFor('group').set('showing', 'members');
      }

    });
  });

Discourse.GroupMembersRoute = require('discourse/routes/group-members').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/group-members.js'] = "define(\"discourse/routes/group-members\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.Route.extend({\n      model: function() {\n        return this.modelFor('group');\n      },\n\n      afterModel: function(model) {\n        var self = this;\n        return model.findMembers().then(function(result) {\n          self.set('_members', result);\n        });\n      },\n\n      setupController: function(controller) {\n        controller.set('model', this.get('_members'));\n        this.controllerFor('group').set('showing', 'members');\n      }\n\n    });\n  });";
define("discourse/routes/group", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.Route.extend({

      model: function(params) {
        return Discourse.Group.find(params.name);
      },

      serialize: function(model) {
        return { name: model.get('name').toLowerCase() };
      },

      afterModel: function(model) {
        var self = this;
        return Discourse.Group.findGroupCounts(model.get('name')).then(function (counts) {
          self.set('counts', counts);
        });
      },

      setupController: function(controller, model) {
        controller.setProperties({
          model: model,
          counts: this.get('counts')
        });
      }
    });
  });

Discourse.GroupRoute = require('discourse/routes/group').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/group.js'] = "define(\"discourse/routes/group\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.Route.extend({\n\n      model: function(params) {\n        return Discourse.Group.find(params.name);\n      },\n\n      serialize: function(model) {\n        return { name: model.get('name').toLowerCase() };\n      },\n\n      afterModel: function(model) {\n        var self = this;\n        return Discourse.Group.findGroupCounts(model.get('name')).then(function (counts) {\n          self.set('counts', counts);\n        });\n      },\n\n      setupController: function(controller, model) {\n        controller.setProperties({\n          model: model,\n          counts: this.get('counts')\n        });\n      }\n    });\n  });";
define("discourse/routes/guidelines", 
  ["discourse/lib/static-route-builder","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var staticRouteBuilder = __dependency1__["default"];

    __exports__["default"] = staticRouteBuilder('guidelines');
  });

Discourse.GuidelinesRoute = require('discourse/routes/guidelines').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/guidelines.js'] = "define(\"discourse/routes/guidelines\", \n  [\"discourse/lib/static-route-builder\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var staticRouteBuilder = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = staticRouteBuilder('guidelines');\n  });";
define("discourse/routes/login", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.Route.extend({
      beforeModel: function() {
        if (!Discourse.SiteSettings.login_required) {
          this.replaceWith('discovery.latest').then(function(e) {
            Ember.run.next(function() {
              e.send('showLogin');
            });
          });
        }
      },

      model: function() {
        return Discourse.StaticPage.find('login');
      },

      renderTemplate: function() {
        // do nothing
        this.render('static');
      },

      setupController: function(controller, model) {
        this.controllerFor('static').set('model', model);
      }
    });
  });

Discourse.LoginRoute = require('discourse/routes/login').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/login.js'] = "define(\"discourse/routes/login\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.Route.extend({\n      beforeModel: function() {\n        if (!Discourse.SiteSettings.login_required) {\n          this.replaceWith('discovery.latest').then(function(e) {\n            Ember.run.next(function() {\n              e.send('showLogin');\n            });\n          });\n        }\n      },\n\n      model: function() {\n        return Discourse.StaticPage.find('login');\n      },\n\n      renderTemplate: function() {\n        // do nothing\n        this.render('static');\n      },\n\n      setupController: function(controller, model) {\n        this.controllerFor('static').set('model', model);\n      }\n    });\n  });";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  The common route stuff for a user's preference

  @class PreferencesRoute
  @extends Discourse.RestrictedUserRoute
  @namespace Discourse
  @module Discourse
**/

Discourse.PreferencesRoute = Discourse.RestrictedUserRoute.extend({
  model: function() {
    return this.modelFor('user');
  },

  setupController: function(controller, user) {
    controller.setProperties({ model: user, newNameInput: user.get('name') });
    this.controllerFor('user').set('indexStream', false);
  },

  actions: {
    showAvatarSelector: function() {
      Discourse.Route.showModal(this, 'avatar-selector');
      // all the properties needed for displaying the avatar selector modal
      var controller = this.controllerFor('avatar-selector');
      var user = this.modelFor('user');
      var props = user.getProperties(
        'username', 'email',
        'uploaded_avatar_id',
        'system_avatar_upload_id',
        'gravatar_avatar_upload_id',
        'custom_avatar_upload_id'
        );

      switch(props.uploaded_avatar_id){
      case props.system_avatar_upload_id:
        props.selected = "system";
        break;
      case props.gravatar_avatar_upload_id:
        props.selected = "gravatar";
        break;
      default:
        props.selected = "uploaded";
      }

      controller.setProperties(props);
    },

    saveAvatarSelection: function() {
      var user = this.modelFor('user');
      var avatarSelector = this.controllerFor('avatar-selector');


      // sends the information to the server if it has changed
      if (avatarSelector.get('selectedUploadId') !== user.get('uploaded_avatar_id')) {
        user.pickAvatar(avatarSelector.get('selectedUploadId'));
      }

      // saves the data back
      user.setProperties(avatarSelector.getProperties(
        'system_avatar_upload_id',
        'gravatar_avatar_upload_id',
        'custom_avatar_upload_id'
      ));
      avatarSelector.send('closeModal');
    },

  }
});

Discourse.PreferencesIndexRoute = Discourse.RestrictedUserRoute.extend({
  renderTemplate: function() {
    this.render('preferences', { into: 'user', outlet: 'userOutlet', controller: 'preferences' });
  }
});

/**
  The route for editing a user's "About Me" bio.

  @class PreferencesAboutRoute
  @extends Discourse.RestrictedUserRoute
  @namespace Discourse
  @module Discourse
**/
Discourse.PreferencesAboutRoute = Discourse.RestrictedUserRoute.extend({
  model: function() {
    return this.modelFor('user');
  },

  renderTemplate: function() {
    this.render({ into: 'user', outlet: 'userOutlet' });
  },

  setupController: function(controller, model) {
    controller.setProperties({ model: model, newBio: model.get('bio_raw') });
  },

  // A bit odd, but if we leave to /preferences we need to re-render that outlet
  deactivate: function() {
    this._super();
    this.render('preferences', { into: 'user', outlet: 'userOutlet', controller: 'preferences' });
  },

  actions: {
    changeAbout: function() {
      var route = this;
      var controller = route.controllerFor('preferences/about');

      controller.setProperties({ saving: true });
      return controller.get('model').save().then(function() {
        controller.set('saving', false);
        route.transitionTo('user.index');
      }, function() {
        // model failed to save
        controller.set('saving', false);
        alert(I18n.t('generic_error'));
      });
    }
  }

});

/**
  The route for editing a user's email

  @class PreferencesEmailRoute
  @extends Discourse.RestrictedUserRoute
  @namespace Discourse
  @module Discourse
**/
Discourse.PreferencesEmailRoute = Discourse.RestrictedUserRoute.extend({
  model: function() {
    return this.modelFor('user');
  },

  renderTemplate: function() {
    this.render({ into: 'user', outlet: 'userOutlet' });
  },

  setupController: function(controller, model) {
    controller.setProperties({ model: model, newEmail: model.get('email') });
  },

  // A bit odd, but if we leave to /preferences we need to re-render that outlet
  deactivate: function() {
    this._super();
    this.render('preferences', { into: 'user', outlet: 'userOutlet', controller: 'preferences' });
  }
});

/**
  The route for updating a user's username

  @class PreferencesUsernameRoute
  @extends Discourse.RestrictedUserRoute
  @namespace Discourse
  @module Discourse
**/
Discourse.PreferencesUsernameRoute = Discourse.RestrictedUserRoute.extend({
  model: function() {
    return this.modelFor('user');
  },

  renderTemplate: function() {
    return this.render({ into: 'user', outlet: 'userOutlet' });
  },

  // A bit odd, but if we leave to /preferences we need to re-render that outlet
  deactivate: function() {
    this._super();
    this.render('preferences', { into: 'user', outlet: 'userOutlet', controller: 'preferences' });
  },

  setupController: function(controller, user) {
    controller.setProperties({ model: user, newUsername: user.get('username') });
  }
});

/**
  The route for updating a user's title to one of their badges

  @class PreferencesBadgeTitleRoute
  @extends Discourse.RestrictedUserRoute
  @namespace Discourse
  @module Discourse
**/
Discourse.PreferencesBadgeTitleRoute = Discourse.RestrictedUserRoute.extend({
  model: function() {
    return Discourse.UserBadge.findByUsername(this.modelFor('user').get('username'));
  },

  renderTemplate: function() {
    return this.render('user/badge-title', { into: 'user', outlet: 'userOutlet' });
  },

  // A bit odd, but if we leave to /preferences we need to re-render that outlet
  deactivate: function() {
    this._super();
    this.render('preferences', { into: 'user', outlet: 'userOutlet', controller: 'preferences' });
  },

  setupController: function(controller, model) {
    controller.set('model', model);
    controller.set('user', this.modelFor('user'));

    model.forEach(function(userBadge) {
      if (userBadge.get('badge.name') === controller.get('user.title')) {
        controller.set('selectedUserBadgeId', userBadge.get('id'));
      }
    });
    if (!controller.get('selectedUserBadgeId') && controller.get('selectableUserBadges.length') > 0) {
      controller.set('selectedUserBadgeId', controller.get('selectableUserBadges')[0].get('id'));
    }
  }
});




// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/preferences_routes.js'] = "/**\n  The common route stuff for a user's preference\n\n  @class PreferencesRoute\n  @extends Discourse.RestrictedUserRoute\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.PreferencesRoute = Discourse.RestrictedUserRoute.extend({\n  model: function() {\n    return this.modelFor('user');\n  },\n\n  setupController: function(controller, user) {\n    controller.setProperties({ model: user, newNameInput: user.get('name') });\n    this.controllerFor('user').set('indexStream', false);\n  },\n\n  actions: {\n    showAvatarSelector: function() {\n      Discourse.Route.showModal(this, 'avatar-selector');\n      // all the properties needed for displaying the avatar selector modal\n      var controller = this.controllerFor('avatar-selector');\n      var user = this.modelFor('user');\n      var props = user.getProperties(\n        'username', 'email',\n        'uploaded_avatar_id',\n        'system_avatar_upload_id',\n        'gravatar_avatar_upload_id',\n        'custom_avatar_upload_id'\n        );\n\n      switch(props.uploaded_avatar_id){\n      case props.system_avatar_upload_id:\n        props.selected = \"system\";\n        break;\n      case props.gravatar_avatar_upload_id:\n        props.selected = \"gravatar\";\n        break;\n      default:\n        props.selected = \"uploaded\";\n      }\n\n      controller.setProperties(props);\n    },\n\n    saveAvatarSelection: function() {\n      var user = this.modelFor('user');\n      var avatarSelector = this.controllerFor('avatar-selector');\n\n\n      // sends the information to the server if it has changed\n      if (avatarSelector.get('selectedUploadId') !== user.get('uploaded_avatar_id')) {\n        user.pickAvatar(avatarSelector.get('selectedUploadId'));\n      }\n\n      // saves the data back\n      user.setProperties(avatarSelector.getProperties(\n        'system_avatar_upload_id',\n        'gravatar_avatar_upload_id',\n        'custom_avatar_upload_id'\n      ));\n      avatarSelector.send('closeModal');\n    },\n\n  }\n});\n\nDiscourse.PreferencesIndexRoute = Discourse.RestrictedUserRoute.extend({\n  renderTemplate: function() {\n    this.render('preferences', { into: 'user', outlet: 'userOutlet', controller: 'preferences' });\n  }\n});\n\n/**\n  The route for editing a user's \"About Me\" bio.\n\n  @class PreferencesAboutRoute\n  @extends Discourse.RestrictedUserRoute\n  @namespace Discourse\n  @module Discourse\n**/\nDiscourse.PreferencesAboutRoute = Discourse.RestrictedUserRoute.extend({\n  model: function() {\n    return this.modelFor('user');\n  },\n\n  renderTemplate: function() {\n    this.render({ into: 'user', outlet: 'userOutlet' });\n  },\n\n  setupController: function(controller, model) {\n    controller.setProperties({ model: model, newBio: model.get('bio_raw') });\n  },\n\n  // A bit odd, but if we leave to /preferences we need to re-render that outlet\n  deactivate: function() {\n    this._super();\n    this.render('preferences', { into: 'user', outlet: 'userOutlet', controller: 'preferences' });\n  },\n\n  actions: {\n    changeAbout: function() {\n      var route = this;\n      var controller = route.controllerFor('preferences/about');\n\n      controller.setProperties({ saving: true });\n      return controller.get('model').save().then(function() {\n        controller.set('saving', false);\n        route.transitionTo('user.index');\n      }, function() {\n        // model failed to save\n        controller.set('saving', false);\n        alert(I18n.t('generic_error'));\n      });\n    }\n  }\n\n});\n\n/**\n  The route for editing a user's email\n\n  @class PreferencesEmailRoute\n  @extends Discourse.RestrictedUserRoute\n  @namespace Discourse\n  @module Discourse\n**/\nDiscourse.PreferencesEmailRoute = Discourse.RestrictedUserRoute.extend({\n  model: function() {\n    return this.modelFor('user');\n  },\n\n  renderTemplate: function() {\n    this.render({ into: 'user', outlet: 'userOutlet' });\n  },\n\n  setupController: function(controller, model) {\n    controller.setProperties({ model: model, newEmail: model.get('email') });\n  },\n\n  // A bit odd, but if we leave to /preferences we need to re-render that outlet\n  deactivate: function() {\n    this._super();\n    this.render('preferences', { into: 'user', outlet: 'userOutlet', controller: 'preferences' });\n  }\n});\n\n/**\n  The route for updating a user's username\n\n  @class PreferencesUsernameRoute\n  @extends Discourse.RestrictedUserRoute\n  @namespace Discourse\n  @module Discourse\n**/\nDiscourse.PreferencesUsernameRoute = Discourse.RestrictedUserRoute.extend({\n  model: function() {\n    return this.modelFor('user');\n  },\n\n  renderTemplate: function() {\n    return this.render({ into: 'user', outlet: 'userOutlet' });\n  },\n\n  // A bit odd, but if we leave to /preferences we need to re-render that outlet\n  deactivate: function() {\n    this._super();\n    this.render('preferences', { into: 'user', outlet: 'userOutlet', controller: 'preferences' });\n  },\n\n  setupController: function(controller, user) {\n    controller.setProperties({ model: user, newUsername: user.get('username') });\n  }\n});\n\n/**\n  The route for updating a user's title to one of their badges\n\n  @class PreferencesBadgeTitleRoute\n  @extends Discourse.RestrictedUserRoute\n  @namespace Discourse\n  @module Discourse\n**/\nDiscourse.PreferencesBadgeTitleRoute = Discourse.RestrictedUserRoute.extend({\n  model: function() {\n    return Discourse.UserBadge.findByUsername(this.modelFor('user').get('username'));\n  },\n\n  renderTemplate: function() {\n    return this.render('user/badge-title', { into: 'user', outlet: 'userOutlet' });\n  },\n\n  // A bit odd, but if we leave to /preferences we need to re-render that outlet\n  deactivate: function() {\n    this._super();\n    this.render('preferences', { into: 'user', outlet: 'userOutlet', controller: 'preferences' });\n  },\n\n  setupController: function(controller, model) {\n    controller.set('model', model);\n    controller.set('user', this.modelFor('user'));\n\n    model.forEach(function(userBadge) {\n      if (userBadge.get('badge.name') === controller.get('user.title')) {\n        controller.set('selectedUserBadgeId', userBadge.get('id'));\n      }\n    });\n    if (!controller.get('selectedUserBadgeId') \u0026\u0026 controller.get('selectableUserBadges.length') \u003e 0) {\n      controller.set('selectedUserBadgeId', controller.get('selectableUserBadges')[0].get('id'));\n    }\n  }\n});\n\n\n";
define("discourse/routes/privacy", 
  ["discourse/lib/static-route-builder","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var staticRouteBuilder = __dependency1__["default"];

    __exports__["default"] = staticRouteBuilder('privacy');
  });

Discourse.PrivacyRoute = require('discourse/routes/privacy').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/privacy.js'] = "define(\"discourse/routes/privacy\", \n  [\"discourse/lib/static-route-builder\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var staticRouteBuilder = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = staticRouteBuilder('privacy');\n  });";
define("discourse/routes/signup", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.Route.extend({
      beforeModel: function() {
        this.replaceWith('discovery.latest').then(function(e) {
          Ember.run.next(function() {
            e.send('showCreateAccount');
          });
        });
      },
    });
  });

Discourse.SignupRoute = require('discourse/routes/signup').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/signup.js'] = "define(\"discourse/routes/signup\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.Route.extend({\n      beforeModel: function() {\n        this.replaceWith('discovery.latest').then(function(e) {\n          Ember.run.next(function() {\n            e.send('showCreateAccount');\n          });\n        });\n      },\n    });\n  });";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  This route is used for retrieving a topic based on params

  @class TopicFromParamsRoute
  @extends Discourse.Route
  @namespace Discourse
  @module Discourse
**/

Discourse.TopicFromParamsRoute = Discourse.Route.extend({

  setupController: function(controller, params) {
    params = params || {};
    params.track_visit = true;
    var topic = this.modelFor('topic'),
        postStream = topic.get('postStream');

    var topicController = this.controllerFor('topic'),
        topicProgressController = this.controllerFor('topic-progress'),
        composerController = this.controllerFor('composer');

    // I sincerely hope no topic gets this many posts
    if (params.nearPost === "last") { params.nearPost = 999999999; }

    postStream.refresh(params).then(function () {
      // The post we requested might not exist. Let's find the closest post
      var closestPost = postStream.closestPostForPostNumber(params.nearPost || 1),
          closest = closestPost.get('post_number'),
          progress = postStream.progressIndexOfPost(closestPost);

      topicController.setProperties({
        currentPost: closest,
        enteredAt: new Date().getTime().toString(),
        highlightOnInsert: closest
      });

      topicProgressController.setProperties({
        progressPosition: progress,
        expanded: false
      });
      Discourse.URL.jumpToPost(closest);

      if (topic.present('draft')) {
        composerController.open({
          draft: Discourse.Draft.getLocal(topic.get('draft_key'), topic.get('draft')),
          draftKey: topic.get('draft_key'),
          draftSequence: topic.get('draft_sequence'),
          topic: topic,
          ignoreIfChanged: true
        });
      }
    });
  }

});

Discourse.TopicFromParamsNearRoute = Discourse.TopicFromParamsRoute;



// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/topic_from_params_route.js'] = "/**\n  This route is used for retrieving a topic based on params\n\n  @class TopicFromParamsRoute\n  @extends Discourse.Route\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.TopicFromParamsRoute = Discourse.Route.extend({\n\n  setupController: function(controller, params) {\n    params = params || {};\n    params.track_visit = true;\n    var topic = this.modelFor('topic'),\n        postStream = topic.get('postStream');\n\n    var topicController = this.controllerFor('topic'),\n        topicProgressController = this.controllerFor('topic-progress'),\n        composerController = this.controllerFor('composer');\n\n    // I sincerely hope no topic gets this many posts\n    if (params.nearPost === \"last\") { params.nearPost = 999999999; }\n\n    postStream.refresh(params).then(function () {\n      // The post we requested might not exist. Let's find the closest post\n      var closestPost = postStream.closestPostForPostNumber(params.nearPost || 1),\n          closest = closestPost.get('post_number'),\n          progress = postStream.progressIndexOfPost(closestPost);\n\n      topicController.setProperties({\n        currentPost: closest,\n        enteredAt: new Date().getTime().toString(),\n        highlightOnInsert: closest\n      });\n\n      topicProgressController.setProperties({\n        progressPosition: progress,\n        expanded: false\n      });\n      Discourse.URL.jumpToPost(closest);\n\n      if (topic.present('draft')) {\n        composerController.open({\n          draft: Discourse.Draft.getLocal(topic.get('draft_key'), topic.get('draft')),\n          draftKey: topic.get('draft_key'),\n          draftSequence: topic.get('draft_sequence'),\n          topic: topic,\n          ignoreIfChanged: true\n        });\n      }\n    });\n  }\n\n});\n\nDiscourse.TopicFromParamsNearRoute = Discourse.TopicFromParamsRoute;\n\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

var isTransitioning = false,
    scheduledReplace = null,
    lastScrollPos = null,
    SCROLL_DELAY = 500;

Discourse.TopicRoute = Discourse.Route.extend({
  redirect: function() { Discourse.redirectIfLoginRequired(this); },

  queryParams: {
    filter: { replace: true },
    username_filters: { replace: true },
    show_deleted: { replace: true }
  },

  actions: {
    // Modals that can pop up within a topic
    expandPostUser: function(post) {
      this.controllerFor('user-expansion').show(post.get('username'), post.get('uploaded_avatar_id'));
    },

    expandPostUsername: function(username) {
      username = username.replace(/^@/, '');
      if (!Em.isEmpty(username)) {
        this.controllerFor('user-expansion').show(username);
      }
    },

    showFlags: function(post) {
      Discourse.Route.showModal(this, 'flag', post);
      this.controllerFor('flag').setProperties({ selected: null });
    },

    showFlagTopic: function(topic) {
      Discourse.Route.showModal(this, 'flag', topic);
      this.controllerFor('flag').setProperties({ selected: null, flagTopic: true });
    },

    showAutoClose: function() {
      Discourse.Route.showModal(this, 'editTopicAutoClose', this.modelFor('topic'));
      this.controllerFor('modal').set('modalClass', 'edit-auto-close-modal');
    },

    showInvite: function() {
      Discourse.Route.showModal(this, 'invite', this.modelFor('topic'));
      this.controllerFor('invite').reset();
    },

    showPrivateInvite: function() {
      Discourse.Route.showModal(this, 'invitePrivate', this.modelFor('topic'));
      this.controllerFor('invitePrivate').setProperties({
        email: null,
        error: false,
        saving: false,
        finished: false
      });
    },

    showHistory: function(post) {
      Discourse.Route.showModal(this, 'history', post);
      this.controllerFor('history').refresh(post.get("id"), post.get("version"));
      this.controllerFor('modal').set('modalClass', 'history-modal');
    },

    mergeTopic: function() {
      Discourse.Route.showModal(this, 'mergeTopic', this.modelFor('topic'));
    },

    splitTopic: function() {
      Discourse.Route.showModal(this, 'split-topic', this.modelFor('topic'));
    },

    changeOwner: function() {
      Discourse.Route.showModal(this, 'changeOwner', this.modelFor('topic'));
    },

    // Use replaceState to update the URL once it changes
    postChangedRoute: function(currentPost) {

      // do nothing if we are transitioning to another route
      if (isTransitioning || Discourse.TopicRoute.disableReplaceState) { return; }

      var topic = this.modelFor('topic');
      if (topic && currentPost) {
        var postUrl = topic.get('url');
        if (currentPost > 1) { postUrl += "/" + currentPost; }

        Em.run.cancel(scheduledReplace);
        lastScrollPos = parseInt($(document).scrollTop(), 10);
        scheduledReplace = Em.run.later(this, '_replaceUnlessScrolling', postUrl, SCROLL_DELAY);
      }
    },

    willTransition: function() {
      Em.run.cancel(scheduledReplace);
      isTransitioning = true;
      return true;
    }
  },

  // replaceState can be very slow on Android Chrome. This function debounces replaceState
  // within a topic until scrolling stops
  _replaceUnlessScrolling: function(url) {
    var currentPos = parseInt($(document).scrollTop(), 10);
    if (currentPos === lastScrollPos) {
      Discourse.URL.replaceState(url);
      return;
    }
    lastScrollPos = currentPos;
    scheduledReplace = Em.run.later(this, '_replaceUnlessScrolling', url, SCROLL_DELAY);
  },

  setupParams: function(topic, params) {
    var postStream = topic.get('postStream');
    postStream.set('summary', Em.get(params, 'filter') === 'summary');
    postStream.set('show_deleted', !!Em.get(params, 'show_deleted'));

    var usernames = Em.get(params, 'username_filters'),
        userFilters = postStream.get('userFilters');

    userFilters.clear();
    if (!Em.isEmpty(usernames) && usernames !== 'undefined') {
      userFilters.addObjects(usernames.split(','));
    }

    return topic;
  },

  model: function(params, transition) {
    var queryParams = transition.queryParams;

    var topic = this.modelFor('topic');
    if (topic && (topic.get('id') === parseInt(params.id, 10))) {
      this.setupParams(topic, queryParams);
      // If we have the existing model, refresh it
      return topic.get('postStream').refresh().then(function() {
        return topic;
      });
    } else {
      return this.setupParams(Discourse.Topic.create(_.omit(params, 'username_filters', 'filter')), queryParams);
    }
  },

  activate: function() {
    this._super();
    isTransitioning = false;

    var topic = this.modelFor('topic');
    Discourse.Session.currentProp('lastTopicIdViewed', parseInt(topic.get('id'), 10));
    this.controllerFor('search').set('searchContext', topic.get('searchContext'));
  },

  deactivate: function() {
    this._super();

    // Clear the search context
    this.controllerFor('search').set('searchContext', null);
    this.controllerFor('user-expansion').set('visible', false);

    var topicController = this.controllerFor('topic'),
        postStream = topicController.get('postStream');
    postStream.cancelFilter();

    topicController.set('multiSelect', false);
    topicController.unsubscribe();
    this.controllerFor('composer').set('topic', null);
    Discourse.ScreenTrack.current().stop();

    var headerController;
    if (headerController = this.controllerFor('header')) {
      headerController.set('topic', null);
      headerController.set('showExtraInfo', false);
    }
  },

  setupController: function(controller, model) {
    // In case we navigate from one topic directly to another
    isTransitioning = false;

    if (Discourse.Mobile.mobileView) {
      // close the dropdowns on mobile
      $('.d-dropdown').hide();
      $('header ul.icons li').removeClass('active');
      $('[data-toggle="dropdown"]').parent().removeClass('open');
    }

    controller.setProperties({
      model: model,
      editingTopic: false
    });

    Discourse.TopicRoute.trigger('setupTopicController', this);

    this.controllerFor('header').setProperties({
      topic: model,
      showExtraInfo: false
    });

    this.controllerFor('composer').set('topic', model);
    Discourse.TopicTrackingState.current().trackIncoming('all');
    controller.subscribe();

    this.controllerFor('topic-progress').set('model', model);
    // We reset screen tracking every time a topic is entered
    Discourse.ScreenTrack.current().start(model.get('id'), controller);
  }

});

RSVP.EventTarget.mixin(Discourse.TopicRoute);


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/topic_route.js'] = "var isTransitioning = false,\n    scheduledReplace = null,\n    lastScrollPos = null,\n    SCROLL_DELAY = 500;\n\nDiscourse.TopicRoute = Discourse.Route.extend({\n  redirect: function() { Discourse.redirectIfLoginRequired(this); },\n\n  queryParams: {\n    filter: { replace: true },\n    username_filters: { replace: true },\n    show_deleted: { replace: true }\n  },\n\n  actions: {\n    // Modals that can pop up within a topic\n    expandPostUser: function(post) {\n      this.controllerFor('user-expansion').show(post.get('username'), post.get('uploaded_avatar_id'));\n    },\n\n    expandPostUsername: function(username) {\n      username = username.replace(/^@/, '');\n      if (!Em.isEmpty(username)) {\n        this.controllerFor('user-expansion').show(username);\n      }\n    },\n\n    showFlags: function(post) {\n      Discourse.Route.showModal(this, 'flag', post);\n      this.controllerFor('flag').setProperties({ selected: null });\n    },\n\n    showFlagTopic: function(topic) {\n      Discourse.Route.showModal(this, 'flag', topic);\n      this.controllerFor('flag').setProperties({ selected: null, flagTopic: true });\n    },\n\n    showAutoClose: function() {\n      Discourse.Route.showModal(this, 'editTopicAutoClose', this.modelFor('topic'));\n      this.controllerFor('modal').set('modalClass', 'edit-auto-close-modal');\n    },\n\n    showInvite: function() {\n      Discourse.Route.showModal(this, 'invite', this.modelFor('topic'));\n      this.controllerFor('invite').reset();\n    },\n\n    showPrivateInvite: function() {\n      Discourse.Route.showModal(this, 'invitePrivate', this.modelFor('topic'));\n      this.controllerFor('invitePrivate').setProperties({\n        email: null,\n        error: false,\n        saving: false,\n        finished: false\n      });\n    },\n\n    showHistory: function(post) {\n      Discourse.Route.showModal(this, 'history', post);\n      this.controllerFor('history').refresh(post.get(\"id\"), post.get(\"version\"));\n      this.controllerFor('modal').set('modalClass', 'history-modal');\n    },\n\n    mergeTopic: function() {\n      Discourse.Route.showModal(this, 'mergeTopic', this.modelFor('topic'));\n    },\n\n    splitTopic: function() {\n      Discourse.Route.showModal(this, 'split-topic', this.modelFor('topic'));\n    },\n\n    changeOwner: function() {\n      Discourse.Route.showModal(this, 'changeOwner', this.modelFor('topic'));\n    },\n\n    // Use replaceState to update the URL once it changes\n    postChangedRoute: function(currentPost) {\n\n      // do nothing if we are transitioning to another route\n      if (isTransitioning || Discourse.TopicRoute.disableReplaceState) { return; }\n\n      var topic = this.modelFor('topic');\n      if (topic \u0026\u0026 currentPost) {\n        var postUrl = topic.get('url');\n        if (currentPost \u003e 1) { postUrl += \"/\" + currentPost; }\n\n        Em.run.cancel(scheduledReplace);\n        lastScrollPos = parseInt($(document).scrollTop(), 10);\n        scheduledReplace = Em.run.later(this, '_replaceUnlessScrolling', postUrl, SCROLL_DELAY);\n      }\n    },\n\n    willTransition: function() {\n      Em.run.cancel(scheduledReplace);\n      isTransitioning = true;\n      return true;\n    }\n  },\n\n  // replaceState can be very slow on Android Chrome. This function debounces replaceState\n  // within a topic until scrolling stops\n  _replaceUnlessScrolling: function(url) {\n    var currentPos = parseInt($(document).scrollTop(), 10);\n    if (currentPos === lastScrollPos) {\n      Discourse.URL.replaceState(url);\n      return;\n    }\n    lastScrollPos = currentPos;\n    scheduledReplace = Em.run.later(this, '_replaceUnlessScrolling', url, SCROLL_DELAY);\n  },\n\n  setupParams: function(topic, params) {\n    var postStream = topic.get('postStream');\n    postStream.set('summary', Em.get(params, 'filter') === 'summary');\n    postStream.set('show_deleted', !!Em.get(params, 'show_deleted'));\n\n    var usernames = Em.get(params, 'username_filters'),\n        userFilters = postStream.get('userFilters');\n\n    userFilters.clear();\n    if (!Em.isEmpty(usernames) \u0026\u0026 usernames !== 'undefined') {\n      userFilters.addObjects(usernames.split(','));\n    }\n\n    return topic;\n  },\n\n  model: function(params, transition) {\n    var queryParams = transition.queryParams;\n\n    var topic = this.modelFor('topic');\n    if (topic \u0026\u0026 (topic.get('id') === parseInt(params.id, 10))) {\n      this.setupParams(topic, queryParams);\n      // If we have the existing model, refresh it\n      return topic.get('postStream').refresh().then(function() {\n        return topic;\n      });\n    } else {\n      return this.setupParams(Discourse.Topic.create(_.omit(params, 'username_filters', 'filter')), queryParams);\n    }\n  },\n\n  activate: function() {\n    this._super();\n    isTransitioning = false;\n\n    var topic = this.modelFor('topic');\n    Discourse.Session.currentProp('lastTopicIdViewed', parseInt(topic.get('id'), 10));\n    this.controllerFor('search').set('searchContext', topic.get('searchContext'));\n  },\n\n  deactivate: function() {\n    this._super();\n\n    // Clear the search context\n    this.controllerFor('search').set('searchContext', null);\n    this.controllerFor('user-expansion').set('visible', false);\n\n    var topicController = this.controllerFor('topic'),\n        postStream = topicController.get('postStream');\n    postStream.cancelFilter();\n\n    topicController.set('multiSelect', false);\n    topicController.unsubscribe();\n    this.controllerFor('composer').set('topic', null);\n    Discourse.ScreenTrack.current().stop();\n\n    var headerController;\n    if (headerController = this.controllerFor('header')) {\n      headerController.set('topic', null);\n      headerController.set('showExtraInfo', false);\n    }\n  },\n\n  setupController: function(controller, model) {\n    // In case we navigate from one topic directly to another\n    isTransitioning = false;\n\n    if (Discourse.Mobile.mobileView) {\n      // close the dropdowns on mobile\n      $('.d-dropdown').hide();\n      $('header ul.icons li').removeClass('active');\n      $('[data-toggle=\"dropdown\"]').parent().removeClass('open');\n    }\n\n    controller.setProperties({\n      model: model,\n      editingTopic: false\n    });\n\n    Discourse.TopicRoute.trigger('setupTopicController', this);\n\n    this.controllerFor('header').setProperties({\n      topic: model,\n      showExtraInfo: false\n    });\n\n    this.controllerFor('composer').set('topic', model);\n    Discourse.TopicTrackingState.current().trackIncoming('all');\n    controller.subscribe();\n\n    this.controllerFor('topic-progress').set('model', model);\n    // We reset screen tracking every time a topic is entered\n    Discourse.ScreenTrack.current().start(model.get('id'), controller);\n  }\n\n});\n\nRSVP.EventTarget.mixin(Discourse.TopicRoute);\n";
define("discourse/routes/tos", 
  ["discourse/lib/static-route-builder","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var staticRouteBuilder = __dependency1__["default"];

    __exports__["default"] = staticRouteBuilder('tos');
  });

Discourse.TosRoute = require('discourse/routes/tos').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/tos.js'] = "define(\"discourse/routes/tos\", \n  [\"discourse/lib/static-route-builder\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var staticRouteBuilder = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = staticRouteBuilder('tos');\n  });";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

Discourse.UnknownRoute = Em.Route.extend({
  model: function() {
    return Discourse.ajax("/404-body", {dataType: 'html'});
  }
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/unknown_route.js'] = "Discourse.UnknownRoute = Em.Route.extend({\n  model: function() {\n    return Discourse.ajax(\"/404-body\", {dataType: 'html'});\n  }\n});\n";
define("discourse/routes/user-activity", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.Route.extend({
      model: function() {
        return this.modelFor('user');
      },

      setupController: function(controller, user) {
        this.controllerFor('user-activity').set('model', user);
        this.controllerFor('user').set('pmView', null);

        // Bring up a draft
        var composerController = this.controllerFor('composer');
        controller.set('model', user);
        if (Discourse.User.current()) {
          Discourse.Draft.get('new_private_message').then(function(data) {
            if (data.draft) {
              composerController.open({
                draft: data.draft,
                draftKey: 'new_private_message',
                ignoreIfChanged: true,
                draftSequence: data.draft_sequence
              });
            }
          });
        }
      }
    });
  });

Discourse.UserActivityRoute = require('discourse/routes/user-activity').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/user-activity.js'] = "define(\"discourse/routes/user-activity\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.Route.extend({\n      model: function() {\n        return this.modelFor('user');\n      },\n\n      setupController: function(controller, user) {\n        this.controllerFor('user-activity').set('model', user);\n        this.controllerFor('user').set('pmView', null);\n\n        // Bring up a draft\n        var composerController = this.controllerFor('composer');\n        controller.set('model', user);\n        if (Discourse.User.current()) {\n          Discourse.Draft.get('new_private_message').then(function(data) {\n            if (data.draft) {\n              composerController.open({\n                draft: data.draft,\n                draftKey: 'new_private_message',\n                ignoreIfChanged: true,\n                draftSequence: data.draft_sequence\n              });\n            }\n          });\n        }\n      }\n    });\n  });";
define("discourse/routes/user-badges", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.Route.extend({
      model: function() {
        return Discourse.UserBadge.findByUsername(this.modelFor('user').get('username_lower'), {grouped: true});
      },

      setupController: function(controller, model) {
        this.controllerFor('user').set('indexStream', false);
        if (this.controllerFor('user_activity').get('content')) {
          this.controllerFor('user_activity').set('userActionType', -1);
        }
        controller.set('model', model);
      },

      renderTemplate: function() {
        this.render('user/badges', {into: 'user', outlet: 'userOutlet'});
      }
    });
  });

Discourse.UserBadgesRoute = require('discourse/routes/user-badges').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/user-badges.js'] = "define(\"discourse/routes/user-badges\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.Route.extend({\n      model: function() {\n        return Discourse.UserBadge.findByUsername(this.modelFor('user').get('username_lower'), {grouped: true});\n      },\n\n      setupController: function(controller, model) {\n        this.controllerFor('user').set('indexStream', false);\n        if (this.controllerFor('user_activity').get('content')) {\n          this.controllerFor('user_activity').set('userActionType', -1);\n        }\n        controller.set('model', model);\n      },\n\n      renderTemplate: function() {\n        this.render('user/badges', {into: 'user', outlet: 'userOutlet'});\n      }\n    });\n  });";
define("discourse/routes/user-index", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Em.Route.extend({

      beforeModel: function() {
        return this.replaceWith('userActivity');
      }

    });
  });

Discourse.UserIndexRoute = require('discourse/routes/user-index').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/user-index.js'] = "define(\"discourse/routes/user-index\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Em.Route.extend({\n\n      beforeModel: function() {\n        return this.replaceWith('userActivity');\n      }\n\n    });\n  });";
define("discourse/routes/user-invited", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.Route.extend({
      renderTemplate: function() {
        this.render({ into: 'user', outlet: 'userOutlet' });
      },

      model: function() {
        return Discourse.Invite.findInvitedBy(this.modelFor('user'));
      },

      setupController: function(controller, model) {
        controller.setProperties({
          model: model,
          user: this.controllerFor('user').get('model'),
          searchTerm: '',
          totalInvites: model.invites.length
        });
        this.controllerFor('user').set('indexStream', false);
      },

      actions: {
        showInvite: function() {
          Discourse.Route.showModal(this, 'invite', Discourse.User.current());
          this.controllerFor('invite').reset();
        },

        uploadSuccess: function(filename) {
          bootbox.alert(I18n.t("user.invited.bulk_invite.success", { filename: filename }));
        },

        uploadError: function(filename, message) {
          bootbox.alert(I18n.t("user.invited.bulk_invite.error", { filename: filename, message: message }));
        }
      }
    });
  });

Discourse.UserInvitedRoute = require('discourse/routes/user-invited').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/user-invited.js'] = "define(\"discourse/routes/user-invited\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.Route.extend({\n      renderTemplate: function() {\n        this.render({ into: 'user', outlet: 'userOutlet' });\n      },\n\n      model: function() {\n        return Discourse.Invite.findInvitedBy(this.modelFor('user'));\n      },\n\n      setupController: function(controller, model) {\n        controller.setProperties({\n          model: model,\n          user: this.controllerFor('user').get('model'),\n          searchTerm: '',\n          totalInvites: model.invites.length\n        });\n        this.controllerFor('user').set('indexStream', false);\n      },\n\n      actions: {\n        showInvite: function() {\n          Discourse.Route.showModal(this, 'invite', Discourse.User.current());\n          this.controllerFor('invite').reset();\n        },\n\n        uploadSuccess: function(filename) {\n          bootbox.alert(I18n.t(\"user.invited.bulk_invite.success\", { filename: filename }));\n        },\n\n        uploadError: function(filename, message) {\n          bootbox.alert(I18n.t(\"user.invited.bulk_invite.error\", { filename: filename, message: message }));\n        }\n      }\n    });\n  });";
define("discourse/routes/user-private-messages", 
  ["discourse/routes/user-activity","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var UserActivityRoute = __dependency1__["default"];

    __exports__["default"] = UserActivityRoute.extend();
  });

Discourse.UserPrivateMessagesRoute = require('discourse/routes/user-private-messages').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/user-private-messages.js'] = "define(\"discourse/routes/user-private-messages\", \n  [\"discourse/routes/user-activity\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var UserActivityRoute = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = UserActivityRoute.extend();\n  });";
define("discourse/routes/user", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = Discourse.Route.extend({

      actions: {
        logout: function() {
          Discourse.logout();
        },

        composePrivateMessage: function() {
          var user = this.modelFor('user');
          return this.controllerFor('composer').open({
            action: Discourse.Composer.PRIVATE_MESSAGE,
            usernames: user.get('username'),
            archetypeId: 'private_message',
            draftKey: 'new_private_message'
          });
        }
      },

      model: function(params) {
        // If we're viewing the currently logged in user, return that object
        // instead.
        var currentUser = Discourse.User.current();
        if (currentUser && (params.username.toLowerCase() === currentUser.get('username_lower'))) {
          return currentUser;
        }

        return Discourse.User.create({username: params.username});
      },

      afterModel: function() {
        return this.modelFor('user').findDetails();
      },

      serialize: function(model) {
        if (!model) return {};
        return { username: (Em.get(model, 'username') || '').toLowerCase() };
      },

      setupController: function(controller, user) {
        controller.set('model', user);

        // Add a search context
        this.controllerFor('search').set('searchContext', user.get('searchContext'));
      },

      activate: function() {
        this._super();
        var user = this.modelFor('user');
        Discourse.MessageBus.subscribe("/users/" + user.get('username_lower'), function(data) {
          user.loadUserAction(data);
        });
      },

      deactivate: function() {
        this._super();
        Discourse.MessageBus.unsubscribe("/users/" + this.modelFor('user').get('username_lower'));

        // Remove the search context
        this.controllerFor('search').set('searchContext', null);
      }

    });
  });

Discourse.UserRoute = require('discourse/routes/user').default;

window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/user.js'] = "define(\"discourse/routes/user\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Discourse.Route.extend({\n\n      actions: {\n        logout: function() {\n          Discourse.logout();\n        },\n\n        composePrivateMessage: function() {\n          var user = this.modelFor('user');\n          return this.controllerFor('composer').open({\n            action: Discourse.Composer.PRIVATE_MESSAGE,\n            usernames: user.get('username'),\n            archetypeId: 'private_message',\n            draftKey: 'new_private_message'\n          });\n        }\n      },\n\n      model: function(params) {\n        // If we're viewing the currently logged in user, return that object\n        // instead.\n        var currentUser = Discourse.User.current();\n        if (currentUser \u0026\u0026 (params.username.toLowerCase() === currentUser.get('username_lower'))) {\n          return currentUser;\n        }\n\n        return Discourse.User.create({username: params.username});\n      },\n\n      afterModel: function() {\n        return this.modelFor('user').findDetails();\n      },\n\n      serialize: function(model) {\n        if (!model) return {};\n        return { username: (Em.get(model, 'username') || '').toLowerCase() };\n      },\n\n      setupController: function(controller, user) {\n        controller.set('model', user);\n\n        // Add a search context\n        this.controllerFor('search').set('searchContext', user.get('searchContext'));\n      },\n\n      activate: function() {\n        this._super();\n        var user = this.modelFor('user');\n        Discourse.MessageBus.subscribe(\"/users/\" + user.get('username_lower'), function(data) {\n          user.loadUserAction(data);\n        });\n      },\n\n      deactivate: function() {\n        this._super();\n        Discourse.MessageBus.unsubscribe(\"/users/\" + this.modelFor('user').get('username_lower'));\n\n        // Remove the search context\n        this.controllerFor('search').set('searchContext', null);\n      }\n\n    });\n  });";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

/**
  The base route for showing an activity stream.

  @class UserActivityStreamRoute
  @extends Discourse.Route
  @namespace Discourse
  @module Discourse
**/

Discourse.UserActivityStreamRoute = Discourse.Route.extend({
  model: function() {
    return this.modelFor('user').get('stream');
  },

  afterModel: function() {
    return this.modelFor('user').get('stream').filterBy(this.get('userActionType'));
  },

  renderTemplate: function() {
    this.render('user_stream', {into: 'user', outlet: 'userOutlet'});
  },

  setupController: function(controller, model) {
    controller.set('model', model);
    this.controllerFor('user_activity').set('userActionType', this.get('userActionType'));

    this.controllerFor('user').set('indexStream', !this.get('userActionType'));
  },

  actions: {

    removeBookmark: function(userAction) {
      var self = this;
      Discourse.Post.bookmark(userAction.get('post_id'), false)
               .then(function() {
                  // remove the user action from the stream
                  self.modelFor("user").get("stream").remove(userAction);
                  // update the counts
                  self.modelFor("user").get("stats").forEach(function (stat) {
                    if (stat.get("action_type") === userAction.action_type) {
                      stat.decrementProperty("count");
                    }
                  });
                });
    },

  }
});

// Build all activity stream routes
['bookmarks', 'edits', 'likes_given', 'likes_received', 'replies', 'posts', 'index'].forEach(function (userAction) {
  Discourse["UserActivity" + userAction.classify() + "Route"] = Discourse.UserActivityStreamRoute.extend({
    userActionType: Discourse.UserAction.TYPES[userAction]
  });
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/user_activity_stream_route.js'] = "/**\n  The base route for showing an activity stream.\n\n  @class UserActivityStreamRoute\n  @extends Discourse.Route\n  @namespace Discourse\n  @module Discourse\n**/\n\nDiscourse.UserActivityStreamRoute = Discourse.Route.extend({\n  model: function() {\n    return this.modelFor('user').get('stream');\n  },\n\n  afterModel: function() {\n    return this.modelFor('user').get('stream').filterBy(this.get('userActionType'));\n  },\n\n  renderTemplate: function() {\n    this.render('user_stream', {into: 'user', outlet: 'userOutlet'});\n  },\n\n  setupController: function(controller, model) {\n    controller.set('model', model);\n    this.controllerFor('user_activity').set('userActionType', this.get('userActionType'));\n\n    this.controllerFor('user').set('indexStream', !this.get('userActionType'));\n  },\n\n  actions: {\n\n    removeBookmark: function(userAction) {\n      var self = this;\n      Discourse.Post.bookmark(userAction.get('post_id'), false)\n               .then(function() {\n                  // remove the user action from the stream\n                  self.modelFor(\"user\").get(\"stream\").remove(userAction);\n                  // update the counts\n                  self.modelFor(\"user\").get(\"stats\").forEach(function (stat) {\n                    if (stat.get(\"action_type\") === userAction.action_type) {\n                      stat.decrementProperty(\"count\");\n                    }\n                  });\n                });\n    },\n\n  }\n});\n\n// Build all activity stream routes\n['bookmarks', 'edits', 'likes_given', 'likes_received', 'replies', 'posts', 'index'].forEach(function (userAction) {\n  Discourse[\"UserActivity\" + userAction.classify() + \"Route\"] = Discourse.UserActivityStreamRoute.extend({\n    userActionType: Discourse.UserAction.TYPES[userAction]\n  });\n});\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

function createAdminPostRoute (filter) {
  return Discourse.Route.extend({
    model: function () {
      return this.modelFor("user").get("postsStream");
    },

    afterModel: function () {
      return this.modelFor("user").get("postsStream").filterBy(filter);
    },

    setupController: function (controller, model) {
      controller.set("model", model);
      this.controllerFor("user").set("indexStream", true);
    },

    renderTemplate: function() {
      this.render("user/posts", { into: "user", outlet: "userOutlet" });
    }
  });
}

Discourse.UserDeletedPostsRoute = createAdminPostRoute("deleted");
Discourse.UserFlaggedPostsRoute = createAdminPostRoute("flagged");


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/user_admin_posts_routes.js'] = "function createAdminPostRoute (filter) {\n  return Discourse.Route.extend({\n    model: function () {\n      return this.modelFor(\"user\").get(\"postsStream\");\n    },\n\n    afterModel: function () {\n      return this.modelFor(\"user\").get(\"postsStream\").filterBy(filter);\n    },\n\n    setupController: function (controller, model) {\n      controller.set(\"model\", model);\n      this.controllerFor(\"user\").set(\"indexStream\", true);\n    },\n\n    renderTemplate: function() {\n      this.render(\"user/posts\", { into: \"user\", outlet: \"userOutlet\" });\n    }\n  });\n}\n\nDiscourse.UserDeletedPostsRoute = createAdminPostRoute(\"deleted\");\nDiscourse.UserFlaggedPostsRoute = createAdminPostRoute(\"flagged\");\n";
(function () {

var $ = window.jQuery;
// IIFE Wrapped Content Begins:

Discourse.UserTopicListRoute = Discourse.Route.extend({
  renderTemplate: function() {
    this.render('user_topics_list', {into: 'user', outlet: 'userOutlet'});
  },

  setupController: function(controller, model) {
    this.controllerFor('user').set('indexStream', false);
    this.controllerFor('user-activity').set('userActionType', this.get('userActionType'));
    this.controllerFor('user_topics_list').setProperties({
      model: model,
      hideCategory: false,
      showParticipants: false
    });
  }
});

function createPMRoute(viewName, path) {
  return Discourse.UserTopicListRoute.extend({
    userActionType: Discourse.UserAction.TYPES.messages_received,

    model: function() {
      return Discourse.TopicList.find('topics/' + path + '/' + this.modelFor('user').get('username_lower'));
    },

    setupController: function() {
      this._super.apply(this, arguments);
      this.controllerFor('user_topics_list').setProperties({
        hideCategory: true,
        showParticipants: true
      });
      this.controllerFor('user').setProperties({
        pmView: viewName,
        indexStream: false
      });
    }
  });
}

Discourse.UserPrivateMessagesIndexRoute = createPMRoute('index', 'private-messages');
Discourse.UserPrivateMessagesMineRoute = createPMRoute('mine', 'private-messages-sent');
Discourse.UserPrivateMessagesUnreadRoute = createPMRoute('unread', 'private-messages-unread');

Discourse.UserActivityTopicsRoute = Discourse.UserTopicListRoute.extend({
  userActionType: Discourse.UserAction.TYPES.topics,

  model: function() {
    return Discourse.TopicList.find('topics/created-by/' + this.modelFor('user').get('username_lower'));
  }
});

Discourse.UserActivityStarredRoute = Discourse.UserTopicListRoute.extend({
  userActionType: Discourse.UserAction.TYPES.starred,

  model: function() {
    return Discourse.TopicList.find('starred', { user_id: this.modelFor('user').get('id') });
  }
});


// IIFE Wrapped Content Ends

 })(this);
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/routes/user_topic_list_routes.js'] = "Discourse.UserTopicListRoute = Discourse.Route.extend({\n  renderTemplate: function() {\n    this.render('user_topics_list', {into: 'user', outlet: 'userOutlet'});\n  },\n\n  setupController: function(controller, model) {\n    this.controllerFor('user').set('indexStream', false);\n    this.controllerFor('user-activity').set('userActionType', this.get('userActionType'));\n    this.controllerFor('user_topics_list').setProperties({\n      model: model,\n      hideCategory: false,\n      showParticipants: false\n    });\n  }\n});\n\nfunction createPMRoute(viewName, path) {\n  return Discourse.UserTopicListRoute.extend({\n    userActionType: Discourse.UserAction.TYPES.messages_received,\n\n    model: function() {\n      return Discourse.TopicList.find('topics/' + path + '/' + this.modelFor('user').get('username_lower'));\n    },\n\n    setupController: function() {\n      this._super.apply(this, arguments);\n      this.controllerFor('user_topics_list').setProperties({\n        hideCategory: true,\n        showParticipants: true\n      });\n      this.controllerFor('user').setProperties({\n        pmView: viewName,\n        indexStream: false\n      });\n    }\n  });\n}\n\nDiscourse.UserPrivateMessagesIndexRoute = createPMRoute('index', 'private-messages');\nDiscourse.UserPrivateMessagesMineRoute = createPMRoute('mine', 'private-messages-sent');\nDiscourse.UserPrivateMessagesUnreadRoute = createPMRoute('unread', 'private-messages-unread');\n\nDiscourse.UserActivityTopicsRoute = Discourse.UserTopicListRoute.extend({\n  userActionType: Discourse.UserAction.TYPES.topics,\n\n  model: function() {\n    return Discourse.TopicList.find('topics/created-by/' + this.modelFor('user').get('username_lower'));\n  }\n});\n\nDiscourse.UserActivityStarredRoute = Discourse.UserTopicListRoute.extend({\n  userActionType: Discourse.UserAction.TYPES.starred,\n\n  model: function() {\n    return Discourse.TopicList.find('starred', { user_id: this.modelFor('user').get('id') });\n  }\n});\n";
define("discourse/initializers/asset-version", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      Subscribe to "asset-version" change events via the Message Bus
    **/

    __exports__["default"] = {
      name: "asset-version",
      after: "message-bus",

      initialize: function () {
        var timeoutIsSet = false;
        if (!Discourse.MessageBus) { return; }

        Discourse.MessageBus.subscribe("/global/asset-version", function (version) {
          Discourse.set("assetVersion", version);

          if (!timeoutIsSet && Discourse.get("requiresRefresh")) {
            // since we can do this transparently for people browsing the forum
            //  hold back the message a couple of hours
            setTimeout(function () {
              bootbox.confirm(I18n.lookup("assets_changed_confirm"), function (result) {
                if (result) { document.location.reload(); }
              });
            }, 1000 * 60 * 120);
            timeoutIsSet = true;
          }

        });
      }
    };
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/initializers/asset-version.js'] = "define(\"discourse/initializers/asset-version\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      Subscribe to \"asset-version\" change events via the Message Bus\n    **/\n\n    __exports__[\"default\"] = {\n      name: \"asset-version\",\n      after: \"message-bus\",\n\n      initialize: function () {\n        var timeoutIsSet = false;\n        if (!Discourse.MessageBus) { return; }\n\n        Discourse.MessageBus.subscribe(\"/global/asset-version\", function (version) {\n          Discourse.set(\"assetVersion\", version);\n\n          if (!timeoutIsSet \u0026\u0026 Discourse.get(\"requiresRefresh\")) {\n            // since we can do this transparently for people browsing the forum\n            //  hold back the message a couple of hours\n            setTimeout(function () {\n              bootbox.confirm(I18n.lookup(\"assets_changed_confirm\"), function (result) {\n                if (result) { document.location.reload(); }\n              });\n            }, 1000 * 60 * 120);\n            timeoutIsSet = true;\n          }\n\n        });\n      }\n    };\n  });";
define("discourse/initializers/banner", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = {
      name: "banner",
      after: "message-bus",

      initialize: function () {
        var banner = Em.Object.create(PreloadStore.get("banner"));
        Discourse.set("banner", banner);

        if (!Discourse.MessageBus) { return; }

        Discourse.MessageBus.subscribe("/site/banner", function (banner) {
          Discourse.set("banner", Em.Object.create(banner));
        });
      }
    };
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/initializers/banner.js'] = "define(\"discourse/initializers/banner\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = {\n      name: \"banner\",\n      after: \"message-bus\",\n\n      initialize: function () {\n        var banner = Em.Object.create(PreloadStore.get(\"banner\"));\n        Discourse.set(\"banner\", banner);\n\n        if (!Discourse.MessageBus) { return; }\n\n        Discourse.MessageBus.subscribe(\"/site/banner\", function (banner) {\n          Discourse.set(\"banner\", Em.Object.create(banner));\n        });\n      }\n    };\n  });";
define("discourse/initializers/click-interceptor", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      Discourse does some server side rendering of HTML, such as the `cooked` contents of
      posts. The downside of this in an Ember app is the links will not go through the router.
      This jQuery code intercepts clicks on those links and routes them properly.
    **/

    __exports__["default"] = {
      name: "click-interceptor",
      initialize: function() {
        $('#main').on('click.discourse', 'a', function(e) {
          if (e.isDefaultPrevented() || e.shiftKey || e.metaKey || e.ctrlKey) { return; }

          var $currentTarget = $(e.currentTarget),
              href = $currentTarget.attr('href');

          if (!href ||
              href === '#' ||
              $currentTarget.attr('target') ||
              $currentTarget.data('ember-action') ||
              $currentTarget.data('auto-route') ||
              $currentTarget.data('share-url') ||
              $currentTarget.hasClass('ember-view') ||
              $currentTarget.hasClass('lightbox') ||
              href.indexOf("mailto:") === 0 ||
              (href.match(/^http[s]?:\/\//i) && !href.match(new RegExp("^http:\\/\\/" + window.location.hostname, "i")))) {
             return;
          }

          e.preventDefault();
          Discourse.URL.routeTo(href);
          return false;
        });
      }
    };
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/initializers/click-interceptor.js'] = "define(\"discourse/initializers/click-interceptor\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      Discourse does some server side rendering of HTML, such as the `cooked` contents of\n      posts. The downside of this in an Ember app is the links will not go through the router.\n      This jQuery code intercepts clicks on those links and routes them properly.\n    **/\n\n    __exports__[\"default\"] = {\n      name: \"click-interceptor\",\n      initialize: function() {\n        $('#main').on('click.discourse', 'a', function(e) {\n          if (e.isDefaultPrevented() || e.shiftKey || e.metaKey || e.ctrlKey) { return; }\n\n          var $currentTarget = $(e.currentTarget),\n              href = $currentTarget.attr('href');\n\n          if (!href ||\n              href === '#' ||\n              $currentTarget.attr('target') ||\n              $currentTarget.data('ember-action') ||\n              $currentTarget.data('auto-route') ||\n              $currentTarget.data('share-url') ||\n              $currentTarget.hasClass('ember-view') ||\n              $currentTarget.hasClass('lightbox') ||\n              href.indexOf(\"mailto:\") === 0 ||\n              (href.match(/^http[s]?:\\/\\//i) \u0026\u0026 !href.match(new RegExp(\"^http:\\\\/\\\\/\" + window.location.hostname, \"i\")))) {\n             return;\n          }\n\n          e.preventDefault();\n          Discourse.URL.routeTo(href);\n          return false;\n        });\n      }\n    };\n  });";
define("discourse/initializers/csrf-token", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      Append our CSRF token to AJAX requests when necessary.
    **/

    __exports__["default"] = {
      name: "csrf-token",
      initialize: function() {
        var session = Discourse.Session;

        // Add a CSRF token to all AJAX requests
        session.currentProp('csrfToken', $('meta[name=csrf-token]').attr('content'));

        $.ajaxPrefilter(function(options, originalOptions, xhr) {
          if (!options.crossDomain) {
            xhr.setRequestHeader('X-CSRF-Token', session.currentProp('csrfToken'));
          }
        });
      }
    };
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/initializers/csrf-token.js'] = "define(\"discourse/initializers/csrf-token\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      Append our CSRF token to AJAX requests when necessary.\n    **/\n\n    __exports__[\"default\"] = {\n      name: \"csrf-token\",\n      initialize: function() {\n        var session = Discourse.Session;\n\n        // Add a CSRF token to all AJAX requests\n        session.currentProp('csrfToken', $('meta[name=csrf-token]').attr('content'));\n\n        $.ajaxPrefilter(function(options, originalOptions, xhr) {\n          if (!options.crossDomain) {\n            xhr.setRequestHeader('X-CSRF-Token', session.currentProp('csrfToken'));\n          }\n        });\n      }\n    };\n  });";
define("discourse/initializers/deprecations", 
  ["exports"],
  function(__exports__) {
    "use strict";
    var deprecatedViewHelpers = {
      inputTip: 'input-tip',
      pagedown: 'pagedown-editor',
      textField: 'text-field',
      userSelector: 'user-selector',
      combobox: 'combo-box',
      categoryChooser: 'category-chooser',
      chooseTopic: 'choose-topic',
      'discourse-activity-filter': 'activity-filter'
    };

    __exports__["default"] = {
      name: 'deprecations',
      initialize: function(container) {
        Ember.keys(deprecatedViewHelpers).forEach(function(old) {
          var newName = deprecatedViewHelpers[old];
          Ember.Handlebars.registerHelper(old, function(options) {
            Em.warn("The `" + old +"` helper is deprecated. Use `" + newName + "` instead.");
            var helper = container.lookupFactory('view:' + newName) || container.lookupFactory('component:' + newName);
            var hash = options.hash,
                types = options.hashTypes;

            Discourse.Utilities.normalizeHash(hash, types);
            return Ember.Handlebars.helpers.view.call(this, helper, options);
          });
        });
      }
    };
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/initializers/deprecations.js'] = "define(\"discourse/initializers/deprecations\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var deprecatedViewHelpers = {\n      inputTip: 'input-tip',\n      pagedown: 'pagedown-editor',\n      textField: 'text-field',\n      userSelector: 'user-selector',\n      combobox: 'combo-box',\n      categoryChooser: 'category-chooser',\n      chooseTopic: 'choose-topic',\n      'discourse-activity-filter': 'activity-filter'\n    };\n\n    __exports__[\"default\"] = {\n      name: 'deprecations',\n      initialize: function(container) {\n        Ember.keys(deprecatedViewHelpers).forEach(function(old) {\n          var newName = deprecatedViewHelpers[old];\n          Ember.Handlebars.registerHelper(old, function(options) {\n            Em.warn(\"The `\" + old +\"` helper is deprecated. Use `\" + newName + \"` instead.\");\n            var helper = container.lookupFactory('view:' + newName) || container.lookupFactory('component:' + newName);\n            var hash = options.hash,\n                types = options.hashTypes;\n\n            Discourse.Utilities.normalizeHash(hash, types);\n            return Ember.Handlebars.helpers.view.call(this, helper, options);\n          });\n        });\n      }\n    };\n  });";
define("discourse/initializers/dynamic-route-builders", 
  ["discourse/routes/build-category-route","discourse/routes/build-topic-route","discourse/controllers/discovery-sortable","exports"],
  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {
    "use strict";
    var buildCategoryRoute = __dependency1__["default"];
    var buildTopicRoute = __dependency2__["default"];
    var DiscoverySortableController = __dependency3__["default"];

    __exports__["default"] = {
      name: 'dynamic-route-builders',
      after: 'register-discourse-location',

      initialize: function(container, app) {
        app.DiscoveryCategoryRoute = buildCategoryRoute('latest');
        app.DiscoveryParentCategoryRoute = buildCategoryRoute('latest');
        app.DiscoveryCategoryNoneRoute = buildCategoryRoute('latest', {no_subcategories: true});

        Discourse.Site.currentProp('filters').forEach(function(filter) {
          app["Discovery" + filter.capitalize() + "Controller"] = DiscoverySortableController.extend();
          app["Discovery" + filter.capitalize() + "Route"] = buildTopicRoute(filter);
          app["Discovery" + filter.capitalize() + "CategoryRoute"] = buildCategoryRoute(filter);
          app["Discovery" + filter.capitalize() + "CategoryNoneRoute"] = buildCategoryRoute(filter, {no_subcategories: true});
        });

        Discourse.DiscoveryTopRoute = buildTopicRoute('top', {
          actions: {
            willTransition: function() {
              Discourse.User.currentProp("should_be_redirected_to_top", false);
              Discourse.User.currentProp("redirected_to_top_reason", null);
            }
          }
        });

        Discourse.DiscoveryTopCategoryRoute = buildCategoryRoute('top');
        Discourse.DiscoveryTopCategoryNoneRoute = buildCategoryRoute('top', {no_subcategories: true});
        Discourse.Site.currentProp('periods').forEach(function(period) {
          app["DiscoveryTop" + period.capitalize() + "Controller"] = DiscoverySortableController.extend();
          app["DiscoveryTop" + period.capitalize() + "Route"] = buildTopicRoute('top/' + period);
          app["DiscoveryTop" + period.capitalize() + "CategoryRoute"] = buildCategoryRoute('top/' + period);
          app["DiscoveryTop" + period.capitalize() + "CategoryNoneRoute"] = buildCategoryRoute('top/' + period, {no_subcategories: true});
        });
      }
    };
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/initializers/dynamic-route-builders.js'] = "define(\"discourse/initializers/dynamic-route-builders\", \n  [\"discourse/routes/build-category-route\",\"discourse/routes/build-topic-route\",\"discourse/controllers/discovery-sortable\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var buildCategoryRoute = __dependency1__[\"default\"];\n    var buildTopicRoute = __dependency2__[\"default\"];\n    var DiscoverySortableController = __dependency3__[\"default\"];\n\n    __exports__[\"default\"] = {\n      name: 'dynamic-route-builders',\n      after: 'register-discourse-location',\n\n      initialize: function(container, app) {\n        app.DiscoveryCategoryRoute = buildCategoryRoute('latest');\n        app.DiscoveryParentCategoryRoute = buildCategoryRoute('latest');\n        app.DiscoveryCategoryNoneRoute = buildCategoryRoute('latest', {no_subcategories: true});\n\n        Discourse.Site.currentProp('filters').forEach(function(filter) {\n          app[\"Discovery\" + filter.capitalize() + \"Controller\"] = DiscoverySortableController.extend();\n          app[\"Discovery\" + filter.capitalize() + \"Route\"] = buildTopicRoute(filter);\n          app[\"Discovery\" + filter.capitalize() + \"CategoryRoute\"] = buildCategoryRoute(filter);\n          app[\"Discovery\" + filter.capitalize() + \"CategoryNoneRoute\"] = buildCategoryRoute(filter, {no_subcategories: true});\n        });\n\n        Discourse.DiscoveryTopRoute = buildTopicRoute('top', {\n          actions: {\n            willTransition: function() {\n              Discourse.User.currentProp(\"should_be_redirected_to_top\", false);\n              Discourse.User.currentProp(\"redirected_to_top_reason\", null);\n            }\n          }\n        });\n\n        Discourse.DiscoveryTopCategoryRoute = buildCategoryRoute('top');\n        Discourse.DiscoveryTopCategoryNoneRoute = buildCategoryRoute('top', {no_subcategories: true});\n        Discourse.Site.currentProp('periods').forEach(function(period) {\n          app[\"DiscoveryTop\" + period.capitalize() + \"Controller\"] = DiscoverySortableController.extend();\n          app[\"DiscoveryTop\" + period.capitalize() + \"Route\"] = buildTopicRoute('top/' + period);\n          app[\"DiscoveryTop\" + period.capitalize() + \"CategoryRoute\"] = buildCategoryRoute('top/' + period);\n          app[\"DiscoveryTop\" + period.capitalize() + \"CategoryNoneRoute\"] = buildCategoryRoute('top/' + period, {no_subcategories: true});\n        });\n      }\n    };\n  });";
define("discourse/initializers/ember-events", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = {
      name: "ember-events",

      initialize: function () {

        // By default Ember listens to too many events. This tells it the only events
        // we're interested in.
        Ember.EventDispatcher.reopen({
          events: {
            touchstart  : 'touchStart',
            touchend    : 'touchEnd',
            touchcancel : 'touchCancel',
            keydown     : 'keyDown',
            keyup       : 'keyUp',
            keypress    : 'keyPress',
            mousedown   : 'mouseDown',
            mouseup     : 'mouseUp',
            contextmenu : 'contextMenu',
            click       : 'click',
            dblclick    : 'doubleClick',
            focusin     : 'focusIn',
            focusout    : 'focusOut',
            mouseenter  : 'mouseEnter',
            mouseleave  : 'mouseLeave',
            submit      : 'submit',
            input       : 'input',
            change      : 'change',
            dragstart   : 'dragStart',
            drag        : 'drag',
            dragenter   : 'dragEnter',
            dragleave   : 'dragLeave',
            dragover    : 'dragOver',
            drop        : 'drop',
            dragend     : 'dragEnd'
          }
        });
      }
    };
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/initializers/ember-events.js'] = "define(\"discourse/initializers/ember-events\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = {\n      name: \"ember-events\",\n\n      initialize: function () {\n\n        // By default Ember listens to too many events. This tells it the only events\n        // we're interested in.\n        Ember.EventDispatcher.reopen({\n          events: {\n            touchstart  : 'touchStart',\n            touchend    : 'touchEnd',\n            touchcancel : 'touchCancel',\n            keydown     : 'keyDown',\n            keyup       : 'keyUp',\n            keypress    : 'keyPress',\n            mousedown   : 'mouseDown',\n            mouseup     : 'mouseUp',\n            contextmenu : 'contextMenu',\n            click       : 'click',\n            dblclick    : 'doubleClick',\n            focusin     : 'focusIn',\n            focusout    : 'focusOut',\n            mouseenter  : 'mouseEnter',\n            mouseleave  : 'mouseLeave',\n            submit      : 'submit',\n            input       : 'input',\n            change      : 'change',\n            dragstart   : 'dragStart',\n            drag        : 'drag',\n            dragenter   : 'dragEnter',\n            dragleave   : 'dragLeave',\n            dragover    : 'dragOver',\n            drop        : 'drop',\n            dragend     : 'dragEnd'\n          }\n        });\n      }\n    };\n  });";
define("discourse/initializers/focus-event", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      Keep track of when the browser is in focus.
    **/

    __exports__["default"] = {
      name: 'focus-event',

      initialize: function() {
        var hidden = "hidden";

        // Default to true
        Discourse.set('hasFocus', true);

        var gotFocus = function() {
          if(!Discourse.get('hasFocus')){
            Discourse.setProperties({hasFocus: true, notify: false});
          }
        };

        var lostFocus = function() {
          if(Discourse.get('hasFocus')) {
            Discourse.set('hasFocus', false);
          }
        };

        var onchange = function(evt) {
            var v = 'visible', h = 'hidden',
                evtMap = {
                    focus:v, focusin:v, pageshow:v, blur:h, focusout:h, pagehide:h
                };

            evt = evt || window.event;
            if (evt.type in evtMap){
                if(evtMap[evt.type] === 'hidden') {
                  lostFocus();
                } else {
                  gotFocus();
                }
            }
            else {
                if(this[hidden]) {
                  lostFocus();
                } else {
                  gotFocus();
                }
            }
        };

        // from StackOverflow http://stackoverflow.com/a/1060034/17174
        if (hidden in document) {
            document.addEventListener('visibilitychange', onchange);
        }
        else if ((hidden = 'mozHidden') in document) {
            document.addEventListener('mozvisibilitychange', onchange);
        }
        else if ((hidden = 'webkitHidden') in document) {
            document.addEventListener('webkitvisibilitychange', onchange);
        }
        else if ((hidden = 'msHidden') in document) {
            document.addEventListener('msvisibilitychange', onchange);
        }
        // IE 9 and lower:
        else if ('onfocusin' in document) {
            document.onfocusin = document.onfocusout = onchange;
        }
        // All others (including iPad which is a bit weird and gives onpageshow / hide
        else {
            window.onpageshow = window.onpagehide = window.onfocus = window.onblur = onchange;
        }
      }
    };
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/initializers/focus-event.js'] = "define(\"discourse/initializers/focus-event\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      Keep track of when the browser is in focus.\n    **/\n\n    __exports__[\"default\"] = {\n      name: 'focus-event',\n\n      initialize: function() {\n        var hidden = \"hidden\";\n\n        // Default to true\n        Discourse.set('hasFocus', true);\n\n        var gotFocus = function() {\n          if(!Discourse.get('hasFocus')){\n            Discourse.setProperties({hasFocus: true, notify: false});\n          }\n        };\n\n        var lostFocus = function() {\n          if(Discourse.get('hasFocus')) {\n            Discourse.set('hasFocus', false);\n          }\n        };\n\n        var onchange = function(evt) {\n            var v = 'visible', h = 'hidden',\n                evtMap = {\n                    focus:v, focusin:v, pageshow:v, blur:h, focusout:h, pagehide:h\n                };\n\n            evt = evt || window.event;\n            if (evt.type in evtMap){\n                if(evtMap[evt.type] === 'hidden') {\n                  lostFocus();\n                } else {\n                  gotFocus();\n                }\n            }\n            else {\n                if(this[hidden]) {\n                  lostFocus();\n                } else {\n                  gotFocus();\n                }\n            }\n        };\n\n        // from StackOverflow http://stackoverflow.com/a/1060034/17174\n        if (hidden in document) {\n            document.addEventListener('visibilitychange', onchange);\n        }\n        else if ((hidden = 'mozHidden') in document) {\n            document.addEventListener('mozvisibilitychange', onchange);\n        }\n        else if ((hidden = 'webkitHidden') in document) {\n            document.addEventListener('webkitvisibilitychange', onchange);\n        }\n        else if ((hidden = 'msHidden') in document) {\n            document.addEventListener('msvisibilitychange', onchange);\n        }\n        // IE 9 and lower:\n        else if ('onfocusin' in document) {\n            document.onfocusin = document.onfocusout = onchange;\n        }\n        // All others (including iPad which is a bit weird and gives onpageshow / hide\n        else {\n            window.onpageshow = window.onpagehide = window.onfocus = window.onblur = onchange;\n        }\n      }\n    };\n  });";
define("discourse/initializers/inject-app-events", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = {
      name: "inject-app-events",
      initialize: function(container, application) {
        var appEvents = Ember.Object.createWithMixins(Ember.Evented);
        application.register('app-events:main', appEvents, { instantiate: false });

        application.inject('controller', 'appEvents', 'app-events:main');
        application.inject('component', 'appEvents', 'app-events:main');
        application.inject('route', 'appEvents', 'app-events:main');
        application.inject('view', 'appEvents', 'app-events:main');
        application.inject('model', 'appEvents', 'app-events:main');

        Discourse.URL.appEvents = appEvents;
      }
    };
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/initializers/inject-app-events.js'] = "define(\"discourse/initializers/inject-app-events\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = {\n      name: \"inject-app-events\",\n      initialize: function(container, application) {\n        var appEvents = Ember.Object.createWithMixins(Ember.Evented);\n        application.register('app-events:main', appEvents, { instantiate: false });\n\n        application.inject('controller', 'appEvents', 'app-events:main');\n        application.inject('component', 'appEvents', 'app-events:main');\n        application.inject('route', 'appEvents', 'app-events:main');\n        application.inject('view', 'appEvents', 'app-events:main');\n        application.inject('model', 'appEvents', 'app-events:main');\n\n        Discourse.URL.appEvents = appEvents;\n      }\n    };\n  });";
define("discourse/initializers/jquery-plugins", 
  ["discourse/lib/autocomplete","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var autocomplete = __dependency1__["default"];

    __exports__["default"] = {
      name: "jquery-plugins",
      initialize: function() {

        // Settings for bootbox
        bootbox.animate(false);
        bootbox.backdrop(true);

        // Initialize the autocomplete tool
        $.fn.autocomplete = autocomplete;
      }
    };
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/initializers/jquery-plugins.js'] = "define(\"discourse/initializers/jquery-plugins\", \n  [\"discourse/lib/autocomplete\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var autocomplete = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = {\n      name: \"jquery-plugins\",\n      initialize: function() {\n\n        // Settings for bootbox\n        bootbox.animate(false);\n        bootbox.backdrop(true);\n\n        // Initialize the autocomplete tool\n        $.fn.autocomplete = autocomplete;\n      }\n    };\n  });";
define("discourse/initializers/keyboard-shortcuts", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /*global Mousetrap:true*/

    /**
      Initialize Global Keyboard Shortcuts
    **/

    __exports__["default"] = {
      name: "keyboard-shortcuts",
      initialize: function(container) {
        Discourse.KeyboardShortcuts.bindEvents(Mousetrap, container);
      }
    };
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/initializers/keyboard-shortcuts.js'] = "define(\"discourse/initializers/keyboard-shortcuts\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /*global Mousetrap:true*/\n\n    /**\n      Initialize Global Keyboard Shortcuts\n    **/\n\n    __exports__[\"default\"] = {\n      name: \"keyboard-shortcuts\",\n      initialize: function(container) {\n        Discourse.KeyboardShortcuts.bindEvents(Mousetrap, container);\n      }\n    };\n  });";
define("discourse/initializers/live-development", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      Use the message bus for live reloading of components for faster development.
    **/

    __exports__["default"] = {
      name: "live-development",
      initialize: function() {

        // subscribe to any site customizations that are loaded
        $('link.custom-css').each(function() {
          var split = this.href.split("/"),
              id = split[split.length - 1].split(".css")[0],
              self = this;

          return Discourse.MessageBus.subscribe("/file-change/" + id, function(data) {
            if (!$(self).data('orig')) {
              $(self).data('orig', self.href);
            }
            var orig = $(self).data('orig'),
                sp = orig.split(".css?");

            self.href = sp[0] + ".css?" + data;
          });
        });

        // Custom header changes
        $('header.custom').each(function() {
          var header = $(this);
          return Discourse.MessageBus.subscribe("/header-change/" + $(this).data('key'), function(data) {
            return header.html(data);
          });
        });

        // Observe file changes
        Discourse.MessageBus.subscribe("/file-change", function(data) {
          Ember.TEMPLATES.empty = Handlebars.compile("<div></div>");
          _.each(data,function(me) {

            if (me === "refresh") {
              // Refresh if necessary
              document.location.reload(true);
            } else if (me.name.substr(-10) === "handlebars") {

              // Reload handlebars
              var js = me.name.replace(".handlebars", "").replace("app/assets/javascripts", "/assets");
              $LAB.script(js + "?hash=" + me.hash).wait(function() {
                var templateName;
                templateName = js.replace(".js", "").replace("/assets/", "");
                return _.each(Ember.View.views, function(view) {
                  if (view.get('templateName') === templateName) {
                    view.set('templateName', 'empty');
                    view.rerender();
                    Em.run.schedule('afterRender', function() {
                      view.set('templateName', templateName);
                      view.rerender();
                    });
                  }
                });
              });

            } else {
              $('link').each(function() {
                // TODO: stop bundling css in DEV please
                if (true || (this.href.match(me.name) && me.hash)) {
                  if (!$(this).data('orig')) {
                    $(this).data('orig', this.href);
                  }
                  var orig = $(this).data('orig');
                  this.href = orig + (orig.indexOf('?') >= 0 ? "&hash=" : "?hash=") + me.hash;
                }
              });
            }
          });
        });
      }
    };
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/initializers/live-development.js'] = "define(\"discourse/initializers/live-development\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      Use the message bus for live reloading of components for faster development.\n    **/\n\n    __exports__[\"default\"] = {\n      name: \"live-development\",\n      initialize: function() {\n\n        // subscribe to any site customizations that are loaded\n        $('link.custom-css').each(function() {\n          var split = this.href.split(\"/\"),\n              id = split[split.length - 1].split(\".css\")[0],\n              self = this;\n\n          return Discourse.MessageBus.subscribe(\"/file-change/\" + id, function(data) {\n            if (!$(self).data('orig')) {\n              $(self).data('orig', self.href);\n            }\n            var orig = $(self).data('orig'),\n                sp = orig.split(\".css?\");\n\n            self.href = sp[0] + \".css?\" + data;\n          });\n        });\n\n        // Custom header changes\n        $('header.custom').each(function() {\n          var header = $(this);\n          return Discourse.MessageBus.subscribe(\"/header-change/\" + $(this).data('key'), function(data) {\n            return header.html(data);\n          });\n        });\n\n        // Observe file changes\n        Discourse.MessageBus.subscribe(\"/file-change\", function(data) {\n          Ember.TEMPLATES.empty = Handlebars.compile(\"\u003cdiv\u003e\u003c/div\u003e\");\n          _.each(data,function(me) {\n\n            if (me === \"refresh\") {\n              // Refresh if necessary\n              document.location.reload(true);\n            } else if (me.name.substr(-10) === \"handlebars\") {\n\n              // Reload handlebars\n              var js = me.name.replace(\".handlebars\", \"\").replace(\"app/assets/javascripts\", \"/assets\");\n              $LAB.script(js + \"?hash=\" + me.hash).wait(function() {\n                var templateName;\n                templateName = js.replace(\".js\", \"\").replace(\"/assets/\", \"\");\n                return _.each(Ember.View.views, function(view) {\n                  if (view.get('templateName') === templateName) {\n                    view.set('templateName', 'empty');\n                    view.rerender();\n                    Em.run.schedule('afterRender', function() {\n                      view.set('templateName', templateName);\n                      view.rerender();\n                    });\n                  }\n                });\n              });\n\n            } else {\n              $('link').each(function() {\n                // TODO: stop bundling css in DEV please\n                if (true || (this.href.match(me.name) \u0026\u0026 me.hash)) {\n                  if (!$(this).data('orig')) {\n                    $(this).data('orig', this.href);\n                  }\n                  var orig = $(this).data('orig');\n                  this.href = orig + (orig.indexOf('?') \u003e= 0 ? \"\u0026hash=\" : \"?hash=\") + me.hash;\n                }\n              });\n            }\n          });\n        });\n      }\n    };\n  });";
define("discourse/initializers/load-all-helpers", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = {
      name: 'load-all-helpers',

      initialize: function() {
        Ember.keys(requirejs.entries).forEach(function(entry) {
          if ((/\/helpers\//).test(entry)) {
            require(entry, null, null, true);
          }
        });
      }
    };
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/initializers/load-all-helpers.js'] = "define(\"discourse/initializers/load-all-helpers\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = {\n      name: 'load-all-helpers',\n\n      initialize: function() {\n        Ember.keys(requirejs.entries).forEach(function(entry) {\n          if ((/\\/helpers\\//).test(entry)) {\n            require(entry, null, null, true);\n          }\n        });\n      }\n    };\n  });";
define("discourse/initializers/message-bus", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      Initialize the message bus to receive messages.
    **/

    __exports__["default"] = {
      name: "message-bus",

      initialize: function() {

        // We don't use the message bus in testing
        if (Discourse.testing) { return; }

        Discourse.MessageBus.alwaysLongPoll = Discourse.Environment === "development";
        Discourse.MessageBus.start();
        Discourse.KeyValueStore.init("discourse_", Discourse.MessageBus);
      }
    };
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/initializers/message-bus.js'] = "define(\"discourse/initializers/message-bus\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      Initialize the message bus to receive messages.\n    **/\n\n    __exports__[\"default\"] = {\n      name: \"message-bus\",\n\n      initialize: function() {\n\n        // We don't use the message bus in testing\n        if (Discourse.testing) { return; }\n\n        Discourse.MessageBus.alwaysLongPoll = Discourse.Environment === \"development\";\n        Discourse.MessageBus.start();\n        Discourse.KeyValueStore.init(\"discourse_\", Discourse.MessageBus);\n      }\n    };\n  });";
define("discourse/initializers/mobile", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      Initializes the `Discourse.Mobile` helper object.
    **/

    __exports__["default"] = {
      name: 'mobile',

      initialize: function() {
        Discourse.Mobile.init();
      }
    };
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/initializers/mobile.js'] = "define(\"discourse/initializers/mobile\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      Initializes the `Discourse.Mobile` helper object.\n    **/\n\n    __exports__[\"default\"] = {\n      name: 'mobile',\n\n      initialize: function() {\n        Discourse.Mobile.init();\n      }\n    };\n  });";
define("discourse/initializers/page-tracking", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      Sets up the PageTracking hook.
    **/

    __exports__["default"] = {
      name: "page-tracking",
      after: 'register-discourse-location',

      initialize: function() {
        var pageTracker = Discourse.PageTracker.current();
        pageTracker.start();

        // Out of the box, Discourse tries to track google analytics
        // if it is present
        if (typeof window._gaq !== 'undefined') {
          pageTracker.on('change', function() {
            window._gaq.push(['_trackPageview']);
          });
          return;
        }

        // Also use Universal Analytics if it is present
        if (typeof window.ga !== 'undefined') {
          pageTracker.on('change', function() {
            window.ga('send', 'pageview');
          });
        }
      }
    };
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/initializers/page-tracking.js'] = "define(\"discourse/initializers/page-tracking\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      Sets up the PageTracking hook.\n    **/\n\n    __exports__[\"default\"] = {\n      name: \"page-tracking\",\n      after: 'register-discourse-location',\n\n      initialize: function() {\n        var pageTracker = Discourse.PageTracker.current();\n        pageTracker.start();\n\n        // Out of the box, Discourse tries to track google analytics\n        // if it is present\n        if (typeof window._gaq !== 'undefined') {\n          pageTracker.on('change', function() {\n            window._gaq.push(['_trackPageview']);\n          });\n          return;\n        }\n\n        // Also use Universal Analytics if it is present\n        if (typeof window.ga !== 'undefined') {\n          pageTracker.on('change', function() {\n            window.ga('send', 'pageview');\n          });\n        }\n      }\n    };\n  });";
define("discourse/initializers/read-only", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      Subscribe to "read-only" status change events via the Message Bus
    **/

    __exports__["default"] = {
      name: "read-only",
      after: "message-bus",

      initialize: function () {
        // initialize read-only mode and subscribe to updates via the message bus
        Discourse.set("isReadOnly", Discourse.Site.currentProp("is_readonly"));

        if (!Discourse.MessageBus) { return; }

        Discourse.MessageBus.subscribe("/site/read-only", function (enabled) {
          Discourse.set("isReadOnly", enabled);
        });
      }
    };
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/initializers/read-only.js'] = "define(\"discourse/initializers/read-only\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      Subscribe to \"read-only\" status change events via the Message Bus\n    **/\n\n    __exports__[\"default\"] = {\n      name: \"read-only\",\n      after: \"message-bus\",\n\n      initialize: function () {\n        // initialize read-only mode and subscribe to updates via the message bus\n        Discourse.set(\"isReadOnly\", Discourse.Site.currentProp(\"is_readonly\"));\n\n        if (!Discourse.MessageBus) { return; }\n\n        Discourse.MessageBus.subscribe(\"/site/read-only\", function (enabled) {\n          Discourse.set(\"isReadOnly\", enabled);\n        });\n      }\n    };\n  });";
define("discourse/initializers/register-discourse-location", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = {
      name: "register-discourse-location",
      initialize: function(container, application) {
        application.register('location:discourse-location', Ember.DiscourseLocation);
      }
    };
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/initializers/register-discourse-location.js'] = "define(\"discourse/initializers/register-discourse-location\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = {\n      name: \"register-discourse-location\",\n      initialize: function(container, application) {\n        application.register('location:discourse-location', Ember.DiscourseLocation);\n      }\n    };\n  });";
define("discourse/initializers/relative-ages", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
      Updates the relative ages of dates on the screen.
    **/

    __exports__["default"] = {
      name: "relative-ages",
      initialize: function() {
        setInterval(function(){
          Discourse.Formatter.updateRelativeAge($('.relative-date'));
        }, 60 * 1000);
      }
    };
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/initializers/relative-ages.js'] = "define(\"discourse/initializers/relative-ages\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n      Updates the relative ages of dates on the screen.\n    **/\n\n    __exports__[\"default\"] = {\n      name: \"relative-ages\",\n      initialize: function() {\n        setInterval(function(){\n          Discourse.Formatter.updateRelativeAge($('.relative-date'));\n        }, 60 * 1000);\n      }\n    };\n  });";
define("discourse/initializers/sniff-capabilities", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /*global Modernizr:true*/

    /**
      Initializes an object that lets us know about our capabilities.
    **/

    __exports__["default"] = {
      name: "sniff-capabilities",
      initialize: function(container, application) {
        var $html = $('html'),
            touch = $html.hasClass('touch') || (Modernizr.prefixed("MaxTouchPoints", navigator) > 1),
            caps = Ember.Object.create();

        // Store the touch ability in our capabilities object
        caps.set('touch', touch);
        $html.addClass(touch ? 'discourse-touch' : 'discourse-no-touch');

        // Detect Android
        if (navigator) {
          var ua = navigator.userAgent;
          caps.set('android', ua && ua.indexOf('Android') !== -1);
        }

        // We consider high res a device with 1280 horizontal pixels. High DPI tablets like
        // iPads should report as 1024.
        caps.set('highRes', window.screen.width >= 1280);

        // Inject it
        application.register('capabilities:main', caps, { instantiate: false });
        application.inject('view', 'capabilities', 'capabilities:main');
        application.inject('controller', 'capabilities', 'capabilities:main');
      }
    };
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/initializers/sniff-capabilities.js'] = "define(\"discourse/initializers/sniff-capabilities\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /*global Modernizr:true*/\n\n    /**\n      Initializes an object that lets us know about our capabilities.\n    **/\n\n    __exports__[\"default\"] = {\n      name: \"sniff-capabilities\",\n      initialize: function(container, application) {\n        var $html = $('html'),\n            touch = $html.hasClass('touch') || (Modernizr.prefixed(\"MaxTouchPoints\", navigator) \u003e 1),\n            caps = Ember.Object.create();\n\n        // Store the touch ability in our capabilities object\n        caps.set('touch', touch);\n        $html.addClass(touch ? 'discourse-touch' : 'discourse-no-touch');\n\n        // Detect Android\n        if (navigator) {\n          var ua = navigator.userAgent;\n          caps.set('android', ua \u0026\u0026 ua.indexOf('Android') !== -1);\n        }\n\n        // We consider high res a device with 1280 horizontal pixels. High DPI tablets like\n        // iPads should report as 1024.\n        caps.set('highRes', window.screen.width \u003e= 1280);\n\n        // Inject it\n        application.register('capabilities:main', caps, { instantiate: false });\n        application.inject('view', 'capabilities', 'capabilities:main');\n        application.inject('controller', 'capabilities', 'capabilities:main');\n      }\n    };\n  });";
define("discourse/initializers/subscribe-user-notifications", 
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
       Subscribes to user events on the message bus
    **/

    __exports__["default"] = {
      name: "subscribe-user-notifications",
      after: 'message-bus',
      initialize: function() {
        var user = Discourse.User.current();
        if (user) {
          var bus = Discourse.MessageBus;
          bus.callbackInterval = Discourse.SiteSettings.polling_interval;
          bus.enableLongPolling = true;
          bus.baseUrl = Discourse.getURL("/");

          if (user.admin || user.moderator) {
            bus.subscribe("/flagged_counts", function(data) {
              user.set('site_flagged_posts_count', data.total);
            });
          }
          bus.subscribe("/notification/" + user.get('id'), (function(data) {
            var oldUnread = user.get('unread_notifications');
            var oldPM = user.get('unread_private_messages');

            user.set('unread_notifications', data.unread_notifications);
            user.set('unread_private_messages', data.unread_private_messages);

            if(oldUnread !== data.unread_notifications || oldPM !== data.unread_private_messages) {
              user.set('lastNotificationChange', new Date());
            }
          }), user.notification_channel_position);

          bus.subscribe("/categories", function(data){
            var site = Discourse.Site.current();
            _.each(data.categories,function(c){
              site.updateCategory(c);
            });
          });
        }
      }
    };
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/initializers/subscribe-user-notifications.js'] = "define(\"discourse/initializers/subscribe-user-notifications\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    /**\n       Subscribes to user events on the message bus\n    **/\n\n    __exports__[\"default\"] = {\n      name: \"subscribe-user-notifications\",\n      after: 'message-bus',\n      initialize: function() {\n        var user = Discourse.User.current();\n        if (user) {\n          var bus = Discourse.MessageBus;\n          bus.callbackInterval = Discourse.SiteSettings.polling_interval;\n          bus.enableLongPolling = true;\n          bus.baseUrl = Discourse.getURL(\"/\");\n\n          if (user.admin || user.moderator) {\n            bus.subscribe(\"/flagged_counts\", function(data) {\n              user.set('site_flagged_posts_count', data.total);\n            });\n          }\n          bus.subscribe(\"/notification/\" + user.get('id'), (function(data) {\n            var oldUnread = user.get('unread_notifications');\n            var oldPM = user.get('unread_private_messages');\n\n            user.set('unread_notifications', data.unread_notifications);\n            user.set('unread_private_messages', data.unread_private_messages);\n\n            if(oldUnread !== data.unread_notifications || oldPM !== data.unread_private_messages) {\n              user.set('lastNotificationChange', new Date());\n            }\n          }), user.notification_channel_position);\n\n          bus.subscribe(\"/categories\", function(data){\n            var site = Discourse.Site.current();\n            _.each(data.categories,function(c){\n              site.updateCategory(c);\n            });\n          });\n        }\n      }\n    };\n  });";
define("discourse/initializers/verbose-localization", 
  ["exports"],
  function(__exports__) {
    "use strict";
    __exports__["default"] = {
      name: 'verbose-localization',
      initialize: function() {

        if(Discourse.SiteSettings.verbose_localization){
          I18n.enable_verbose_localization();
        }
      }
    };
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/initializers/verbose-localization.js'] = "define(\"discourse/initializers/verbose-localization\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = {\n      name: 'verbose-localization',\n      initialize: function() {\n\n        if(Discourse.SiteSettings.verbose_localization){\n          I18n.enable_verbose_localization();\n        }\n      }\n    };\n  });";
define("discourse/initializers/view-helpers", 
  ["exports"],
  function(__exports__) {
    "use strict";
    var helpers = ['input-tip',
                   'pagedown-editor',
                   'user-selector',
                   'category-chooser',
                   'combo-box',
                   'choose-topic',
                   'activity-filter'];

    /**
      Creates view helpers for some views. Many of these should probably be converted
      into components in the long term as it's a better fit.
    **/
    __exports__["default"] = {
      name: 'view-hlpers',
      initialize: function(container) {
        helpers.forEach(function(h) {
          Ember.Handlebars.registerHelper(h, function(options) {
            var helper = container.lookupFactory('view:' + h),
                hash = options.hash,
                types = options.hashTypes;

            Discourse.Utilities.normalizeHash(hash, types);
            return Ember.Handlebars.helpers.view.call(this, helper, options);
          });
        });
      }
    };
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/discourse/initializers/view-helpers.js'] = "define(\"discourse/initializers/view-helpers\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var helpers = ['input-tip',\n                   'pagedown-editor',\n                   'user-selector',\n                   'category-chooser',\n                   'combo-box',\n                   'choose-topic',\n                   'activity-filter'];\n\n    /**\n      Creates view helpers for some views. Many of these should probably be converted\n      into components in the long term as it's a better fit.\n    **/\n    __exports__[\"default\"] = {\n      name: 'view-hlpers',\n      initialize: function(container) {\n        helpers.forEach(function(h) {\n          Ember.Handlebars.registerHelper(h, function(options) {\n            var helper = container.lookupFactory('view:' + h),\n                hash = options.hash,\n                types = options.hashTypes;\n\n            Discourse.Utilities.normalizeHash(hash, types);\n            return Ember.Handlebars.helpers.view.call(this, helper, options);\n          });\n        });\n      }\n    };\n  });";




// Pagedown customizations




// Stuff we need to load first












































;
(function() {

  var emoji = ["+1", "-1", "100", "1234", "8ball", "a", "ab", "abc", "abcd", "accept", "aerial_tramway", "airplane", "alarm_clock", "alien", "ambulance", "anchor", "angel", "anger", "angry", "anguished", "ant", "apple", "aquarius", "aries", "arrow_backward", "arrow_double_down", "arrow_double_up", "arrow_down", "arrow_down_small", "arrow_forward", "arrow_heading_down", "arrow_heading_up", "arrow_left", "arrow_lower_left", "arrow_lower_right", "arrow_right", "arrow_right_hook", "arrow_up", "arrow_up_down", "arrow_up_small", "arrow_upper_left", "arrow_upper_right", "arrows_clockwise", "arrows_counterclockwise", "art", "articulated_lorry", "astonished", "athletic_shoe", "atm", "b", "baby", "baby_bottle", "baby_chick", "baby_symbol", "back", "baggage_claim", "balloon", "ballot_box_with_check", "bamboo", "banana", "bangbang", "bank", "bar_chart", "barber", "baseball", "basketball", "bath", "bathtub", "battery", "bear", "bee", "beer", "beers", "beetle", "beginner", "bell", "bento", "bicyclist", "bike", "bikini", "bird", "birthday", "black_circle", "black_joker", "black_large_square", "black_medium_small_square", "black_medium_square", "black_nib", "black_small_square", "black_square_button", "blossom", "blowfish", "blue_book", "blue_car", "blue_heart", "blush", "boar", "boat", "bomb", "book", "bookmark", "bookmark_tabs", "books", "boom", "boot", "bouquet", "bow", "bowling", "bowtie", "boy", "bread", "bride_with_veil", "bridge_at_night", "briefcase", "broken_heart", "bug", "bulb", "bullettrain_front", "bullettrain_side", "bus", "busstop", "bust_in_silhouette", "busts_in_silhouette", "cactus", "cake", "calendar", "calling", "camel", "camera", "cancer", "candy", "capital_abcd", "capricorn", "car", "card_index", "carousel_horse", "cat", "cat2", "cd", "chart", "chart_with_downwards_trend", "chart_with_upwards_trend", "checkered_flag", "cherries", "cherry_blossom", "chestnut", "chicken", "children_crossing", "chocolate_bar", "christmas_tree", "church", "cinema", "circus_tent", "city_sunrise", "city_sunset", "cl", "clap", "clapper", "clipboard", "clock1", "clock10", "clock1030", "clock11", "clock1130", "clock12", "clock1230", "clock130", "clock2", "clock230", "clock3", "clock330", "clock4", "clock430", "clock5", "clock530", "clock6", "clock630", "clock7", "clock730", "clock8", "clock830", "clock9", "clock930", "closed_book", "closed_lock_with_key", "closed_umbrella", "cloud", "clubs", "cn", "cocktail", "coffee", "cold_sweat", "collision", "computer", "confetti_ball", "confounded", "confused", "congratulations", "construction", "construction_worker", "convenience_store", "cookie", "cool", "cop", "copyright", "corn", "couple", "couple_with_heart", "couplekiss", "cow", "cow2", "credit_card", "crescent_moon", "crocodile", "crossed_flags", "crown", "cry", "crying_cat_face", "crystal_ball", "cupid", "curly_loop", "currency_exchange", "curry", "custard", "customs", "cyclone", "dancer", "dancers", "dango", "dart", "dash", "date", "de", "deciduous_tree", "department_store", "diamond_shape_with_a_dot_inside", "diamonds", "disappointed", "disappointed_relieved", "dizzy", "dizzy_face", "do_not_litter", "dog", "dog2", "dollar", "dolls", "dolphin", "door", "doughnut", "dragon", "dragon_face", "dress", "dromedary_camel", "droplet", "dvd", "e-mail", "ear", "ear_of_rice", "earth_africa", "earth_americas", "earth_asia", "egg", "eggplant", "eight", "eight_pointed_black_star", "eight_spoked_asterisk", "electric_plug", "elephant", "email", "end", "envelope", "envelope_with_arrow", "es", "euro", "european_castle", "european_post_office", "evergreen_tree", "exclamation", "expressionless", "eyeglasses", "eyes", "facepunch", "factory", "fallen_leaf", "family", "fast_forward", "fax", "fearful", "feelsgood", "feet", "ferris_wheel", "file_folder", "finnadie", "fire", "fire_engine", "fireworks", "first_quarter_moon", "first_quarter_moon_with_face", "fish", "fish_cake", "fishing_pole_and_fish", "fist", "five", "flags", "flashlight", "flipper", "floppy_disk", "flower_playing_cards", "flushed", "foggy", "football", "footprints", "fork_and_knife", "fountain", "four", "four_leaf_clover", "fr", "free", "fried_shrimp", "fries", "frog", "frowning", "fu", "fuelpump", "full_moon", "full_moon_with_face", "game_die", "gb", "gem", "gemini", "ghost", "gift", "gift_heart", "girl", "globe_with_meridians", "goat", "goberserk", "godmode", "golf", "grapes", "green_apple", "green_book", "green_heart", "grey_exclamation", "grey_question", "grimacing", "grin", "grinning", "guardsman", "guitar", "gun", "haircut", "hamburger", "hammer", "hamster", "hand", "handbag", "hankey", "hash", "hatched_chick", "hatching_chick", "headphones", "hear_no_evil", "heart", "heart_decoration", "heart_eyes", "heart_eyes_cat", "heartbeat", "heartpulse", "hearts", "heavy_check_mark", "heavy_division_sign", "heavy_dollar_sign", "heavy_exclamation_mark", "heavy_minus_sign", "heavy_multiplication_x", "heavy_plus_sign", "helicopter", "herb", "hibiscus", "high_brightness", "high_heel", "hocho", "honey_pot", "honeybee", "horse", "horse_racing", "hospital", "hotel", "hotsprings", "hourglass", "hourglass_flowing_sand", "house", "house_with_garden", "hurtrealbad", "hushed", "ice_cream", "icecream", "id", "ideograph_advantage", "imp", "inbox_tray", "incoming_envelope", "information_desk_person", "information_source", "innocent", "interrobang", "iphone", "it", "izakaya_lantern", "jack_o_lantern", "japan", "japanese_castle", "japanese_goblin", "japanese_ogre", "jeans", "joy", "joy_cat", "jp", "key", "keycap_ten", "kimono", "kiss", "kissing", "kissing_cat", "kissing_closed_eyes", "kissing_heart", "kissing_smiling_eyes", "koala", "koko", "kr", "lantern", "large_blue_circle", "large_blue_diamond", "large_orange_diamond", "last_quarter_moon", "last_quarter_moon_with_face", "laughing", "leaves", "ledger", "left_luggage", "left_right_arrow", "leftwards_arrow_with_hook", "lemon", "leo", "leopard", "libra", "light_rail", "link", "lips", "lipstick", "lock", "lock_with_ink_pen", "lollipop", "loop", "loudspeaker", "love_hotel", "love_letter", "low_brightness", "m", "mag", "mag_right", "mahjong", "mailbox", "mailbox_closed", "mailbox_with_mail", "mailbox_with_no_mail", "man", "man_with_gua_pi_mao", "man_with_turban", "mans_shoe", "maple_leaf", "markov", "mask", "massage", "meat_on_bone", "mega", "melon", "memo", "mens", "metal", "metro", "microphone", "microscope", "milky_way", "minibus", "minidisc", "mobile_phone_off", "money_with_wings", "moneybag", "monkey", "monkey_face", "monorail", "moon", "mortar_board", "mount_fuji", "mountain_bicyclist", "mountain_cableway", "mountain_railway", "mouse", "mouse2", "movie_camera", "moyai", "muscle", "mushroom", "musical_keyboard", "musical_note", "musical_score", "mute", "nail_care", "name_badge", "neckbeard", "necktie", "negative_squared_cross_mark", "neutral_face", "new", "new_moon", "new_moon_with_face", "newspaper", "ng", "nine", "no_bell", "no_bicycles", "no_entry", "no_entry_sign", "no_good", "no_mobile_phones", "no_mouth", "no_pedestrians", "no_smoking", "non-potable_water", "nose", "notebook", "notebook_with_decorative_cover", "notes", "nut_and_bolt", "o", "o2", "ocean", "octocat", "octopus", "oden", "office", "ok", "ok_hand", "ok_woman", "older_man", "older_woman", "on", "oncoming_automobile", "oncoming_bus", "oncoming_police_car", "oncoming_taxi", "one", "open_book", "open_file_folder", "open_hands", "open_mouth", "ophiuchus", "orange_book", "outbox_tray", "ox", "package", "page_facing_up", "page_with_curl", "pager", "palm_tree", "panda_face", "paperclip", "parking", "part_alternation_mark", "partly_sunny", "passport_control", "paw_prints", "peach", "pear", "pencil", "pencil2", "penguin", "pensive", "performing_arts", "persevere", "person_frowning", "person_with_blond_hair", "person_with_pouting_face", "phone", "pig", "pig2", "pig_nose", "pill", "pineapple", "pisces", "pizza", "point_down", "point_left", "point_right", "point_up", "point_up_2", "police_car", "poodle", "poop", "post_office", "postal_horn", "postbox", "potable_water", "pouch", "poultry_leg", "pound", "pouting_cat", "pray", "princess", "punch", "purple_heart", "purse", "pushpin", "put_litter_in_its_place", "question", "rabbit", "rabbit2", "racehorse", "radio", "radio_button", "rage", "rage1", "rage2", "rage3", "rage4", "railway_car", "rainbow", "raised_hand", "raised_hands", "raising_hand", "ram", "ramen", "rat", "recycle", "red_car", "red_circle", "registered", "relaxed", "relieved", "repeat", "repeat_one", "restroom", "revolving_hearts", "rewind", "ribbon", "rice", "rice_ball", "rice_cracker", "rice_scene", "ring", "rocket", "roller_coaster", "rooster", "rose", "rotating_light", "round_pushpin", "rowboat", "ru", "rugby_football", "runner", "running", "running_shirt_with_sash", "sa", "sagittarius", "sailboat", "sake", "sandal", "santa", "satellite", "satisfied", "saxophone", "school", "school_satchel", "scissors", "scorpius", "scream", "scream_cat", "scroll", "seat", "secret", "see_no_evil", "seedling", "seven", "shaved_ice", "sheep", "shell", "ship", "shipit", "shirt", "shit", "shoe", "shower", "signal_strength", "six", "six_pointed_star", "ski", "skull", "sleeping", "sleepy", "slot_machine", "small_blue_diamond", "small_orange_diamond", "small_red_triangle", "small_red_triangle_down", "smile", "smile_cat", "smiley", "smiley_cat", "smiling_imp", "smirk", "smirk_cat", "smoking", "snail", "snake", "snowboarder", "snowflake", "snowman", "sob", "soccer", "soon", "sos", "sound", "space_invader", "spades", "spaghetti", "sparkle", "sparkler", "sparkles", "sparkling_heart", "speak_no_evil", "speaker", "speech_balloon", "speedboat", "squirrel", "star", "star2", "stars", "station", "statue_of_liberty", "steam_locomotive", "stew", "straight_ruler", "strawberry", "stuck_out_tongue", "stuck_out_tongue_closed_eyes", "stuck_out_tongue_winking_eye", "sun_with_face", "sunflower", "sunglasses", "sunny", "sunrise", "sunrise_over_mountains", "surfer", "sushi", "suspect", "suspension_railway", "sweat", "sweat_drops", "sweat_smile", "sweet_potato", "swimmer", "symbols", "syringe", "tada", "tanabata_tree", "tangerine", "taurus", "taxi", "tea", "telephone", "telephone_receiver", "telescope", "tennis", "tent", "thought_balloon", "three", "thumbsdown", "thumbsup", "ticket", "tiger", "tiger2", "tired_face", "tm", "toilet", "tokyo_tower", "tomato", "tongue", "top", "tophat", "tractor", "traffic_light", "train", "train2", "tram", "triangular_flag_on_post", "triangular_ruler", "trident", "triumph", "trolleybus", "trollface", "trophy", "tropical_drink", "tropical_fish", "truck", "trumpet", "tshirt", "tulip", "turtle", "tv", "twisted_rightwards_arrows", "two", "two_hearts", "two_men_holding_hands", "two_women_holding_hands", "u5272", "u5408", "u55b6", "u6307", "u6708", "u6709", "u6e80", "u7121", "u7533", "u7981", "u7a7a", "uk", "umbrella", "unamused", "underage", "unlock", "up", "us", "v", "vertical_traffic_light", "vhs", "vibration_mode", "video_camera", "video_game", "violin", "virgo", "volcano", "vs", "walking", "waning_crescent_moon", "waning_gibbous_moon", "warning", "watch", "water_buffalo", "watermelon", "wave", "wavy_dash", "waxing_crescent_moon", "waxing_gibbous_moon", "wc", "weary", "wedding", "whale", "whale2", "wheelchair", "white_check_mark", "white_circle", "white_flower", "white_large_square", "white_medium_small_square", "white_medium_square", "white_small_square", "white_square_button", "wind_chime", "wine_glass", "wink", "wolf", "woman", "womans_clothes", "womans_hat", "womens", "worried", "wrench", "x", "yellow_heart", "yen", "yum", "zap", "zero", "zzz"];

  function imageFor(code) {
    if (emoji.indexOf(code) !== -1) {
      var url = Discourse.getURL('/plugins/emoji/images/' + code + '.png');
      return ['img', {href: url, title: ':' + code + ':', 'class': 'emoji', alt: code}];
    }
  }

  // Also support default emotions
  var translations = {
    ':)'   : 'smile',
    ':-)'   : 'smile',
    ':('   : 'frowning',
    ':-('   : 'frowning',
    ';)'   : 'wink',
    ';-)'   : 'wink',
    ':\'(' : 'cry',
    ':\'-(' : 'cry',
    ':-\'(' : 'cry',
    ':p'   : 'stuck_out_tongue',
    ':P'   : 'stuck_out_tongue',
    ':-P'   : 'stuck_out_tongue',
    ':O'   : 'open_mouth',
    ':-O'   : 'open_mouth',
    ':D'   : 'smiley',
    ':-D'   : 'smiley',
    ':|'   : 'expressionless',
    ':-|'   : 'expressionless',
    ";P"   : 'stuck_out_tongue_winking_eye',
    ";-P"   : 'stuck_out_tongue_winking_eye',
    ';)'   : 'wink',
    ';-)'   : 'wink',
    ":$"   : 'blush',
    ":-$"   : 'blush'
  };

  function checkPrev(prev) {
    if (prev && prev.length) {
      var lastToken = prev[prev.length-1];
      if (lastToken && lastToken.charAt) {
        var lastChar = lastToken.charAt(lastToken.length-1);
        if (lastChar !== ' ' && lastChar !== "\n") return false;
      }
    }
    return true;
  }

  var translationsWithColon = {};
  Object.keys(translations).forEach(function (t) {
    if (t[0] === ':') {
      translationsWithColon[t] = translations[t];
    } else {
      var replacement = translations[t];
      Discourse.Dialect.inlineReplace(t, function (token, match, prev) {
        return checkPrev(prev) ? imageFor(replacement) : token;
      });
    }
  });

  function escapeRegExp(s) {
    return s.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&')
  }

  var translationColonRegexp = new RegExp(Object.keys(translationsWithColon).map(function (t) {
                                             return "(" + escapeRegExp(t) + ")";
                                           }).join("|"));

  Discourse.Dialect.registerInline(':', function(text, match, prev) {
    var endPos = text.indexOf(':', 1),
        firstSpace = text.search(/\s/),
        contents;

    if (!checkPrev(prev)) { return; }

    // If there is no trailing colon, check our translations that begin with colons
    if (endPos === -1 || (firstSpace !== -1 && endPos > firstSpace)) {
      translationColonRegexp.lastIndex = 0;
      var m = translationColonRegexp.exec(text);
      if (m && m[0] && text.indexOf(m[0]) === 0) {

        // Check outer edge
        var lastChar = text.charAt(m[0].length);
        if (lastChar && (lastChar !== ' ' && lastChar !== "\n")) return;
        contents = imageFor(translationsWithColon[m[0]]);
        if (contents) {
          return [m[0].length, contents];
        }
      }
      return;
    }

    // Simple find and replace from our array
    var between = text.slice(1, endPos);
    contents = imageFor(between);
    if (contents) {
      return [endPos+1, contents];
    }
  });

  // TODO: Make this a proper ES6 import
  var ComposerView = (Discourse && Discourse.ComposerView) || (typeof require !== "undefined" && require('discourse/views/composer').default);
  if (ComposerView) {
    ComposerView.on("initWmdEditor", function(event){

      var baseUrl = Discourse.getURL("/");

      template = Handlebars.compile("<div class='autocomplete'>" +
                                       "<ul>" +
                                          "{{#each options}}" +
                                              "<li>" +
                                                "<a href='#'>" +
                                                "<img src='" + baseUrl + "plugins/emoji/images/{{this}}.png' class='emoji'> " +
                                                "{{this}}</a>" +
                                              "</li>" +
                                          "{{/each}}" +
                                       "</ul>" +
                                    "</div>");

      $('#wmd-input').autocomplete({
        template: template,
        key: ":",
        transformComplete: function(v){ return v + ":"; },
        dataSource: function(term){

          var full = ":" + term;
          term = term.toLowerCase();

          if (term === "") {
            return Ember.RSVP.resolve(["smile", "smiley", "wink", "sunny", "blush"]);
          }

          if (translations[full]) {
            return Ember.RSVP.resolve([translations[full]]);
          }

          var options = [];
          var i;
          for (i=0; i < emoji.length; i++) {
            if (emoji[i].indexOf(term) === 0) {
              options.push(emoji[i]);
              if(options.length > 4) { break; }
            }
          }

          if (options.length <= 4) {
            for (i=0; i < emoji.length; i++) {
              if (emoji[i].indexOf(term) > 0) {
                options.push(emoji[i]);
                if(options.length > 4) { break; }
              }
            }
          }

          return Ember.RSVP.resolve(options);
        }
      });
    });
  }

  Discourse.Markdown.whiteListTag('img', 'class', 'emoji');
}).call(this);
define("discourse/plugins/lazyYT/initializers/lazyYT", 
  ["discourse/lib/plugin-api","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    /**
      Apply lazyYT when the app boots
    **/

    var decorateCooked = __dependency1__.decorateCooked;

    __exports__["default"] = {
      name: "apply-lazyYT",
      initialize: function(container) {
        decorateCooked(container, function($elem) {
          $('.lazyYT', $elem).lazyYT();
        });
      }
    };
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/javascripts/initializers/lazyYT.js'] = "define(\"discourse/plugins/lazyYT/initializers/lazyYT\", \n  [\"discourse/lib/plugin-api\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    /**\n      Apply lazyYT when the app boots\n    **/\n\n    var decorateCooked = __dependency1__.decorateCooked;\n\n    __exports__[\"default\"] = {\n      name: \"apply-lazyYT\",\n      initialize: function(container) {\n        decorateCooked(container, function($elem) {\n          $('.lazyYT', $elem).lazyYT();\n        });\n      }\n    };\n  });";
/*! LazyYT (lazy load Youtube videos plugin) - v0.3.4 - 2014-06-30
* Usage: <div class="lazyYT" data-youtube-id="laknj093n" ratio="16:9" data-parameters="rel=0">loading...</div>
* Copyright (c) 2014 Tyler Pearson; Licensed MIT */



;(function ($) {
    'use strict';

    function setUp($el) {
        var width = $el.data('width'),
            height = $el.data('height'),
            ratio = $el.data('ratio'),
            id = $el.data('youtube-id'),
            aspectRatio = ['16', '9'],
            paddingTop = 0,
            youtubeParameters = $el.data('parameters') || '';

        if (typeof width === 'undefined' || typeof height === 'undefined') {
          height = 0;
          width = '100%';
          aspectRatio = (ratio.split(":")[1] / ratio.split(":")[0]) * 100;
          paddingTop = aspectRatio + '%';
        }

        $el.css({
            'position': 'relative',
            'height': height,
            'width': width,
            'padding-top': paddingTop,
            'background': 'url(http://img.youtube.com/vi/' + id + '/hqdefault.jpg) center center no-repeat',
            'cursor': 'pointer',
            'background-size': 'cover'
        })
            .html('<p id="lazyYT-title-' + id + '" class="lazyYT-title"></p><div class="lazyYT-button"></div>')
            .addClass('lazyYT-image-loaded');

        $.getJSON('https://gdata.youtube.com/feeds/api/videos/' + id + '?v=2&alt=json', function (data) {
            $('#lazyYT-title-' + id).text(data.entry.title.$t);
        });

        $el.on('click', function (e) {
            e.preventDefault();
            if (!$el.hasClass('lazyYT-video-loaded') && $el.hasClass('lazyYT-image-loaded')) {
                $el.html('<iframe width="' + width + '" height="' + height + '" src="//www.youtube.com/embed/' + id + '?autoplay=1&' + youtubeParameters + '" style="position:absolute; top:0; left:0; width:100%; height:100%;" frameborder="0" allowfullscreen></iframe>')
                    .removeClass('lazyYT-image-loaded')
                    .addClass('lazyYT-video-loaded');
            }
        });

    }

    $.fn.lazyYT = function () {
        return this.each(function () {
            var $el = $(this).css('cursor', 'pointer');
            setUp($el);
        });
    };

}(jQuery));
define("discourse/plugins/poll/controllers/poll", 
  ["discourse/controllers/controller","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var DiscourseController = __dependency1__["default"];

    __exports__["default"] = DiscourseController.extend({
      poll: null,
      showResults: Em.computed.oneWay('poll.closed'),
      disableRadio: Em.computed.any('poll.closed', 'loading'),
      showToggleClosePoll: function() {
        return this.get('poll.post.topic.details.can_edit') && !Discourse.SiteSettings.allow_user_locale;
      }.property('poll.post.topic.details.can_edit'),

      actions: {
        selectOption: function(option) {
          if (this.get('disableRadio')) {
            return;
          }

          if (!this.get('currentUser.id')) {
            this.get('postController').send('showLogin');
            return;
          }

          this.set('loading', true);
          this.get('poll').saveVote(option).then(function() {
            this.set('loading', false);
            this.set('showResults', true);
          }.bind(this));
        },

        toggleShowResults: function() {
          this.set('showResults', !this.get('showResults'));
        },

        toggleClosePoll: function() {
          this.set('loading', true);
          return Discourse.ajax("/poll/toggle_close", {
            type: "PUT",
            data: {post_id: this.get('poll.post.id')}
          }).then(function(topicJson) {
            this.set('poll.post.topic.title', topicJson.basic_topic.title);
            this.set('poll.post.topic.fancy_title', topicJson.basic_topic.title);
            this.set('loading', false);
          }.bind(this));
        }
      }
    });
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/javascripts/controllers/poll.js'] = "define(\"discourse/plugins/poll/controllers/poll\", \n  [\"discourse/controllers/controller\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DiscourseController = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = DiscourseController.extend({\n      poll: null,\n      showResults: Em.computed.oneWay('poll.closed'),\n      disableRadio: Em.computed.any('poll.closed', 'loading'),\n      showToggleClosePoll: function() {\n        return this.get('poll.post.topic.details.can_edit') \u0026\u0026 !Discourse.SiteSettings.allow_user_locale;\n      }.property('poll.post.topic.details.can_edit'),\n\n      actions: {\n        selectOption: function(option) {\n          if (this.get('disableRadio')) {\n            return;\n          }\n\n          if (!this.get('currentUser.id')) {\n            this.get('postController').send('showLogin');\n            return;\n          }\n\n          this.set('loading', true);\n          this.get('poll').saveVote(option).then(function() {\n            this.set('loading', false);\n            this.set('showResults', true);\n          }.bind(this));\n        },\n\n        toggleShowResults: function() {\n          this.set('showResults', !this.get('showResults'));\n        },\n\n        toggleClosePoll: function() {\n          this.set('loading', true);\n          return Discourse.ajax(\"/poll/toggle_close\", {\n            type: \"PUT\",\n            data: {post_id: this.get('poll.post.id')}\n          }).then(function(topicJson) {\n            this.set('poll.post.topic.title', topicJson.basic_topic.title);\n            this.set('poll.post.topic.fancy_title', topicJson.basic_topic.title);\n            this.set('loading', false);\n          }.bind(this));\n        }\n      }\n    });\n  });";
define("discourse/plugins/poll/initializers/poll", 
  ["discourse/plugins/poll/controllers/poll","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var PollController = __dependency1__["default"];

    var Poll = Discourse.Model.extend({
      post: null,
      options: [],
      closed: false,

      postObserver: function() {
        this.updateFromJson(this.get('post.poll_details'));
      }.observes('post.poll_details'),

      fetchNewPostDetails: function() {
        this.get('post.topic.postStream').triggerChangedPost(this.get('post.id'), this.get('post.topic.updated_at'));
      }.observes('post.topic.title'),

      updateFromJson: function(json) {
        var selectedOption = json["selected"];

        var options = [];
        Object.keys(json["options"]).forEach(function(option) {
          options.push(Ember.Object.create({
            option: option,
            votes: json["options"][option],
            checked: (option === selectedOption)
          }));
        });
        this.set('options', options);

        this.set('closed', json.closed);
      },

      saveVote: function(option) {
        this.get('options').forEach(function(opt) {
          opt.set('checked', opt.get('option') === option);
        });

        return Discourse.ajax("/poll", {
          type: "PUT",
          data: {post_id: this.get('post.id'), option: option}
        }).then(function(newJSON) {
          this.updateFromJson(newJSON);
        }.bind(this));
      }
    });

    var PollView = Ember.View.extend({
      templateName: "poll",
      classNames: ['poll-ui'],

      replaceElement: function(target) {
        this._insertElementLater(function() {
          target.replaceWith(this.$());
        });
      }
    });

    function initializePollView(self) {
      var post = self.get('post');
      var pollDetails = post.get('poll_details');

      var poll = Poll.create({post: post});
      poll.updateFromJson(pollDetails);

      var pollController = PollController.create({
        poll: poll,
        showResults: pollDetails["selected"],
        postController: self.get('controller')
      });

      var pollView = self.createChildView(PollView, {
        controller: pollController
      });
      return pollView;
    }


    __exports__["default"] = {
      name: 'poll',

      initialize: function() {
        Discourse.PostView.reopen({
          createPollUI: function($post) {
            var post = this.get('post');

            if (!post.get('poll_details')) {
              return;
            }

            var view = initializePollView(this);

            var pollContainer = $post.find(".poll-ui:first");
            if (pollContainer.length === 0) {
              pollContainer = $post.find("ul:first");
            }

            view.replaceElement(pollContainer);
            this.set('pollView', view);

          }.on('postViewInserted'),

          clearPollView: function() {
            if (this.get('pollView')) {
              this.get('pollView').destroy();
            }
          }.on('willClearRender')
        });
      }
    }
  });
window.__jshintSrc = window.__jshintSrc || {}; window.__jshintSrc['/assets/javascripts/initializers/poll.js'] = "define(\"discourse/plugins/poll/initializers/poll\", \n  [\"discourse/plugins/poll/controllers/poll\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var PollController = __dependency1__[\"default\"];\n\n    var Poll = Discourse.Model.extend({\n      post: null,\n      options: [],\n      closed: false,\n\n      postObserver: function() {\n        this.updateFromJson(this.get('post.poll_details'));\n      }.observes('post.poll_details'),\n\n      fetchNewPostDetails: function() {\n        this.get('post.topic.postStream').triggerChangedPost(this.get('post.id'), this.get('post.topic.updated_at'));\n      }.observes('post.topic.title'),\n\n      updateFromJson: function(json) {\n        var selectedOption = json[\"selected\"];\n\n        var options = [];\n        Object.keys(json[\"options\"]).forEach(function(option) {\n          options.push(Ember.Object.create({\n            option: option,\n            votes: json[\"options\"][option],\n            checked: (option === selectedOption)\n          }));\n        });\n        this.set('options', options);\n\n        this.set('closed', json.closed);\n      },\n\n      saveVote: function(option) {\n        this.get('options').forEach(function(opt) {\n          opt.set('checked', opt.get('option') === option);\n        });\n\n        return Discourse.ajax(\"/poll\", {\n          type: \"PUT\",\n          data: {post_id: this.get('post.id'), option: option}\n        }).then(function(newJSON) {\n          this.updateFromJson(newJSON);\n        }.bind(this));\n      }\n    });\n\n    var PollView = Ember.View.extend({\n      templateName: \"poll\",\n      classNames: ['poll-ui'],\n\n      replaceElement: function(target) {\n        this._insertElementLater(function() {\n          target.replaceWith(this.$());\n        });\n      }\n    });\n\n    function initializePollView(self) {\n      var post = self.get('post');\n      var pollDetails = post.get('poll_details');\n\n      var poll = Poll.create({post: post});\n      poll.updateFromJson(pollDetails);\n\n      var pollController = PollController.create({\n        poll: poll,\n        showResults: pollDetails[\"selected\"],\n        postController: self.get('controller')\n      });\n\n      var pollView = self.createChildView(PollView, {\n        controller: pollController\n      });\n      return pollView;\n    }\n\n\n    __exports__[\"default\"] = {\n      name: 'poll',\n\n      initialize: function() {\n        Discourse.PostView.reopen({\n          createPollUI: function($post) {\n            var post = this.get('post');\n\n            if (!post.get('poll_details')) {\n              return;\n            }\n\n            var view = initializePollView(this);\n\n            var pollContainer = $post.find(\".poll-ui:first\");\n            if (pollContainer.length === 0) {\n              pollContainer = $post.find(\"ul:first\");\n            }\n\n            view.replaceElement(pollContainer);\n            this.set('pollView', view);\n\n          }.on('postViewInserted'),\n\n          clearPollView: function() {\n            if (this.get('pollView')) {\n              this.get('pollView').destroy();\n            }\n          }.on('willClearRender')\n        });\n      }\n    }\n  });";
Discourse.Dialect.inlineBetween({
  start: '[poll]',
  stop: '[/poll]',
  rawContents: true,
  emitter: function(contents) {
    var list = Discourse.Dialect.cook(contents, {});
    return ['div', {class: 'poll-ui'}, list];
  }
});
Ember.TEMPLATES["javascripts/poll"] = Ember.Handlebars.compile("<table>\n    {{#each poll.options}}\n      <tr {{bind-attr class=checked:active}} {{action selectOption option}}>\n        <td class=\"radio\">\n          <input type=\"radio\" name=\"poll\" {{bind-attr checked=checked disabled=controller.disableRadio}}>\n        </td>\n        <td class=\"option\">\n          <div class=\"option\">{{{option}}}</div>\n          {{#if controller.showResults}}\n            <div class=\"result\">{{i18n poll.voteCount count=votes}}</div>\n          {{/if}}\n        </td>\n      </tr>\n    {{/each}}\n  </table>\n  \n  <div class='row'>\n  <button {{action toggleShowResults}} class=\"btn btn-small show-results\">\n    {{#if showResults}}\n      <i class=\"fa fa-eye-slash\"></i>\n      {{i18n poll.results.hide}}\n    {{else}}\n      <i class=\"fa fa-eye\"></i>\n      {{i18n poll.results.show}}\n    {{/if}}\n  </button>\n  \n  {{#if showToggleClosePoll}}\n    <button {{action toggleClosePoll}} class=\"btn btn-small toggle-poll\">\n      {{#if poll.closed}}\n        <i class=\"fa fa-unlock-alt\"></i>\n        {{i18n poll.open_poll}}\n      {{else}}\n        <i class=\"fa fa-lock\"></i>\n        {{i18n poll.close_poll}}\n      {{/if}}\n    </button>\n  {{/if}}\n  </div>\n  \n  {{#if loading}}\n    <i class=\"fa fa-spin fa-spinner\"></i>\n  {{/if}}");

